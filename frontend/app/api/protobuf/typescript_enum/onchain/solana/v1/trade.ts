// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: onchain/solana/v1/trade.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "onchain.solana.v1";

/**
 * Trade
 * Reference: https://github.com/Topledger/solana-programs/blob/b6532ee5b9c0608903d6b8b9270cce7b161adf55/dex-trades/proto/output.proto
 */
export interface Trade {
  /** 블록 날짜 */
  blockDate: string;
  /** 블록 생성 시간 (Unix timestamp) */
  blockTime: number;
  /** 블록 슬롯 번호 */
  blockSlot: number;
  /** 트랜잭션 ID (시그니처) */
  txId: string;
  /** 트랜잭션 서명자의 주소 */
  signer: string;
  /** 유동성 풀의 주소 */
  poolAddress: string;
  /** 기준 토큰(base token)의 민트 주소 */
  baseMint: string;
  /** 상대 토큰(quote token)의 민트 주소 */
  quoteMint: string;
  /** 기준 토큰의 보관 계정 주소 */
  baseVault: string;
  /** 상대 토큰의 보관 계정 주소 */
  quoteVault: string;
  /** 기준 토큰의 거래량 */
  baseAmount: number;
  /** 상대 토큰의 거래량 */
  quoteAmount: number;
  /** 내부 인스트럭션 여부 */
  isInnerInstruction: boolean;
  /** 인스트럭션 인덱스 */
  instructionIndex: number;
  /** 인스트럭션 타입 (예: swap, deposit 등) */
  instructionType: string;
  /** 내부 인스트럭션의 인덱스 */
  innerInstruxtionIndex: number;
  /** 외부 프로그램 ID (호출한 프로그램) */
  outerProgram: string;
  /** 내부 프로그램 ID (실제 실행된 프로그램) */
  innerProgram: string;
  /** 트랜잭션 수수료 (lamports 단위) */
  txnFeeLamports: number;
  /** 서명자의 SOL 잔액 변화량 (lamports 단위) */
  signerLamportsChange: number;
}

function createBaseTrade(): Trade {
  return {
    blockDate: "",
    blockTime: 0,
    blockSlot: 0,
    txId: "",
    signer: "",
    poolAddress: "",
    baseMint: "",
    quoteMint: "",
    baseVault: "",
    quoteVault: "",
    baseAmount: 0,
    quoteAmount: 0,
    isInnerInstruction: false,
    instructionIndex: 0,
    instructionType: "",
    innerInstruxtionIndex: 0,
    outerProgram: "",
    innerProgram: "",
    txnFeeLamports: 0,
    signerLamportsChange: 0,
  };
}

export const Trade = {
  encode(message: Trade, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blockDate !== "") {
      writer.uint32(10).string(message.blockDate);
    }
    if (message.blockTime !== 0) {
      writer.uint32(16).int64(message.blockTime);
    }
    if (message.blockSlot !== 0) {
      writer.uint32(24).uint64(message.blockSlot);
    }
    if (message.txId !== "") {
      writer.uint32(34).string(message.txId);
    }
    if (message.signer !== "") {
      writer.uint32(42).string(message.signer);
    }
    if (message.poolAddress !== "") {
      writer.uint32(50).string(message.poolAddress);
    }
    if (message.baseMint !== "") {
      writer.uint32(58).string(message.baseMint);
    }
    if (message.quoteMint !== "") {
      writer.uint32(66).string(message.quoteMint);
    }
    if (message.baseVault !== "") {
      writer.uint32(74).string(message.baseVault);
    }
    if (message.quoteVault !== "") {
      writer.uint32(82).string(message.quoteVault);
    }
    if (message.baseAmount !== 0) {
      writer.uint32(89).double(message.baseAmount);
    }
    if (message.quoteAmount !== 0) {
      writer.uint32(97).double(message.quoteAmount);
    }
    if (message.isInnerInstruction !== false) {
      writer.uint32(104).bool(message.isInnerInstruction);
    }
    if (message.instructionIndex !== 0) {
      writer.uint32(112).uint32(message.instructionIndex);
    }
    if (message.instructionType !== "") {
      writer.uint32(122).string(message.instructionType);
    }
    if (message.innerInstruxtionIndex !== 0) {
      writer.uint32(128).uint32(message.innerInstruxtionIndex);
    }
    if (message.outerProgram !== "") {
      writer.uint32(138).string(message.outerProgram);
    }
    if (message.innerProgram !== "") {
      writer.uint32(146).string(message.innerProgram);
    }
    if (message.txnFeeLamports !== 0) {
      writer.uint32(152).uint64(message.txnFeeLamports);
    }
    if (message.signerLamportsChange !== 0) {
      writer.uint32(160).int64(message.signerLamportsChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Trade {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blockDate = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockTime = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockSlot = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.txId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.poolAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.baseMint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.quoteMint = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.baseVault = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.quoteVault = reader.string();
          continue;
        case 11:
          if (tag !== 89) {
            break;
          }

          message.baseAmount = reader.double();
          continue;
        case 12:
          if (tag !== 97) {
            break;
          }

          message.quoteAmount = reader.double();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.isInnerInstruction = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.instructionIndex = reader.uint32();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.instructionType = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.innerInstruxtionIndex = reader.uint32();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.outerProgram = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.innerProgram = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.txnFeeLamports = longToNumber(reader.uint64() as Long);
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.signerLamportsChange = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Trade {
    return {
      blockDate: isSet(object.blockDate) ? globalThis.String(object.blockDate) : "",
      blockTime: isSet(object.blockTime) ? globalThis.Number(object.blockTime) : 0,
      blockSlot: isSet(object.blockSlot) ? globalThis.Number(object.blockSlot) : 0,
      txId: isSet(object.txId) ? globalThis.String(object.txId) : "",
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      poolAddress: isSet(object.poolAddress) ? globalThis.String(object.poolAddress) : "",
      baseMint: isSet(object.baseMint) ? globalThis.String(object.baseMint) : "",
      quoteMint: isSet(object.quoteMint) ? globalThis.String(object.quoteMint) : "",
      baseVault: isSet(object.baseVault) ? globalThis.String(object.baseVault) : "",
      quoteVault: isSet(object.quoteVault) ? globalThis.String(object.quoteVault) : "",
      baseAmount: isSet(object.baseAmount) ? globalThis.Number(object.baseAmount) : 0,
      quoteAmount: isSet(object.quoteAmount) ? globalThis.Number(object.quoteAmount) : 0,
      isInnerInstruction: isSet(object.isInnerInstruction) ? globalThis.Boolean(object.isInnerInstruction) : false,
      instructionIndex: isSet(object.instructionIndex) ? globalThis.Number(object.instructionIndex) : 0,
      instructionType: isSet(object.instructionType) ? globalThis.String(object.instructionType) : "",
      innerInstruxtionIndex: isSet(object.innerInstruxtionIndex) ? globalThis.Number(object.innerInstruxtionIndex) : 0,
      outerProgram: isSet(object.outerProgram) ? globalThis.String(object.outerProgram) : "",
      innerProgram: isSet(object.innerProgram) ? globalThis.String(object.innerProgram) : "",
      txnFeeLamports: isSet(object.txnFeeLamports) ? globalThis.Number(object.txnFeeLamports) : 0,
      signerLamportsChange: isSet(object.signerLamportsChange) ? globalThis.Number(object.signerLamportsChange) : 0,
    };
  },

  toJSON(message: Trade): unknown {
    const obj: any = {};
    if (message.blockDate !== undefined) {
      obj.blockDate = message.blockDate;
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = Math.round(message.blockTime);
    }
    if (message.blockSlot !== undefined) {
      obj.blockSlot = Math.round(message.blockSlot);
    }
    if (message.txId !== undefined) {
      obj.txId = message.txId;
    }
    if (message.signer !== undefined) {
      obj.signer = message.signer;
    }
    if (message.poolAddress !== undefined) {
      obj.poolAddress = message.poolAddress;
    }
    if (message.baseMint !== undefined) {
      obj.baseMint = message.baseMint;
    }
    if (message.quoteMint !== undefined) {
      obj.quoteMint = message.quoteMint;
    }
    if (message.baseVault !== undefined) {
      obj.baseVault = message.baseVault;
    }
    if (message.quoteVault !== undefined) {
      obj.quoteVault = message.quoteVault;
    }
    if (message.baseAmount !== undefined) {
      obj.baseAmount = message.baseAmount;
    }
    if (message.quoteAmount !== undefined) {
      obj.quoteAmount = message.quoteAmount;
    }
    if (message.isInnerInstruction !== undefined) {
      obj.isInnerInstruction = message.isInnerInstruction;
    }
    if (message.instructionIndex !== undefined) {
      obj.instructionIndex = Math.round(message.instructionIndex);
    }
    if (message.instructionType !== undefined) {
      obj.instructionType = message.instructionType;
    }
    if (message.innerInstruxtionIndex !== undefined) {
      obj.innerInstruxtionIndex = Math.round(message.innerInstruxtionIndex);
    }
    if (message.outerProgram !== undefined) {
      obj.outerProgram = message.outerProgram;
    }
    if (message.innerProgram !== undefined) {
      obj.innerProgram = message.innerProgram;
    }
    if (message.txnFeeLamports !== undefined) {
      obj.txnFeeLamports = Math.round(message.txnFeeLamports);
    }
    if (message.signerLamportsChange !== undefined) {
      obj.signerLamportsChange = Math.round(message.signerLamportsChange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Trade>, I>>(base?: I): Trade {
    return Trade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Trade>, I>>(object: I): Trade {
    const message = createBaseTrade();
    message.blockDate = object.blockDate ?? "";
    message.blockTime = object.blockTime ?? 0;
    message.blockSlot = object.blockSlot ?? 0;
    message.txId = object.txId ?? "";
    message.signer = object.signer ?? "";
    message.poolAddress = object.poolAddress ?? "";
    message.baseMint = object.baseMint ?? "";
    message.quoteMint = object.quoteMint ?? "";
    message.baseVault = object.baseVault ?? "";
    message.quoteVault = object.quoteVault ?? "";
    message.baseAmount = object.baseAmount ?? 0;
    message.quoteAmount = object.quoteAmount ?? 0;
    message.isInnerInstruction = object.isInnerInstruction ?? false;
    message.instructionIndex = object.instructionIndex ?? 0;
    message.instructionType = object.instructionType ?? "";
    message.innerInstruxtionIndex = object.innerInstruxtionIndex ?? 0;
    message.outerProgram = object.outerProgram ?? "";
    message.innerProgram = object.innerProgram ?? "";
    message.txnFeeLamports = object.txnFeeLamports ?? 0;
    message.signerLamportsChange = object.signerLamportsChange ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
