// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/user/dailycheckin.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "blast.v1.user";

export interface GetDailyCheckinRequest {
  /**
   * Format: users/{address}
   * Resource name alias "users/me" is supported.
   */
  user: string;
}

export interface ClaimDailyCheckinRequest {
  /**
   * Format: users/{address}
   * Resource name alias "users/me" is supported.
   */
  user: string;
}

export interface DailyCheckin {
  user: string;
  currentStreak: number;
  isClaimable: boolean;
  points: number;
  lastClaim: DailyCheckinClaim | undefined;
}

export interface DailyCheckinClaim {
  streak: number;
  points: number;
  claimTime: string | undefined;
}

function createBaseGetDailyCheckinRequest(): GetDailyCheckinRequest {
  return { user: "" };
}

export const GetDailyCheckinRequest = {
  encode(message: GetDailyCheckinRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDailyCheckinRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDailyCheckinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDailyCheckinRequest {
    return { user: isSet(object.user) ? globalThis.String(object.user) : "" };
  },

  toJSON(message: GetDailyCheckinRequest): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDailyCheckinRequest>, I>>(base?: I): GetDailyCheckinRequest {
    return GetDailyCheckinRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDailyCheckinRequest>, I>>(object: I): GetDailyCheckinRequest {
    const message = createBaseGetDailyCheckinRequest();
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseClaimDailyCheckinRequest(): ClaimDailyCheckinRequest {
  return { user: "" };
}

export const ClaimDailyCheckinRequest = {
  encode(message: ClaimDailyCheckinRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClaimDailyCheckinRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimDailyCheckinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimDailyCheckinRequest {
    return { user: isSet(object.user) ? globalThis.String(object.user) : "" };
  },

  toJSON(message: ClaimDailyCheckinRequest): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimDailyCheckinRequest>, I>>(base?: I): ClaimDailyCheckinRequest {
    return ClaimDailyCheckinRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimDailyCheckinRequest>, I>>(object: I): ClaimDailyCheckinRequest {
    const message = createBaseClaimDailyCheckinRequest();
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseDailyCheckin(): DailyCheckin {
  return { user: "", currentStreak: 0, isClaimable: false, points: 0, lastClaim: undefined };
}

export const DailyCheckin = {
  encode(message: DailyCheckin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.currentStreak !== 0) {
      writer.uint32(16).uint32(message.currentStreak);
    }
    if (message.isClaimable !== false) {
      writer.uint32(24).bool(message.isClaimable);
    }
    if (message.points !== 0) {
      writer.uint32(32).uint32(message.points);
    }
    if (message.lastClaim !== undefined) {
      DailyCheckinClaim.encode(message.lastClaim, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DailyCheckin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyCheckin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.currentStreak = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isClaimable = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.points = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastClaim = DailyCheckinClaim.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DailyCheckin {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      currentStreak: isSet(object.currentStreak) ? globalThis.Number(object.currentStreak) : 0,
      isClaimable: isSet(object.isClaimable) ? globalThis.Boolean(object.isClaimable) : false,
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      lastClaim: isSet(object.lastClaim) ? DailyCheckinClaim.fromJSON(object.lastClaim) : undefined,
    };
  },

  toJSON(message: DailyCheckin): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.currentStreak !== undefined) {
      obj.currentStreak = Math.round(message.currentStreak);
    }
    if (message.isClaimable !== undefined) {
      obj.isClaimable = message.isClaimable;
    }
    if (message.points !== undefined) {
      obj.points = Math.round(message.points);
    }
    if (message.lastClaim !== undefined) {
      obj.lastClaim = DailyCheckinClaim.toJSON(message.lastClaim);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DailyCheckin>, I>>(base?: I): DailyCheckin {
    return DailyCheckin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DailyCheckin>, I>>(object: I): DailyCheckin {
    const message = createBaseDailyCheckin();
    message.user = object.user ?? "";
    message.currentStreak = object.currentStreak ?? 0;
    message.isClaimable = object.isClaimable ?? false;
    message.points = object.points ?? 0;
    message.lastClaim = (object.lastClaim !== undefined && object.lastClaim !== null)
      ? DailyCheckinClaim.fromPartial(object.lastClaim)
      : undefined;
    return message;
  },
};

function createBaseDailyCheckinClaim(): DailyCheckinClaim {
  return { streak: 0, points: 0, claimTime: undefined };
}

export const DailyCheckinClaim = {
  encode(message: DailyCheckinClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.streak !== 0) {
      writer.uint32(8).uint32(message.streak);
    }
    if (message.points !== 0) {
      writer.uint32(16).uint32(message.points);
    }
    if (message.claimTime !== undefined) {
      Timestamp.encode(toTimestamp(message.claimTime), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DailyCheckinClaim {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyCheckinClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.streak = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.points = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.claimTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DailyCheckinClaim {
    return {
      streak: isSet(object.streak) ? globalThis.Number(object.streak) : 0,
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      claimTime: isSet(object.claimTime) ? globalThis.String(object.claimTime) : undefined,
    };
  },

  toJSON(message: DailyCheckinClaim): unknown {
    const obj: any = {};
    if (message.streak !== undefined) {
      obj.streak = Math.round(message.streak);
    }
    if (message.points !== undefined) {
      obj.points = Math.round(message.points);
    }
    if (message.claimTime !== undefined) {
      obj.claimTime = message.claimTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DailyCheckinClaim>, I>>(base?: I): DailyCheckinClaim {
    return DailyCheckinClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DailyCheckinClaim>, I>>(object: I): DailyCheckinClaim {
    const message = createBaseDailyCheckinClaim();
    message.streak = object.streak ?? 0;
    message.points = object.points ?? 0;
    message.claimTime = object.claimTime ?? undefined;
    return message;
  },
};

export interface DailyCheckinService {
  /** GetDailyCheckin will return the User's DailyCheckin */
  GetDailyCheckin(request: GetDailyCheckinRequest): Promise<DailyCheckin>;
}

export const DailyCheckinServiceServiceName = "blast.v1.user.DailyCheckinService";
export class DailyCheckinServiceClientImpl implements DailyCheckinService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || DailyCheckinServiceServiceName;
    this.rpc = rpc;
    this.GetDailyCheckin = this.GetDailyCheckin.bind(this);
  }
  GetDailyCheckin(request: GetDailyCheckinRequest): Promise<DailyCheckin> {
    const data = GetDailyCheckinRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDailyCheckin", data);
    return promise.then((data) => DailyCheckin.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
