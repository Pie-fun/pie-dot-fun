// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/blastpoints/blastpoints.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "blast.v1.blastpoints";

export enum BlastPointsType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = 0,
  LIQUIDITY = 1,
  DEVELOPER = 2,
}

export function blastPointsTypeFromJSON(object: any): BlastPointsType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return BlastPointsType.TYPE_UNSPECIFIED;
    case 1:
    case "LIQUIDITY":
      return BlastPointsType.LIQUIDITY;
    case 2:
    case "DEVELOPER":
      return BlastPointsType.DEVELOPER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsType");
  }
}

export function blastPointsTypeToJSON(object: BlastPointsType): string {
  switch (object) {
    case BlastPointsType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case BlastPointsType.LIQUIDITY:
      return "LIQUIDITY";
    case BlastPointsType.DEVELOPER:
      return "DEVELOPER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsType");
  }
}

export enum BlastPointsTransferType {
  /** TRANSFER_UNSPECIFIED - default value. this value is unused. */
  TRANSFER_UNSPECIFIED = 0,
  POINTS_STAKING = 1,
  GOLD_REFERRAL = 2,
  GOLD_RAFFLE = 3,
  GOLD_WEEKLY_SPACEBAR_POINTS = 4,
  GOLD_SCORE_UPLOAD = 5,
  GOLD_SCORE_RANKINGS_WINNER = 6,
  GOLD_COMMUNITY_EVENT = 7,
  GOLD_SS_CHALLENGE_WINNER = 100,
  GOLD_SS_INVITATIONAL = 200,
}

export function blastPointsTransferTypeFromJSON(object: any): BlastPointsTransferType {
  switch (object) {
    case 0:
    case "TRANSFER_UNSPECIFIED":
      return BlastPointsTransferType.TRANSFER_UNSPECIFIED;
    case 1:
    case "POINTS_STAKING":
      return BlastPointsTransferType.POINTS_STAKING;
    case 2:
    case "GOLD_REFERRAL":
      return BlastPointsTransferType.GOLD_REFERRAL;
    case 3:
    case "GOLD_RAFFLE":
      return BlastPointsTransferType.GOLD_RAFFLE;
    case 4:
    case "GOLD_WEEKLY_SPACEBAR_POINTS":
      return BlastPointsTransferType.GOLD_WEEKLY_SPACEBAR_POINTS;
    case 5:
    case "GOLD_SCORE_UPLOAD":
      return BlastPointsTransferType.GOLD_SCORE_UPLOAD;
    case 6:
    case "GOLD_SCORE_RANKINGS_WINNER":
      return BlastPointsTransferType.GOLD_SCORE_RANKINGS_WINNER;
    case 7:
    case "GOLD_COMMUNITY_EVENT":
      return BlastPointsTransferType.GOLD_COMMUNITY_EVENT;
    case 100:
    case "GOLD_SS_CHALLENGE_WINNER":
      return BlastPointsTransferType.GOLD_SS_CHALLENGE_WINNER;
    case 200:
    case "GOLD_SS_INVITATIONAL":
      return BlastPointsTransferType.GOLD_SS_INVITATIONAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsTransferType");
  }
}

export function blastPointsTransferTypeToJSON(object: BlastPointsTransferType): string {
  switch (object) {
    case BlastPointsTransferType.TRANSFER_UNSPECIFIED:
      return "TRANSFER_UNSPECIFIED";
    case BlastPointsTransferType.POINTS_STAKING:
      return "POINTS_STAKING";
    case BlastPointsTransferType.GOLD_REFERRAL:
      return "GOLD_REFERRAL";
    case BlastPointsTransferType.GOLD_RAFFLE:
      return "GOLD_RAFFLE";
    case BlastPointsTransferType.GOLD_WEEKLY_SPACEBAR_POINTS:
      return "GOLD_WEEKLY_SPACEBAR_POINTS";
    case BlastPointsTransferType.GOLD_SCORE_UPLOAD:
      return "GOLD_SCORE_UPLOAD";
    case BlastPointsTransferType.GOLD_SCORE_RANKINGS_WINNER:
      return "GOLD_SCORE_RANKINGS_WINNER";
    case BlastPointsTransferType.GOLD_COMMUNITY_EVENT:
      return "GOLD_COMMUNITY_EVENT";
    case BlastPointsTransferType.GOLD_SS_CHALLENGE_WINNER:
      return "GOLD_SS_CHALLENGE_WINNER";
    case BlastPointsTransferType.GOLD_SS_INVITATIONAL:
      return "GOLD_SS_INVITATIONAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsTransferType");
  }
}

export enum BlastPointsBatchState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = 0,
  /** PENDING - The batch is pending. */
  PENDING = 1,
  /** CANCELLED - The batch is cancelled. */
  CANCELLED = 2,
  /** FINALIZING - The batch is finalizing. */
  FINALIZING = 3,
  /** FINALIZED - The batch is finalized. */
  FINALIZED = 4,
}

export function blastPointsBatchStateFromJSON(object: any): BlastPointsBatchState {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return BlastPointsBatchState.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return BlastPointsBatchState.PENDING;
    case 2:
    case "CANCELLED":
      return BlastPointsBatchState.CANCELLED;
    case 3:
    case "FINALIZING":
      return BlastPointsBatchState.FINALIZING;
    case 4:
    case "FINALIZED":
      return BlastPointsBatchState.FINALIZED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsBatchState");
  }
}

export function blastPointsBatchStateToJSON(object: BlastPointsBatchState): string {
  switch (object) {
    case BlastPointsBatchState.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case BlastPointsBatchState.PENDING:
      return "PENDING";
    case BlastPointsBatchState.CANCELLED:
      return "CANCELLED";
    case BlastPointsBatchState.FINALIZING:
      return "FINALIZING";
    case BlastPointsBatchState.FINALIZED:
      return "FINALIZED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BlastPointsBatchState");
  }
}

export enum ReservationType {
  /** RESERVATION_TYPE_UNSPECIFIED - default value. this value is unused. */
  RESERVATION_TYPE_UNSPECIFIED = 0,
  WEEKLY_SPACEBAR_POINTS = 1,
  REFERREE_WITH_STAKING = 2,
  SCORE_RANKINGS_WINNER = 3,
  SCORE_UPLOAD_BACKFILL = 4,
  COMMUNITY_EVENT_WINNER = 5,
  SS_CHALLENGE_WINNER = 6,
  SS_INVITATIONAL = 7,
}

export function reservationTypeFromJSON(object: any): ReservationType {
  switch (object) {
    case 0:
    case "RESERVATION_TYPE_UNSPECIFIED":
      return ReservationType.RESERVATION_TYPE_UNSPECIFIED;
    case 1:
    case "WEEKLY_SPACEBAR_POINTS":
      return ReservationType.WEEKLY_SPACEBAR_POINTS;
    case 2:
    case "REFERREE_WITH_STAKING":
      return ReservationType.REFERREE_WITH_STAKING;
    case 3:
    case "SCORE_RANKINGS_WINNER":
      return ReservationType.SCORE_RANKINGS_WINNER;
    case 4:
    case "SCORE_UPLOAD_BACKFILL":
      return ReservationType.SCORE_UPLOAD_BACKFILL;
    case 5:
    case "COMMUNITY_EVENT_WINNER":
      return ReservationType.COMMUNITY_EVENT_WINNER;
    case 6:
    case "SS_CHALLENGE_WINNER":
      return ReservationType.SS_CHALLENGE_WINNER;
    case 7:
    case "SS_INVITATIONAL":
      return ReservationType.SS_INVITATIONAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReservationType");
  }
}

export function reservationTypeToJSON(object: ReservationType): string {
  switch (object) {
    case ReservationType.RESERVATION_TYPE_UNSPECIFIED:
      return "RESERVATION_TYPE_UNSPECIFIED";
    case ReservationType.WEEKLY_SPACEBAR_POINTS:
      return "WEEKLY_SPACEBAR_POINTS";
    case ReservationType.REFERREE_WITH_STAKING:
      return "REFERREE_WITH_STAKING";
    case ReservationType.SCORE_RANKINGS_WINNER:
      return "SCORE_RANKINGS_WINNER";
    case ReservationType.SCORE_UPLOAD_BACKFILL:
      return "SCORE_UPLOAD_BACKFILL";
    case ReservationType.COMMUNITY_EVENT_WINNER:
      return "COMMUNITY_EVENT_WINNER";
    case ReservationType.SS_CHALLENGE_WINNER:
      return "SS_CHALLENGE_WINNER";
    case ReservationType.SS_INVITATIONAL:
      return "SS_INVITATIONAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReservationType");
  }
}

export enum ReservationState {
  /** RESERVATION_STATE_UNSPECIFIED - default value. this value is unused. */
  RESERVATION_STATE_UNSPECIFIED = 0,
  RESERVED = 1,
  TRANSFERRED = 2,
}

export function reservationStateFromJSON(object: any): ReservationState {
  switch (object) {
    case 0:
    case "RESERVATION_STATE_UNSPECIFIED":
      return ReservationState.RESERVATION_STATE_UNSPECIFIED;
    case 1:
    case "RESERVED":
      return ReservationState.RESERVED;
    case 2:
    case "TRANSFERRED":
      return ReservationState.TRANSFERRED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReservationState");
  }
}

export function reservationStateToJSON(object: ReservationState): string {
  switch (object) {
    case ReservationState.RESERVATION_STATE_UNSPECIFIED:
      return "RESERVATION_STATE_UNSPECIFIED";
    case ReservationState.RESERVED:
      return "RESERVED";
    case ReservationState.TRANSFERRED:
      return "TRANSFERRED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReservationState");
  }
}

export interface GetBlastPointsRequest {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   */
  blastPoints: string;
}

/** GetBlastBalanceRequest this rpc only can be accessed by the admin role */
export interface GetBlastBalanceRequest {
  blastBalance: string;
  /**
   * The contract address of the token.
   * This field is required if the blast_balance has skipped the blast_points field.
   */
  contractAddress: string;
  /** Which phase of blast points API */
  phase: number;
}

export interface ListAllPendingTransfersRequest {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   */
  blastPoints: string;
  /**
   * The type of the points to retrieve.
   * IF not set, it will return LIQUIDITY points.
   */
  pointsType: BlastPointsType;
}

export interface ListAllPendingTransfersResponse {
  /** The list of rows that matched the query. */
  transfers: Transfer[];
}

export interface BlastPoints {
  /**
   * The resource name of the Points.
   * Format: users/{address}/blastPoints
   */
  name: string;
  /**  */
  userAddress: string;
  /** DEPRECATED in favor of phase1.liquidity_points */
  liquidityPoints: number;
  /** DEPRECATED in favor of phase1.developer_points */
  developerPoints: number;
  phase1: Points | undefined;
  phase2: Points | undefined;
}

export interface Points {
  liquidityPoints: number;
  developerPoints: number;
}

export interface Transfer {
  /**  */
  userAddress: string;
  state: BlastPointsBatchState;
  pointsType: BlastPointsType;
  points: number;
  createTime: string | undefined;
  phase: number;
  transferType: BlastPointsTransferType;
}

export interface TransferBatch {
  batchId: string;
  contractAddress: string;
  state: BlastPointsBatchState;
  pointsType: BlastPointsType;
  transfers: Transfer[];
  totalPoints: number;
  createTime: string | undefined;
  phase: number;
}

export interface BlastBalance {
  address: string;
  liquidity: Balance | undefined;
  developer: Balance | undefined;
}

export interface Balance {
  available: string;
  pendingSent: string;
  earnedCumulative: string;
  receivedCumulative: string;
  finalizedSentCumulative: string;
}

/** BlastGoldReservation */
export interface BlastGoldReservation {
  /**
   * The resource name of the BlastGoldReservation.
   * Format: blastGoldReservations/{blast_gold_reservation}
   */
  name: string;
  /** The user address of the user to reserve the points. */
  userAddress: string;
  /** The amount of points to reserve. */
  amount: string;
  /** The type of the reservation. */
  reservationType: ReservationType;
  /** The state of the reservation. */
  state: ReservationState;
  /** The create time of the reservation. */
  createTime:
    | string
    | undefined;
  /** The transfer time of the reservation. */
  transferTime: string | undefined;
}

/** BatchCreateBlastGoldReservationsRequest */
export interface BatchCreateBlastGoldReservationsRequest {
  requests: CreateBlastGoldReservationRequest[];
}

/** CreateBlastGoldReservationRequest */
export interface CreateBlastGoldReservationRequest {
  reservation: BlastGoldReservation | undefined;
}

/** BatchCreateBlastGoldReservationsResponse */
export interface BatchCreateBlastGoldReservationsResponse {
  reservations: BlastGoldReservation[];
}

/** ListBlastGoldReservationsRequest */
export interface ListBlastGoldReservationsRequest {
  /**
   * The maximum number of BlastGoldReservations to return. The service may return fewer than
   * this value.
   * If unspecified, at most 100 rows will be returned.
   * The maximum value is 1000.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListBlastGoldReservationsRequest` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /** filter */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is ascending by create_time
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "create_time"
   *
   * Examples
   * * order_by=create_time desc
   */
  orderBy: string;
}

/** ListBlastGoldReservationsResponse */
export interface ListBlastGoldReservationsResponse {
  /** The list of rows that matched the query. */
  reservations: BlastGoldReservation[];
  /** The token to retrieve the next page of results, or empty if there are no more results. */
  nextPageToken: string;
}

/** TransferReservedBlastGoldsRequest */
export interface TransferReservedBlastGoldsRequest {
  /** type of the reservation to transfer */
  reservationType: ReservationType;
}

/** TransferReservedBlastGoldsResponse */
export interface TransferReservedBlastGoldsResponse {
  /** transfered reservations */
  reservations: BlastGoldReservation[];
}

function createBaseGetBlastPointsRequest(): GetBlastPointsRequest {
  return { blastPoints: "" };
}

export const GetBlastPointsRequest = {
  encode(message: GetBlastPointsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blastPoints !== "") {
      writer.uint32(10).string(message.blastPoints);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBlastPointsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlastPointsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blastPoints = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlastPointsRequest {
    return { blastPoints: isSet(object.blastPoints) ? globalThis.String(object.blastPoints) : "" };
  },

  toJSON(message: GetBlastPointsRequest): unknown {
    const obj: any = {};
    if (message.blastPoints !== undefined) {
      obj.blastPoints = message.blastPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlastPointsRequest>, I>>(base?: I): GetBlastPointsRequest {
    return GetBlastPointsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlastPointsRequest>, I>>(object: I): GetBlastPointsRequest {
    const message = createBaseGetBlastPointsRequest();
    message.blastPoints = object.blastPoints ?? "";
    return message;
  },
};

function createBaseGetBlastBalanceRequest(): GetBlastBalanceRequest {
  return { blastBalance: "", contractAddress: "", phase: 0 };
}

export const GetBlastBalanceRequest = {
  encode(message: GetBlastBalanceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blastBalance !== "") {
      writer.uint32(10).string(message.blastBalance);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.phase !== 0) {
      writer.uint32(24).int32(message.phase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBlastBalanceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlastBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blastBalance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.phase = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlastBalanceRequest {
    return {
      blastBalance: isSet(object.blastBalance) ? globalThis.String(object.blastBalance) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      phase: isSet(object.phase) ? globalThis.Number(object.phase) : 0,
    };
  },

  toJSON(message: GetBlastBalanceRequest): unknown {
    const obj: any = {};
    if (message.blastBalance !== undefined) {
      obj.blastBalance = message.blastBalance;
    }
    if (message.contractAddress !== undefined) {
      obj.contractAddress = message.contractAddress;
    }
    if (message.phase !== undefined) {
      obj.phase = Math.round(message.phase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlastBalanceRequest>, I>>(base?: I): GetBlastBalanceRequest {
    return GetBlastBalanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlastBalanceRequest>, I>>(object: I): GetBlastBalanceRequest {
    const message = createBaseGetBlastBalanceRequest();
    message.blastBalance = object.blastBalance ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.phase = object.phase ?? 0;
    return message;
  },
};

function createBaseListAllPendingTransfersRequest(): ListAllPendingTransfersRequest {
  return { blastPoints: "", pointsType: 0 };
}

export const ListAllPendingTransfersRequest = {
  encode(message: ListAllPendingTransfersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blastPoints !== "") {
      writer.uint32(10).string(message.blastPoints);
    }
    if (message.pointsType !== 0) {
      writer.uint32(16).int32(message.pointsType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllPendingTransfersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllPendingTransfersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blastPoints = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pointsType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllPendingTransfersRequest {
    return {
      blastPoints: isSet(object.blastPoints) ? globalThis.String(object.blastPoints) : "",
      pointsType: isSet(object.pointsType) ? blastPointsTypeFromJSON(object.pointsType) : 0,
    };
  },

  toJSON(message: ListAllPendingTransfersRequest): unknown {
    const obj: any = {};
    if (message.blastPoints !== undefined) {
      obj.blastPoints = message.blastPoints;
    }
    if (message.pointsType !== undefined) {
      obj.pointsType = blastPointsTypeToJSON(message.pointsType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAllPendingTransfersRequest>, I>>(base?: I): ListAllPendingTransfersRequest {
    return ListAllPendingTransfersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAllPendingTransfersRequest>, I>>(
    object: I,
  ): ListAllPendingTransfersRequest {
    const message = createBaseListAllPendingTransfersRequest();
    message.blastPoints = object.blastPoints ?? "";
    message.pointsType = object.pointsType ?? 0;
    return message;
  },
};

function createBaseListAllPendingTransfersResponse(): ListAllPendingTransfersResponse {
  return { transfers: [] };
}

export const ListAllPendingTransfersResponse = {
  encode(message: ListAllPendingTransfersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.transfers) {
      Transfer.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllPendingTransfersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllPendingTransfersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transfers.push(Transfer.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllPendingTransfersResponse {
    return {
      transfers: globalThis.Array.isArray(object?.transfers)
        ? object.transfers.map((e: any) => Transfer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAllPendingTransfersResponse): unknown {
    const obj: any = {};
    if (message.transfers?.length) {
      obj.transfers = message.transfers.map((e) => Transfer.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAllPendingTransfersResponse>, I>>(base?: I): ListAllPendingTransfersResponse {
    return ListAllPendingTransfersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAllPendingTransfersResponse>, I>>(
    object: I,
  ): ListAllPendingTransfersResponse {
    const message = createBaseListAllPendingTransfersResponse();
    message.transfers = object.transfers?.map((e) => Transfer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlastPoints(): BlastPoints {
  return { name: "", userAddress: "", liquidityPoints: 0, developerPoints: 0, phase1: undefined, phase2: undefined };
}

export const BlastPoints = {
  encode(message: BlastPoints, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.liquidityPoints !== 0) {
      writer.uint32(29).float(message.liquidityPoints);
    }
    if (message.developerPoints !== 0) {
      writer.uint32(37).float(message.developerPoints);
    }
    if (message.phase1 !== undefined) {
      Points.encode(message.phase1, writer.uint32(42).fork()).ldelim();
    }
    if (message.phase2 !== undefined) {
      Points.encode(message.phase2, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlastPoints {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlastPoints();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.liquidityPoints = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.developerPoints = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.phase1 = Points.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.phase2 = Points.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlastPoints {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      liquidityPoints: isSet(object.liquidityPoints) ? globalThis.Number(object.liquidityPoints) : 0,
      developerPoints: isSet(object.developerPoints) ? globalThis.Number(object.developerPoints) : 0,
      phase1: isSet(object.phase1) ? Points.fromJSON(object.phase1) : undefined,
      phase2: isSet(object.phase2) ? Points.fromJSON(object.phase2) : undefined,
    };
  },

  toJSON(message: BlastPoints): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    if (message.liquidityPoints !== undefined) {
      obj.liquidityPoints = message.liquidityPoints;
    }
    if (message.developerPoints !== undefined) {
      obj.developerPoints = message.developerPoints;
    }
    if (message.phase1 !== undefined) {
      obj.phase1 = Points.toJSON(message.phase1);
    }
    if (message.phase2 !== undefined) {
      obj.phase2 = Points.toJSON(message.phase2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlastPoints>, I>>(base?: I): BlastPoints {
    return BlastPoints.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlastPoints>, I>>(object: I): BlastPoints {
    const message = createBaseBlastPoints();
    message.name = object.name ?? "";
    message.userAddress = object.userAddress ?? "";
    message.liquidityPoints = object.liquidityPoints ?? 0;
    message.developerPoints = object.developerPoints ?? 0;
    message.phase1 = (object.phase1 !== undefined && object.phase1 !== null)
      ? Points.fromPartial(object.phase1)
      : undefined;
    message.phase2 = (object.phase2 !== undefined && object.phase2 !== null)
      ? Points.fromPartial(object.phase2)
      : undefined;
    return message;
  },
};

function createBasePoints(): Points {
  return { liquidityPoints: 0, developerPoints: 0 };
}

export const Points = {
  encode(message: Points, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.liquidityPoints !== 0) {
      writer.uint32(13).float(message.liquidityPoints);
    }
    if (message.developerPoints !== 0) {
      writer.uint32(21).float(message.developerPoints);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Points {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoints();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.liquidityPoints = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.developerPoints = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Points {
    return {
      liquidityPoints: isSet(object.liquidityPoints) ? globalThis.Number(object.liquidityPoints) : 0,
      developerPoints: isSet(object.developerPoints) ? globalThis.Number(object.developerPoints) : 0,
    };
  },

  toJSON(message: Points): unknown {
    const obj: any = {};
    if (message.liquidityPoints !== undefined) {
      obj.liquidityPoints = message.liquidityPoints;
    }
    if (message.developerPoints !== undefined) {
      obj.developerPoints = message.developerPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Points>, I>>(base?: I): Points {
    return Points.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Points>, I>>(object: I): Points {
    const message = createBasePoints();
    message.liquidityPoints = object.liquidityPoints ?? 0;
    message.developerPoints = object.developerPoints ?? 0;
    return message;
  },
};

function createBaseTransfer(): Transfer {
  return { userAddress: "", state: 0, pointsType: 0, points: 0, createTime: undefined, phase: 0, transferType: 0 };
}

export const Transfer = {
  encode(message: Transfer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userAddress !== "") {
      writer.uint32(10).string(message.userAddress);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.pointsType !== 0) {
      writer.uint32(24).int32(message.pointsType);
    }
    if (message.points !== 0) {
      writer.uint32(37).float(message.points);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).ldelim();
    }
    if (message.phase !== 0) {
      writer.uint32(56).int32(message.phase);
    }
    if (message.transferType !== 0) {
      writer.uint32(64).int32(message.transferType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Transfer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pointsType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.points = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.phase = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.transferType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transfer {
    return {
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      state: isSet(object.state) ? blastPointsBatchStateFromJSON(object.state) : 0,
      pointsType: isSet(object.pointsType) ? blastPointsTypeFromJSON(object.pointsType) : 0,
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      phase: isSet(object.phase) ? globalThis.Number(object.phase) : 0,
      transferType: isSet(object.transferType) ? blastPointsTransferTypeFromJSON(object.transferType) : 0,
    };
  },

  toJSON(message: Transfer): unknown {
    const obj: any = {};
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    if (message.state !== undefined) {
      obj.state = blastPointsBatchStateToJSON(message.state);
    }
    if (message.pointsType !== undefined) {
      obj.pointsType = blastPointsTypeToJSON(message.pointsType);
    }
    if (message.points !== undefined) {
      obj.points = message.points;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.phase !== undefined) {
      obj.phase = Math.round(message.phase);
    }
    if (message.transferType !== undefined) {
      obj.transferType = blastPointsTransferTypeToJSON(message.transferType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transfer>, I>>(base?: I): Transfer {
    return Transfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transfer>, I>>(object: I): Transfer {
    const message = createBaseTransfer();
    message.userAddress = object.userAddress ?? "";
    message.state = object.state ?? 0;
    message.pointsType = object.pointsType ?? 0;
    message.points = object.points ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.phase = object.phase ?? 0;
    message.transferType = object.transferType ?? 0;
    return message;
  },
};

function createBaseTransferBatch(): TransferBatch {
  return {
    batchId: "",
    contractAddress: "",
    state: 0,
    pointsType: 0,
    transfers: [],
    totalPoints: 0,
    createTime: undefined,
    phase: 0,
  };
}

export const TransferBatch = {
  encode(message: TransferBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchId !== "") {
      writer.uint32(10).string(message.batchId);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.pointsType !== 0) {
      writer.uint32(32).int32(message.pointsType);
    }
    for (const v of message.transfers) {
      Transfer.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.totalPoints !== 0) {
      writer.uint32(53).float(message.totalPoints);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).ldelim();
    }
    if (message.phase !== 0) {
      writer.uint32(64).int32(message.phase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferBatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batchId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pointsType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transfers.push(Transfer.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.totalPoints = reader.float();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.phase = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferBatch {
    return {
      batchId: isSet(object.batchId) ? globalThis.String(object.batchId) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      state: isSet(object.state) ? blastPointsBatchStateFromJSON(object.state) : 0,
      pointsType: isSet(object.pointsType) ? blastPointsTypeFromJSON(object.pointsType) : 0,
      transfers: globalThis.Array.isArray(object?.transfers)
        ? object.transfers.map((e: any) => Transfer.fromJSON(e))
        : [],
      totalPoints: isSet(object.totalPoints) ? globalThis.Number(object.totalPoints) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      phase: isSet(object.phase) ? globalThis.Number(object.phase) : 0,
    };
  },

  toJSON(message: TransferBatch): unknown {
    const obj: any = {};
    if (message.batchId !== undefined) {
      obj.batchId = message.batchId;
    }
    if (message.contractAddress !== undefined) {
      obj.contractAddress = message.contractAddress;
    }
    if (message.state !== undefined) {
      obj.state = blastPointsBatchStateToJSON(message.state);
    }
    if (message.pointsType !== undefined) {
      obj.pointsType = blastPointsTypeToJSON(message.pointsType);
    }
    if (message.transfers?.length) {
      obj.transfers = message.transfers.map((e) => Transfer.toJSON(e));
    }
    if (message.totalPoints !== undefined) {
      obj.totalPoints = message.totalPoints;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.phase !== undefined) {
      obj.phase = Math.round(message.phase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferBatch>, I>>(base?: I): TransferBatch {
    return TransferBatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferBatch>, I>>(object: I): TransferBatch {
    const message = createBaseTransferBatch();
    message.batchId = object.batchId ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.state = object.state ?? 0;
    message.pointsType = object.pointsType ?? 0;
    message.transfers = object.transfers?.map((e) => Transfer.fromPartial(e)) || [];
    message.totalPoints = object.totalPoints ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.phase = object.phase ?? 0;
    return message;
  },
};

function createBaseBlastBalance(): BlastBalance {
  return { address: "", liquidity: undefined, developer: undefined };
}

export const BlastBalance = {
  encode(message: BlastBalance, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.liquidity !== undefined) {
      Balance.encode(message.liquidity, writer.uint32(18).fork()).ldelim();
    }
    if (message.developer !== undefined) {
      Balance.encode(message.developer, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlastBalance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlastBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.liquidity = Balance.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.developer = Balance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlastBalance {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      liquidity: isSet(object.liquidity) ? Balance.fromJSON(object.liquidity) : undefined,
      developer: isSet(object.developer) ? Balance.fromJSON(object.developer) : undefined,
    };
  },

  toJSON(message: BlastBalance): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.liquidity !== undefined) {
      obj.liquidity = Balance.toJSON(message.liquidity);
    }
    if (message.developer !== undefined) {
      obj.developer = Balance.toJSON(message.developer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlastBalance>, I>>(base?: I): BlastBalance {
    return BlastBalance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlastBalance>, I>>(object: I): BlastBalance {
    const message = createBaseBlastBalance();
    message.address = object.address ?? "";
    message.liquidity = (object.liquidity !== undefined && object.liquidity !== null)
      ? Balance.fromPartial(object.liquidity)
      : undefined;
    message.developer = (object.developer !== undefined && object.developer !== null)
      ? Balance.fromPartial(object.developer)
      : undefined;
    return message;
  },
};

function createBaseBalance(): Balance {
  return { available: "", pendingSent: "", earnedCumulative: "", receivedCumulative: "", finalizedSentCumulative: "" };
}

export const Balance = {
  encode(message: Balance, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.available !== "") {
      writer.uint32(10).string(message.available);
    }
    if (message.pendingSent !== "") {
      writer.uint32(18).string(message.pendingSent);
    }
    if (message.earnedCumulative !== "") {
      writer.uint32(26).string(message.earnedCumulative);
    }
    if (message.receivedCumulative !== "") {
      writer.uint32(34).string(message.receivedCumulative);
    }
    if (message.finalizedSentCumulative !== "") {
      writer.uint32(42).string(message.finalizedSentCumulative);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Balance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.available = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pendingSent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.earnedCumulative = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.receivedCumulative = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.finalizedSentCumulative = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Balance {
    return {
      available: isSet(object.available) ? globalThis.String(object.available) : "",
      pendingSent: isSet(object.pendingSent) ? globalThis.String(object.pendingSent) : "",
      earnedCumulative: isSet(object.earnedCumulative) ? globalThis.String(object.earnedCumulative) : "",
      receivedCumulative: isSet(object.receivedCumulative) ? globalThis.String(object.receivedCumulative) : "",
      finalizedSentCumulative: isSet(object.finalizedSentCumulative)
        ? globalThis.String(object.finalizedSentCumulative)
        : "",
    };
  },

  toJSON(message: Balance): unknown {
    const obj: any = {};
    if (message.available !== undefined) {
      obj.available = message.available;
    }
    if (message.pendingSent !== undefined) {
      obj.pendingSent = message.pendingSent;
    }
    if (message.earnedCumulative !== undefined) {
      obj.earnedCumulative = message.earnedCumulative;
    }
    if (message.receivedCumulative !== undefined) {
      obj.receivedCumulative = message.receivedCumulative;
    }
    if (message.finalizedSentCumulative !== undefined) {
      obj.finalizedSentCumulative = message.finalizedSentCumulative;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Balance>, I>>(base?: I): Balance {
    return Balance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Balance>, I>>(object: I): Balance {
    const message = createBaseBalance();
    message.available = object.available ?? "";
    message.pendingSent = object.pendingSent ?? "";
    message.earnedCumulative = object.earnedCumulative ?? "";
    message.receivedCumulative = object.receivedCumulative ?? "";
    message.finalizedSentCumulative = object.finalizedSentCumulative ?? "";
    return message;
  },
};

function createBaseBlastGoldReservation(): BlastGoldReservation {
  return {
    name: "",
    userAddress: "",
    amount: "",
    reservationType: 0,
    state: 0,
    createTime: undefined,
    transferTime: undefined,
  };
}

export const BlastGoldReservation = {
  encode(message: BlastGoldReservation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.reservationType !== 0) {
      writer.uint32(32).int32(message.reservationType);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).ldelim();
    }
    if (message.transferTime !== undefined) {
      Timestamp.encode(toTimestamp(message.transferTime), writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlastGoldReservation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlastGoldReservation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reservationType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.transferTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlastGoldReservation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      reservationType: isSet(object.reservationType) ? reservationTypeFromJSON(object.reservationType) : 0,
      state: isSet(object.state) ? reservationStateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      transferTime: isSet(object.transferTime) ? globalThis.String(object.transferTime) : undefined,
    };
  },

  toJSON(message: BlastGoldReservation): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    if (message.reservationType !== undefined) {
      obj.reservationType = reservationTypeToJSON(message.reservationType);
    }
    if (message.state !== undefined) {
      obj.state = reservationStateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.transferTime !== undefined) {
      obj.transferTime = message.transferTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlastGoldReservation>, I>>(base?: I): BlastGoldReservation {
    return BlastGoldReservation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlastGoldReservation>, I>>(object: I): BlastGoldReservation {
    const message = createBaseBlastGoldReservation();
    message.name = object.name ?? "";
    message.userAddress = object.userAddress ?? "";
    message.amount = object.amount ?? "";
    message.reservationType = object.reservationType ?? 0;
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.transferTime = object.transferTime ?? undefined;
    return message;
  },
};

function createBaseBatchCreateBlastGoldReservationsRequest(): BatchCreateBlastGoldReservationsRequest {
  return { requests: [] };
}

export const BatchCreateBlastGoldReservationsRequest = {
  encode(message: BatchCreateBlastGoldReservationsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.requests) {
      CreateBlastGoldReservationRequest.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCreateBlastGoldReservationsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateBlastGoldReservationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requests.push(CreateBlastGoldReservationRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateBlastGoldReservationsRequest {
    return {
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateBlastGoldReservationRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateBlastGoldReservationsRequest): unknown {
    const obj: any = {};
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateBlastGoldReservationRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchCreateBlastGoldReservationsRequest>, I>>(
    base?: I,
  ): BatchCreateBlastGoldReservationsRequest {
    return BatchCreateBlastGoldReservationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchCreateBlastGoldReservationsRequest>, I>>(
    object: I,
  ): BatchCreateBlastGoldReservationsRequest {
    const message = createBaseBatchCreateBlastGoldReservationsRequest();
    message.requests = object.requests?.map((e) => CreateBlastGoldReservationRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateBlastGoldReservationRequest(): CreateBlastGoldReservationRequest {
  return { reservation: undefined };
}

export const CreateBlastGoldReservationRequest = {
  encode(message: CreateBlastGoldReservationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reservation !== undefined) {
      BlastGoldReservation.encode(message.reservation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateBlastGoldReservationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBlastGoldReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reservation = BlastGoldReservation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBlastGoldReservationRequest {
    return { reservation: isSet(object.reservation) ? BlastGoldReservation.fromJSON(object.reservation) : undefined };
  },

  toJSON(message: CreateBlastGoldReservationRequest): unknown {
    const obj: any = {};
    if (message.reservation !== undefined) {
      obj.reservation = BlastGoldReservation.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBlastGoldReservationRequest>, I>>(
    base?: I,
  ): CreateBlastGoldReservationRequest {
    return CreateBlastGoldReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBlastGoldReservationRequest>, I>>(
    object: I,
  ): CreateBlastGoldReservationRequest {
    const message = createBaseCreateBlastGoldReservationRequest();
    message.reservation = (object.reservation !== undefined && object.reservation !== null)
      ? BlastGoldReservation.fromPartial(object.reservation)
      : undefined;
    return message;
  },
};

function createBaseBatchCreateBlastGoldReservationsResponse(): BatchCreateBlastGoldReservationsResponse {
  return { reservations: [] };
}

export const BatchCreateBlastGoldReservationsResponse = {
  encode(message: BatchCreateBlastGoldReservationsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.reservations) {
      BlastGoldReservation.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCreateBlastGoldReservationsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateBlastGoldReservationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reservations.push(BlastGoldReservation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateBlastGoldReservationsResponse {
    return {
      reservations: globalThis.Array.isArray(object?.reservations)
        ? object.reservations.map((e: any) => BlastGoldReservation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateBlastGoldReservationsResponse): unknown {
    const obj: any = {};
    if (message.reservations?.length) {
      obj.reservations = message.reservations.map((e) => BlastGoldReservation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchCreateBlastGoldReservationsResponse>, I>>(
    base?: I,
  ): BatchCreateBlastGoldReservationsResponse {
    return BatchCreateBlastGoldReservationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchCreateBlastGoldReservationsResponse>, I>>(
    object: I,
  ): BatchCreateBlastGoldReservationsResponse {
    const message = createBaseBatchCreateBlastGoldReservationsResponse();
    message.reservations = object.reservations?.map((e) => BlastGoldReservation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListBlastGoldReservationsRequest(): ListBlastGoldReservationsRequest {
  return { pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListBlastGoldReservationsRequest = {
  encode(message: ListBlastGoldReservationsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListBlastGoldReservationsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBlastGoldReservationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBlastGoldReservationsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListBlastGoldReservationsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.orderBy !== undefined) {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBlastGoldReservationsRequest>, I>>(
    base?: I,
  ): ListBlastGoldReservationsRequest {
    return ListBlastGoldReservationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBlastGoldReservationsRequest>, I>>(
    object: I,
  ): ListBlastGoldReservationsRequest {
    const message = createBaseListBlastGoldReservationsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListBlastGoldReservationsResponse(): ListBlastGoldReservationsResponse {
  return { reservations: [], nextPageToken: "" };
}

export const ListBlastGoldReservationsResponse = {
  encode(message: ListBlastGoldReservationsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.reservations) {
      BlastGoldReservation.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListBlastGoldReservationsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBlastGoldReservationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reservations.push(BlastGoldReservation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBlastGoldReservationsResponse {
    return {
      reservations: globalThis.Array.isArray(object?.reservations)
        ? object.reservations.map((e: any) => BlastGoldReservation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBlastGoldReservationsResponse): unknown {
    const obj: any = {};
    if (message.reservations?.length) {
      obj.reservations = message.reservations.map((e) => BlastGoldReservation.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBlastGoldReservationsResponse>, I>>(
    base?: I,
  ): ListBlastGoldReservationsResponse {
    return ListBlastGoldReservationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBlastGoldReservationsResponse>, I>>(
    object: I,
  ): ListBlastGoldReservationsResponse {
    const message = createBaseListBlastGoldReservationsResponse();
    message.reservations = object.reservations?.map((e) => BlastGoldReservation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseTransferReservedBlastGoldsRequest(): TransferReservedBlastGoldsRequest {
  return { reservationType: 0 };
}

export const TransferReservedBlastGoldsRequest = {
  encode(message: TransferReservedBlastGoldsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reservationType !== 0) {
      writer.uint32(8).int32(message.reservationType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferReservedBlastGoldsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferReservedBlastGoldsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reservationType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferReservedBlastGoldsRequest {
    return { reservationType: isSet(object.reservationType) ? reservationTypeFromJSON(object.reservationType) : 0 };
  },

  toJSON(message: TransferReservedBlastGoldsRequest): unknown {
    const obj: any = {};
    if (message.reservationType !== undefined) {
      obj.reservationType = reservationTypeToJSON(message.reservationType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferReservedBlastGoldsRequest>, I>>(
    base?: I,
  ): TransferReservedBlastGoldsRequest {
    return TransferReservedBlastGoldsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferReservedBlastGoldsRequest>, I>>(
    object: I,
  ): TransferReservedBlastGoldsRequest {
    const message = createBaseTransferReservedBlastGoldsRequest();
    message.reservationType = object.reservationType ?? 0;
    return message;
  },
};

function createBaseTransferReservedBlastGoldsResponse(): TransferReservedBlastGoldsResponse {
  return { reservations: [] };
}

export const TransferReservedBlastGoldsResponse = {
  encode(message: TransferReservedBlastGoldsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.reservations) {
      BlastGoldReservation.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferReservedBlastGoldsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferReservedBlastGoldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reservations.push(BlastGoldReservation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferReservedBlastGoldsResponse {
    return {
      reservations: globalThis.Array.isArray(object?.reservations)
        ? object.reservations.map((e: any) => BlastGoldReservation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TransferReservedBlastGoldsResponse): unknown {
    const obj: any = {};
    if (message.reservations?.length) {
      obj.reservations = message.reservations.map((e) => BlastGoldReservation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferReservedBlastGoldsResponse>, I>>(
    base?: I,
  ): TransferReservedBlastGoldsResponse {
    return TransferReservedBlastGoldsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferReservedBlastGoldsResponse>, I>>(
    object: I,
  ): TransferReservedBlastGoldsResponse {
    const message = createBaseTransferReservedBlastGoldsResponse();
    message.reservations = object.reservations?.map((e) => BlastGoldReservation.fromPartial(e)) || [];
    return message;
  },
};

/** PointsService contains the function to interact with the Points of the spacebar */
export interface PointsService {
  /** GetBlastPoints */
  GetBlastPoints(request: GetBlastPointsRequest): Promise<BlastPoints>;
  /** ListAllPendingTransferBatches */
  ListAllPendingTransfers(request: ListAllPendingTransfersRequest): Promise<ListAllPendingTransfersResponse>;
  /** GetBlastBalances */
  GetBlastBalances(request: GetBlastBalanceRequest): Promise<BlastBalance>;
  /** BatchCreateBlastGoldReservations */
  BatchCreateBlastGoldReservations(
    request: BatchCreateBlastGoldReservationsRequest,
  ): Promise<BatchCreateBlastGoldReservationsResponse>;
  /** ListBlastGoldReservations */
  ListBlastGoldReservations(request: ListBlastGoldReservationsRequest): Promise<ListBlastGoldReservationsResponse>;
  /**
   * TransferReservedBlastGolds
   * Transfer gold by the reservations.
   * admin api, not public
   */
  TransferReservedBlastGolds(request: TransferReservedBlastGoldsRequest): Promise<TransferReservedBlastGoldsResponse>;
}

export const PointsServiceServiceName = "blast.v1.blastpoints.PointsService";
export class PointsServiceClientImpl implements PointsService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PointsServiceServiceName;
    this.rpc = rpc;
    this.GetBlastPoints = this.GetBlastPoints.bind(this);
    this.ListAllPendingTransfers = this.ListAllPendingTransfers.bind(this);
    this.GetBlastBalances = this.GetBlastBalances.bind(this);
    this.BatchCreateBlastGoldReservations = this.BatchCreateBlastGoldReservations.bind(this);
    this.ListBlastGoldReservations = this.ListBlastGoldReservations.bind(this);
    this.TransferReservedBlastGolds = this.TransferReservedBlastGolds.bind(this);
  }
  GetBlastPoints(request: GetBlastPointsRequest): Promise<BlastPoints> {
    const data = GetBlastPointsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBlastPoints", data);
    return promise.then((data) => BlastPoints.decode(_m0.Reader.create(data)));
  }

  ListAllPendingTransfers(request: ListAllPendingTransfersRequest): Promise<ListAllPendingTransfersResponse> {
    const data = ListAllPendingTransfersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListAllPendingTransfers", data);
    return promise.then((data) => ListAllPendingTransfersResponse.decode(_m0.Reader.create(data)));
  }

  GetBlastBalances(request: GetBlastBalanceRequest): Promise<BlastBalance> {
    const data = GetBlastBalanceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBlastBalances", data);
    return promise.then((data) => BlastBalance.decode(_m0.Reader.create(data)));
  }

  BatchCreateBlastGoldReservations(
    request: BatchCreateBlastGoldReservationsRequest,
  ): Promise<BatchCreateBlastGoldReservationsResponse> {
    const data = BatchCreateBlastGoldReservationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BatchCreateBlastGoldReservations", data);
    return promise.then((data) => BatchCreateBlastGoldReservationsResponse.decode(_m0.Reader.create(data)));
  }

  ListBlastGoldReservations(request: ListBlastGoldReservationsRequest): Promise<ListBlastGoldReservationsResponse> {
    const data = ListBlastGoldReservationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBlastGoldReservations", data);
    return promise.then((data) => ListBlastGoldReservationsResponse.decode(_m0.Reader.create(data)));
  }

  TransferReservedBlastGolds(request: TransferReservedBlastGoldsRequest): Promise<TransferReservedBlastGoldsResponse> {
    const data = TransferReservedBlastGoldsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TransferReservedBlastGolds", data);
    return promise.then((data) => TransferReservedBlastGoldsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
