// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/chain/sign.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "ethereum.v1.chain";

export interface SignWKeyMintRequest {
  eoaAddress: string;
}

export interface SignKeyMintRequest {
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  profileContractAddress?:
    | string
    | undefined;
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  profileTokenId?:
    | string
    | undefined;
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  spaceshipTokenId?: string | undefined;
  keyTokenId: string;
  ethContribution: string;
}

export interface SignScoreMintRequest {
  profileAddress: string;
  scoreId: string;
}

export interface SignMessageRequest {
  message: string;
}

export interface SignatureResponse {
  signature: string;
  message: string;
}

export interface SignatureTypedResponse {
  signature: string;
  message: { [key: string]: string };
}

export interface SignatureTypedResponse_MessageEntry {
  key: string;
  value: string;
}

function createBaseSignWKeyMintRequest(): SignWKeyMintRequest {
  return { eoaAddress: "" };
}

export const SignWKeyMintRequest = {
  encode(message: SignWKeyMintRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eoaAddress !== "") {
      writer.uint32(10).string(message.eoaAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignWKeyMintRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignWKeyMintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eoaAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignWKeyMintRequest {
    return { eoaAddress: isSet(object.eoaAddress) ? globalThis.String(object.eoaAddress) : "" };
  },

  toJSON(message: SignWKeyMintRequest): unknown {
    const obj: any = {};
    if (message.eoaAddress !== undefined) {
      obj.eoaAddress = message.eoaAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignWKeyMintRequest>, I>>(base?: I): SignWKeyMintRequest {
    return SignWKeyMintRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignWKeyMintRequest>, I>>(object: I): SignWKeyMintRequest {
    const message = createBaseSignWKeyMintRequest();
    message.eoaAddress = object.eoaAddress ?? "";
    return message;
  },
};

function createBaseSignKeyMintRequest(): SignKeyMintRequest {
  return {
    profileContractAddress: undefined,
    profileTokenId: undefined,
    spaceshipTokenId: undefined,
    keyTokenId: "",
    ethContribution: "",
  };
}

export const SignKeyMintRequest = {
  encode(message: SignKeyMintRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profileContractAddress !== undefined) {
      writer.uint32(10).string(message.profileContractAddress);
    }
    if (message.profileTokenId !== undefined) {
      writer.uint32(18).string(message.profileTokenId);
    }
    if (message.spaceshipTokenId !== undefined) {
      writer.uint32(26).string(message.spaceshipTokenId);
    }
    if (message.keyTokenId !== "") {
      writer.uint32(34).string(message.keyTokenId);
    }
    if (message.ethContribution !== "") {
      writer.uint32(42).string(message.ethContribution);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignKeyMintRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignKeyMintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profileContractAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profileTokenId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spaceshipTokenId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keyTokenId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ethContribution = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignKeyMintRequest {
    return {
      profileContractAddress: isSet(object.profileContractAddress)
        ? globalThis.String(object.profileContractAddress)
        : undefined,
      profileTokenId: isSet(object.profileTokenId) ? globalThis.String(object.profileTokenId) : undefined,
      spaceshipTokenId: isSet(object.spaceshipTokenId) ? globalThis.String(object.spaceshipTokenId) : undefined,
      keyTokenId: isSet(object.keyTokenId) ? globalThis.String(object.keyTokenId) : "",
      ethContribution: isSet(object.ethContribution) ? globalThis.String(object.ethContribution) : "",
    };
  },

  toJSON(message: SignKeyMintRequest): unknown {
    const obj: any = {};
    if (message.profileContractAddress !== undefined) {
      obj.profileContractAddress = message.profileContractAddress;
    }
    if (message.profileTokenId !== undefined) {
      obj.profileTokenId = message.profileTokenId;
    }
    if (message.spaceshipTokenId !== undefined) {
      obj.spaceshipTokenId = message.spaceshipTokenId;
    }
    if (message.keyTokenId !== undefined) {
      obj.keyTokenId = message.keyTokenId;
    }
    if (message.ethContribution !== undefined) {
      obj.ethContribution = message.ethContribution;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignKeyMintRequest>, I>>(base?: I): SignKeyMintRequest {
    return SignKeyMintRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignKeyMintRequest>, I>>(object: I): SignKeyMintRequest {
    const message = createBaseSignKeyMintRequest();
    message.profileContractAddress = object.profileContractAddress ?? undefined;
    message.profileTokenId = object.profileTokenId ?? undefined;
    message.spaceshipTokenId = object.spaceshipTokenId ?? undefined;
    message.keyTokenId = object.keyTokenId ?? "";
    message.ethContribution = object.ethContribution ?? "";
    return message;
  },
};

function createBaseSignScoreMintRequest(): SignScoreMintRequest {
  return { profileAddress: "", scoreId: "" };
}

export const SignScoreMintRequest = {
  encode(message: SignScoreMintRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profileAddress !== "") {
      writer.uint32(10).string(message.profileAddress);
    }
    if (message.scoreId !== "") {
      writer.uint32(18).string(message.scoreId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignScoreMintRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignScoreMintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profileAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scoreId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignScoreMintRequest {
    return {
      profileAddress: isSet(object.profileAddress) ? globalThis.String(object.profileAddress) : "",
      scoreId: isSet(object.scoreId) ? globalThis.String(object.scoreId) : "",
    };
  },

  toJSON(message: SignScoreMintRequest): unknown {
    const obj: any = {};
    if (message.profileAddress !== undefined) {
      obj.profileAddress = message.profileAddress;
    }
    if (message.scoreId !== undefined) {
      obj.scoreId = message.scoreId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignScoreMintRequest>, I>>(base?: I): SignScoreMintRequest {
    return SignScoreMintRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignScoreMintRequest>, I>>(object: I): SignScoreMintRequest {
    const message = createBaseSignScoreMintRequest();
    message.profileAddress = object.profileAddress ?? "";
    message.scoreId = object.scoreId ?? "";
    return message;
  },
};

function createBaseSignMessageRequest(): SignMessageRequest {
  return { message: "" };
}

export const SignMessageRequest = {
  encode(message: SignMessageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignMessageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignMessageRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SignMessageRequest): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignMessageRequest>, I>>(base?: I): SignMessageRequest {
    return SignMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignMessageRequest>, I>>(object: I): SignMessageRequest {
    const message = createBaseSignMessageRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSignatureResponse(): SignatureResponse {
  return { signature: "", message: "" };
}

export const SignatureResponse = {
  encode(message: SignatureResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SignatureResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureResponse>, I>>(base?: I): SignatureResponse {
    return SignatureResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureResponse>, I>>(object: I): SignatureResponse {
    const message = createBaseSignatureResponse();
    message.signature = object.signature ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSignatureTypedResponse(): SignatureTypedResponse {
  return { signature: "", message: {} };
}

export const SignatureTypedResponse = {
  encode(message: SignatureTypedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    Object.entries(message.message).forEach(([key, value]) => {
      SignatureTypedResponse_MessageEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureTypedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureTypedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SignatureTypedResponse_MessageEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.message[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureTypedResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      message: isObject(object.message)
        ? Object.entries(object.message).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SignatureTypedResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.message) {
      const entries = Object.entries(message.message);
      if (entries.length > 0) {
        obj.message = {};
        entries.forEach(([k, v]) => {
          obj.message[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureTypedResponse>, I>>(base?: I): SignatureTypedResponse {
    return SignatureTypedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureTypedResponse>, I>>(object: I): SignatureTypedResponse {
    const message = createBaseSignatureTypedResponse();
    message.signature = object.signature ?? "";
    message.message = Object.entries(object.message ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSignatureTypedResponse_MessageEntry(): SignatureTypedResponse_MessageEntry {
  return { key: "", value: "" };
}

export const SignatureTypedResponse_MessageEntry = {
  encode(message: SignatureTypedResponse_MessageEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureTypedResponse_MessageEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureTypedResponse_MessageEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureTypedResponse_MessageEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SignatureTypedResponse_MessageEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureTypedResponse_MessageEntry>, I>>(
    base?: I,
  ): SignatureTypedResponse_MessageEntry {
    return SignatureTypedResponse_MessageEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureTypedResponse_MessageEntry>, I>>(
    object: I,
  ): SignatureTypedResponse_MessageEntry {
    const message = createBaseSignatureTypedResponse_MessageEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** ChainSignService is the service that handles signing messages. */
export interface ChainSignService {
  /**
   * SignBadgeClaim signs a w key mint with the given EOA address.
   *
   * 403 error will be returned if the given EOA address is on the whitelist.
   */
  SignWkeyMint(request: SignWKeyMintRequest): Promise<SignatureResponse>;
  /**
   * SignKeyMint signs a key mint with the given token id.
   *
   * 403 error will be returned if the given profile address not not eligible to mint the badge.
   * 400 error will be returned if the given token id is invalid
   */
  SignKeyMint(request: SignKeyMintRequest): Promise<SignatureTypedResponse>;
  /**
   * SignScoreMint signs a score mint with the given profile address and score ID.
   *
   * Not implemented yet.
   */
  SignScoreMint(request: SignScoreMintRequest): Promise<SignatureResponse>;
  /**
   * SignMessage signs a message with arbitrary message.
   *
   * This rpc is not open to the public request and only used by the internal service.
   */
  SignMessage(request: SignMessageRequest): Promise<SignatureResponse>;
}

export const ChainSignServiceServiceName = "ethereum.v1.chain.ChainSignService";
export class ChainSignServiceClientImpl implements ChainSignService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ChainSignServiceServiceName;
    this.rpc = rpc;
    this.SignWkeyMint = this.SignWkeyMint.bind(this);
    this.SignKeyMint = this.SignKeyMint.bind(this);
    this.SignScoreMint = this.SignScoreMint.bind(this);
    this.SignMessage = this.SignMessage.bind(this);
  }
  SignWkeyMint(request: SignWKeyMintRequest): Promise<SignatureResponse> {
    const data = SignWKeyMintRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignWkeyMint", data);
    return promise.then((data) => SignatureResponse.decode(_m0.Reader.create(data)));
  }

  SignKeyMint(request: SignKeyMintRequest): Promise<SignatureTypedResponse> {
    const data = SignKeyMintRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignKeyMint", data);
    return promise.then((data) => SignatureTypedResponse.decode(_m0.Reader.create(data)));
  }

  SignScoreMint(request: SignScoreMintRequest): Promise<SignatureResponse> {
    const data = SignScoreMintRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignScoreMint", data);
    return promise.then((data) => SignatureResponse.decode(_m0.Reader.create(data)));
  }

  SignMessage(request: SignMessageRequest): Promise<SignatureResponse> {
    const data = SignMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignMessage", data);
    return promise.then((data) => SignatureResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
