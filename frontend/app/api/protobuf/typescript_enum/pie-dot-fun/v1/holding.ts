// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/holding.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import {
  ChainType,
  chainTypeFromJSON,
  chainTypeToJSON,
  Currency,
  currencyFromJSON,
  currencyToJSON,
  Money,
  Percentage,
  PnL,
  PnLsByPeriod,
  Quantity,
} from "./common";

export const protobufPackage = "piedotfun.v1";

export interface GetHoldingRequest {
  /**
   * The name of the holding to retrieve.
   * Format : "holdings/{chain}/basketTokens/{token_address}/holdingWallets/{holding_wallet_address}"
   */
  holding: string;
  /**
   * Display the value in this currency. Default is USD.
   *
   * @deprecated
   */
  currency: Currency;
}

export interface ListHoldingsRequest {
  /**
   * The maximum number of holdings to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListHoldings` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * basket_token
   *   * `=`
   * * holding_wallet
   *   * `=`
   * * formatted_quantity, quantity (alias of formatted_quantity)
   *   * `>=`, `<=`, `>`, `<`
   * * raw_quantity
   *   * `>=`, `<=`, `>`, `<`
   * * market_value_sol
   *   * `>=`, `<=`, `>`, `<`
   * * market_value_usdc
   *   * `>=`, `<=`, `>`, `<`
   *
   * At least one filter is required. If none is provided, the service will return an error.
   * Examples
   * * basket_token="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * holding_wallet="holdingWallets/SVM/9b3b4b4b-1b1b-4b4b-9b9b-1b1b4b4b4b4b"
   * * quantity>"0"
   * * market_value_sol>="100"
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "market_value"
   *
   * Examples
   * * order_by=market_value desc
   */
  orderBy: string;
  /**
   * Display the value in this currency. Default is USD.
   *
   * @deprecated
   */
  currency: Currency;
}

export interface ListHoldingsResponse {
  holdings: Holding[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface GetHoldingsStatisticsRequest {
  /**
   * Available Sequence and Operator
   * * basket_token
   *   * `=`
   * * holding_wallet
   *   * `=`
   * * user
   *   * `=`
   * * symbol
   *   * `=`
   * * market_value_sol
   *   * `>=`, `<=`, `>`, `<`
   * * market_value_usdc
   *   * `>=`, `<=`, `>`, `<`
   *
   * At least one filter is required. If none is provided, the service will return an error.
   * Examples
   * * basket_token="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * holding_wallet="holdingWallets/SOLANA/9b3b4b4b-1b1b-4b4b-9b9b-1b1b4b4b4b4b"
   * * user="users/1"
   * * symbol="MURAD"
   * * market_value_sol>=10
   */
  filter: string;
}

export interface GetHoldingsStatisticsResponse {
  count: number;
  totalMarketValues: Money[];
  totalPnls: PnL[];
}

export interface Holding {
  /** Format : "holdings/{chain}/basketTokens/{token_address}/holdingWallets/{holding_wallet_address}" */
  name: string;
  chain: ChainType;
  basketToken: string;
  holdingWallet: string;
  quantity:
    | Quantity
    | undefined;
  /** map from currency to average buy price */
  averageBuyPrices: { [key: string]: Money };
  /** map from currency to market value */
  marketValues: { [key: string]: Money };
  /** map from currency to PnLsByPeriod */
  pnls: { [key: string]: PnLsByPeriod };
  /** Percentage of holding value in the basket token */
  ownershipPercentage: Percentage | undefined;
  createTime: string | undefined;
  updateTime:
    | string
    | undefined;
  /** @deprecated */
  averageBuyPrice:
    | Money
    | undefined;
  /** @deprecated */
  marketValue:
    | Money
    | undefined;
  /** @deprecated */
  pnl: PnLsByPeriod | undefined;
}

export interface Holding_AverageBuyPricesEntry {
  key: string;
  value: Money | undefined;
}

export interface Holding_MarketValuesEntry {
  key: string;
  value: Money | undefined;
}

export interface Holding_PnlsEntry {
  key: string;
  value: PnLsByPeriod | undefined;
}

function createBaseGetHoldingRequest(): GetHoldingRequest {
  return { holding: "", currency: 0 };
}

export const GetHoldingRequest = {
  encode(message: GetHoldingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.holding !== "") {
      writer.uint32(10).string(message.holding);
    }
    if (message.currency !== 0) {
      writer.uint32(16).int32(message.currency);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHoldingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHoldingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.holding = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.currency = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHoldingRequest {
    return {
      holding: isSet(object.holding) ? globalThis.String(object.holding) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : 0,
    };
  },

  toJSON(message: GetHoldingRequest): unknown {
    const obj: any = {};
    if (message.holding !== undefined) {
      obj.holding = message.holding;
    }
    if (message.currency !== undefined) {
      obj.currency = currencyToJSON(message.currency);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHoldingRequest>, I>>(base?: I): GetHoldingRequest {
    return GetHoldingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHoldingRequest>, I>>(object: I): GetHoldingRequest {
    const message = createBaseGetHoldingRequest();
    message.holding = object.holding ?? "";
    message.currency = object.currency ?? 0;
    return message;
  },
};

function createBaseListHoldingsRequest(): ListHoldingsRequest {
  return { pageSize: 0, pageToken: "", filter: "", orderBy: "", currency: 0 };
}

export const ListHoldingsRequest = {
  encode(message: ListHoldingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.currency !== 0) {
      writer.uint32(40).int32(message.currency);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHoldingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHoldingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.currency = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHoldingsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : 0,
    };
  },

  toJSON(message: ListHoldingsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.orderBy !== undefined) {
      obj.orderBy = message.orderBy;
    }
    if (message.currency !== undefined) {
      obj.currency = currencyToJSON(message.currency);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHoldingsRequest>, I>>(base?: I): ListHoldingsRequest {
    return ListHoldingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHoldingsRequest>, I>>(object: I): ListHoldingsRequest {
    const message = createBaseListHoldingsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.currency = object.currency ?? 0;
    return message;
  },
};

function createBaseListHoldingsResponse(): ListHoldingsResponse {
  return { holdings: [], nextPageToken: "" };
}

export const ListHoldingsResponse = {
  encode(message: ListHoldingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.holdings) {
      Holding.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHoldingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHoldingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.holdings.push(Holding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHoldingsResponse {
    return {
      holdings: globalThis.Array.isArray(object?.holdings) ? object.holdings.map((e: any) => Holding.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListHoldingsResponse): unknown {
    const obj: any = {};
    if (message.holdings?.length) {
      obj.holdings = message.holdings.map((e) => Holding.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHoldingsResponse>, I>>(base?: I): ListHoldingsResponse {
    return ListHoldingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHoldingsResponse>, I>>(object: I): ListHoldingsResponse {
    const message = createBaseListHoldingsResponse();
    message.holdings = object.holdings?.map((e) => Holding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetHoldingsStatisticsRequest(): GetHoldingsStatisticsRequest {
  return { filter: "" };
}

export const GetHoldingsStatisticsRequest = {
  encode(message: GetHoldingsStatisticsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHoldingsStatisticsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHoldingsStatisticsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHoldingsStatisticsRequest {
    return { filter: isSet(object.filter) ? globalThis.String(object.filter) : "" };
  },

  toJSON(message: GetHoldingsStatisticsRequest): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHoldingsStatisticsRequest>, I>>(base?: I): GetHoldingsStatisticsRequest {
    return GetHoldingsStatisticsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHoldingsStatisticsRequest>, I>>(object: I): GetHoldingsStatisticsRequest {
    const message = createBaseGetHoldingsStatisticsRequest();
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseGetHoldingsStatisticsResponse(): GetHoldingsStatisticsResponse {
  return { count: 0, totalMarketValues: [], totalPnls: [] };
}

export const GetHoldingsStatisticsResponse = {
  encode(message: GetHoldingsStatisticsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.count !== 0) {
      writer.uint32(8).int32(message.count);
    }
    for (const v of message.totalMarketValues) {
      Money.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.totalPnls) {
      PnL.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHoldingsStatisticsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHoldingsStatisticsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.count = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.totalMarketValues.push(Money.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.totalPnls.push(PnL.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHoldingsStatisticsResponse {
    return {
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      totalMarketValues: globalThis.Array.isArray(object?.totalMarketValues)
        ? object.totalMarketValues.map((e: any) => Money.fromJSON(e))
        : [],
      totalPnls: globalThis.Array.isArray(object?.totalPnls) ? object.totalPnls.map((e: any) => PnL.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetHoldingsStatisticsResponse): unknown {
    const obj: any = {};
    if (message.count !== undefined) {
      obj.count = Math.round(message.count);
    }
    if (message.totalMarketValues?.length) {
      obj.totalMarketValues = message.totalMarketValues.map((e) => Money.toJSON(e));
    }
    if (message.totalPnls?.length) {
      obj.totalPnls = message.totalPnls.map((e) => PnL.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHoldingsStatisticsResponse>, I>>(base?: I): GetHoldingsStatisticsResponse {
    return GetHoldingsStatisticsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHoldingsStatisticsResponse>, I>>(
    object: I,
  ): GetHoldingsStatisticsResponse {
    const message = createBaseGetHoldingsStatisticsResponse();
    message.count = object.count ?? 0;
    message.totalMarketValues = object.totalMarketValues?.map((e) => Money.fromPartial(e)) || [];
    message.totalPnls = object.totalPnls?.map((e) => PnL.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHolding(): Holding {
  return {
    name: "",
    chain: 0,
    basketToken: "",
    holdingWallet: "",
    quantity: undefined,
    averageBuyPrices: {},
    marketValues: {},
    pnls: {},
    ownershipPercentage: undefined,
    createTime: undefined,
    updateTime: undefined,
    averageBuyPrice: undefined,
    marketValue: undefined,
    pnl: undefined,
  };
}

export const Holding = {
  encode(message: Holding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.chain !== 0) {
      writer.uint32(16).int32(message.chain);
    }
    if (message.basketToken !== "") {
      writer.uint32(26).string(message.basketToken);
    }
    if (message.holdingWallet !== "") {
      writer.uint32(34).string(message.holdingWallet);
    }
    if (message.quantity !== undefined) {
      Quantity.encode(message.quantity, writer.uint32(42).fork()).ldelim();
    }
    Object.entries(message.averageBuyPrices).forEach(([key, value]) => {
      Holding_AverageBuyPricesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    Object.entries(message.marketValues).forEach(([key, value]) => {
      Holding_MarketValuesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    Object.entries(message.pnls).forEach(([key, value]) => {
      Holding_PnlsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).ldelim();
    });
    if (message.ownershipPercentage !== undefined) {
      Percentage.encode(message.ownershipPercentage, writer.uint32(74).fork()).ldelim();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(90).fork()).ldelim();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(98).fork()).ldelim();
    }
    if (message.averageBuyPrice !== undefined) {
      Money.encode(message.averageBuyPrice, writer.uint32(106).fork()).ldelim();
    }
    if (message.marketValue !== undefined) {
      Money.encode(message.marketValue, writer.uint32(114).fork()).ldelim();
    }
    if (message.pnl !== undefined) {
      PnLsByPeriod.encode(message.pnl, writer.uint32(122).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Holding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHolding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.chain = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.basketToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.holdingWallet = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.quantity = Quantity.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Holding_AverageBuyPricesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.averageBuyPrices[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Holding_MarketValuesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.marketValues[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = Holding_PnlsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.pnls[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ownershipPercentage = Percentage.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.averageBuyPrice = Money.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.marketValue = Money.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.pnl = PnLsByPeriod.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Holding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      chain: isSet(object.chain) ? chainTypeFromJSON(object.chain) : 0,
      basketToken: isSet(object.basketToken) ? globalThis.String(object.basketToken) : "",
      holdingWallet: isSet(object.holdingWallet) ? globalThis.String(object.holdingWallet) : "",
      quantity: isSet(object.quantity) ? Quantity.fromJSON(object.quantity) : undefined,
      averageBuyPrices: isObject(object.averageBuyPrices)
        ? Object.entries(object.averageBuyPrices).reduce<{ [key: string]: Money }>((acc, [key, value]) => {
          acc[key] = Money.fromJSON(value);
          return acc;
        }, {})
        : {},
      marketValues: isObject(object.marketValues)
        ? Object.entries(object.marketValues).reduce<{ [key: string]: Money }>((acc, [key, value]) => {
          acc[key] = Money.fromJSON(value);
          return acc;
        }, {})
        : {},
      pnls: isObject(object.pnls)
        ? Object.entries(object.pnls).reduce<{ [key: string]: PnLsByPeriod }>((acc, [key, value]) => {
          acc[key] = PnLsByPeriod.fromJSON(value);
          return acc;
        }, {})
        : {},
      ownershipPercentage: isSet(object.ownershipPercentage)
        ? Percentage.fromJSON(object.ownershipPercentage)
        : undefined,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      averageBuyPrice: isSet(object.averageBuyPrice) ? Money.fromJSON(object.averageBuyPrice) : undefined,
      marketValue: isSet(object.marketValue) ? Money.fromJSON(object.marketValue) : undefined,
      pnl: isSet(object.pnl) ? PnLsByPeriod.fromJSON(object.pnl) : undefined,
    };
  },

  toJSON(message: Holding): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.chain !== undefined) {
      obj.chain = chainTypeToJSON(message.chain);
    }
    if (message.basketToken !== undefined) {
      obj.basketToken = message.basketToken;
    }
    if (message.holdingWallet !== undefined) {
      obj.holdingWallet = message.holdingWallet;
    }
    if (message.quantity !== undefined) {
      obj.quantity = Quantity.toJSON(message.quantity);
    }
    if (message.averageBuyPrices) {
      const entries = Object.entries(message.averageBuyPrices);
      if (entries.length > 0) {
        obj.averageBuyPrices = {};
        entries.forEach(([k, v]) => {
          obj.averageBuyPrices[k] = Money.toJSON(v);
        });
      }
    }
    if (message.marketValues) {
      const entries = Object.entries(message.marketValues);
      if (entries.length > 0) {
        obj.marketValues = {};
        entries.forEach(([k, v]) => {
          obj.marketValues[k] = Money.toJSON(v);
        });
      }
    }
    if (message.pnls) {
      const entries = Object.entries(message.pnls);
      if (entries.length > 0) {
        obj.pnls = {};
        entries.forEach(([k, v]) => {
          obj.pnls[k] = PnLsByPeriod.toJSON(v);
        });
      }
    }
    if (message.ownershipPercentage !== undefined) {
      obj.ownershipPercentage = Percentage.toJSON(message.ownershipPercentage);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.averageBuyPrice !== undefined) {
      obj.averageBuyPrice = Money.toJSON(message.averageBuyPrice);
    }
    if (message.marketValue !== undefined) {
      obj.marketValue = Money.toJSON(message.marketValue);
    }
    if (message.pnl !== undefined) {
      obj.pnl = PnLsByPeriod.toJSON(message.pnl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Holding>, I>>(base?: I): Holding {
    return Holding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Holding>, I>>(object: I): Holding {
    const message = createBaseHolding();
    message.name = object.name ?? "";
    message.chain = object.chain ?? 0;
    message.basketToken = object.basketToken ?? "";
    message.holdingWallet = object.holdingWallet ?? "";
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Quantity.fromPartial(object.quantity)
      : undefined;
    message.averageBuyPrices = Object.entries(object.averageBuyPrices ?? {}).reduce<{ [key: string]: Money }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Money.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.marketValues = Object.entries(object.marketValues ?? {}).reduce<{ [key: string]: Money }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Money.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.pnls = Object.entries(object.pnls ?? {}).reduce<{ [key: string]: PnLsByPeriod }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = PnLsByPeriod.fromPartial(value);
      }
      return acc;
    }, {});
    message.ownershipPercentage = (object.ownershipPercentage !== undefined && object.ownershipPercentage !== null)
      ? Percentage.fromPartial(object.ownershipPercentage)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.averageBuyPrice = (object.averageBuyPrice !== undefined && object.averageBuyPrice !== null)
      ? Money.fromPartial(object.averageBuyPrice)
      : undefined;
    message.marketValue = (object.marketValue !== undefined && object.marketValue !== null)
      ? Money.fromPartial(object.marketValue)
      : undefined;
    message.pnl = (object.pnl !== undefined && object.pnl !== null) ? PnLsByPeriod.fromPartial(object.pnl) : undefined;
    return message;
  },
};

function createBaseHolding_AverageBuyPricesEntry(): Holding_AverageBuyPricesEntry {
  return { key: "", value: undefined };
}

export const Holding_AverageBuyPricesEntry = {
  encode(message: Holding_AverageBuyPricesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Money.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Holding_AverageBuyPricesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHolding_AverageBuyPricesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Money.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Holding_AverageBuyPricesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Money.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Holding_AverageBuyPricesEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Money.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Holding_AverageBuyPricesEntry>, I>>(base?: I): Holding_AverageBuyPricesEntry {
    return Holding_AverageBuyPricesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Holding_AverageBuyPricesEntry>, I>>(
    object: I,
  ): Holding_AverageBuyPricesEntry {
    const message = createBaseHolding_AverageBuyPricesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Money.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseHolding_MarketValuesEntry(): Holding_MarketValuesEntry {
  return { key: "", value: undefined };
}

export const Holding_MarketValuesEntry = {
  encode(message: Holding_MarketValuesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Money.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Holding_MarketValuesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHolding_MarketValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Money.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Holding_MarketValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Money.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Holding_MarketValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Money.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Holding_MarketValuesEntry>, I>>(base?: I): Holding_MarketValuesEntry {
    return Holding_MarketValuesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Holding_MarketValuesEntry>, I>>(object: I): Holding_MarketValuesEntry {
    const message = createBaseHolding_MarketValuesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Money.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseHolding_PnlsEntry(): Holding_PnlsEntry {
  return { key: "", value: undefined };
}

export const Holding_PnlsEntry = {
  encode(message: Holding_PnlsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      PnLsByPeriod.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Holding_PnlsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHolding_PnlsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = PnLsByPeriod.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Holding_PnlsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? PnLsByPeriod.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Holding_PnlsEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = PnLsByPeriod.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Holding_PnlsEntry>, I>>(base?: I): Holding_PnlsEntry {
    return Holding_PnlsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Holding_PnlsEntry>, I>>(object: I): Holding_PnlsEntry {
    const message = createBaseHolding_PnlsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? PnLsByPeriod.fromPartial(object.value)
      : undefined;
    return message;
  },
};

/** HoldingService contains the function to interact with the Holding of the spacebar */
export interface HoldingService {
  GetHolding(request: GetHoldingRequest): Promise<Holding>;
  ListHoldings(request: ListHoldingsRequest): Promise<ListHoldingsResponse>;
  /** GetHoldingsStatistics ListHoldings 와 같은 필터를 기준으로 Total Count, Total Market Value in USDC, Total Market Value in SOL 을 반환합니다. */
  GetHoldingsStatistics(request: GetHoldingsStatisticsRequest): Promise<GetHoldingsStatisticsResponse>;
}

export const HoldingServiceServiceName = "piedotfun.v1.HoldingService";
export class HoldingServiceClientImpl implements HoldingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || HoldingServiceServiceName;
    this.rpc = rpc;
    this.GetHolding = this.GetHolding.bind(this);
    this.ListHoldings = this.ListHoldings.bind(this);
    this.GetHoldingsStatistics = this.GetHoldingsStatistics.bind(this);
  }
  GetHolding(request: GetHoldingRequest): Promise<Holding> {
    const data = GetHoldingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetHolding", data);
    return promise.then((data) => Holding.decode(_m0.Reader.create(data)));
  }

  ListHoldings(request: ListHoldingsRequest): Promise<ListHoldingsResponse> {
    const data = ListHoldingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListHoldings", data);
    return promise.then((data) => ListHoldingsResponse.decode(_m0.Reader.create(data)));
  }

  GetHoldingsStatistics(request: GetHoldingsStatisticsRequest): Promise<GetHoldingsStatisticsResponse> {
    const data = GetHoldingsStatisticsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetHoldingsStatistics", data);
    return promise.then((data) => GetHoldingsStatisticsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
