# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ethereum.v1.chain import sign_pb2 as ethereum_dot_v1_dot_chain_dot_sign__pb2


class ChainSignServiceStub(object):
    """ChainSignService is the service that handles signing messages.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignWkeyMint = channel.unary_unary(
                '/ethereum.v1.chain.ChainSignService/SignWkeyMint',
                request_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignWKeyMintRequest.SerializeToString,
                response_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
                )
        self.SignKeyMint = channel.unary_unary(
                '/ethereum.v1.chain.ChainSignService/SignKeyMint',
                request_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignKeyMintRequest.SerializeToString,
                response_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureTypedResponse.FromString,
                )
        self.SignScoreMint = channel.unary_unary(
                '/ethereum.v1.chain.ChainSignService/SignScoreMint',
                request_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignScoreMintRequest.SerializeToString,
                response_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
                )
        self.SignMessage = channel.unary_unary(
                '/ethereum.v1.chain.ChainSignService/SignMessage',
                request_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignMessageRequest.SerializeToString,
                response_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
                )


class ChainSignServiceServicer(object):
    """ChainSignService is the service that handles signing messages.
    """

    def SignWkeyMint(self, request, context):
        """SignBadgeClaim signs a w key mint with the given EOA address.

        403 error will be returned if the given EOA address is on the whitelist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignKeyMint(self, request, context):
        """SignKeyMint signs a key mint with the given token id.

        403 error will be returned if the given profile address not not eligible to mint the badge.
        400 error will be returned if the given token id is invalid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignScoreMint(self, request, context):
        """SignScoreMint signs a score mint with the given profile address and score ID.

        Not implemented yet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignMessage(self, request, context):
        """SignMessage signs a message with arbitrary message.

        This rpc is not open to the public request and only used by the internal service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainSignServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignWkeyMint': grpc.unary_unary_rpc_method_handler(
                    servicer.SignWkeyMint,
                    request_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignWKeyMintRequest.FromString,
                    response_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.SerializeToString,
            ),
            'SignKeyMint': grpc.unary_unary_rpc_method_handler(
                    servicer.SignKeyMint,
                    request_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignKeyMintRequest.FromString,
                    response_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureTypedResponse.SerializeToString,
            ),
            'SignScoreMint': grpc.unary_unary_rpc_method_handler(
                    servicer.SignScoreMint,
                    request_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignScoreMintRequest.FromString,
                    response_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.SerializeToString,
            ),
            'SignMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMessage,
                    request_deserializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignMessageRequest.FromString,
                    response_serializer=ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ethereum.v1.chain.ChainSignService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChainSignService(object):
    """ChainSignService is the service that handles signing messages.
    """

    @staticmethod
    def SignWkeyMint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.v1.chain.ChainSignService/SignWkeyMint',
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignWKeyMintRequest.SerializeToString,
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignKeyMint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.v1.chain.ChainSignService/SignKeyMint',
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignKeyMintRequest.SerializeToString,
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureTypedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignScoreMint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.v1.chain.ChainSignService/SignScoreMint',
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignScoreMintRequest.SerializeToString,
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.v1.chain.ChainSignService/SignMessage',
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignMessageRequest.SerializeToString,
            ethereum_dot_v1_dot_chain_dot_sign__pb2.SignatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
