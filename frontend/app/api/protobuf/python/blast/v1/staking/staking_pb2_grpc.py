# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blast.v1.staking import staking_pb2 as blast_dot_v1_dot_staking_dot_staking__pb2


class StakingServiceStub(object):
    """StakingService contains the function to interact with the Staking of the spacebar
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStaking = channel.unary_unary(
                '/blast.v1.staking.StakingService/GetStaking',
                request_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.Staking.FromString,
                )
        self.ListStakings = channel.unary_unary(
                '/blast.v1.staking.StakingService/ListStakings',
                request_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsResponse.FromString,
                )
        self.GetStakingTotalAmount = channel.unary_unary(
                '/blast.v1.staking.StakingService/GetStakingTotalAmount',
                request_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountResponse.FromString,
                )


class StakingServiceServicer(object):
    """StakingService contains the function to interact with the Staking of the spacebar
    """

    def GetStaking(self, request, context):
        """GetStaking will return Staking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStakings(self, request, context):
        """ListStakings will return Stakings.
        reads across collections, reference: https://google.aip.dev/159
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStakingTotalAmount(self, request, context):
        """GetStakingTotalAmount will return total amount of all user's staking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StakingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStaking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStaking,
                    request_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingRequest.FromString,
                    response_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.Staking.SerializeToString,
            ),
            'ListStakings': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStakings,
                    request_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsRequest.FromString,
                    response_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsResponse.SerializeToString,
            ),
            'GetStakingTotalAmount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStakingTotalAmount,
                    request_deserializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountRequest.FromString,
                    response_serializer=blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blast.v1.staking.StakingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StakingService(object):
    """StakingService contains the function to interact with the Staking of the spacebar
    """

    @staticmethod
    def GetStaking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.staking.StakingService/GetStaking',
            blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingRequest.SerializeToString,
            blast_dot_v1_dot_staking_dot_staking__pb2.Staking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStakings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.staking.StakingService/ListStakings',
            blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsRequest.SerializeToString,
            blast_dot_v1_dot_staking_dot_staking__pb2.ListStakingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStakingTotalAmount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.staking.StakingService/GetStakingTotalAmount',
            blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountRequest.SerializeToString,
            blast_dot_v1_dot_staking_dot_staking__pb2.GetStakingTotalAmountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
