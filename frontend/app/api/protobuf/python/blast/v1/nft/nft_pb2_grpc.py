# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blast.v1.nft import nft_pb2 as blast_dot_v1_dot_nft_dot_nft__pb2


class NFTServiceStub(object):
    """NFTService contains the function to interact with the NFT of the spacebar
    It provides only the (explicit)SyncNFTs and ListNFTs API.
    Implicit sync is performed real-time/periodically while monitoring the blockchain.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNFT = channel.unary_unary(
                '/blast.v1.nft.NFTService/GetNFT',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.GetNFTRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.NFT.FromString,
                )
        self.ListNFTs = channel.unary_unary(
                '/blast.v1.nft.NFTService/ListNFTs',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.FromString,
                )
        self.ListOwners = channel.unary_unary(
                '/blast.v1.nft.NFTService/ListOwners',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersResponse.FromString,
                )
        self.ValidateNFTAccess = channel.unary_unary(
                '/blast.v1.nft.NFTService/ValidateNFTAccess',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessResponse.FromString,
                )
        self.ListNFTsDelegate = channel.unary_unary(
                '/blast.v1.nft.NFTService/ListNFTsDelegate',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsDelegateRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.FromString,
                )
        self.ValidateNFT = channel.unary_unary(
                '/blast.v1.nft.NFTService/ValidateNFT',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTResponse.FromString,
                )
        self.GetContract = channel.unary_unary(
                '/blast.v1.nft.NFTService/GetContract',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.GetContractRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.NFTContract.FromString,
                )
        self.CheckHolderOfContract = channel.unary_unary(
                '/blast.v1.nft.NFTService/CheckHolderOfContract',
                request_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractRequest.SerializeToString,
                response_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractResponse.FromString,
                )


class NFTServiceServicer(object):
    """NFTService contains the function to interact with the NFT of the spacebar
    It provides only the (explicit)SyncNFTs and ListNFTs API.
    Implicit sync is performed real-time/periodically while monitoring the blockchain.
    """

    def GetNFT(self, request, context):
        """GetNFT will return NFT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNFTs(self, request, context):
        """ListNFTs will return NFTs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOwners(self, request, context):
        """ListOwners will return the owner of the NFT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateNFTAccess(self, request, context):
        """ValidateNFTAccessRequest will validate user address access to the NFT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNFTsDelegate(self, request, context):
        """ListNFTsDelegate will return NFTs using Delegate Cash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateNFT(self, request, context):
        """ValidateNFT will validate given NFT is valid and image is available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContract(self, request, context):
        """GetContract will return NFTContract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHolderOfContract(self, request, context):
        """CheckHolderOfContract will check if the wallet address is the holder of the contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NFTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNFT,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.GetNFTRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.NFT.SerializeToString,
            ),
            'ListNFTs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNFTs,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.SerializeToString,
            ),
            'ListOwners': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOwners,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersResponse.SerializeToString,
            ),
            'ValidateNFTAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateNFTAccess,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessResponse.SerializeToString,
            ),
            'ListNFTsDelegate': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNFTsDelegate,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsDelegateRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.SerializeToString,
            ),
            'ValidateNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateNFT,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTResponse.SerializeToString,
            ),
            'GetContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContract,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.GetContractRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.NFTContract.SerializeToString,
            ),
            'CheckHolderOfContract': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHolderOfContract,
                    request_deserializer=blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractRequest.FromString,
                    response_serializer=blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blast.v1.nft.NFTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NFTService(object):
    """NFTService contains the function to interact with the NFT of the spacebar
    It provides only the (explicit)SyncNFTs and ListNFTs API.
    Implicit sync is performed real-time/periodically while monitoring the blockchain.
    """

    @staticmethod
    def GetNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/GetNFT',
            blast_dot_v1_dot_nft_dot_nft__pb2.GetNFTRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.NFT.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNFTs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/ListNFTs',
            blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOwners(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/ListOwners',
            blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.ListOwnersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateNFTAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/ValidateNFTAccess',
            blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNFTsDelegate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/ListNFTsDelegate',
            blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsDelegateRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.ListNFTsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/ValidateNFT',
            blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.ValidateNFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/GetContract',
            blast_dot_v1_dot_nft_dot_nft__pb2.GetContractRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.NFTContract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHolderOfContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blast.v1.nft.NFTService/CheckHolderOfContract',
            blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractRequest.SerializeToString,
            blast_dot_v1_dot_nft_dot_nft__pb2.CheckHolderOfContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
