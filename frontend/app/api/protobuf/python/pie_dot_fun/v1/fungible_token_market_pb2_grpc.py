# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pie_dot_fun.v1 import fungible_token_market_pb2 as pie__dot__fun_dot_v1_dot_fungible__token__market__pb2


class FungibleTokenMarketServiceStub(object):
    """FungibleTokenMarketService is the service for managing fungible token markets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFungibleTokenMarket = channel.unary_unary(
                '/piedotfun.v1.FungibleTokenMarketService/GetFungibleTokenMarket',
                request_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.FromString,
                )
        self.GetOrCreateFungibleTokenMarket = channel.unary_unary(
                '/piedotfun.v1.FungibleTokenMarketService/GetOrCreateFungibleTokenMarket',
                request_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.FromString,
                )
        self.ListFungibleTokenMarkets = channel.unary_unary(
                '/piedotfun.v1.FungibleTokenMarketService/ListFungibleTokenMarkets',
                request_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsResponse.FromString,
                )


class FungibleTokenMarketServiceServicer(object):
    """FungibleTokenMarketService is the service for managing fungible token markets.
    """

    def GetFungibleTokenMarket(self, request, context):
        """GetFungibleTokenMarket returns the market for the given fungible token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrCreateFungibleTokenMarket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFungibleTokenMarkets(self, request, context):
        """ListFungibleTokenMarkets returns the list of markets for the given fungible tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FungibleTokenMarketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFungibleTokenMarket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFungibleTokenMarket,
                    request_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.SerializeToString,
            ),
            'GetOrCreateFungibleTokenMarket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrCreateFungibleTokenMarket,
                    request_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.SerializeToString,
            ),
            'ListFungibleTokenMarkets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFungibleTokenMarkets,
                    request_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'piedotfun.v1.FungibleTokenMarketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FungibleTokenMarketService(object):
    """FungibleTokenMarketService is the service for managing fungible token markets.
    """

    @staticmethod
    def GetFungibleTokenMarket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.FungibleTokenMarketService/GetFungibleTokenMarket',
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrCreateFungibleTokenMarket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.FungibleTokenMarketService/GetOrCreateFungibleTokenMarket',
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.GetFungibleTokenMarketRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.FungibleTokenMarket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFungibleTokenMarkets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.FungibleTokenMarketService/ListFungibleTokenMarkets',
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_fungible__token__market__pb2.ListFungibleTokensMarketsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
