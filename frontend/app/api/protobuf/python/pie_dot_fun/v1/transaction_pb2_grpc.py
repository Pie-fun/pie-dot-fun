# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pie_dot_fun.v1 import transaction_pb2 as pie__dot__fun_dot_v1_dot_transaction__pb2


class TransactionServiceStub(object):
    """TransactionService contains the function to interact with the Transaction of the spacebar
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTransaction = channel.unary_unary(
                '/piedotfun.v1.TransactionService/GetTransaction',
                request_serializer=pie__dot__fun_dot_v1_dot_transaction__pb2.GetTransactionRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_transaction__pb2.Transaction.FromString,
                )
        self.ListTransactions = channel.unary_unary(
                '/piedotfun.v1.TransactionService/ListTransactions',
                request_serializer=pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsResponse.FromString,
                )


class TransactionServiceServicer(object):
    """TransactionService contains the function to interact with the Transaction of the spacebar
    """

    def GetTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=pie__dot__fun_dot_v1_dot_transaction__pb2.GetTransactionRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_transaction__pb2.Transaction.SerializeToString,
            ),
            'ListTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTransactions,
                    request_deserializer=pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'piedotfun.v1.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """TransactionService contains the function to interact with the Transaction of the spacebar
    """

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.TransactionService/GetTransaction',
            pie__dot__fun_dot_v1_dot_transaction__pb2.GetTransactionRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.TransactionService/ListTransactions',
            pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_transaction__pb2.ListTransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
