# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pie_dot_fun.v1 import fungible_token_pb2 as pie__dot__fun_dot_v1_dot_fungible__token__pb2


class FungibleTokenServiceStub(object):
    """FungibleTokenService contains the function to interact with the FungibleToken of the spacebar
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFungibleToken = channel.unary_unary(
                '/piedotfun.v1.FungibleTokenService/GetFungibleToken',
                request_serializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.GetFungibleTokenRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.FungibleToken.FromString,
                )
        self.ListFungibleTokens = channel.unary_unary(
                '/piedotfun.v1.FungibleTokenService/ListFungibleTokens',
                request_serializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensResponse.FromString,
                )


class FungibleTokenServiceServicer(object):
    """FungibleTokenService contains the function to interact with the FungibleToken of the spacebar
    """

    def GetFungibleToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFungibleTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FungibleTokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFungibleToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFungibleToken,
                    request_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.GetFungibleTokenRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.FungibleToken.SerializeToString,
            ),
            'ListFungibleTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFungibleTokens,
                    request_deserializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'piedotfun.v1.FungibleTokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FungibleTokenService(object):
    """FungibleTokenService contains the function to interact with the FungibleToken of the spacebar
    """

    @staticmethod
    def GetFungibleToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.FungibleTokenService/GetFungibleToken',
            pie__dot__fun_dot_v1_dot_fungible__token__pb2.GetFungibleTokenRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_fungible__token__pb2.FungibleToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFungibleTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.FungibleTokenService/ListFungibleTokens',
            pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_fungible__token__pb2.ListFungibleTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
