# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pie_dot_fun.v1.chain import query_pb2 as pie__dot__fun_dot_v1_dot_chain_dot_query__pb2


class ChainQueryServiceStub(object):
    """ChainQueryService is the service that handles all chain requests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryFungibleTokenDecimals = channel.unary_unary(
                '/piedotfun.v1.chain.ChainQueryService/QueryFungibleTokenDecimals',
                request_serializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsResponse.FromString,
                )
        self.QueryFungibleTokenMetadata = channel.unary_unary(
                '/piedotfun.v1.chain.ChainQueryService/QueryFungibleTokenMetadata',
                request_serializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataRequest.SerializeToString,
                response_deserializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataResponse.FromString,
                )


class ChainQueryServiceServicer(object):
    """ChainQueryService is the service that handles all chain requests.
    """

    def QueryFungibleTokenDecimals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryFungibleTokenMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainQueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryFungibleTokenDecimals': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryFungibleTokenDecimals,
                    request_deserializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsResponse.SerializeToString,
            ),
            'QueryFungibleTokenMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryFungibleTokenMetadata,
                    request_deserializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataRequest.FromString,
                    response_serializer=pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'piedotfun.v1.chain.ChainQueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChainQueryService(object):
    """ChainQueryService is the service that handles all chain requests.
    """

    @staticmethod
    def QueryFungibleTokenDecimals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.chain.ChainQueryService/QueryFungibleTokenDecimals',
            pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenDecimalsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryFungibleTokenMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piedotfun.v1.chain.ChainQueryService/QueryFungibleTokenMetadata',
            pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataRequest.SerializeToString,
            pie__dot__fun_dot_v1_dot_chain_dot_query__pb2.QueryFungibleTokenMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
