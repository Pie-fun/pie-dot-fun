// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/game/game.proto

/* eslint-disable */

export const protobufPackage = "blast.v1.game";

export enum ClientMessageType {
  CLIENT_MESSAGE_TYPE_UNSPECIFIED = "CLIENT_MESSAGE_TYPE_UNSPECIFIED",
  CLIENT_CONNECT = "CLIENT_CONNECT",
  /** CLIENT_DISCONNECT - DEPRECATED - Use CLIENT_TERMINATE instead for permanent disconnection */
  CLIENT_DISCONNECT = "CLIENT_DISCONNECT",
  /**
   * CLIENT_TERMINATE - Terminate the connection which means delete session permanently
   * The client should send this message when the client wants to terminate the connection
   * Disconnected connections other than this message will be considered as a temporary disconnection (soft delete) and can be reonnectable
   * If want to reconnect, the client should connect with the same auth token that was used to create the session (CLIENT_CONNECT)
   */
  CLIENT_TERMINATE = "CLIENT_TERMINATE",
  CLIENT_START_GAME = "CLIENT_START_GAME",
  CLIENT_END_GAME = "CLIENT_END_GAME",
  CLIENT_TAKE_STAR = "CLIENT_TAKE_STAR",
  CLIENT_TAKE_BLAST_GOLD = "CLIENT_TAKE_BLAST_GOLD",
  CLIENT_DESTROY_CAPSULE = "CLIENT_DESTROY_CAPSULE",
  CLIENT_DESTROY_METEOR = "CLIENT_DESTROY_METEOR",
  CLIENT_SHOOT_BULLET = "CLIENT_SHOOT_BULLET",
  CLIENT_EMPLOY_BOOST = "CLIENT_EMPLOY_BOOST",
  CLIENT_SPACESHIP_POSITION = "CLIENT_SPACESHIP_POSITION",
  CLIENT_SPACESHIP_EVENT = "CLIENT_SPACESHIP_EVENT",
  CLIENT_KEYBOARD_EVENT = "CLIENT_KEYBOARD_EVENT",
  CLIENT_ALERT_SUSPICIOUS_USER = "CLIENT_ALERT_SUSPICIOUS_USER",
}

export enum ServerMessageType {
  SERVER_MESSAGE_TYPE_UNSPECIFIED = "SERVER_MESSAGE_TYPE_UNSPECIFIED",
  SERVER_CONNECT = "SERVER_CONNECT",
  SERVER_TERMINATE = "SERVER_TERMINATE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  SERVER_START_GAME = "SERVER_START_GAME",
  SERVER_END_GAME = "SERVER_END_GAME",
  SERVER_TAKE_STAR = "SERVER_TAKE_STAR",
  SERVER_TAKE_BLAST_GOLD = "SERVER_TAKE_BLAST_GOLD",
  SERVER_DESTROY_CAPSULE = "SERVER_DESTROY_CAPSULE",
  SERVER_DESTROY_METEOR = "SERVER_DESTROY_METEOR",
  SERVER_SHOOT_BULLET = "SERVER_SHOOT_BULLET",
  SERVER_EMPLOY_BOOST = "SERVER_EMPLOY_BOOST",
  SERVER_SPACESHIP_POSITION = "SERVER_SPACESHIP_POSITION",
  SERVER_SPACESHIP_EVENT = "SERVER_SPACESHIP_EVENT",
  SERVER_KEYBOARD_EVENT = "SERVER_KEYBOARD_EVENT",
  SERVER_ALERT_SUSPICIOUS_USER = "SERVER_ALERT_SUSPICIOUS_USER",
}

export enum ServerAckType {
  SERVER_RESPONSE_TYPE_UNSPECIFIED = "SERVER_RESPONSE_TYPE_UNSPECIFIED",
  /** ACK - Message sent to client when message from client is accepted */
  ACK = "ACK",
  /** NACK - Message sent to client when message from client is rejected */
  NACK = "NACK",
  /** NACK_UNAUTHENTICATED -  */
  NACK_UNAUTHENTICATED = "NACK_UNAUTHENTICATED",
  /** NACK_UNAUTORIZAED -  */
  NACK_UNAUTORIZAED = "NACK_UNAUTORIZAED",
  /** NACK_SESSION_ALREADY_EXISTS -  */
  NACK_SESSION_ALREADY_EXISTS = "NACK_SESSION_ALREADY_EXISTS",
  /** NACK_DAILY_ROUND_EXCEEDED -  */
  NACK_DAILY_ROUND_EXCEEDED = "NACK_DAILY_ROUND_EXCEEDED",
  /** NACK_BLAST_GOLD_NOT_ACQUIRABLE -  */
  NACK_BLAST_GOLD_NOT_ACQUIRABLE = "NACK_BLAST_GOLD_NOT_ACQUIRABLE",
  /** NACK_PLAYTIME_OUT -  */
  NACK_PLAYTIME_OUT = "NACK_PLAYTIME_OUT",
  /** NACK_SYBIL_USER -  */
  NACK_SYBIL_USER = "NACK_SYBIL_USER",
  /** NACK_SESSION_NOT_FOUND -  */
  NACK_SESSION_NOT_FOUND = "NACK_SESSION_NOT_FOUND",
  /** ERR - Message sent to client when internal server error occurs */
  ERR = "ERR",
}

export enum CapsuleRewardType {
  CAPSULE_REWARD_TYPE_UNSPECIFIED = "CAPSULE_REWARD_TYPE_UNSPECIFIED",
  CAPSULE_REWARD_STAR = "CAPSULE_REWARD_STAR",
  CAPSULE_REWARD_BLAST_GOLD = "CAPSULE_REWARD_BLAST_GOLD",
}

export enum SuspiciousReason {
  SUSPICIOUS_REASON_UNSPECIFIED = "SUSPICIOUS_REASON_UNSPECIFIED",
  SUSPICIOUS_REASON_DEBUG_CONSOLE_OPENED = "SUSPICIOUS_REASON_DEBUG_CONSOLE_OPENED",
}

export interface GetDailyPlayCountRequest {
  /** Format: users/{address} */
  user: string;
}

export interface GetDailyPlayCountResponse {
  /** The daily play count of the user. */
  dailyPlayCount: number;
  /** The daily play count of the user. */
  dailyPlayCountQuota: number;
}

export interface ClientMessage {
  msgType: ClientMessageType;
  payload: string;
}

export interface ServerMessage {
  msgType: ServerMessageType;
  ackType: ServerAckType;
  payload: string;
}

export interface ConnectServerPayload {
  sessionId: string;
  game: Game | undefined;
}

export interface ReconnectServerPayload {
  sessionId: string;
  game: Game | undefined;
}

export interface EndGameServerPayload {
  gameId: string;
  score: number;
  blastGold: number;
}

export interface TakeStarClientPayload {
  starId: string;
}

export interface TakeStarServerPayload {
  starId: string;
  totalScore: number;
}

export interface TakeBlastGoldClientPayload {
  blastGoldId: string;
}

export interface DestroyCapsuleClientPayload {
  capsuleId: string;
}

export interface DestroyMeteorClientPayload {
  position: Position | undefined;
}

export interface SpceshipPosiitionClientPayload {
  position: Position | undefined;
}

export interface SpaceshipEventClientPayload {
  event: string;
}

export interface KeyboardEventClientPayload {
  event: string;
}

export interface ShootBulletClientPayload {
  remainingBullets: number;
}

export interface EmployBoostClientPayload {
  remainingBoosts: number;
}

export interface LifeStatusClientPayload {
  remainingLives: number;
}

export interface AlertSuspiciousUserClientPayload {
  reason: SuspiciousReason;
}

export interface Star {
  id: string;
  capsuleId?: string | undefined;
  position: Position | undefined;
  score: number;
}

export interface Capsule {
  id: string;
  position: Position | undefined;
  rewardType: CapsuleRewardType;
}

export interface BlastGold {
  id: string;
  capsuleId: string;
  amount: number;
}

export interface Meteor {
  id: string;
  position: Position | undefined;
}

export interface Position {
  x: number;
  y: number;
}

export interface Map {
  stars: Star[];
  capsules: Capsule[];
  blastGolds: BlastGold[];
  meteors: Meteor[];
}

export interface Spaceship {
  position: Position | undefined;
  booster: number;
  bullet: number;
}

export interface Game {
  id: string;
  map: Map | undefined;
  spaceship: Spaceship | undefined;
  score: number;
  createTime: string | undefined;
  startTime: string | undefined;
}

/** GameService contains the function to interact with the Game of the spacebar */
export interface GameService {
  /** GetUserDailyPlayCount will return the User's daily play count. */
  GetDailyPlayCount(request: GetDailyPlayCountRequest): Promise<GetDailyPlayCountResponse>;
}
