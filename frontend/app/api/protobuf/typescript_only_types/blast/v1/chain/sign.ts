// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/chain/sign.proto

/* eslint-disable */

export const protobufPackage = "blast.v1.chain";

export interface SignMessageRequest {
  message: string;
}

export interface SignatureResponse {
  signature: string;
  message: string;
}

export interface SignatureTypedResponse {
  signature: string;
  message: { [key: string]: string };
}

export interface SignatureTypedResponse_MessageEntry {
  key: string;
  value: string;
}

export interface MintAndCreateSquareParams {
  user: string;
  /** uint64 can be overflowed */
  minStaking: string;
  signatureId: string;
  timestamp: number;
  nonce: string;
}

export interface SignMintSquareRequest {
  params: MintAndCreateSquareParams | undefined;
}

export interface SignMintSquareResponse {
  signature: string;
  params: MintAndCreateSquareParams | undefined;
}

export interface JoinSquareParams {
  user: string;
  squareId: number;
  timestamp: number;
  nonce: string;
}

export interface SignJoinSquareRequest {
  params: JoinSquareParams | undefined;
}

export interface SignJoinSquareResponse {
  signature: string;
  params: JoinSquareParams | undefined;
}

export interface TransferSquareParams {
  user: string;
  /** token id of the user's current square */
  from: number;
  /** token id of the target square */
  to: number;
  timestamp: number;
  nonce: string;
}

export interface SignTransferSquareRequest {
  params: TransferSquareParams | undefined;
}

export interface SignTransferSquareResponse {
  signature: string;
  params: TransferSquareParams | undefined;
}

export interface UploadScoreParams {
  player: string;
  gameCode: number;
  squareIdOrZero: number;
  score: number;
  gameId: string;
  timestamp: number;
  nonce: string;
}

export interface SignUploadScoreRequest {
  params: UploadScoreParams | undefined;
}

export interface SignUploadScoreResponse {
  signature: string;
  params: UploadScoreParams | undefined;
}

/** ChainSignService is the service that handles signing messages. */
export interface ChainSignService {
  /**
   * SignMessage signs a message with arbitrary message.
   *
   * This rpc is not open to the public request and only used by the internal service.
   */
  SignMessage(request: SignMessageRequest): Promise<SignatureResponse>;
  /**
   * SignMintSquare signs a square mint with the given parameters.
   *
   * 403 error will be returned if the given owner address not not eligible to mint the square.
   */
  SignMintSquare(request: SignMintSquareRequest): Promise<SignMintSquareResponse>;
  /** SignJoinSquare signs a square mint with the given parameters. */
  SignJoinSquare(request: SignJoinSquareRequest): Promise<SignJoinSquareResponse>;
  /** SignTransferSquare signs a square mint with the given parameters. */
  SignTransferSquare(request: SignTransferSquareRequest): Promise<SignTransferSquareResponse>;
  /** SignUploadScore signs a score creation with the given parameters. */
  SignUploadScore(request: SignUploadScoreRequest): Promise<SignUploadScoreResponse>;
}
