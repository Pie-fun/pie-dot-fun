// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/referral/referral.proto

/* eslint-disable */

export const protobufPackage = "blast.v1.referral";

export enum ReferralState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** DEACTIVATED - Referral code was deactivated. */
  DEACTIVATED = "DEACTIVATED",
  /** ACTIVATED - Referral code was activated. */
  ACTIVATED = "ACTIVATED",
}

/**
 * ListReferralsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListReferralsRequest {
  /**
   * The maximum number of users to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListReferrals` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * user_address
   *   * Equal`
   * * state
   *   * Equal`
   *
   * Examples
   * * name="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442/referrals"
   * * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * state=ACTIVATED
   */
  filter: string;
}

/**
 * ListReferralsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListReferralsResponse {
  /** The list of rows that matched the query. */
  referrals: Referral[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface GetReferralRequest {
  /**
   * The name of the referral to retrieve.
   * Format: users/{address}/referrals
   */
  referral: string;
}

/** RefferedByRequest */
export interface RefferedByRequest {
  /**
   * The name of the referral to retrieve.
   * Format: users/{address}/referrals
   */
  referral: string;
  code: string;
}

export interface Referral {
  /**
   * The resource name of the Referral.
   * Format: users/{address}/referrals
   */
  name: string;
  /**  */
  userAddress: string;
  /**  */
  state: ReferralState;
  collection: string;
  referredBy?: ReferredBy | undefined;
  referred?: Referred | undefined;
}

export interface ReferredBy {
  code: string;
  userAddress: string;
}

export interface Referred {
  code: string;
  sameCollection: number;
  otherCollection: number;
}

export interface Reference {
  referrer: string;
  referredBy: string;
  sameCollection: boolean;
  createTime: string | undefined;
}

/** ReferralService contains the function to interact with the Referral of the spacebar */
export interface ReferralService {
  /** GetReferral will return Referral. */
  GetReferral(request: GetReferralRequest): Promise<Referral>;
  /**
   * ListReferrals
   * reads across collections, reference: https://google.aip.dev/159
   */
  ListReferrals(request: ListReferralsRequest): Promise<ListReferralsResponse>;
  ReferredBy(request: RefferedByRequest): Promise<Referral>;
}
