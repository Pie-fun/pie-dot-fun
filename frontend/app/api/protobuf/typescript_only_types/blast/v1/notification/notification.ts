// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/notification/notification.proto

/* eslint-disable */
import { type Empty } from "../../../google/protobuf/empty";

export const protobufPackage = "blast.v1.notification";

/** Type of the notification. */
export enum NotificationType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** INFO - Plain text info message. */
  INFO = "INFO",
  /** INFO_POINTS_GIVEN - DEPRECATED: Use INFO_SPACEBAR_POINTS_GIVEN instead. */
  INFO_POINTS_GIVEN = "INFO_POINTS_GIVEN",
  INFO_SPACEBAR_POINTS_GIVEN = "INFO_SPACEBAR_POINTS_GIVEN",
  INFO_BLAST_GOLD_GIVEN = "INFO_BLAST_GOLD_GIVEN",
  INFO_BLAST_TOKEN_GIVEN = "INFO_BLAST_TOKEN_GIVEN",
}

/** Action type that can be performed on the notification. */
export enum NotificationAction {
  /** ACTION_UNSPECIFIED - default value. this value is unused. */
  ACTION_UNSPECIFIED = "ACTION_UNSPECIFIED",
  /** NO_OP - No operation. */
  NO_OP = "NO_OP",
  /** NAVIGATE_POINTS_PAGE - Navigate to the points page. */
  NAVIGATE_POINTS_PAGE = "NAVIGATE_POINTS_PAGE",
}

/** State of the notification. */
export enum NotificationState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** CREATED -  */
  CREATED = "CREATED",
  /** ACKNOWLEDGED -  */
  ACKNOWLEDGED = "ACKNOWLEDGED",
  /** EXPIRED -  */
  EXPIRED = "EXPIRED",
}

export enum NotificationContentIcon {
  /** ICON_UNSPECIFIED - default value. this value is unused. */
  ICON_UNSPECIFIED = "ICON_UNSPECIFIED",
  ICON_SPACEBAR_POINTS = "ICON_SPACEBAR_POINTS",
  ICON_BLAST_GOLD = "ICON_BLAST_GOLD",
  ICON_BLAST_TOKEN = "ICON_BLAST_TOKEN",
}

export interface ListNotificationsRequest {
  /**
   * The resource name of User.
   * User is required.
   * Format: users/{address}
   */
  parent: string;
  /**
   * The maximum number of items to return. The service may return fewer than this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListNotifications` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * state
   *   * `Equal`
   * * type
   *   * `Equal`
   *
   * Examples
   * * state=CREATED
   * * type=INFO_POINTS_GIVEN
   */
  filter: string;
}

export interface ListNotificationsResponse {
  notifications: Notification[];
  nextPageToken: string;
}

export interface AcknowledgeNotificationRequest {
  name: string;
}

export interface Notification {
  /**
   * The resource name of the Notification.
   * Format: users/{user_address}/notifications/{id}
   */
  name: string;
  /**
   * The resource name of User.
   * Format: users/{address}
   */
  user: string;
  /** The id of Notification. */
  id: number;
  type: NotificationType;
  action: NotificationAction;
  state: NotificationState;
  icon: NotificationContentIcon;
  title: string;
  body: string;
  metadata: { [key: string]: string };
  /**
   * The created time of Notification.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The expire time of Notification if exists.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  expireTime?:
    | string
    | undefined;
  /** The acknowledged time of Notification. */
  acknowledgeTime?: string | undefined;
}

export interface Notification_MetadataEntry {
  key: string;
  value: string;
}

/** NotificationService contains the function to interact with the Notification of the spacebar */
export interface NotificationService {
  /** Signin signs in a user and returns a session id. */
  ListNotifications(request: ListNotificationsRequest): Promise<ListNotificationsResponse>;
  /** AcknowledgeNotification acknowledges a notification. */
  AcknowledgeNotification(request: AcknowledgeNotificationRequest): Promise<Empty>;
}
