// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/blastpoints/blastpoints.proto

/* eslint-disable */

export const protobufPackage = "blast.v1.blastpoints";

export enum BlastPointsType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  LIQUIDITY = "LIQUIDITY",
  DEVELOPER = "DEVELOPER",
}

export enum BlastPointsTransferType {
  /** TRANSFER_UNSPECIFIED - default value. this value is unused. */
  TRANSFER_UNSPECIFIED = "TRANSFER_UNSPECIFIED",
  POINTS_STAKING = "POINTS_STAKING",
  GOLD_REFERRAL = "GOLD_REFERRAL",
  GOLD_RAFFLE = "GOLD_RAFFLE",
  GOLD_WEEKLY_SPACEBAR_POINTS = "GOLD_WEEKLY_SPACEBAR_POINTS",
  GOLD_SCORE_UPLOAD = "GOLD_SCORE_UPLOAD",
  GOLD_SCORE_RANKINGS_WINNER = "GOLD_SCORE_RANKINGS_WINNER",
  GOLD_COMMUNITY_EVENT = "GOLD_COMMUNITY_EVENT",
  GOLD_SS_CHALLENGE_WINNER = "GOLD_SS_CHALLENGE_WINNER",
  GOLD_SS_INVITATIONAL = "GOLD_SS_INVITATIONAL",
}

export enum BlastPointsBatchState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** PENDING - The batch is pending. */
  PENDING = "PENDING",
  /** CANCELLED - The batch is cancelled. */
  CANCELLED = "CANCELLED",
  /** FINALIZING - The batch is finalizing. */
  FINALIZING = "FINALIZING",
  /** FINALIZED - The batch is finalized. */
  FINALIZED = "FINALIZED",
}

export enum ReservationType {
  /** RESERVATION_TYPE_UNSPECIFIED - default value. this value is unused. */
  RESERVATION_TYPE_UNSPECIFIED = "RESERVATION_TYPE_UNSPECIFIED",
  WEEKLY_SPACEBAR_POINTS = "WEEKLY_SPACEBAR_POINTS",
  REFERREE_WITH_STAKING = "REFERREE_WITH_STAKING",
  SCORE_RANKINGS_WINNER = "SCORE_RANKINGS_WINNER",
  SCORE_UPLOAD_BACKFILL = "SCORE_UPLOAD_BACKFILL",
  COMMUNITY_EVENT_WINNER = "COMMUNITY_EVENT_WINNER",
  SS_CHALLENGE_WINNER = "SS_CHALLENGE_WINNER",
  SS_INVITATIONAL = "SS_INVITATIONAL",
}

export enum ReservationState {
  /** RESERVATION_STATE_UNSPECIFIED - default value. this value is unused. */
  RESERVATION_STATE_UNSPECIFIED = "RESERVATION_STATE_UNSPECIFIED",
  RESERVED = "RESERVED",
  TRANSFERRED = "TRANSFERRED",
}

export interface GetBlastPointsRequest {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   */
  blastPoints: string;
}

/** GetBlastBalanceRequest this rpc only can be accessed by the admin role */
export interface GetBlastBalanceRequest {
  blastBalance: string;
  /**
   * The contract address of the token.
   * This field is required if the blast_balance has skipped the blast_points field.
   */
  contractAddress: string;
  /** Which phase of blast points API */
  phase: number;
}

export interface ListAllPendingTransfersRequest {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   */
  blastPoints: string;
  /**
   * The type of the points to retrieve.
   * IF not set, it will return LIQUIDITY points.
   */
  pointsType: BlastPointsType;
}

export interface ListAllPendingTransfersResponse {
  /** The list of rows that matched the query. */
  transfers: Transfer[];
}

export interface BlastPoints {
  /**
   * The resource name of the Points.
   * Format: users/{address}/blastPoints
   */
  name: string;
  /**  */
  userAddress: string;
  /** DEPRECATED in favor of phase1.liquidity_points */
  liquidityPoints: number;
  /** DEPRECATED in favor of phase1.developer_points */
  developerPoints: number;
  phase1: Points | undefined;
  phase2: Points | undefined;
}

export interface Points {
  liquidityPoints: number;
  developerPoints: number;
}

export interface Transfer {
  /**  */
  userAddress: string;
  state: BlastPointsBatchState;
  pointsType: BlastPointsType;
  points: number;
  createTime: string | undefined;
  phase: number;
  transferType: BlastPointsTransferType;
}

export interface TransferBatch {
  batchId: string;
  contractAddress: string;
  state: BlastPointsBatchState;
  pointsType: BlastPointsType;
  transfers: Transfer[];
  totalPoints: number;
  createTime: string | undefined;
  phase: number;
}

export interface BlastBalance {
  address: string;
  liquidity: Balance | undefined;
  developer: Balance | undefined;
}

export interface Balance {
  available: string;
  pendingSent: string;
  earnedCumulative: string;
  receivedCumulative: string;
  finalizedSentCumulative: string;
}

/** BlastGoldReservation */
export interface BlastGoldReservation {
  /**
   * The resource name of the BlastGoldReservation.
   * Format: blastGoldReservations/{blast_gold_reservation}
   */
  name: string;
  /** The user address of the user to reserve the points. */
  userAddress: string;
  /** The amount of points to reserve. */
  amount: string;
  /** The type of the reservation. */
  reservationType: ReservationType;
  /** The state of the reservation. */
  state: ReservationState;
  /** The create time of the reservation. */
  createTime:
    | string
    | undefined;
  /** The transfer time of the reservation. */
  transferTime: string | undefined;
}

/** BatchCreateBlastGoldReservationsRequest */
export interface BatchCreateBlastGoldReservationsRequest {
  requests: CreateBlastGoldReservationRequest[];
}

/** CreateBlastGoldReservationRequest */
export interface CreateBlastGoldReservationRequest {
  reservation: BlastGoldReservation | undefined;
}

/** BatchCreateBlastGoldReservationsResponse */
export interface BatchCreateBlastGoldReservationsResponse {
  reservations: BlastGoldReservation[];
}

/** ListBlastGoldReservationsRequest */
export interface ListBlastGoldReservationsRequest {
  /**
   * The maximum number of BlastGoldReservations to return. The service may return fewer than
   * this value.
   * If unspecified, at most 100 rows will be returned.
   * The maximum value is 1000.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListBlastGoldReservationsRequest` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /** filter */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is ascending by create_time
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "create_time"
   *
   * Examples
   * * order_by=create_time desc
   */
  orderBy: string;
}

/** ListBlastGoldReservationsResponse */
export interface ListBlastGoldReservationsResponse {
  /** The list of rows that matched the query. */
  reservations: BlastGoldReservation[];
  /** The token to retrieve the next page of results, or empty if there are no more results. */
  nextPageToken: string;
}

/** TransferReservedBlastGoldsRequest */
export interface TransferReservedBlastGoldsRequest {
  /** type of the reservation to transfer */
  reservationType: ReservationType;
}

/** TransferReservedBlastGoldsResponse */
export interface TransferReservedBlastGoldsResponse {
  /** transfered reservations */
  reservations: BlastGoldReservation[];
}

/** PointsService contains the function to interact with the Points of the spacebar */
export interface PointsService {
  /** GetBlastPoints */
  GetBlastPoints(request: GetBlastPointsRequest): Promise<BlastPoints>;
  /** ListAllPendingTransferBatches */
  ListAllPendingTransfers(request: ListAllPendingTransfersRequest): Promise<ListAllPendingTransfersResponse>;
  /** GetBlastBalances */
  GetBlastBalances(request: GetBlastBalanceRequest): Promise<BlastBalance>;
  /** BatchCreateBlastGoldReservations */
  BatchCreateBlastGoldReservations(
    request: BatchCreateBlastGoldReservationsRequest,
  ): Promise<BatchCreateBlastGoldReservationsResponse>;
  /** ListBlastGoldReservations */
  ListBlastGoldReservations(request: ListBlastGoldReservationsRequest): Promise<ListBlastGoldReservationsResponse>;
  /**
   * TransferReservedBlastGolds
   * Transfer gold by the reservations.
   * admin api, not public
   */
  TransferReservedBlastGolds(request: TransferReservedBlastGoldsRequest): Promise<TransferReservedBlastGoldsResponse>;
}
