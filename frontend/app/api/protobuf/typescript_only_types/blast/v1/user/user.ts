// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/user/user.proto

/* eslint-disable */
import { type ChainType } from "../nft/nft";

export const protobufPackage = "blast.v1.user";

/** The state of user */
export enum UserState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /**
   * CREATED_PENDING - User was firstly created but nickname, nft is not set yet.
   * After nickname and nft is set, state will be changed to CREATED.
   */
  CREATED_PENDING = "CREATED_PENDING",
  /** CREATED - User is neither owner nor member. */
  CREATED = "CREATED",
  /** SQUARE_OWNED - User is owner. */
  SQUARE_OWNED = "SQUARE_OWNED",
  /** SQUARE_JOINED - User is member. */
  SQUARE_JOINED = "SQUARE_JOINED",
}

/** The state of user */
export enum UserType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** INDEPENDENT -  */
  INDEPENDENT = "INDEPENDENT",
  /** SQUARE_OWNER -  */
  SQUARE_OWNER = "SQUARE_OWNER",
  /** SQUARE_MEMBER -  */
  SQUARE_MEMBER = "SQUARE_MEMBER",
}

/**
 * UserView enumeration represents the view of a user.
 * The view controls the amount of information returned.
 * The BASIC view omits the following fields:
 * star_balance, sns_connections, gm_stats
 *
 * Reference
 * https://cloud.google.com/apis/design/design_patterns#list_flattening and
 * https://google.aip.dev/157
 */
export enum UserView {
  /**
   * User_VIEW_UNSPECIFIED - The default / unset value.
   * The API will default to the FULL view.
   */
  User_VIEW_UNSPECIFIED = "User_VIEW_UNSPECIFIED",
  /**
   * BASIC - Include only basic info.
   * Do not include `nft`, `star_balance`, `sns_connections`, `gm_stats`
   */
  BASIC = "BASIC",
  /**
   * FULL - Include everything.
   * This is the default value for both ListUsers and GetUser.
   */
  FULL = "FULL",
}

export interface GetUserRequest {
  /**
   * The name of the user to retrieve.
   * Format: users/{address}
   * Alias "users/me" is supported.
   */
  user: string;
}

/**
 * ListUsersRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListUsersRequest {
  /**
   * The maximum number of users to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListUsers` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * address
   *   * Equal`
   * * nickname
   *   * Equal`
   * * state
   *   * Equal`
   *
   * Examples
   * * name="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * nickname="Alice"
   * * state=SQUARE_OWNED
   */
  filter: string;
}

/**
 * ListUsersResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListUsersResponse {
  /** The list of rows that matched the query. */
  users: User[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface UpdateUserRequest {
  /**
   * User to update
   * Format: users/{address}
   */
  user:
    | User
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nickname"]
   * ["nft"]
   */
  updateMask: string[] | undefined;
}

export interface IdentifyUserRequest {
  /** Format: users/{address} */
  user: string;
  /** The nickname of User. */
  nickname: string;
  /** Format: nfts/{chain_type}/{contract_address}/{token_id} */
  nft: string;
  /** The referrer code of User. */
  referralCode: string;
}

export interface ValidateNicknameAvailabilityRequest {
  /** The nickname of User. */
  nickname: string;
}

export interface ValidateNicknameAvailabilityResponse {
  /** The nickname of User. */
  nickname: string;
  /** The availability of the nickname. */
  available: boolean;
  /**
   * The reason of the nickname is not available.
   * Example:
   * - nickname should be less or equal than 12 characters
   * - nickname should be more or equal than 4 characters
   * - nickname should start with alphabet
   * - nickname should be alphanumeric
   */
  reason?: string | undefined;
}

export interface User {
  /**
   * The resource name of the User.
   * Format: users/{address}
   */
  name: string;
  /** The address of User, mostly EOA address. */
  address: string;
  /**
   * The created time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The last updated time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  updateTime:
    | string
    | undefined;
  /**
   * The last updated time of User's NFT.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  lastNftUpdateTime:
    | string
    | undefined;
  /** The type of User */
  type: UserType;
  /**
   * The state of User
   * Deprecated: Use type instead
   */
  state: UserState;
  /** The current pfp nft of User. */
  nft:
    | UserNFT
    | undefined;
  /**
   * The ens of user
   * This field is optional
   */
  ens?:
    | string
    | undefined;
  /** The nickname of User. */
  nickname: string;
}

/** UserNFT message represents an User's NFT. */
export interface UserNFT {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  name: string;
  /** Token ID of the NFT asset. */
  tokenId: string;
  /** Token Name of the NFT asset. */
  tokenName: string;
  /**
   * The URI of the NFT asset's image.
   * This URI is cached version of image original URI
   * e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
   */
  imageUri: string;
  /**
   * The contract that owns the NFT asset.
   * Output only.
   */
  contract: UserNFTContract | undefined;
}

/** NFTContract message represents an NFT contract. */
export interface UserNFTContract {
  /** The address of the NFT contract. */
  address: string;
  /** The name of the NFT contract schema. */
  displayName: string;
  /** The symbol of the NFT contract. */
  symbol: string;
  /** The blockchain on which the NFT contract resides. */
  chain: ChainType;
  /** The URI of the contract image */
  imageUri: string;
}

/** UserService contains the function to interact with the User of the spacebar */
export interface UserService {
  /** GetUser will return User. */
  GetUser(request: GetUserRequest): Promise<User>;
  /** ListUsers */
  ListUsers(request: ListUsersRequest): Promise<ListUsersResponse>;
  /** UpdateUser update User. */
  UpdateUser(request: UpdateUserRequest): Promise<User>;
  /** ValidateNicknameAvailability identify User. */
  ValidateNicknameAvailability(
    request: ValidateNicknameAvailabilityRequest,
  ): Promise<ValidateNicknameAvailabilityResponse>;
  /** IdentifyUser identify User. */
  IdentifyUser(request: IdentifyUserRequest): Promise<User>;
}
