// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/gm/gm.proto

/* eslint-disable */

export const protobufPackage = "blast.v1.gm";

export enum RejectPreflightGMCode {
  REJECT_PREFLIGHT_GM_CODE_UNSPECIFIED = "REJECT_PREFLIGHT_GM_CODE_UNSPECIFIED",
  /** REJECT_PREFLIGHT_GM_ALREADY_SENT_TO_SAME_USER - The GM has already been sent to same user. */
  REJECT_PREFLIGHT_GM_ALREADY_SENT_TO_SAME_USER = "REJECT_PREFLIGHT_GM_ALREADY_SENT_TO_SAME_USER",
  REJECT_PREFLIGHT_GM_EXCEED_QUOTA = "REJECT_PREFLIGHT_GM_EXCEED_QUOTA",
  REJECT_PREFLIGHT_GM_SELF_SEND = "REJECT_PREFLIGHT_GM_SELF_SEND",
}

export interface GetGMStatsRequest {
  /**
   * The user whom the GM stats should be retrieved.
   * Format: users/{address}
   */
  user: string;
}

/** SendGMRequest message represents the request to send a GM message. */
export interface SendGMRequest {
  /**
   * The user whom the GM should be sent from.
   * Format: users/{address}
   */
  from: string;
  /**
   * The user whom the GM should be sent to.
   * Format: users/{address}
   */
  to: string;
}

/** Prefligjt GM Request message represents the request to preflight a GM message. */
export interface PreflightGMRequest {
  /**
   * The user whom the GM should be sent from.
   * Format: users/{address}
   */
  from: string;
  /**
   * The user whom the GM should be sent to.
   * Format: users/{address}
   */
  to: string;
}

export interface PreflightGMResponse {
  canSend: boolean;
  /**
   * The reason why the GM cannot be sent.
   * This field is only populated when can_send is false.
   */
  rejectCode?: RejectPreflightGMCode | undefined;
}

/** Request message for ListGMs. */
export interface ListGMsRequest {
  /**
   * The maximum number of gms to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListGMs` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * from
   *   * `=`
   * * to
   *   * `=`
   *
   * Examples
   * * from="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * to="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "create_time"
   *
   * Examples
   * * order_by=create_time desc
   */
  orderBy: string;
}

/** Response message for ListGMs. */
export interface ListGMsResponse {
  /** The list of GM messages that match the filters. */
  gms: GM[];
  /** Pagination token used to retrieve the next page of results. */
  nextPageToken: string;
}

export interface GMStats {
  /** The resource name of the GM message. */
  name: string;
  /** The user address of the user. */
  userAddress: string;
  sentCount: number;
  receivedCount: number;
}

export interface GM {
  /** The resource name of the GM message. */
  name: string;
  /** The user name of the sender. */
  from: string;
  /** The user name of the receiver. */
  to: string;
  /** The time when the message was sent or received. */
  createTime: string | undefined;
}

/** GMService contains the function to interact with the GM of the spacebar */
export interface GMService {
  /** GetGMStats returns the GM stats of the user. */
  GetGMStats(request: GetGMStatsRequest): Promise<GMStats>;
  /** SendGM send GM to another User. */
  SendGM(request: SendGMRequest): Promise<GM>;
  /** PreflightGM preflight GM to another User. */
  PreflightGM(request: PreflightGMRequest): Promise<PreflightGMResponse>;
  /** Lists GM messages based on "from" and/or "to" filters. */
  ListGMs(request: ListGMsRequest): Promise<ListGMsResponse>;
}
