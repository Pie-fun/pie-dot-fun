// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/square/square.proto

/* eslint-disable */
import { type JoinSquareParams, type MintAndCreateSquareParams, type TransferSquareParams } from "../chain/sign";

export const protobufPackage = "blast.v1.square";

/**
 * SquareView enumeration represents the view of a square.
 * The view controls the amount of information returned.
 *
 * Reference
 * https://cloud.google.com/apis/design/design_patterns#list_flattening and
 * https://google.aip.dev/157
 */
export enum SquareView {
  /**
   * SQUARE_VIEW_UNSPECIFIED - The default / unset value.
   * The API will default to the SQUARE_VIEW_NOT_MEMBER view.
   */
  SQUARE_VIEW_UNSPECIFIED = "SQUARE_VIEW_UNSPECIFIED",
  /** SQUARE_VIEW_OWNER - Include everything. */
  SQUARE_VIEW_OWNER = "SQUARE_VIEW_OWNER",
  /**
   * SQUARE_VIEW_MEMBER - Include only fields that are safe to be exposed to members
   * Do not include `private``
   */
  SQUARE_VIEW_MEMBER = "SQUARE_VIEW_MEMBER",
  /**
   * SQUARE_VIEW_NOT_MEMBER - Include only fields that are safe to be exposed to non-members
   * Do not include `private`
   * This is the default value for GetSquare.
   */
  SQUARE_VIEW_NOT_MEMBER = "SQUARE_VIEW_NOT_MEMBER",
}

/** The state of square */
export enum SquareState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** CREATED_PENDING - The square is created at server side and pending for onchain tx is finalized */
  CREATED_PENDING = "CREATED_PENDING",
  /** OWNED - The square is owned by Spacebar user. */
  OWNED = "OWNED",
  /** UNOWNED - The owner of the square is not a Spacebar user. */
  UNOWNED = "UNOWNED",
}

/** The join type of square */
export enum SquareJoinType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** PUBLIC - Anyone can join the square. */
  PUBLIC = "PUBLIC",
  /** PRIVATE - Only user with the code can join the square. */
  PRIVATE = "PRIVATE",
  /** TOKEN_GATED - Only user with the specific token can join the square. */
  TOKEN_GATED = "TOKEN_GATED",
}

/** The member type of square */
export enum SquareMemberType {
  /** SQUARE_MEMBER_TYPE_UNSPECIFIED - default value. this value is unused. */
  SQUARE_MEMBER_TYPE_UNSPECIFIED = "SQUARE_MEMBER_TYPE_UNSPECIFIED",
  OWNER = "OWNER",
  MEMBER = "MEMBER",
}

export enum SquareMemberRankType {
  SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED = "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED",
  ALL_TIME = "ALL_TIME",
  WEEKLY = "WEEKLY",
}

export enum RejectMintCode {
  REJECT_MINT_CODE_UNSPECIFIED = "REJECT_MINT_CODE_UNSPECIFIED",
  /** NO_ELIGIBILITY - The user is not whitelisted to mint the Square NFT. */
  NO_ELIGIBILITY = "NO_ELIGIBILITY",
  /** ROUND_TIME_NOT_MATCH - The Square NFT is already minted. */
  ROUND_TIME_NOT_MATCH = "ROUND_TIME_NOT_MATCH",
  /** ALREADY_MINTED - The Square NFT is already minted. */
  ALREADY_MINTED = "ALREADY_MINTED",
}

export enum RejectJoinSquareCode {
  REJECT_JOIN_CODE_UNSPECIFIED = "REJECT_JOIN_CODE_UNSPECIFIED",
  /** REJECT_JOIN_FULLY_OCCUPIED - The square is fully occupied. */
  REJECT_JOIN_FULLY_OCCUPIED = "REJECT_JOIN_FULLY_OCCUPIED",
  /** REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT - The user's staking amount is below the minimum required amount to join the square. */
  REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT = "REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT",
  /** REJECT_JOIN_INCORRECT_PRIVATE_CODE - The private code is incorrect. */
  REJECT_JOIN_INCORRECT_PRIVATE_CODE = "REJECT_JOIN_INCORRECT_PRIVATE_CODE",
  /** REJECT_JOIN_NOT_TOKEN_HOLDER - The user is not a token holder of the token gated square. */
  REJECT_JOIN_NOT_TOKEN_HOLDER = "REJECT_JOIN_NOT_TOKEN_HOLDER",
  /** REJECT_JOIN_ALREADY_JOINED - The user is already memeber of the square. */
  REJECT_JOIN_ALREADY_JOINED = "REJECT_JOIN_ALREADY_JOINED",
}

export enum RejectTransferSquareCode {
  REJECT_TRANSFER_CODE_UNSPECIFIED = "REJECT_TRANSFER_CODE_UNSPECIFIED",
  /** REJECT_TRANSFER_FULLY_OCCUPIED - The square is fully occupied. */
  REJECT_TRANSFER_FULLY_OCCUPIED = "REJECT_TRANSFER_FULLY_OCCUPIED",
  /** REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT - The user's staking amount is below the minimum required amount to join the square. */
  REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT = "REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT",
  /** REJECT_TRANSFER_INCORRECT_PRIVATE_CODE - The private code is incorrect. */
  REJECT_TRANSFER_INCORRECT_PRIVATE_CODE = "REJECT_TRANSFER_INCORRECT_PRIVATE_CODE",
  /** REJECT_TRANSFER_NOT_TOKEN_HOLDER - The user is not a token holder of the token gated square. */
  REJECT_TRANSFER_NOT_TOKEN_HOLDER = "REJECT_TRANSFER_NOT_TOKEN_HOLDER",
  /** REJECT_TRANSFER_NOT_SQUARE_MEMBER - The user is not member of any square. */
  REJECT_TRANSFER_NOT_SQUARE_MEMBER = "REJECT_TRANSFER_NOT_SQUARE_MEMBER",
  /** REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME - The user transfer or join the square within the cooldown time. */
  REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME = "REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME",
}

export enum MintEligibility {
  MINT_ELIGIBILITY_UNSPECIFIED = "MINT_ELIGIBILITY_UNSPECIFIED",
  /** NOT_ELIGIBLE - The user is not eligible to mint the Square NFT. */
  NOT_ELIGIBLE = "NOT_ELIGIBLE",
  /** ELIGIBLE_ROUND1 - The user is eligible to mint the Square NFT in round 1. */
  ELIGIBLE_ROUND1 = "ELIGIBLE_ROUND1",
  /** ELIGIBLE_ROUND2 - The user is eligible to mint the Square NFT in round 2. */
  ELIGIBLE_ROUND2 = "ELIGIBLE_ROUND2",
  /** ELIGIBLE_ROUND1_AND_ROUND2 - The user is eligible to mint the Square NFT in round 1 and round 2. */
  ELIGIBLE_ROUND1_AND_ROUND2 = "ELIGIBLE_ROUND1_AND_ROUND2",
}

export enum TransferMemberType {
  TRANSFER_MEMBER_TYPE_UNSPECIFIED = "TRANSFER_MEMBER_TYPE_UNSPECIFIED",
  DEFAULT = "DEFAULT",
  KICKED_OUT = "KICKED_OUT",
  TO_OWNER = "TO_OWNER",
}

export enum SpiritType {
  SQUARE_SPIRIT_TYPE_UNSPECIFIED = "SQUARE_SPIRIT_TYPE_UNSPECIFIED",
  VOTING = "VOTING",
  SUMMON_BEBOB_SUCCESS = "SUMMON_BEBOB_SUCCESS",
  ATTACK_BEBOB_SUCCESS = "ATTACK_BEBOB_SUCCESS",
  COLLECT_STARS = "COLLECT_STARS",
  COMMUNITY_EVENT = "COMMUNITY_EVENT",
}

export interface GetSquareRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * Optional. The view to return.
   * Defaults to SQUARE_VIEW_NOT_MEMBER if not set.
   * If set to SQUARE_VIEW_OWNER or SQUARE_VIEW_MEMBER, but the user does not have permission to do so, the API will return a PERMISSION_DENIED error.
   *
   * SquareView enumeration represents the view of a square.
   * The view controls the amount of information returned.
   *
   * Reference
   * https://cloud.google.com/apis/design/design_patterns#list_flattening and
   * https://google.aip.dev/157
   */
  view: SquareView;
}

export interface ListSquaresRequest {
  /**
   * The maximum number of squares to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquares` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   * * token_id
   *   * `=`
   * * signature_id
   *   * `=`
   * * state
   *   * `=`
   * * join_type
   *   * `=`
   * * display_name
   *   * `=`
   * * occupied
   *   * `negation`
   *
   * Examples
   * * name="squares/10"
   * * token_id="10"
   * * signature_id="3ed92b99-00be-4417-b69f-dca2d8d14c7f"
   * * join_type=TOKEN_GATED
   * * display_name="SQUARE"
   * * join_type=TOKEN_GATED AND not occupied
   */
  filter: string;
  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "token_id", "total_points", "spirits"
   *
   * Examples
   * * order_by=token_id asc
   * * order_by=total_points desc
   * * order_by=spirits desc
   */
  orderBy: string;
}

/**
 * ListSquaresResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListSquaresResponse {
  /** The list of rows that matched the query. */
  squares: Square[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface ValidateDisplayNameAvailabilityRequest {
  /** The display_name of Square. */
  displayName: string;
}

export interface ValidateDisplayNameAvailabilityResponse {
  /** The display_name of Square. */
  displayName: string;
  /** The availability of the nickname. */
  available: boolean;
  /**
   * The reason of the display_name is not available.
   * Example:
   * - display name already exists
   * - display name should more or equal than 4
   * - display name should less or equal than 10
   * - display name contains non uppercase character
   */
  reason?: string | undefined;
}

export interface CreateSquareAndSignRequest {
  nonce: string;
  /** square to create */
  square: Square | undefined;
}

export interface CreateSquareAndSignResponse {
  /** square to create */
  square:
    | Square
    | undefined;
  /** signature to sign the onchain tx */
  signature: string;
  params: MintAndCreateSquareParams | undefined;
}

export interface ListUsersSquaresRequest {
  user: string;
}

export interface ListUsersSquaresResponse {
  /** The list of rows that matched the query. */
  squares: Square[];
}

export interface UpdateSquareRequest {
  /**
   * Square to update
   * Format: squares/{token_id}
   */
  square:
    | Square
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   *
   * Supported Fields
   * * "display_name", "description", "join"
   *
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["display_name"]
   * ["display_name", "description"]
   * ["join"]
   */
  updateMask: string[] | undefined;
}

export interface GetSquareWeeklySpiritsRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The week number to retrieve.
   * If unspecified, the current week will be returned.
   */
  week?: number | undefined;
}

export interface GetSquareWeeklySpiritsResponse {
  weeklySpirits: number;
}

export interface CheckMintEligibilityRequest {
  user: string;
}

export interface CheckMintEligibilityResponse {
  user: string;
  /** Whether the user is eligible to mint the Square NFT */
  eligibility: MintEligibility;
  /**
   * Whether the user is currently available to mint the Square NFT
   * If the user is not available, the reason code will be set.
   * If the user is available, the reason code will be empty.
   * Can be unavailable though the eligibility is ELIGIBLE_ROUND1 or ELIGIBLE_ROUND2 if it is not appropriate round time.
   */
  available: boolean;
  /** The reason code of the user is not eligible to mint the Square NFT. */
  rejectCode?: RejectMintCode | undefined;
}

export interface ApproveJoinSquareAndSignRequest {
  /**
   * The resource name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The resource name of the user to join.
   * Format: users/{address}
   */
  user: string;
  /**
   * The private code of the square.
   * This field is required if the square is private.
   * Otherwise, this field should be empty.
   */
  privateCode?: string | undefined;
  nonce: string;
}

export interface ApproveJoinSquareAndSignResponse {
  approved: boolean;
  signature: string;
  rejectCode?: RejectJoinSquareCode | undefined;
  params: JoinSquareParams | undefined;
}

export interface ApproveTransferSquareAndSignRequest {
  /**
   * The resource name of the square to transfer.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The resource name of the user to transfer.
   * Format: users/{address}
   */
  user: string;
  /**
   * The private code of the square.
   * This field is required if the square is private.
   * Otherwise, this field should be empty.
   */
  privateCode?: string | undefined;
  nonce: string;
}

export interface ApproveTransferSquareAndSignResponse {
  approved: boolean;
  signature: string;
  rejectCode?: RejectTransferSquareCode | undefined;
  params: TransferSquareParams | undefined;
}

export interface GetSquareWeeklyPointsRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The week number to retrieve.
   * If unspecified, the current week will be returned.
   */
  week: number;
}

export interface GetSquareWeeklyPointsResponse {
  /** The weekly points of the square. */
  weeklyPoints: number;
  /** The week number of the points. */
  week: number;
}

export interface ListSquareSpiritHistoriesRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The maximum number of spirits to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquareSpiritHistories` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

export interface ListSquareSpiritHistoriesResposne {
  /** The list of rows that matched the query. */
  histories: SquareSpiritHistory[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content
   * of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface ListSquareMembersRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  /**
   * The maximum number of squares to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquareMembers` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * user
   *   * `=`
   * * member
   *   * `=`
   * * member_address
   *   * `=`
   * * join_time
   *   * `>`, `<`, `>=`, `<=`
   * * show_left
   *   * `NOT`
   *
   * Examples
   * * member_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * join_time>"2024-04-10T11:30:00Z"
   * * show_left
   */
  filter: string;
  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "total_points", "join_time"
   *
   * Examples
   * * order_by=join_time asc
   * * order_by=total_points desc, join_time asc
   */
  orderBy: string;
}

/**
 * ListSquareMembersResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListSquareMembersResponse {
  /** The list of rows that matched the query. */
  members: SquareMember[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface ListSquareMemberRankingsRequest {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   */
  square: string;
  rankType: SquareMemberRankType;
  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

export interface ListSquareMemberRankingsResponse {
  /** The list of rows that matched the query. */
  rankings: SquareMemberRanking[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface Square {
  /**
   * The resource name of the Square.
   * Format: squares/{token_id}
   */
  name: string;
  /** ERC721 token ID of the Square. */
  tokenId: string;
  /**  */
  ownerAddress: string;
  /**
   * The created time of Square.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime: string | undefined;
  state: SquareState;
  /**
   * The signature id of the Square.
   * This field is used for multi signature when minting the Square NFT.
   */
  signatureId: string;
  /** The join type of the square. */
  joinType: SquareJoinType;
  join?:
    | { $case: "public"; public: Public }
    | { $case: "private"; private: Private }
    | { $case: "tokenGated"; tokenGated: TokenGated }
    | undefined;
  /** The display name of the square. */
  displayName: string;
  /** The introduction of the square. */
  introduction: string;
  /** The minimum required staking amount to join the square in ETH. */
  minimumStakingAmountToJoinInEth: number;
  /** The total staking amount of all members in the square in ETH. */
  totalMembersStakingAmountInEth: number;
  /** The multiplier of the square. */
  multiplier: number;
  /** The all-time total points of the square. */
  totalPoints: number;
  /** The total capacity of the square. */
  capacity: number;
  /** The current number of members in the square. */
  occupancy: number;
  /** The occupancy of the square including join pending members. */
  occupancyIncludingPending: number;
  /** The PFP boost of the square. */
  pfpBoost:
    | PFPBoost
    | undefined;
  /** The NFT of the square. */
  nft: SquareNFT | undefined;
  spirits: number;
  /**  */
  stars: number;
  /** DEPRECATED: Use spirits instead. */
  totalSpirits: number;
  /** DEPRECATED: Use GetSquareWeeklySpirits API instead. */
  weeklySpirits: number;
}

export interface PFPBoost {
  percentage: number;
  memberCount: number;
  /**
   * The resource name of the NFT contract.
   * Format: nfts/{chain_type}/{contract_address}
   */
  nftContract: string;
}

export interface Public {
}

export interface Private {
  code: string;
}

export interface TokenGated {
  /**
   * The resource name of the NFT contract.
   * Format: nfts/{chain_type}/{contract_address}
   */
  nftContract: string;
}

export interface SquareNFT {
  /** Token ID of the NFT asset. */
  tokenId: number;
  /**
   * The URI of the NFT asset's image.
   * This URI is cached version of image original URI
   * e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
   */
  imageUri: string;
  /** The URI of the NFT asset's metadata. */
  metadataUri: string;
}

export interface SquareMember {
  /**
   * The resource name of the Square.
   * Format: squares/{square_token_id}/members/{user_address}
   */
  name: string;
  /** The token ID of the Square. */
  squareTokenId: string;
  /** The user address of the member. */
  userAddress: string;
  /** The member type of the square. */
  type: SquareMemberType;
  totalPoints: number;
  /** RFC3339 format e.g. "2006-01-02T15:04:05Z07:00" */
  joinTime: string | undefined;
}

export interface SquareMemberRanking {
  rank: number;
  points: number;
  member: SquareMember | undefined;
}

export interface SquareSpiritHistory {
  /**
   * The name of the Square
   * Format: squares/{token_id}
   */
  square: string;
  /** The spirit type of the square. */
  type: SpiritType;
  /** The user address of the member. */
  amount: number;
  /** RFC3339 format e.g. "2006-01-02T15:04:05Z07:00" */
  createTime: string | undefined;
}

/** SquareService contains the function to interact with the Square of the spacebar */
export interface SquareService {
  /** GetSquare will return Square. */
  GetSquare(request: GetSquareRequest): Promise<Square>;
  /** ListSquares will return Squares. */
  ListSquares(request: ListSquaresRequest): Promise<ListSquaresResponse>;
  /** UpdateSquare update Square. */
  UpdateSquare(request: UpdateSquareRequest): Promise<Square>;
  /** GetSquareWeeklySpirits will return weekly spirits of the Square. */
  GetSquareWeeklySpirits(request: GetSquareWeeklySpiritsRequest): Promise<GetSquareWeeklySpiritsResponse>;
  /** CheckMintEligibility check if the user is eligible to mint the NFT of the Square. */
  CheckMintEligibility(request: CheckMintEligibilityRequest): Promise<CheckMintEligibilityResponse>;
  /** ValidateDisplayNameAvailability check if the display name is available. */
  ValidateDisplayNameAvailability(
    request: ValidateDisplayNameAvailabilityRequest,
  ): Promise<ValidateDisplayNameAvailabilityResponse>;
  /** CreateSquareAndSign create Square with CREATED_PENDING state and response with signature to sign the onchain tx. */
  CreateSquareAndSign(request: CreateSquareAndSignRequest): Promise<CreateSquareAndSignResponse>;
  /** ApproveJoinSquareAndSign verify the member join the square and return signature to sign the onchain tx. */
  ApproveJoinSquareAndSign(request: ApproveJoinSquareAndSignRequest): Promise<ApproveJoinSquareAndSignResponse>;
  /** ApproveTransferSquareAndSign verify the member transfer the square and return signature to sign the onchain tx. */
  ApproveTransferSquareAndSign(
    request: ApproveTransferSquareAndSignRequest,
  ): Promise<ApproveTransferSquareAndSignResponse>;
  /** GetSquareWeeklyPoints will return Square. */
  GetSquareWeeklyPoints(request: GetSquareWeeklyPointsRequest): Promise<GetSquareWeeklyPointsResponse>;
  /** ListSquareSpiritHistories will return the spirit history of the Square. */
  ListSquareSpiritHistories(request: ListSquareSpiritHistoriesRequest): Promise<ListSquareSpiritHistoriesResposne>;
  /** ListSquareMembers will return the members of the Square. */
  ListSquareMembers(request: ListSquareMembersRequest): Promise<ListSquareMembersResponse>;
  /** ListSquareMemberRankings will return the leaderboard of the Square. */
  ListSquareMemberRankings(request: ListSquareMemberRankingsRequest): Promise<ListSquareMemberRankingsResponse>;
}
