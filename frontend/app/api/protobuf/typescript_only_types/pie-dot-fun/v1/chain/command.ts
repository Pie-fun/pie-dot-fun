// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/chain/command.proto

/* eslint-disable */

export const protobufPackage = "piedotfun.v1.chain";

export interface RebalanceCommand {
  strategy?:
    | { $case: "equalWeight"; equalWeight: RebalanceCommand_EqualMarketCapWeight }
    | { $case: "manualWeight"; manualWeight: RebalanceCommand_ManualMarketCapWeight }
    | { $case: "trade"; trade: RebalanceCommand_Trade }
    | undefined;
}

/** Equal Market Cap Weight Strategy */
export interface RebalanceCommand_EqualMarketCapWeight {
}

/** Manual Market Cap Weight Strategy */
export interface RebalanceCommand_ManualMarketCapWeight {
  /** sum of weights should be 1 */
  requests: RebalanceCommand_ManualMarketCapWeight_Request[];
}

export interface RebalanceCommand_ManualMarketCapWeight_Request {
  fungibleToken: string;
  /** Weigh limits: 0 - 1.0 */
  weight: number;
}

/** Trade Strategy */
export interface RebalanceCommand_Trade {
  requests: RebalanceCommand_Trade_Request[];
}

export interface RebalanceCommand_Trade_Request {
  fungibleToken: string;
  isBuy: boolean;
  formattedAmount: string;
}

export interface RebalanceBasketTokenRequest {
  basketToken: string;
  /** if false, it will perform a dry run. */
  execute: boolean;
  command: RebalanceCommand | undefined;
  executionOption: ExecutionOption | undefined;
}

export interface RebalanceBasketTokenResponse {
  resultHtml: string;
}

export interface ExecutionOption {
  sellRatioPerIteration: number;
  slippage: number;
  /** Exit condition */
  maxIterationCount: number;
  exitRemainingExecutionValue: number;
  exitRemainingExecutionValueRatio: number;
}

/** ChainCommandService is the service that handles all chain requests. */
export interface ChainCommandService {
  RebalanceBasketToken(request: RebalanceBasketTokenRequest): Promise<RebalanceBasketTokenResponse>;
}
