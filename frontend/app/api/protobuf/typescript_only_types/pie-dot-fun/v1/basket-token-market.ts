// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/basket-token-market.proto

/* eslint-disable */
import { type Currency, type Money, type Percentage, type PriceChangesByPeriod, type Quantity } from "./common";

export const protobufPackage = "piedotfun.v1";

export enum TickInterval {
  INTERVAL_UNSPECIFIED = "INTERVAL_UNSPECIFIED",
  /** @deprecated */
  INTERVAL_1_SECOND = "INTERVAL_1_SECOND",
  INTERVAL_1_MINUTE = "INTERVAL_1_MINUTE",
  INTERVAL_15_MINUTES = "INTERVAL_15_MINUTES",
  INTERVAL_1_HOUR = "INTERVAL_1_HOUR",
  INTERVAL_4_HOUR = "INTERVAL_4_HOUR",
  INTERVAL_1_DAY = "INTERVAL_1_DAY",
}

/** BasketTokenMarket contains the market data for a basket token. */
export interface BasketTokenMarket {
  name: string;
  basketToken: string;
  /**
   * Native token symbol of the chain the basket-token belongs to.
   * Not dollar(USDT, USDC),
   * and the prices and market cap fields will display dollar values together.
   */
  nativeCurrency: Currency;
  /** @deprecated */
  values: { [key: string]: Money };
  /**
   * Key is the currency enum string,
   * value is the market cap with the currency.
   *
   * @deprecated
   */
  marketCaps: { [key: string]: Money };
  /**
   * Key is the currency enum string,
   * value is the INAV changes with the currency.
   * {
   *   "CURRENCY_USDC": {
   *     "PRICE_CHANGE_PERIOD_1_HOUR": {
   *       "nominal_value": {
   *         "currency": "CURRENCY_USDC",
   *         "amount": 0.0001
   *       },
   *       "percentage_change": {
   *         "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_1_HOUR"
   *     },
   *     "CURRENTCY_SOL": { ... }
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_1_HOUR
   * * PRICE_CHANGE_PERIOD_24_HOUR
   * * PRICE_CHANGE_PERIOD_7_DAY
   * * PRICE_CHANGE_PERIOD_30_DAY
   * * PRICE_CHANGE_PERIOD_ALL_TIME
   *
   * @deprecated
   */
  valueChanges: { [key: string]: PriceChangesByPeriod };
  /**
   * Percentage of lowest after the previous highest.
   * {(`previous highest` - `lowest` after `previous highest`) / `previous highest`} * 100
   */
  maximumDrawDown:
    | Percentage
    | undefined;
  /** Current NAV(Net Asset Value) per BasketToken. */
  value:
    | Money
    | undefined;
  /** Market cap is based on the current NAV(Net Asset Value) per BasketToken. */
  marketCap:
    | Money
    | undefined;
  /**
   * Example
   * {
   *   "PRICE_CHANGE_PERIOD_1_HOUR": {
   *       "nominal_value": {
   *           "currency": "CURRENCY_USDC",
   *           "amount": 0.0001
   *       },
   *       "percentage_change": {
   *           "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_1_HOUR"
   *   },
   *   "PRICE_CHANGE_PERIOD_24_HOUR": {...},
   *   ...
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_1_HOUR
   * * PRICE_CHANGE_PERIOD_24_HOUR
   * * PRICE_CHANGE_PERIOD_7_DAY
   * * PRICE_CHANGE_PERIOD_30_DAY
   * * PRICE_CHANGE_PERIOD_ALL_TIME
   */
  valueChange: PriceChangesByPeriod | undefined;
}

export interface BasketTokenMarket_ValuesEntry {
  key: string;
  value: Money | undefined;
}

export interface BasketTokenMarket_MarketCapsEntry {
  key: string;
  value: Money | undefined;
}

export interface BasketTokenMarket_ValueChangesEntry {
  key: string;
  value: PriceChangesByPeriod | undefined;
}

export interface CreateBasketTokenMarketRequest {
  /** The basket token market to create. */
  basketTokenMarket:
    | BasketTokenMarket
    | undefined;
  /** display_name */
  displayName: string;
  /** Symbol */
  symbol: string;
}

export interface CustomCreateBasketTokenMarketRequest {
  /** The basket token market to create. */
  basketTokenMarket: BasketTokenMarket | undefined;
  components: CustomCreateBasketTokenMarketRequest_Component[];
  /** display_name */
  displayName: string;
  /** Symbol */
  symbol: string;
}

export interface CustomCreateBasketTokenMarketRequest_Component {
  /**
   * The name of the fungible token.
   * Format : "fungibleTokens/{chain}/{token_address}"
   */
  fungibleToken: string;
  /** Number of component token per one BasketToken. */
  quantity: Quantity | undefined;
}

export interface GetBasketTokenMarketRequest {
  /**
   * The name of the market  to retrieve.
   * Format : "basketTokens/{chain}/{token_address}/market"
   */
  basketTokenMarket: string;
  /** Display the price in this currency. Default is USD. */
  currency: Currency;
}

export interface ListBasketTokensMarketsRequest {
  /**
   * If unspecified, at most 50 books will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   *
   * Examples
   * * name="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9/market"
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output.
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * *
   *
   * Examples
   * *
   */
  orderBy: string;
  /** Display the price in this currency. Default is USD. */
  currency: Currency;
}

export interface ListBasketTokensMarketsResponse {
  basketTokenMarkets: BasketTokenMarket[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface UpdateBasketTokenMarketComponentsRequest {
  /**
   * The name of the market to update.
   * Format : "basketTokens/{chain}/{token_address}/market"
   */
  basketTokenMarket: string;
  components: UpdateBasketTokenMarketComponentsRequest_Component[];
  /** The block number to update the components. */
  updateBlockNumber: number;
}

export interface UpdateBasketTokenMarketComponentsRequest_Component {
  /**
   * The name of the fungible token.
   * Format : "fungibleTokens/{chain}/{token_address}"
   */
  fungibleToken: string;
  /** Number of component token per one BasketToken. */
  quantity: Quantity | undefined;
}

export interface UpdateBasketTokenMarketComponentsResponse {
}

export interface ListBasketTokenTicksRequest {
  /** Format : "basketTokens/{chain}/{token_address}" */
  parent: string;
  /** If not set time, the current time will be used. */
  startTime?: string | undefined;
  endTime?:
    | string
    | undefined;
  /** default size: 200. Max size: 1000 */
  size?:
    | number
    | undefined;
  /** Default is USD. */
  currency: Currency;
  interval: TickInterval;
}

export interface ListBasketTokenTicksResponse {
  ticks: Tick[];
  currency: Currency;
}

export interface Tick {
  openTime: string | undefined;
  open: number;
  high: number;
  low: number;
  close: number;
}

/** BasketTokenMarketService contains the function to interact with the Market of the spacebar */
export interface BasketTokenMarketService {
  /**
   * CreateBasketTokenMarket
   * private
   */
  CreateBasketTokenMarket(request: CreateBasketTokenMarketRequest): Promise<BasketTokenMarket>;
  /**
   * CustomCreateBasketTokenMarket
   * Create with components.
   * private
   */
  CustomCreateBasketTokenMarket(request: CustomCreateBasketTokenMarketRequest): Promise<BasketTokenMarket>;
  /** GetBasketTokenMarket returns the market for the given basket token. */
  GetBasketTokenMarket(request: GetBasketTokenMarketRequest): Promise<BasketTokenMarket>;
  /** ListBasketTokenMarkets returns the list of markets for the given basket tokens. */
  ListBasketTokenMarkets(request: ListBasketTokensMarketsRequest): Promise<ListBasketTokensMarketsResponse>;
  /**
   * UpdateBasketTokenMarketComponents
   * private
   */
  UpdateBasketTokenMarketComponents(
    request: UpdateBasketTokenMarketComponentsRequest,
  ): Promise<UpdateBasketTokenMarketComponentsResponse>;
  /** ListBasketTokenTicks returns the list of Ticks for the given basket tokens. */
  ListBasketTokenTicks(request: ListBasketTokenTicksRequest): Promise<ListBasketTokenTicksResponse>;
}
