// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/user.proto

/* eslint-disable */
import { type SNS, type VMType } from "./common";

export const protobufPackage = "piedotfun.v1";

export interface GetUserRequest {
  /**
   * The name of the user to retrieve.
   * Format: users/{id}
   * Alias "users/me" is supported.
   */
  user: string;
}

/**
 * ListUsersRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListUsersRequest {
  /**
   * The maximum number of users to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListUsers` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * address
   *   * Equal`
   * * display_name
   *   * Equal`
   *
   * Examples
   * * name="users/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * address="FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * display_name="Alice"
   */
  filter: string;
}

/**
 * ListUsersResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListUsersResponse {
  /** The list of rows that matched the query. */
  users: User[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface UpdateUserRequest {
  /**
   * User to update
   * Format: users/{id}
   */
  user:
    | User
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nickname"]
   * ["biography"]
   */
  updateMask: string[] | undefined;
}

export interface ValidateNicknameAvailabilityRequest {
  /** The nickname of User. */
  nickname: string;
}

export interface ValidateNicknameAvailabilityResponse {
  /** The nickname of User. */
  nickname: string;
  /** The availability of the nickname. */
  available: boolean;
  /**
   * The reason of the nickname is not available.
   * Example:
   * - display name should be less or equal than 15 characters
   * - display name should be more or equal than 4 characters
   * - display name may only contain letters, numbers, hyphens, and periods
   */
  reason: string;
}

export interface User {
  /**
   * The resource name of the User.
   * Format: users/{id}
   */
  name: string;
  /** The Auth ID of User. (generated by Privy or Web3Auth) */
  id: string;
  wallets: UserWallet[];
  /**
   * The created time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The last updated time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  updateTime:
    | string
    | undefined;
  /** The display name of User. */
  displayName: string;
  /** The biography of User. */
  biography: string;
  /** The SNS connections of User. */
  sns: SNS[];
  profileImageUrl: string;
}

export interface UserWallet {
  vmType: VMType;
  address: string;
}

/** UserService contains the function to interact with the User of the spacebar */
export interface UserService {
  /** GetUser will return User. */
  GetUser(request: GetUserRequest): Promise<User>;
  /** ListUsers */
  ListUsers(request: ListUsersRequest): Promise<ListUsersResponse>;
  /** UpdateUser update User. */
  UpdateUser(request: UpdateUserRequest): Promise<User>;
  /** ValidateNicknameAvailability identify User. */
  ValidateNicknameAvailability(
    request: ValidateNicknameAvailabilityRequest,
  ): Promise<ValidateNicknameAvailabilityResponse>;
}
