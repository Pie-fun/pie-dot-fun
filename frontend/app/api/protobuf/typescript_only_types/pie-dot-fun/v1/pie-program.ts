// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/pie-program.proto

/* eslint-disable */
import { type Empty } from "../../google/protobuf/empty";

export const protobufPackage = "piedotfun.v1";

export enum PoolType {
  POOL_TYPE_UNSPECIFIED = "POOL_TYPE_UNSPECIFIED",
  AMM = "AMM",
  CLMM = "CLMM",
  CPMM = "CPMM",
}

export enum BaseType {
  BASE_TYPE_UNSPECIFIED = "BASE_TYPE_UNSPECIFIED",
  BASE_IN = "BASE_IN",
  BASE_OUT = "BASE_OUT",
}

export interface GetBasketVaultRequest {
  mint: string;
}

export interface GetBasketVaultResponse {
  vault: BasketVaultElement[];
}

export interface BasketVaultElement {
  mint: string;
  balance: number;
}

export interface RebalanceAction {
  inputMint: string;
  outputMint: string;
  baseType: BaseType;
  /**
   * Raw amount of the mint that `base_type` references.
   * BASE_IN: amount of `input_mint`
   * BASE_OUT: amount of `output_mint`
   */
  amount: string;
  /**
   * Threshold for the other amount
   * BASE_IN: Minimum amount of `output_mint` token to be received
   * BASE_OUT: Maximum amount of `input_mint` token to be spent
   */
  otherAmountThreshold?: string | undefined;
}

export interface SerializedTxBundle {
  serializedTxs: string[];
}

export interface BuildRebalanceTxRequest {
  basketMint: string;
  slippagePercentage: number;
  actions: RebalanceAction[];
}

export interface BuySwapData {
  mint: string;
  amountIn: string;
  maxAmountIn: string;
  amountOut: string;
}

export interface BuildMintTxRequest {
  basketMint: string;
  mintAmount: string;
  inputAmount: string;
  ownerAddress: string;
  buySwapData: BuySwapData[];
  /**
   * percentage
   * If null, value is set to 10(%)
   */
  maxSlippage?: number | undefined;
}

export interface BuildRedeemTxRequest {
  basketMint: string;
  amount: string;
  ownerAddress: string;
  /**
   * percentage
   * If null, value is set to 10(%)
   */
  maxSlippage?: number | undefined;
}

export interface GetBasketConfigByIDRequest {
  basketId: string;
}

export interface GetBasketMintByIDRequest {
  basketId: string;
}

export interface GetBasketMintByIDResponse {
  mint: string;
}

export interface CommandCreateBasketRequest {
}

export interface GetBasketRequest {
  mint: string;
}

export interface BatchCreateTokenPoolsRequest {
  tokenPools: TokenPool[];
}

export interface BatchCreateTokenPoolsResponse {
  tokenPools: TokenPool[];
}

export interface TxResponse {
  tx: string;
}

export interface Basket {
  mint: string;
  basketId: number;
  name: string;
  symbol: string;
  uri: string;
  components: BasketComponent[];
}

export interface TokenPool {
  mint: string;
  poolType: PoolType;
  poolId: string;
  lookupTable: string;
}

export interface ProgramState {
  bump: number;
  admin: string;
  platformFeeWallet: string;
  basketCounter: string;
  rebalanceMarginLamports: string;
  creatorFeePercentage: string;
  platformFeePercentage: string;
  enableCreator: boolean;
  isInitialized: boolean;
}

export interface BasketConfig {
  bump: number;
  id: number;
  creator: string;
  rebalancer: string;
  mint: string;
  isRebalancing: boolean;
  components: BasketComponent[];
}

export interface BasketComponent {
  mint: string;
  /** In system raw amount */
  quantity: number;
}

export interface PieProgramService {
  GetProgramState(request: Empty): Promise<ProgramState>;
  GetBasketConfigByID(request: GetBasketConfigByIDRequest): Promise<BasketConfig>;
  GetBasket(request: GetBasketRequest): Promise<Basket>;
  /** Get Basket Vault */
  GetBasketVault(request: GetBasketVaultRequest): Promise<GetBasketVaultResponse>;
  /** Batch Create Token Pools */
  BatchCreateTokenPools(request: BatchCreateTokenPoolsRequest): Promise<BatchCreateTokenPoolsResponse>;
  /** Build Rebalance Trasaction */
  BuildRebalanceTx(request: BuildRebalanceTxRequest): Promise<SerializedTxBundle>;
  /** Build Mint Transaction */
  BuildMintTx(request: BuildMintTxRequest): Promise<SerializedTxBundle>;
  /** Build Redeem Transaction */
  BuildRedeemTx(request: BuildRedeemTxRequest): Promise<SerializedTxBundle>;
  /** Send Create Basket Transaction to Solana */
  CommandCreateBasket(request: Basket): Promise<Basket>;
  CommandStartRebalanceBasket(request: Basket): Promise<TxResponse>;
  CommandStopRebalanceBasket(request: Basket): Promise<TxResponse>;
}
