// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/game/game.proto

/* eslint-disable */

export const protobufPackage = "ethereum.v1.game";

export enum ClientMessageType {
  CLIENT_MESSAGE_TYPE_UNSPECIFIED = "CLIENT_MESSAGE_TYPE_UNSPECIFIED",
  CLIENT_START_GAME = "CLIENT_START_GAME",
  CLIENT_END_GAME = "CLIENT_END_GAME",
  CLIENT_TAKE_STAR = "CLIENT_TAKE_STAR",
  CLIENT_DESTROY_OBJECT = "CLIENT_DESTROY_OBJECT",
  CLIENT_SPACESHIP_POSITION = "CLIENT_SPACESHIP_POSITION",
  CLIENT_SPACESHIP_EVENT = "CLIENT_SPACESHIP_EVENT",
  CLIENT_KEYBOARD_EVENT = "CLIENT_KEYBOARD_EVENT",
  CLIENT_DICONNECT = "CLIENT_DICONNECT",
}

export enum ServerMessageType {
  SERVER_MESSAGE_TYPE_UNSPECIFIED = "SERVER_MESSAGE_TYPE_UNSPECIFIED",
  SERVER_CONNECT = "SERVER_CONNECT",
  SERVER_DISCONNECT = "SERVER_DISCONNECT",
  SERVER_START_GAME = "SERVER_START_GAME",
  SERVER_END_GAME = "SERVER_END_GAME",
  SERVER_TAKE_STAR = "SERVER_TAKE_STAR",
  SERVER_DESTROY_OBJECT = "SERVER_DESTROY_OBJECT",
  SERVER_SPACESHIP_POSITION = "SERVER_SPACESHIP_POSITION",
  SERVER_SPACESHIP_EVENT = "SERVER_SPACESHIP_EVENT",
  SERVER_KEYBOARD_EVENT = "SERVER_KEYBOARD_EVENT",
}

export enum ServerAckType {
  SERVER_RESPONSE_TYPE_UNSPECIFIED = "SERVER_RESPONSE_TYPE_UNSPECIFIED",
  /** ACK - Message sent to client when message from client is accepted */
  ACK = "ACK",
  /** NACK - Message sent to client when message from client is rejected */
  NACK = "NACK",
  /** NACK_UNAUTHENTICATED -  */
  NACK_UNAUTHENTICATED = "NACK_UNAUTHENTICATED",
  /** NACK_SESSION_ALREADY_EXISTS -  */
  NACK_SESSION_ALREADY_EXISTS = "NACK_SESSION_ALREADY_EXISTS",
  /** NACK_DAILY_ROUND_EXCEEDED -  */
  NACK_DAILY_ROUND_EXCEEDED = "NACK_DAILY_ROUND_EXCEEDED",
  /** ERR - Message sent to client when internal server error occurs */
  ERR = "ERR",
}

export interface ClientMessage {
  msgType: ClientMessageType;
  payload: string;
}

export interface ServerMessage {
  msgType: ServerMessageType;
  ackType: ServerAckType;
  payload: string;
}

export interface ConnectServerPayload {
  sessionId: string;
  game: Game | undefined;
}

export interface TakeStarClientPayload {
  star: Star | undefined;
}

export interface SpceshipPosiitionClientPayload {
  position: Position | undefined;
}

export interface SpaceshipEventClientPayload {
  event: string;
}

export interface KeyboardEventClientPayload {
  event: string;
}

export interface DestroyObjectClientPayload {
  position: Position | undefined;
}

export interface Star {
  id: string;
  position: Position | undefined;
  score: number;
}

export interface Capsule {
  id: string;
  position: Position | undefined;
}

export interface Position {
  x: number;
  y: number;
}

export interface Map {
  stars: Star[];
  capsules: Capsule[];
}

export interface Spaceship {
  position: Position | undefined;
  booster: number;
  bullet: number;
}

export interface Game {
  /** UUID of the game. Used to identify the game in the api server which means new game score will be created using this id. */
  id: string;
  map: Map | undefined;
  spaceship: Spaceship | undefined;
  score: number;
  createTime: string | undefined;
}
