// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/outpost/nft.proto

/* eslint-disable */

export const protobufPackage = "ethereum.v1.outpost";

/**
 * ChainType enumeration represents the type of blockchain.
 * Does not support optimism, zksync, bsc yet
 */
export enum ChainType {
  /** CHAIN_UNSPECIFIED - Unspecified blockchain type. */
  CHAIN_UNSPECIFIED = "CHAIN_UNSPECIFIED",
  /** ETHEREUM - Ethereum Mainnet blockchain. */
  ETHEREUM = "ETHEREUM",
  /** POLYGON - Polygon Mainnet blockchain. */
  POLYGON = "POLYGON",
  /** ARBITRUM - Arbitrum Mainnet blockchain. */
  ARBITRUM = "ARBITRUM",
  /** OPTIMISM - Optimism Mainnet blockchain. */
  OPTIMISM = "OPTIMISM",
  /** BASE - Base Mainnet blockchain. */
  BASE = "BASE",
  /** BLAST - Blast Mainnet blockchain. */
  BLAST = "BLAST",
  /** ETHEREUM_SEPOLIA - Sepolia Testnet blockchain. */
  ETHEREUM_SEPOLIA = "ETHEREUM_SEPOLIA",
  /** POLYGON_MUMBAI - Polygon Testnet blockchain. */
  POLYGON_MUMBAI = "POLYGON_MUMBAI",
  /** BLAST_SEPOLIA - Blast Testnet blockchain. */
  BLAST_SEPOLIA = "BLAST_SEPOLIA",
}

export enum ContractType {
  /** CONTRACT_TYPE_UNSPECIFIED - Unspecified contract type. */
  CONTRACT_TYPE_UNSPECIFIED = "CONTRACT_TYPE_UNSPECIFIED",
  /** ERC721 - ERC721 contract type. */
  ERC721 = "ERC721",
  /** ERC1155 - ERC1155 contract type. */
  ERC1155 = "ERC1155",
}

/**
 * ListNFTsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListNFTsRequest {
  /**
   * The owner address of the profile.
   * This field is required if `sync_onchain` is true.
   * When `sync_onchain` is true, only EOA address is supported.
   */
  ownerAddress: string;
  /**
   * The maximum number of nfts to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When page token is not specified, nft assets are synced with the blockchain. If
   * page token is specified, nft assets are not synced with the blockchain and retrieved from the database.
   *
   * The page token is valid for only 2 hours.
   *
   * When paginating, all other parameters provided to `ListNFTs` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `equal`
   * * has_image
   *   * `negation`
   * * address
   *   * `equal`
   * * contract.address
   *   * `equal`
   * * contract.display_name
   *   * `equal`
   * * contract.chain
   *   * supported value is [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BASE, STARKNET, ETHEREUM_SEPOLIA, POLYGON_MUMBAI]
   *   * `equal`
   * * contract.type
   *   * `equal`
   *
   * Examples
   * * filter=name="nfts/MUMBAI/0xb4Afd0Ecb77460f0d8F93E7Fba93D7c18491f7a3/424"
   * * filter=has_image
   * * filter=address="0xa3d8090e4ea02d4cc76ecb2e8b09ab140cd11dee"
   * * filter=contract.address="0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
   * * filter=contract.display_name="CryptoKitties"
   * * filter=contract.chain=ETHEREUM
   * * filter=contract.type=ERC721
   */
  filter: string;
  /**
   * Supported value is ["true", "1", "yes", "y"], other then all this value will be treated as false.
   * If true, the service will fetch assets using third party NFT APIs.
   */
  syncOnchain: string;
}

/**
 * ListNFTsResponse response
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListNFTsResponse {
  /** The list of rows that matched the query. */
  nfts: NFT[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

/** ListNFTsDelegateRequest */
export interface ListNFTsDelegateRequest {
  /**
   * The owner address of the profile.
   * This field is required if `sync_onchain` is true.
   * When `sync_onchain` is true, only EOA address is supported.
   */
  ownerAddress: string;
}

/** ListNFTsDelegateRequest */
export interface ListNFTsDelegateResponse {
  /** The list of rows that matched the query. */
  nfts: NFT[];
}

/** GetNFTRequest */
export interface GetNFTRequest {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  nft: string;
}

/** ValidateNFTAccessRequest */
export interface ValidateNFTAccessRequest {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  nft: string;
  /** The owner address of the NFT asset. */
  ownerAddress: string;
}

export interface ValidateNFTAccessResponse {
  nft: NFT | undefined;
  access: boolean;
}

export interface ListOwnersRequest {
  nfts: string[];
}

export interface ListOwnersResponse {
  owners: { [key: string]: ListOwnersResponse_NFTs };
}

export interface ListOwnersResponse_NFTs {
  nfts: string[];
}

export interface ListOwnersResponse_OwnersEntry {
  key: string;
  value: ListOwnersResponse_NFTs | undefined;
}

/** ValidateNFTRequest */
export interface ValidateNFTRequest {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  nft: string;
}

export interface ValidateNFTResponse {
  valid: boolean;
}

export interface GetContractRequest {
  /**
   * The resource name of the nft contract to retrieve.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   */
  nftContract: string;
}

export interface CheckHolderOfContractRequest {
  /**
   * The resource name of the nft contract to retrieve.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   */
  nftContract: string;
  walletAddress: string;
}

export interface CheckHolderOfContractResponse {
  isHolder: boolean;
}

/** NFT message represents an NFT asset. */
export interface NFT {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  name: string;
  /** EIP-6551 TBA Address of the NFT asset. */
  address: string;
  /** Token ID of the NFT asset. */
  tokenId: string;
  /** Token Name of the NFT asset. */
  tokenName: string;
  /**
   * The URI of the NFT asset's image.
   * This URI can be cached version of image original URI
   * e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
   */
  imageUri: string;
  /**
   * The URI of the NFT asset's original image.
   * e.g. "https://www.larvalabs.com/cryptopunks/cryptopunk1.png"
   */
  imageOriginalUri: string;
  /**
   * The URI of the NFT asset's animation.
   * This URI can be cached version of animation original URI
   * This field is optional
   */
  animationUri?:
    | string
    | undefined;
  /**
   * The URI of the NFT asset's original animation.
   * This field is optional
   */
  animationOriginalUri?:
    | string
    | undefined;
  /** Additional metadata about the NFT asset. */
  metadataUri: string;
  /**
   * The owner address of the NFT asset.
   * This field is optional
   */
  ownerAddress?:
    | string
    | undefined;
  /**
   * The contract that owns the NFT asset.
   * Output only.
   */
  contract: NFTContract | undefined;
}

/** NFTContract message represents an NFT contract. */
export interface NFTContract {
  /**
   * The resource name of the nft contract.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   */
  name: string;
  /** The address of the NFT contract. */
  address: string;
  /** The display name of the NFT contract. */
  displayName: string;
  /** The symbol of the NFT contract. */
  symbol: string;
  /** The blockchain on which the NFT contract resides. */
  chain: ChainType;
  /** The type of the NFT contract. */
  type: ContractType;
  /** The URI of the contract image */
  imageUri: string;
}

/**
 * NFTService contains the function to interact with the NFT of the spacebar
 * It provides only the (explicit)SyncNFTs and ListNFTs API.
 * Implicit sync is performed real-time/periodically while monitoring the blockchain.
 */
export interface NFTService {
  /** GetNFT will return NFT. */
  GetNFT(request: GetNFTRequest): Promise<NFT>;
  /** ListNFTs will return NFTs. */
  ListNFTs(request: ListNFTsRequest): Promise<ListNFTsResponse>;
  /** ListOwners will return the owner of the NFT. */
  ListOwners(request: ListOwnersRequest): Promise<ListOwnersResponse>;
  /** ValidateNFTAccessRequest will validate user address access to the NFT. */
  ValidateNFTAccess(request: ValidateNFTAccessRequest): Promise<ValidateNFTAccessResponse>;
  /** ListNFTsDelegate will return NFTs using Delegate Cash. */
  ListNFTsDelegate(request: ListNFTsDelegateRequest): Promise<ListNFTsResponse>;
  /** ValidateNFT will validate given NFT is valid and image is available. */
  ValidateNFT(request: ValidateNFTRequest): Promise<ValidateNFTResponse>;
  /** GetContract will return NFTContract. */
  GetContract(request: GetContractRequest): Promise<NFTContract>;
  /** CheckHolderOfContract will check if the wallet address is the holder of the contract. */
  CheckHolderOfContract(request: CheckHolderOfContractRequest): Promise<CheckHolderOfContractResponse>;
}
