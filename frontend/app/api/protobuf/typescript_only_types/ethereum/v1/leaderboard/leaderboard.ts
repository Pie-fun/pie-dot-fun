// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/leaderboard/leaderboard.proto

/* eslint-disable */
import { type Profile } from "../profile/profile";
import { type GameMode, type PlayMode, type Score } from "../score/score";

export const protobufPackage = "ethereum.v1.leaderboard";

export interface GetTopRankerLeaderboardRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 5 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `GetLeaderbaord` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding season of leaderboard.
   * The default value is 1
   */
  season: number;
  /**
   * The corresponding play_mode of leaderboard.
   * The default value is "TIME_ATTACK"
   */
  playMode: PlayMode;
  /**
   * The corresponding game_mode of leaderboard.
   * The default value is "SINGLE_PLAYER"
   */
  gameMode: GameMode;
}

export interface GetTopRankerLeaderboardResponse {
  topRankers: TopRanker[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
  deadline: string | undefined;
}

export interface GetTopRankerRequest {
  profileAddress: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding play_mode of leaderboard.
   * The default value is "TIME_ATTACK"
   */
  playMode: PlayMode;
  /**
   * The corresponding game_mode of leaderboard.
   * The default value is "SINGLE_PLAYER"
   */
  gameMode: GameMode;
}

export interface RenderTopRankerLeaderboardRequest {
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding season of leaderboard.
   * The default value is 1
   */
  season: number;
  /**
   * The corresponding play_mode of leaderboard.
   * The default value is "TIME_ATTACK"
   */
  playMode: PlayMode;
  /**
   * The corresponding game_mode of leaderboard.
   * The default value is "SINGLE_PLAYER"
   */
  gameMode: GameMode;
  me: string;
}

/**
 * GetWeeklyTopCollectorLeaderboardRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface GetWeeklyTopCollectorLeaderboardRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 5 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListWeeklytimeTopCollectors` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding season of leaderboard.
   * The default value is 1
   */
  season: number;
}

export interface GetWeeklyTopCollectorLeaderboardResponse {
  topCollectors: StarHunter[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
  deadline: string | undefined;
}

export interface GetWeeklyTopCollectorRequest {
  profileAddress: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
}

/**
 * GetAllTimeTopCollectorsLeaderboardRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface GetAllTimeTopCollectorLeaderboardRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 5 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `GetAllTimeTopCollectorLeaderboard` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

export interface GetAllTimeTopCollectorLeaderboardResponse {
  topCollectors: StarHunter[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface RenderWeeklyStarHunterLeaderboardRequest {
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding season of leaderboard.
   * The default value is 1
   */
  season: number;
  me: string;
}

/**
 * GetWeeklyStarHunterLeaderboardRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface GetWeeklyStarHunterLeaderboardRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 5 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListWeeklytimeTopCollectors` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
  /**
   * The corresponding season of leaderboard.
   * The default value is 1
   */
  season: number;
}

export interface GetWeeklyStarHunterLeaderboardResponse {
  starHunters: StarHunter[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
  deadline: string | undefined;
}

export interface GetWeeklyStarHunterRequest {
  profileAddress: string;
  /**
   * The corresponding week of leaderboard.
   * If unspecified, the current week will be used.
   */
  week: number;
}

/**
 * GetAllTimeStarHuntersLeaderboardRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface GetAllTimeStarHunterLeaderboardRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 5 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `GetAllTimeStarHunterLeaderboard` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

export interface GetAllTimeStarHunterLeaderboardResponse {
  starHunters: StarHunter[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface ImageResponse {
  image: Uint8Array;
}

export interface TopRanker {
  rank: number;
  profile: Profile | undefined;
  score: Score | undefined;
}

export interface StarHunter {
  rank: number;
  profile: Profile | undefined;
  totalStars: number;
}

export interface RenderStarHuntersLeaderboardImageRequest {
  starHunters: StarHunterSlim[];
  me: StarHunterSlim | undefined;
}

export interface RenderTopRankerLeaderboardImageRequest {
  topRankers: TopRankerSlim[];
  me: TopRankerSlim | undefined;
}

export interface StarHunterSlim {
  rank: number;
  profile: string;
  totalStars: number;
}

export interface TopRankerSlim {
  rank: number;
  profile: string;
  scorePoint: number;
}

/** LeaderboardService contains the function to get leaderboard */
export interface LeaderboardService {
  /** GetTopRankerLeaderboard will return best score leaderboard */
  GetTopRankerLeaderboard(request: GetTopRankerLeaderboardRequest): Promise<GetTopRankerLeaderboardResponse>;
  /** GetTopRanker will return weekly top collector. */
  GetTopRanker(request: GetTopRankerRequest): Promise<TopRanker>;
  /** RenderTopRankerLeaderboard will render weekly top collectors image. */
  RenderTopRankerLeaderboard(request: RenderTopRankerLeaderboardRequest): Promise<ImageResponse>;
  /** GetWeeklyTopCollectorLeaderboard will return weekly top collectors. */
  GetWeeklyTopCollectorLeaderboard(
    request: GetWeeklyTopCollectorLeaderboardRequest,
  ): Promise<GetWeeklyTopCollectorLeaderboardResponse>;
  /** GetWeeklyTopCollector will return weekly top collector. */
  GetWeeklyTopCollector(request: GetWeeklyTopCollectorRequest): Promise<StarHunter>;
  /** RenderWeeklyTopCollectorLeaderboard will render weekly top collectors image. */
  RenderWeeklyTopCollectorLeaderboard(request: RenderWeeklyStarHunterLeaderboardRequest): Promise<ImageResponse>;
  /** GetAllTimeTopCollectorLeaderboard will return all time top collectors. */
  GetAllTimeTopCollectorLeaderboard(
    request: GetAllTimeTopCollectorLeaderboardRequest,
  ): Promise<GetAllTimeTopCollectorLeaderboardResponse>;
  /** GetWeeklyStarHunterLeaderboard will return weekly top collectors. */
  GetWeeklyStarHunterLeaderboard(
    request: GetWeeklyStarHunterLeaderboardRequest,
  ): Promise<GetWeeklyStarHunterLeaderboardResponse>;
  /** GetWeeklyStarHunter will return weekly top collector. */
  GetWeeklyStarHunter(request: GetWeeklyStarHunterRequest): Promise<StarHunter>;
  /** RenderWeeklyStarHunterLeaderboard will render weekly top collectors image. */
  RenderWeeklyStarHunterLeaderboard(request: RenderWeeklyStarHunterLeaderboardRequest): Promise<ImageResponse>;
}
