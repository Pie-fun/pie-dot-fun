// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/chain/query.proto

/* eslint-disable */
import { type ChainType } from "../outpost/nft";

export const protobufPackage = "ethereum.v1.chain";

export enum DelegationType {
  DELEGATION_TYPE_UNSPECIFIED = "DELEGATION_TYPE_UNSPECIFIED",
  DELEGATION_TYPE_ALL = "DELEGATION_TYPE_ALL",
  DELEGATION_TYPE_CONTRACT = "DELEGATION_TYPE_CONTRACT",
  DELEGATION_TYPE_ERC721 = "DELEGATION_TYPE_ERC721",
}

/** The state of the transaction receipt. */
export enum ReceiptStatus {
  /** RECEIPT_STATUS_FAILED - RECEIPT_STATUS_FAILED is the status code of a transaction if execution failed. */
  RECEIPT_STATUS_FAILED = "RECEIPT_STATUS_FAILED",
  /** RECEIPT_STATUS_SUCCESSFUL - RECEIPT_STATUS_SUCCESSFUL is the status code of a transaction if execution succeeded. */
  RECEIPT_STATUS_SUCCESSFUL = "RECEIPT_STATUS_SUCCESSFUL",
}

export interface QueryReceiptRequest {
  txHash: string;
  /**
   * e.g. "60s", "5m", "1h30m"
   *
   * The amount of time to wait for the transaction to be mined.
   *
   * If the transaction is not mined within this time, server will return 504 Gateway Timeout(DEADLINE_EXCEEDED).
   *
   * The default is 5 minutes.
   *
   * The maximum allowed timeout is 30 minutes. If the value is greater than 30 minutes, server will automatically set it to 30 minutes.
   *
   * If longer timeout is needed, please retry after the previous request times out.
   */
  timeout: string;
}

export interface QueryQueryTransactionCountRequest {
  address: string;
  blockNumber: number;
}

export interface QueryQueryTransactionCountResponse {
  count: number;
}

export interface QueryDelegateCashRequest {
  address: string;
  chains: ChainType[];
}

export interface QueryDelegateCashResponse {
  delegates: Delegate[];
}

export interface Delegate {
  type: DelegationType;
  from: string;
  to: string;
  contract: string;
  tokenId: string;
}

export interface Receipt {
  status: ReceiptStatus;
  transactionHash: string;
  blockHash: string;
  blockNumber: string;
  cumulativeGasUsed: number;
  gasUsed: number;
  contractAddress: string;
}

export interface MintScoreEvent {
  category?: MintScoreEvent_ScoreCategory | undefined;
  score?: number | undefined;
  address?: string | undefined;
  tokenId?: string | undefined;
}

export enum MintScoreEvent_ScoreCategory {
  SCORE_CATEGORY_UNSPECIFIED = "SCORE_CATEGORY_UNSPECIFIED",
  SINGLE_PLAYER = "SINGLE_PLAYER",
  MULTI_PLAYER = "MULTI_PLAYER",
}

export interface DeployTBAAndMintProtoShipEvent {
  profileTba: string;
  tokenId: string;
}

/** ChainQueryService is the service that handles all chain requests. */
export interface ChainQueryService {
  QueryReceipt(request: QueryReceiptRequest): Promise<Receipt>;
  QueryTransactionCount(request: QueryQueryTransactionCountRequest): Promise<QueryQueryTransactionCountResponse>;
  QueryDelegateCash(request: QueryDelegateCashRequest): Promise<QueryDelegateCashResponse>;
}
