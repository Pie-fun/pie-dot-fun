// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/chain/sign.proto

/* eslint-disable */

export const protobufPackage = "ethereum.v1.chain";

export interface SignWKeyMintRequest {
  eoaAddress: string;
}

export interface SignKeyMintRequest {
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  profileContractAddress?:
    | string
    | undefined;
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  profileTokenId?:
    | string
    | undefined;
  /** This field will be injected from the auth token by Gateway, which means web client do not need to pass this field. */
  spaceshipTokenId?: string | undefined;
  keyTokenId: string;
  ethContribution: string;
}

export interface SignScoreMintRequest {
  profileAddress: string;
  scoreId: string;
}

export interface SignMessageRequest {
  message: string;
}

export interface SignatureResponse {
  signature: string;
  message: string;
}

export interface SignatureTypedResponse {
  signature: string;
  message: { [key: string]: string };
}

export interface SignatureTypedResponse_MessageEntry {
  key: string;
  value: string;
}

/** ChainSignService is the service that handles signing messages. */
export interface ChainSignService {
  /**
   * SignBadgeClaim signs a w key mint with the given EOA address.
   *
   * 403 error will be returned if the given EOA address is on the whitelist.
   */
  SignWkeyMint(request: SignWKeyMintRequest): Promise<SignatureResponse>;
  /**
   * SignKeyMint signs a key mint with the given token id.
   *
   * 403 error will be returned if the given profile address not not eligible to mint the badge.
   * 400 error will be returned if the given token id is invalid
   */
  SignKeyMint(request: SignKeyMintRequest): Promise<SignatureTypedResponse>;
  /**
   * SignScoreMint signs a score mint with the given profile address and score ID.
   *
   * Not implemented yet.
   */
  SignScoreMint(request: SignScoreMintRequest): Promise<SignatureResponse>;
  /**
   * SignMessage signs a message with arbitrary message.
   *
   * This rpc is not open to the public request and only used by the internal service.
   */
  SignMessage(request: SignMessageRequest): Promise<SignatureResponse>;
}
