// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/score/score.proto

/* eslint-disable */

export const protobufPackage = "ethereum.v1.score";

export enum GameMode {
  /** GAME_MODE_UNSPECIFIED - default value. this value is unused. */
  GAME_MODE_UNSPECIFIED = "GAME_MODE_UNSPECIFIED",
  /** TIME_ATTACK - time_attack */
  TIME_ATTACK = "TIME_ATTACK",
}

export enum PlayMode {
  /** PLAY_MODE_UNSPECIFIED - default value. this value is unused. */
  PLAY_MODE_UNSPECIFIED = "PLAY_MODE_UNSPECIFIED",
  /** SINGLE_PLAYER -  */
  SINGLE_PLAYER = "SINGLE_PLAYER",
}

/** CreateScoreRequest */
export interface CreateScoreRequest {
  /** score to create */
  score: Score | undefined;
}

/**
 * ListScoresRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListScoresRequest {
  /**
   * The maximum number of scores to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListScores` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * point
   *   * `>`, `>=`, `=`, `<=`, `<`
   * * week
   *   * `>`, `>=`, `=`, `<=`, `<`
   * * minted
   *   * `negation`
   * * play_mode
   *   * equal`
   * * game_mode
   *   * equal`
   *
   * Examples
   * * filter=week=10
   * * filter=point>300
   * * filter=minted
   * * filter=game_mode="SINGLE_PLAYER"
   * * filter=play_mode="TIME_ATTACK"
   * * filter=week=10 AND minted AND play_mode="TIME_ATTACK"
   * * filter=week>10 AND week<20 AND minted AND play_mode="TIME_ATTACK"
   */
  filter: string;
  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by create_time
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Examples
   * * order_by="point desc,create_time asc"
   */
  orderBy: string;
}

/**
 * ListScoresResponse response
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListScoresResponse {
  /** The list of rows that matched the query. */
  scores: Score[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface GetScoreRequest {
  /**
   * The name of the score to retrieve.
   * Format: scores/{score_uuid}
   */
  score: string;
}

export interface Score {
  /**
   * The resource name of the Score.
   * Format: scores/{uuid}
   */
  name: string;
  /**
   * The resource name of the owner Profile.
   * Format: profiles/{address}
   */
  profile: string;
  /** created time of score */
  createTime:
    | string
    | undefined;
  /** point of score */
  point: number;
  /** Game mode of score. */
  gameMode: GameMode;
  /** Play mode of score. */
  playMode: PlayMode;
  /** week of score */
  week: number;
}

/** ScoreService contains the function to interact with the Score of the spacebar */
export interface ScoreService {
  /** CreateScore create Score with Score */
  CreateScore(request: CreateScoreRequest): Promise<Score>;
  /** ListScores will return scores. */
  ListScores(request: ListScoresRequest): Promise<ListScoresResponse>;
  /** GetScore */
  GetScore(request: GetScoreRequest): Promise<Score>;
}
