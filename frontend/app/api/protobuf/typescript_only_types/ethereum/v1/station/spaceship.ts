// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/station/spaceship.proto

/* eslint-disable */

export const protobufPackage = "ethereum.v1.station";

/** SpaceshipState */
export enum SpaceshipState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** RENTED -  */
  RENTED = "RENTED",
  /** BURNED -  */
  BURNED = "BURNED",
  /** UPGRADED - means upgraded to ownership */
  UPGRADED = "UPGRADED",
}

/** SpaceshipType */
export enum SpaceshipType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** PROTOSHIP -  */
  PROTOSHIP = "PROTOSHIP",
  /** OWNERSHIP - Semantic lock for rent. */
  OWNERSHIP = "OWNERSHIP",
}

/** CreateSpaceshipRequest */
export interface CreateSpaceshipRequest {
  /** spaceship to create */
  spaceship: Spaceship | undefined;
}

/** GetSpaceshipRequest */
export interface GetSpaceshipRequest {
  /**
   * The name of the spaceship to retrieve.
   * Format: spaceships/{spaceship}
   */
  spaceship: string;
}

/** UpdateSpaceshipRequest */
export interface UpdateSpaceshipRequest {
  /** spaceship to update */
  spaceship:
    | Spaceship
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nft.metadata[left_wing]"]
   * ["nickname", "nft.metadata"]
   */
  updateMask: string[] | undefined;
}

/** GetSpaceshipRequest */
export interface MintSpaceshipRequest {
}

/**
 * ListSpaceshipsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListSpaceshipsRequest {
  /**
   * The maximum number of spaceships to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSpaceships` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `equal`
   * * profile
   *   * `equal`
   * * create_time
   *   * `>`
   * * title
   *   * `contains`
   * * state
   *   * `equal`
   * * type
   *   * `equal`
   * * is_upgraded
   *   * `negation`
   *
   * Examples
   * * filter=profile="profiles/0x927c3Ba1B0F8300E1Cc5DcA825411d756A8D4001"
   * * filter=state=RENT_WAITING
   * * filter=NOT rentable
   * * filter=rentable
   */
  filter: string;
}

/**
 * ListSpaceshipsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListSpaceshipsResponse {
  /** The list of rows that matched the query. */
  spaceships: Spaceship[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

/** Spaceship is type of Spaceship */
export interface Spaceship {
  /**
   * The resource name of Spaceship.
   * Format: spaceships/{address}
   */
  name: string;
  /** 6551 address of Spaceship NFT */
  address: string;
  /**
   * The owner address of Spaceship.
   * This address can be PFP NFT TBA or EOA.
   * This field will be empty if the Spaceship is burned.
   */
  ownerAddress: string;
  /**
   * The created time of Spaceship
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The last updated time of Spaceship
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  updateTime:
    | string
    | undefined;
  /**
   * The nickname of Spaceship.
   * Internship has null value.
   * This field is optional
   */
  nickname?:
    | string
    | undefined;
  /** state of Spaceship */
  state: SpaceshipState;
  type: SpaceshipType;
  /** Whether the Spaceship is upgraded to Ownership */
  isUpgraded: boolean;
  /** NFT of Spaceship */
  nft: SpaceshipNFT | undefined;
}

/** SpaceshipNFT message represents an Spaceship's NFT. */
export interface SpaceshipNFT {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  name: string;
  /** Token ID of the NFT asset. */
  tokenId: string;
  /**
   * The URI of the NFT asset's image.
   * This URI can be cached version of image original URI
   * e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
   */
  imageUri: string;
  /** The Metadata URI of the NFT asset. */
  metadataUri: string;
}

/** SpaceshipService contains the function to interact with the Spaceship of the spacebar */
export interface SpaceshipService {
  /** ListSpaceships will return spaceships. */
  ListSpaceships(request: ListSpaceshipsRequest): Promise<ListSpaceshipsResponse>;
  /** GetSpaceship */
  GetSpaceship(request: GetSpaceshipRequest): Promise<Spaceship>;
  /** UpdateSpaceship update Spaceship */
  UpdateSpaceship(request: UpdateSpaceshipRequest): Promise<Spaceship>;
}
