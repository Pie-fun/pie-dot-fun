// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/game/game.proto

package game

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGameServiceClient is a mock of GameServiceClient interface.
type MockGameServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceClientMockRecorder
}

// MockGameServiceClientMockRecorder is the mock recorder for MockGameServiceClient.
type MockGameServiceClientMockRecorder struct {
	mock *MockGameServiceClient
}

// NewMockGameServiceClient creates a new mock instance.
func NewMockGameServiceClient(ctrl *gomock.Controller) *MockGameServiceClient {
	mock := &MockGameServiceClient{ctrl: ctrl}
	mock.recorder = &MockGameServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServiceClient) EXPECT() *MockGameServiceClientMockRecorder {
	return m.recorder
}

// GetDailyPlayCount mocks base method.
func (m *MockGameServiceClient) GetDailyPlayCount(ctx context.Context, in *GetDailyPlayCountRequest, opts ...grpc.CallOption) (*GetDailyPlayCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDailyPlayCount", varargs...)
	ret0, _ := ret[0].(*GetDailyPlayCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyPlayCount indicates an expected call of GetDailyPlayCount.
func (mr *MockGameServiceClientMockRecorder) GetDailyPlayCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyPlayCount", reflect.TypeOf((*MockGameServiceClient)(nil).GetDailyPlayCount), varargs...)
}

// MockGameServiceServer is a mock of GameServiceServer interface.
type MockGameServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceServerMockRecorder
}

// MockGameServiceServerMockRecorder is the mock recorder for MockGameServiceServer.
type MockGameServiceServerMockRecorder struct {
	mock *MockGameServiceServer
}

// NewMockGameServiceServer creates a new mock instance.
func NewMockGameServiceServer(ctrl *gomock.Controller) *MockGameServiceServer {
	mock := &MockGameServiceServer{ctrl: ctrl}
	mock.recorder = &MockGameServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServiceServer) EXPECT() *MockGameServiceServerMockRecorder {
	return m.recorder
}

// GetDailyPlayCount mocks base method.
func (m *MockGameServiceServer) GetDailyPlayCount(ctx context.Context, in *GetDailyPlayCountRequest) (*GetDailyPlayCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyPlayCount", ctx, in)
	ret0, _ := ret[0].(*GetDailyPlayCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyPlayCount indicates an expected call of GetDailyPlayCount.
func (mr *MockGameServiceServerMockRecorder) GetDailyPlayCount(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyPlayCount", reflect.TypeOf((*MockGameServiceServer)(nil).GetDailyPlayCount), ctx, in)
}
