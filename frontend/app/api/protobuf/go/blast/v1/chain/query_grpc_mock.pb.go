// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/chain/query.proto

package chain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChainQueryServiceClient is a mock of ChainQueryServiceClient interface.
type MockChainQueryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainQueryServiceClientMockRecorder
}

// MockChainQueryServiceClientMockRecorder is the mock recorder for MockChainQueryServiceClient.
type MockChainQueryServiceClientMockRecorder struct {
	mock *MockChainQueryServiceClient
}

// NewMockChainQueryServiceClient creates a new mock instance.
func NewMockChainQueryServiceClient(ctrl *gomock.Controller) *MockChainQueryServiceClient {
	mock := &MockChainQueryServiceClient{ctrl: ctrl}
	mock.recorder = &MockChainQueryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainQueryServiceClient) EXPECT() *MockChainQueryServiceClientMockRecorder {
	return m.recorder
}

// QueryBalanceOf mocks base method.
func (m *MockChainQueryServiceClient) QueryBalanceOf(ctx context.Context, in *QueryBalanceOfRequest, opts ...grpc.CallOption) (*QueryBalanceOfResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBalanceOf", varargs...)
	ret0, _ := ret[0].(*QueryBalanceOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceOf indicates an expected call of QueryBalanceOf.
func (mr *MockChainQueryServiceClientMockRecorder) QueryBalanceOf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceOf", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryBalanceOf), varargs...)
}

// QueryDelegateCash mocks base method.
func (m *MockChainQueryServiceClient) QueryDelegateCash(ctx context.Context, in *QueryDelegateCashRequest, opts ...grpc.CallOption) (*QueryDelegateCashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryDelegateCash", varargs...)
	ret0, _ := ret[0].(*QueryDelegateCashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDelegateCash indicates an expected call of QueryDelegateCash.
func (mr *MockChainQueryServiceClientMockRecorder) QueryDelegateCash(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDelegateCash", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryDelegateCash), varargs...)
}

// QueryOwnerOf mocks base method.
func (m *MockChainQueryServiceClient) QueryOwnerOf(ctx context.Context, in *QueryOwnerOfRequest, opts ...grpc.CallOption) (*QueryOwnerOfResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOwnerOf", varargs...)
	ret0, _ := ret[0].(*QueryOwnerOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOwnerOf indicates an expected call of QueryOwnerOf.
func (mr *MockChainQueryServiceClientMockRecorder) QueryOwnerOf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOwnerOf", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryOwnerOf), varargs...)
}

// QueryReceipt mocks base method.
func (m *MockChainQueryServiceClient) QueryReceipt(ctx context.Context, in *QueryReceiptRequest, opts ...grpc.CallOption) (*Receipt, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryReceipt", varargs...)
	ret0, _ := ret[0].(*Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReceipt indicates an expected call of QueryReceipt.
func (mr *MockChainQueryServiceClientMockRecorder) QueryReceipt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReceipt", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryReceipt), varargs...)
}

// QueryStakingAmount mocks base method.
func (m *MockChainQueryServiceClient) QueryStakingAmount(ctx context.Context, in *QueryStakingAmountRequest, opts ...grpc.CallOption) (*QueryStakingAmountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryStakingAmount", varargs...)
	ret0, _ := ret[0].(*QueryStakingAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStakingAmount indicates an expected call of QueryStakingAmount.
func (mr *MockChainQueryServiceClientMockRecorder) QueryStakingAmount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStakingAmount", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryStakingAmount), varargs...)
}

// QueryStakingContractAddress mocks base method.
func (m *MockChainQueryServiceClient) QueryStakingContractAddress(ctx context.Context, in *QueryStakingContractAddressRequest, opts ...grpc.CallOption) (*QueryStakingContractAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryStakingContractAddress", varargs...)
	ret0, _ := ret[0].(*QueryStakingContractAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStakingContractAddress indicates an expected call of QueryStakingContractAddress.
func (mr *MockChainQueryServiceClientMockRecorder) QueryStakingContractAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStakingContractAddress", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryStakingContractAddress), varargs...)
}

// QueryTransactionCount mocks base method.
func (m *MockChainQueryServiceClient) QueryTransactionCount(ctx context.Context, in *QueryQueryTransactionCountRequest, opts ...grpc.CallOption) (*QueryQueryTransactionCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTransactionCount", varargs...)
	ret0, _ := ret[0].(*QueryQueryTransactionCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTransactionCount indicates an expected call of QueryTransactionCount.
func (mr *MockChainQueryServiceClientMockRecorder) QueryTransactionCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTransactionCount", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryTransactionCount), varargs...)
}

// MockChainQueryServiceServer is a mock of ChainQueryServiceServer interface.
type MockChainQueryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChainQueryServiceServerMockRecorder
}

// MockChainQueryServiceServerMockRecorder is the mock recorder for MockChainQueryServiceServer.
type MockChainQueryServiceServerMockRecorder struct {
	mock *MockChainQueryServiceServer
}

// NewMockChainQueryServiceServer creates a new mock instance.
func NewMockChainQueryServiceServer(ctrl *gomock.Controller) *MockChainQueryServiceServer {
	mock := &MockChainQueryServiceServer{ctrl: ctrl}
	mock.recorder = &MockChainQueryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainQueryServiceServer) EXPECT() *MockChainQueryServiceServerMockRecorder {
	return m.recorder
}

// QueryBalanceOf mocks base method.
func (m *MockChainQueryServiceServer) QueryBalanceOf(ctx context.Context, in *QueryBalanceOfRequest) (*QueryBalanceOfResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceOf", ctx, in)
	ret0, _ := ret[0].(*QueryBalanceOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceOf indicates an expected call of QueryBalanceOf.
func (mr *MockChainQueryServiceServerMockRecorder) QueryBalanceOf(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceOf", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryBalanceOf), ctx, in)
}

// QueryDelegateCash mocks base method.
func (m *MockChainQueryServiceServer) QueryDelegateCash(ctx context.Context, in *QueryDelegateCashRequest) (*QueryDelegateCashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDelegateCash", ctx, in)
	ret0, _ := ret[0].(*QueryDelegateCashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDelegateCash indicates an expected call of QueryDelegateCash.
func (mr *MockChainQueryServiceServerMockRecorder) QueryDelegateCash(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDelegateCash", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryDelegateCash), ctx, in)
}

// QueryOwnerOf mocks base method.
func (m *MockChainQueryServiceServer) QueryOwnerOf(ctx context.Context, in *QueryOwnerOfRequest) (*QueryOwnerOfResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOwnerOf", ctx, in)
	ret0, _ := ret[0].(*QueryOwnerOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOwnerOf indicates an expected call of QueryOwnerOf.
func (mr *MockChainQueryServiceServerMockRecorder) QueryOwnerOf(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOwnerOf", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryOwnerOf), ctx, in)
}

// QueryReceipt mocks base method.
func (m *MockChainQueryServiceServer) QueryReceipt(ctx context.Context, in *QueryReceiptRequest) (*Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReceipt", ctx, in)
	ret0, _ := ret[0].(*Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReceipt indicates an expected call of QueryReceipt.
func (mr *MockChainQueryServiceServerMockRecorder) QueryReceipt(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReceipt", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryReceipt), ctx, in)
}

// QueryStakingAmount mocks base method.
func (m *MockChainQueryServiceServer) QueryStakingAmount(ctx context.Context, in *QueryStakingAmountRequest) (*QueryStakingAmountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStakingAmount", ctx, in)
	ret0, _ := ret[0].(*QueryStakingAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStakingAmount indicates an expected call of QueryStakingAmount.
func (mr *MockChainQueryServiceServerMockRecorder) QueryStakingAmount(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStakingAmount", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryStakingAmount), ctx, in)
}

// QueryStakingContractAddress mocks base method.
func (m *MockChainQueryServiceServer) QueryStakingContractAddress(ctx context.Context, in *QueryStakingContractAddressRequest) (*QueryStakingContractAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStakingContractAddress", ctx, in)
	ret0, _ := ret[0].(*QueryStakingContractAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStakingContractAddress indicates an expected call of QueryStakingContractAddress.
func (mr *MockChainQueryServiceServerMockRecorder) QueryStakingContractAddress(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStakingContractAddress", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryStakingContractAddress), ctx, in)
}

// QueryTransactionCount mocks base method.
func (m *MockChainQueryServiceServer) QueryTransactionCount(ctx context.Context, in *QueryQueryTransactionCountRequest) (*QueryQueryTransactionCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTransactionCount", ctx, in)
	ret0, _ := ret[0].(*QueryQueryTransactionCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTransactionCount indicates an expected call of QueryTransactionCount.
func (mr *MockChainQueryServiceServerMockRecorder) QueryTransactionCount(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTransactionCount", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryTransactionCount), ctx, in)
}
