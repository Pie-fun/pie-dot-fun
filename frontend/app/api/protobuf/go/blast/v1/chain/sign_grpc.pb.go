// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/chain/sign.proto

package chain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainSignServiceClient is the client API for ChainSignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainSignServiceClient interface {
	// SignMessage signs a message with arbitrary message.
	//
	// This rpc is not open to the public request and only used by the internal service.
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
	// SignMintSquare signs a square mint with the given parameters.
	//
	// 403 error will be returned if the given owner address not not eligible to mint the square.
	SignMintSquare(ctx context.Context, in *SignMintSquareRequest, opts ...grpc.CallOption) (*SignMintSquareResponse, error)
	// SignJoinSquare signs a square mint with the given parameters.
	SignJoinSquare(ctx context.Context, in *SignJoinSquareRequest, opts ...grpc.CallOption) (*SignJoinSquareResponse, error)
	// SignTransferSquare signs a square mint with the given parameters.
	SignTransferSquare(ctx context.Context, in *SignTransferSquareRequest, opts ...grpc.CallOption) (*SignTransferSquareResponse, error)
	// SignUploadScore signs a score creation with the given parameters.
	SignUploadScore(ctx context.Context, in *SignUploadScoreRequest, opts ...grpc.CallOption) (*SignUploadScoreResponse, error)
}

type chainSignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainSignServiceClient(cc grpc.ClientConnInterface) ChainSignServiceClient {
	return &chainSignServiceClient{cc}
}

func (c *chainSignServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.chain.ChainSignService/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignMintSquare(ctx context.Context, in *SignMintSquareRequest, opts ...grpc.CallOption) (*SignMintSquareResponse, error) {
	out := new(SignMintSquareResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.chain.ChainSignService/SignMintSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignJoinSquare(ctx context.Context, in *SignJoinSquareRequest, opts ...grpc.CallOption) (*SignJoinSquareResponse, error) {
	out := new(SignJoinSquareResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.chain.ChainSignService/SignJoinSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignTransferSquare(ctx context.Context, in *SignTransferSquareRequest, opts ...grpc.CallOption) (*SignTransferSquareResponse, error) {
	out := new(SignTransferSquareResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.chain.ChainSignService/SignTransferSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignUploadScore(ctx context.Context, in *SignUploadScoreRequest, opts ...grpc.CallOption) (*SignUploadScoreResponse, error) {
	out := new(SignUploadScoreResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.chain.ChainSignService/SignUploadScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainSignServiceServer is the server API for ChainSignService service.
// All implementations must embed UnimplementedChainSignServiceServer
// for forward compatibility
type ChainSignServiceServer interface {
	// SignMessage signs a message with arbitrary message.
	//
	// This rpc is not open to the public request and only used by the internal service.
	SignMessage(context.Context, *SignMessageRequest) (*SignatureResponse, error)
	// SignMintSquare signs a square mint with the given parameters.
	//
	// 403 error will be returned if the given owner address not not eligible to mint the square.
	SignMintSquare(context.Context, *SignMintSquareRequest) (*SignMintSquareResponse, error)
	// SignJoinSquare signs a square mint with the given parameters.
	SignJoinSquare(context.Context, *SignJoinSquareRequest) (*SignJoinSquareResponse, error)
	// SignTransferSquare signs a square mint with the given parameters.
	SignTransferSquare(context.Context, *SignTransferSquareRequest) (*SignTransferSquareResponse, error)
	// SignUploadScore signs a score creation with the given parameters.
	SignUploadScore(context.Context, *SignUploadScoreRequest) (*SignUploadScoreResponse, error)
	mustEmbedUnimplementedChainSignServiceServer()
}

// UnimplementedChainSignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainSignServiceServer struct {
}

func (UnimplementedChainSignServiceServer) SignMessage(context.Context, *SignMessageRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedChainSignServiceServer) SignMintSquare(context.Context, *SignMintSquareRequest) (*SignMintSquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMintSquare not implemented")
}
func (UnimplementedChainSignServiceServer) SignJoinSquare(context.Context, *SignJoinSquareRequest) (*SignJoinSquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignJoinSquare not implemented")
}
func (UnimplementedChainSignServiceServer) SignTransferSquare(context.Context, *SignTransferSquareRequest) (*SignTransferSquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransferSquare not implemented")
}
func (UnimplementedChainSignServiceServer) SignUploadScore(context.Context, *SignUploadScoreRequest) (*SignUploadScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUploadScore not implemented")
}
func (UnimplementedChainSignServiceServer) mustEmbedUnimplementedChainSignServiceServer() {}

// UnsafeChainSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainSignServiceServer will
// result in compilation errors.
type UnsafeChainSignServiceServer interface {
	mustEmbedUnimplementedChainSignServiceServer()
}

func RegisterChainSignServiceServer(s grpc.ServiceRegistrar, srv ChainSignServiceServer) {
	s.RegisterService(&ChainSignService_ServiceDesc, srv)
}

func _ChainSignService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.chain.ChainSignService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignMintSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMintSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignMintSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.chain.ChainSignService/SignMintSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignMintSquare(ctx, req.(*SignMintSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignJoinSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignJoinSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignJoinSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.chain.ChainSignService/SignJoinSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignJoinSquare(ctx, req.(*SignJoinSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignTransferSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransferSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignTransferSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.chain.ChainSignService/SignTransferSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignTransferSquare(ctx, req.(*SignTransferSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignUploadScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUploadScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignUploadScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.chain.ChainSignService/SignUploadScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignUploadScore(ctx, req.(*SignUploadScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainSignService_ServiceDesc is the grpc.ServiceDesc for ChainSignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainSignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.chain.ChainSignService",
	HandlerType: (*ChainSignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMessage",
			Handler:    _ChainSignService_SignMessage_Handler,
		},
		{
			MethodName: "SignMintSquare",
			Handler:    _ChainSignService_SignMintSquare_Handler,
		},
		{
			MethodName: "SignJoinSquare",
			Handler:    _ChainSignService_SignJoinSquare_Handler,
		},
		{
			MethodName: "SignTransferSquare",
			Handler:    _ChainSignService_SignTransferSquare_Handler,
		},
		{
			MethodName: "SignUploadScore",
			Handler:    _ChainSignService_SignUploadScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/chain/sign.proto",
}
