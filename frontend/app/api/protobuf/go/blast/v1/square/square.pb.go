// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/square/square.proto

package square

import (
	chain "github.com/ao-labs/spacebar-apis/go/blast/v1/chain"
	_ "github.com/ao-labs/spacebar-apis/go/blast/v1/nft"
	_ "github.com/ao-labs/spacebar-apis/go/blast/v1/user"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SquareView enumeration represents the view of a square.
// The view controls the amount of information returned.
//
// Reference
// https://cloud.google.com/apis/design/design_patterns#list_flattening and
// https://google.aip.dev/157
type SquareView int32

const (
	// The default / unset value.
	// The API will default to the SQUARE_VIEW_NOT_MEMBER view.
	SquareView_SQUARE_VIEW_UNSPECIFIED SquareView = 0
	// Include everything.
	SquareView_SQUARE_VIEW_OWNER SquareView = 1
	// Include only fields that are safe to be exposed to members
	// Do not include `privateâ€œ
	SquareView_SQUARE_VIEW_MEMBER SquareView = 2
	// Include only fields that are safe to be exposed to non-members
	// Do not include `private`
	// This is the default value for GetSquare.
	SquareView_SQUARE_VIEW_NOT_MEMBER SquareView = 3
)

// Enum value maps for SquareView.
var (
	SquareView_name = map[int32]string{
		0: "SQUARE_VIEW_UNSPECIFIED",
		1: "SQUARE_VIEW_OWNER",
		2: "SQUARE_VIEW_MEMBER",
		3: "SQUARE_VIEW_NOT_MEMBER",
	}
	SquareView_value = map[string]int32{
		"SQUARE_VIEW_UNSPECIFIED": 0,
		"SQUARE_VIEW_OWNER":       1,
		"SQUARE_VIEW_MEMBER":      2,
		"SQUARE_VIEW_NOT_MEMBER":  3,
	}
)

func (x SquareView) Enum() *SquareView {
	p := new(SquareView)
	*p = x
	return p
}

func (x SquareView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquareView) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[0].Descriptor()
}

func (SquareView) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[0]
}

func (x SquareView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquareView.Descriptor instead.
func (SquareView) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{0}
}

// The state of square
type SquareState int32

const (
	// default value. this value is unused.
	SquareState_STATE_UNSPECIFIED SquareState = 0
	// The square is created at server side and pending for onchain tx is finalized
	SquareState_CREATED_PENDING SquareState = 1
	// The square is owned by Spacebar user.
	SquareState_OWNED SquareState = 2
	// The owner of the square is not a Spacebar user.
	SquareState_UNOWNED SquareState = 3
)

// Enum value maps for SquareState.
var (
	SquareState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATED_PENDING",
		2: "OWNED",
		3: "UNOWNED",
	}
	SquareState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATED_PENDING":   1,
		"OWNED":             2,
		"UNOWNED":           3,
	}
)

func (x SquareState) Enum() *SquareState {
	p := new(SquareState)
	*p = x
	return p
}

func (x SquareState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquareState) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[1].Descriptor()
}

func (SquareState) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[1]
}

func (x SquareState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquareState.Descriptor instead.
func (SquareState) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{1}
}

// The join type of square
type SquareJoinType int32

const (
	// default value. this value is unused.
	SquareJoinType_TYPE_UNSPECIFIED SquareJoinType = 0
	// Anyone can join the square.
	SquareJoinType_PUBLIC SquareJoinType = 1
	// Only user with the code can join the square.
	SquareJoinType_PRIVATE SquareJoinType = 2
	// Only user with the specific token can join the square.
	SquareJoinType_TOKEN_GATED SquareJoinType = 3
)

// Enum value maps for SquareJoinType.
var (
	SquareJoinType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "PUBLIC",
		2: "PRIVATE",
		3: "TOKEN_GATED",
	}
	SquareJoinType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"PUBLIC":           1,
		"PRIVATE":          2,
		"TOKEN_GATED":      3,
	}
)

func (x SquareJoinType) Enum() *SquareJoinType {
	p := new(SquareJoinType)
	*p = x
	return p
}

func (x SquareJoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquareJoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[2].Descriptor()
}

func (SquareJoinType) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[2]
}

func (x SquareJoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquareJoinType.Descriptor instead.
func (SquareJoinType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{2}
}

// The member type of square
type SquareMemberType int32

const (
	// default value. this value is unused.
	SquareMemberType_SQUARE_MEMBER_TYPE_UNSPECIFIED SquareMemberType = 0
	SquareMemberType_OWNER                          SquareMemberType = 1
	SquareMemberType_MEMBER                         SquareMemberType = 2
)

// Enum value maps for SquareMemberType.
var (
	SquareMemberType_name = map[int32]string{
		0: "SQUARE_MEMBER_TYPE_UNSPECIFIED",
		1: "OWNER",
		2: "MEMBER",
	}
	SquareMemberType_value = map[string]int32{
		"SQUARE_MEMBER_TYPE_UNSPECIFIED": 0,
		"OWNER":                          1,
		"MEMBER":                         2,
	}
)

func (x SquareMemberType) Enum() *SquareMemberType {
	p := new(SquareMemberType)
	*p = x
	return p
}

func (x SquareMemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquareMemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[3].Descriptor()
}

func (SquareMemberType) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[3]
}

func (x SquareMemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquareMemberType.Descriptor instead.
func (SquareMemberType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{3}
}

type SquareMemberRankType int32

const (
	SquareMemberRankType_SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED SquareMemberRankType = 0
	SquareMemberRankType_ALL_TIME                            SquareMemberRankType = 1
	SquareMemberRankType_WEEKLY                              SquareMemberRankType = 2
)

// Enum value maps for SquareMemberRankType.
var (
	SquareMemberRankType_name = map[int32]string{
		0: "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED",
		1: "ALL_TIME",
		2: "WEEKLY",
	}
	SquareMemberRankType_value = map[string]int32{
		"SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED": 0,
		"ALL_TIME":                            1,
		"WEEKLY":                              2,
	}
)

func (x SquareMemberRankType) Enum() *SquareMemberRankType {
	p := new(SquareMemberRankType)
	*p = x
	return p
}

func (x SquareMemberRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquareMemberRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[4].Descriptor()
}

func (SquareMemberRankType) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[4]
}

func (x SquareMemberRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquareMemberRankType.Descriptor instead.
func (SquareMemberRankType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{4}
}

type RejectMintCode int32

const (
	RejectMintCode_REJECT_MINT_CODE_UNSPECIFIED RejectMintCode = 0
	// The user is not whitelisted to mint the Square NFT.
	RejectMintCode_NO_ELIGIBILITY RejectMintCode = 1
	// The Square NFT is already minted.
	RejectMintCode_ROUND_TIME_NOT_MATCH RejectMintCode = 2
	// The Square NFT is already minted.
	RejectMintCode_ALREADY_MINTED RejectMintCode = 3
)

// Enum value maps for RejectMintCode.
var (
	RejectMintCode_name = map[int32]string{
		0: "REJECT_MINT_CODE_UNSPECIFIED",
		1: "NO_ELIGIBILITY",
		2: "ROUND_TIME_NOT_MATCH",
		3: "ALREADY_MINTED",
	}
	RejectMintCode_value = map[string]int32{
		"REJECT_MINT_CODE_UNSPECIFIED": 0,
		"NO_ELIGIBILITY":               1,
		"ROUND_TIME_NOT_MATCH":         2,
		"ALREADY_MINTED":               3,
	}
)

func (x RejectMintCode) Enum() *RejectMintCode {
	p := new(RejectMintCode)
	*p = x
	return p
}

func (x RejectMintCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectMintCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[5].Descriptor()
}

func (RejectMintCode) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[5]
}

func (x RejectMintCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectMintCode.Descriptor instead.
func (RejectMintCode) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{5}
}

type RejectJoinSquareCode int32

const (
	RejectJoinSquareCode_REJECT_JOIN_CODE_UNSPECIFIED RejectJoinSquareCode = 0
	// The square is fully occupied.
	RejectJoinSquareCode_REJECT_JOIN_FULLY_OCCUPIED RejectJoinSquareCode = 1
	// The user's staking amount is below the minimum required amount to join the square.
	RejectJoinSquareCode_REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT RejectJoinSquareCode = 2
	// The private code is incorrect.
	RejectJoinSquareCode_REJECT_JOIN_INCORRECT_PRIVATE_CODE RejectJoinSquareCode = 3
	// The user is not a token holder of the token gated square.
	RejectJoinSquareCode_REJECT_JOIN_NOT_TOKEN_HOLDER RejectJoinSquareCode = 4
	// The user is already memeber of the square.
	RejectJoinSquareCode_REJECT_JOIN_ALREADY_JOINED RejectJoinSquareCode = 5
)

// Enum value maps for RejectJoinSquareCode.
var (
	RejectJoinSquareCode_name = map[int32]string{
		0: "REJECT_JOIN_CODE_UNSPECIFIED",
		1: "REJECT_JOIN_FULLY_OCCUPIED",
		2: "REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT",
		3: "REJECT_JOIN_INCORRECT_PRIVATE_CODE",
		4: "REJECT_JOIN_NOT_TOKEN_HOLDER",
		5: "REJECT_JOIN_ALREADY_JOINED",
	}
	RejectJoinSquareCode_value = map[string]int32{
		"REJECT_JOIN_CODE_UNSPECIFIED":          0,
		"REJECT_JOIN_FULLY_OCCUPIED":            1,
		"REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT": 2,
		"REJECT_JOIN_INCORRECT_PRIVATE_CODE":    3,
		"REJECT_JOIN_NOT_TOKEN_HOLDER":          4,
		"REJECT_JOIN_ALREADY_JOINED":            5,
	}
)

func (x RejectJoinSquareCode) Enum() *RejectJoinSquareCode {
	p := new(RejectJoinSquareCode)
	*p = x
	return p
}

func (x RejectJoinSquareCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectJoinSquareCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[6].Descriptor()
}

func (RejectJoinSquareCode) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[6]
}

func (x RejectJoinSquareCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectJoinSquareCode.Descriptor instead.
func (RejectJoinSquareCode) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{6}
}

type RejectTransferSquareCode int32

const (
	RejectTransferSquareCode_REJECT_TRANSFER_CODE_UNSPECIFIED RejectTransferSquareCode = 0
	// The square is fully occupied.
	RejectTransferSquareCode_REJECT_TRANSFER_FULLY_OCCUPIED RejectTransferSquareCode = 1
	// The user's staking amount is below the minimum required amount to join the square.
	RejectTransferSquareCode_REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT RejectTransferSquareCode = 2
	// The private code is incorrect.
	RejectTransferSquareCode_REJECT_TRANSFER_INCORRECT_PRIVATE_CODE RejectTransferSquareCode = 3
	// The user is not a token holder of the token gated square.
	RejectTransferSquareCode_REJECT_TRANSFER_NOT_TOKEN_HOLDER RejectTransferSquareCode = 4
	// The user is not member of any square.
	RejectTransferSquareCode_REJECT_TRANSFER_NOT_SQUARE_MEMBER RejectTransferSquareCode = 5
	// The user transfer or join the square within the cooldown time.
	RejectTransferSquareCode_REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME RejectTransferSquareCode = 6
)

// Enum value maps for RejectTransferSquareCode.
var (
	RejectTransferSquareCode_name = map[int32]string{
		0: "REJECT_TRANSFER_CODE_UNSPECIFIED",
		1: "REJECT_TRANSFER_FULLY_OCCUPIED",
		2: "REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT",
		3: "REJECT_TRANSFER_INCORRECT_PRIVATE_CODE",
		4: "REJECT_TRANSFER_NOT_TOKEN_HOLDER",
		5: "REJECT_TRANSFER_NOT_SQUARE_MEMBER",
		6: "REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME",
	}
	RejectTransferSquareCode_value = map[string]int32{
		"REJECT_TRANSFER_CODE_UNSPECIFIED":          0,
		"REJECT_TRANSFER_FULLY_OCCUPIED":            1,
		"REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT": 2,
		"REJECT_TRANSFER_INCORRECT_PRIVATE_CODE":    3,
		"REJECT_TRANSFER_NOT_TOKEN_HOLDER":          4,
		"REJECT_TRANSFER_NOT_SQUARE_MEMBER":         5,
		"REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME":   6,
	}
)

func (x RejectTransferSquareCode) Enum() *RejectTransferSquareCode {
	p := new(RejectTransferSquareCode)
	*p = x
	return p
}

func (x RejectTransferSquareCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectTransferSquareCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[7].Descriptor()
}

func (RejectTransferSquareCode) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[7]
}

func (x RejectTransferSquareCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectTransferSquareCode.Descriptor instead.
func (RejectTransferSquareCode) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{7}
}

type MintEligibility int32

const (
	MintEligibility_MINT_ELIGIBILITY_UNSPECIFIED MintEligibility = 0
	// The user is not eligible to mint the Square NFT.
	MintEligibility_NOT_ELIGIBLE MintEligibility = 1
	// The user is eligible to mint the Square NFT in round 1.
	MintEligibility_ELIGIBLE_ROUND1 MintEligibility = 2
	// The user is eligible to mint the Square NFT in round 2.
	MintEligibility_ELIGIBLE_ROUND2 MintEligibility = 3
	// The user is eligible to mint the Square NFT in round 1 and round 2.
	MintEligibility_ELIGIBLE_ROUND1_AND_ROUND2 MintEligibility = 4
)

// Enum value maps for MintEligibility.
var (
	MintEligibility_name = map[int32]string{
		0: "MINT_ELIGIBILITY_UNSPECIFIED",
		1: "NOT_ELIGIBLE",
		2: "ELIGIBLE_ROUND1",
		3: "ELIGIBLE_ROUND2",
		4: "ELIGIBLE_ROUND1_AND_ROUND2",
	}
	MintEligibility_value = map[string]int32{
		"MINT_ELIGIBILITY_UNSPECIFIED": 0,
		"NOT_ELIGIBLE":                 1,
		"ELIGIBLE_ROUND1":              2,
		"ELIGIBLE_ROUND2":              3,
		"ELIGIBLE_ROUND1_AND_ROUND2":   4,
	}
)

func (x MintEligibility) Enum() *MintEligibility {
	p := new(MintEligibility)
	*p = x
	return p
}

func (x MintEligibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MintEligibility) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[8].Descriptor()
}

func (MintEligibility) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[8]
}

func (x MintEligibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MintEligibility.Descriptor instead.
func (MintEligibility) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{8}
}

type TransferMemberType int32

const (
	TransferMemberType_TRANSFER_MEMBER_TYPE_UNSPECIFIED TransferMemberType = 0
	TransferMemberType_DEFAULT                          TransferMemberType = 1
	TransferMemberType_KICKED_OUT                       TransferMemberType = 2
	TransferMemberType_TO_OWNER                         TransferMemberType = 3
)

// Enum value maps for TransferMemberType.
var (
	TransferMemberType_name = map[int32]string{
		0: "TRANSFER_MEMBER_TYPE_UNSPECIFIED",
		1: "DEFAULT",
		2: "KICKED_OUT",
		3: "TO_OWNER",
	}
	TransferMemberType_value = map[string]int32{
		"TRANSFER_MEMBER_TYPE_UNSPECIFIED": 0,
		"DEFAULT":                          1,
		"KICKED_OUT":                       2,
		"TO_OWNER":                         3,
	}
)

func (x TransferMemberType) Enum() *TransferMemberType {
	p := new(TransferMemberType)
	*p = x
	return p
}

func (x TransferMemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferMemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[9].Descriptor()
}

func (TransferMemberType) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[9]
}

func (x TransferMemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferMemberType.Descriptor instead.
func (TransferMemberType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{9}
}

type SpiritType int32

const (
	SpiritType_SQUARE_SPIRIT_TYPE_UNSPECIFIED SpiritType = 0
	SpiritType_VOTING                         SpiritType = 1
	SpiritType_SUMMON_BEBOB_SUCCESS           SpiritType = 2
	SpiritType_ATTACK_BEBOB_SUCCESS           SpiritType = 3
	SpiritType_COLLECT_STARS                  SpiritType = 4
	SpiritType_COMMUNITY_EVENT                SpiritType = 5
)

// Enum value maps for SpiritType.
var (
	SpiritType_name = map[int32]string{
		0: "SQUARE_SPIRIT_TYPE_UNSPECIFIED",
		1: "VOTING",
		2: "SUMMON_BEBOB_SUCCESS",
		3: "ATTACK_BEBOB_SUCCESS",
		4: "COLLECT_STARS",
		5: "COMMUNITY_EVENT",
	}
	SpiritType_value = map[string]int32{
		"SQUARE_SPIRIT_TYPE_UNSPECIFIED": 0,
		"VOTING":                         1,
		"SUMMON_BEBOB_SUCCESS":           2,
		"ATTACK_BEBOB_SUCCESS":           3,
		"COLLECT_STARS":                  4,
		"COMMUNITY_EVENT":                5,
	}
)

func (x SpiritType) Enum() *SpiritType {
	p := new(SpiritType)
	*p = x
	return p
}

func (x SpiritType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpiritType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_square_square_proto_enumTypes[10].Descriptor()
}

func (SpiritType) Type() protoreflect.EnumType {
	return &file_blast_v1_square_square_proto_enumTypes[10]
}

func (x SpiritType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpiritType.Descriptor instead.
func (SpiritType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{10}
}

type GetSquareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// Optional. The view to return.
	// Defaults to SQUARE_VIEW_NOT_MEMBER if not set.
	// If set to SQUARE_VIEW_OWNER or SQUARE_VIEW_MEMBER, but the user does not have permission to do so, the API will return a PERMISSION_DENIED error.
	//
	// SquareView enumeration represents the view of a square.
	// The view controls the amount of information returned.
	//
	// Reference
	// https://cloud.google.com/apis/design/design_patterns#list_flattening and
	// https://google.aip.dev/157
	View SquareView `protobuf:"varint,2,opt,name=view,proto3,enum=blast.v1.square.SquareView" json:"view,omitempty"`
}

func (x *GetSquareRequest) Reset() {
	*x = GetSquareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareRequest) ProtoMessage() {}

func (x *GetSquareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareRequest.ProtoReflect.Descriptor instead.
func (*GetSquareRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{0}
}

func (x *GetSquareRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *GetSquareRequest) GetView() SquareView {
	if x != nil {
		return x.View
	}
	return SquareView_SQUARE_VIEW_UNSPECIFIED
}

type ListSquaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of squares to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListSquares` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// * token_id
	//   - `=`
	//
	// * signature_id
	//   - `=`
	//
	// * state
	//   - `=`
	//
	// * join_type
	//   - `=`
	//
	// * display_name
	//   - `=`
	//
	// * occupied
	//   - `negation`
	//
	// Examples
	// * name="squares/10"
	// * token_id="10"
	// * signature_id="3ed92b99-00be-4417-b69f-dca2d8d14c7f"
	// * join_type=TOKEN_GATED
	// * display_name="SQUARE"
	// * join_type=TOKEN_GATED AND not occupied
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. One or more fields to compare and use to sort the output.
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "token_id", "total_points", "spirits"
	//
	// Examples
	// * order_by=token_id asc
	// * order_by=total_points desc
	// * order_by=spirits desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSquaresRequest) Reset() {
	*x = ListSquaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquaresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquaresRequest) ProtoMessage() {}

func (x *ListSquaresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquaresRequest.ProtoReflect.Descriptor instead.
func (*ListSquaresRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{1}
}

func (x *ListSquaresRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquaresRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSquaresRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSquaresRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListSquaresResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListSquaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Squares []*Square `protobuf:"bytes,1,rep,name=squares,proto3" json:"squares,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquaresResponse) Reset() {
	*x = ListSquaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquaresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquaresResponse) ProtoMessage() {}

func (x *ListSquaresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquaresResponse.ProtoReflect.Descriptor instead.
func (*ListSquaresResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{2}
}

func (x *ListSquaresResponse) GetSquares() []*Square {
	if x != nil {
		return x.Squares
	}
	return nil
}

func (x *ListSquaresResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ValidateDisplayNameAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The display_name of Square.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ValidateDisplayNameAvailabilityRequest) Reset() {
	*x = ValidateDisplayNameAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDisplayNameAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDisplayNameAvailabilityRequest) ProtoMessage() {}

func (x *ValidateDisplayNameAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDisplayNameAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*ValidateDisplayNameAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateDisplayNameAvailabilityRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ValidateDisplayNameAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The display_name of Square.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The availability of the nickname.
	Available bool `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// The reason of the display_name is not available.
	// Example:
	// - display name already exists
	// - display name should more or equal than 4
	// - display name should less or equal than 10
	// - display name contains non uppercase character
	Reason *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *ValidateDisplayNameAvailabilityResponse) Reset() {
	*x = ValidateDisplayNameAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDisplayNameAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDisplayNameAvailabilityResponse) ProtoMessage() {}

func (x *ValidateDisplayNameAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDisplayNameAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*ValidateDisplayNameAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateDisplayNameAvailabilityResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ValidateDisplayNameAvailabilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ValidateDisplayNameAvailabilityResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type CreateSquareAndSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// square to create
	Square *Square `protobuf:"bytes,2,opt,name=square,proto3" json:"square,omitempty"`
}

func (x *CreateSquareAndSignRequest) Reset() {
	*x = CreateSquareAndSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSquareAndSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSquareAndSignRequest) ProtoMessage() {}

func (x *CreateSquareAndSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSquareAndSignRequest.ProtoReflect.Descriptor instead.
func (*CreateSquareAndSignRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSquareAndSignRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CreateSquareAndSignRequest) GetSquare() *Square {
	if x != nil {
		return x.Square
	}
	return nil
}

type CreateSquareAndSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// square to create
	Square *Square `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// signature to sign the onchain tx
	Signature string                           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Params    *chain.MintAndCreateSquareParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateSquareAndSignResponse) Reset() {
	*x = CreateSquareAndSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSquareAndSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSquareAndSignResponse) ProtoMessage() {}

func (x *CreateSquareAndSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSquareAndSignResponse.ProtoReflect.Descriptor instead.
func (*CreateSquareAndSignResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSquareAndSignResponse) GetSquare() *Square {
	if x != nil {
		return x.Square
	}
	return nil
}

func (x *CreateSquareAndSignResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CreateSquareAndSignResponse) GetParams() *chain.MintAndCreateSquareParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ListUsersSquaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ListUsersSquaresRequest) Reset() {
	*x = ListUsersSquaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersSquaresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersSquaresRequest) ProtoMessage() {}

func (x *ListUsersSquaresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersSquaresRequest.ProtoReflect.Descriptor instead.
func (*ListUsersSquaresRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{7}
}

func (x *ListUsersSquaresRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type ListUsersSquaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Squares []*Square `protobuf:"bytes,1,rep,name=squares,proto3" json:"squares,omitempty"`
}

func (x *ListUsersSquaresResponse) Reset() {
	*x = ListUsersSquaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersSquaresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersSquaresResponse) ProtoMessage() {}

func (x *ListUsersSquaresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersSquaresResponse.ProtoReflect.Descriptor instead.
func (*ListUsersSquaresResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{8}
}

func (x *ListUsersSquaresResponse) GetSquares() []*Square {
	if x != nil {
		return x.Squares
	}
	return nil
}

type UpdateSquareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Square to update
	// Format: squares/{token_id}
	Square *Square `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// Field mask that specifies the fields to update.
	// If no field mask is set, all fields will be updated.
	//
	// Supported Fields
	// * "display_name", "description", "join"
	//
	// Wildcards are supported.
	// Examples
	// ["*"]
	// ["display_name"]
	// ["display_name", "description"]
	// ["join"]
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSquareRequest) Reset() {
	*x = UpdateSquareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSquareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSquareRequest) ProtoMessage() {}

func (x *UpdateSquareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSquareRequest.ProtoReflect.Descriptor instead.
func (*UpdateSquareRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSquareRequest) GetSquare() *Square {
	if x != nil {
		return x.Square
	}
	return nil
}

func (x *UpdateSquareRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetSquareWeeklySpiritsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The week number to retrieve.
	// If unspecified, the current week will be returned.
	Week *uint32 `protobuf:"varint,2,opt,name=week,proto3,oneof" json:"week,omitempty"`
}

func (x *GetSquareWeeklySpiritsRequest) Reset() {
	*x = GetSquareWeeklySpiritsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareWeeklySpiritsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareWeeklySpiritsRequest) ProtoMessage() {}

func (x *GetSquareWeeklySpiritsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareWeeklySpiritsRequest.ProtoReflect.Descriptor instead.
func (*GetSquareWeeklySpiritsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{10}
}

func (x *GetSquareWeeklySpiritsRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *GetSquareWeeklySpiritsRequest) GetWeek() uint32 {
	if x != nil && x.Week != nil {
		return *x.Week
	}
	return 0
}

type GetSquareWeeklySpiritsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeeklySpirits uint32 `protobuf:"varint,1,opt,name=weekly_spirits,json=weeklySpirits,proto3" json:"weekly_spirits,omitempty"`
}

func (x *GetSquareWeeklySpiritsResponse) Reset() {
	*x = GetSquareWeeklySpiritsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareWeeklySpiritsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareWeeklySpiritsResponse) ProtoMessage() {}

func (x *GetSquareWeeklySpiritsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareWeeklySpiritsResponse.ProtoReflect.Descriptor instead.
func (*GetSquareWeeklySpiritsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{11}
}

func (x *GetSquareWeeklySpiritsResponse) GetWeeklySpirits() uint32 {
	if x != nil {
		return x.WeeklySpirits
	}
	return 0
}

type CheckMintEligibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CheckMintEligibilityRequest) Reset() {
	*x = CheckMintEligibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMintEligibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMintEligibilityRequest) ProtoMessage() {}

func (x *CheckMintEligibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMintEligibilityRequest.ProtoReflect.Descriptor instead.
func (*CheckMintEligibilityRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{12}
}

func (x *CheckMintEligibilityRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type CheckMintEligibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Whether the user is eligible to mint the Square NFT
	Eligibility MintEligibility `protobuf:"varint,2,opt,name=eligibility,proto3,enum=blast.v1.square.MintEligibility" json:"eligibility,omitempty"`
	// Whether the user is currently available to mint the Square NFT
	// If the user is not available, the reason code will be set.
	// If the user is available, the reason code will be empty.
	// Can be unavailable though the eligibility is ELIGIBLE_ROUND1 or ELIGIBLE_ROUND2 if it is not appropriate round time.
	Available bool `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	// The reason code of the user is not eligible to mint the Square NFT.
	RejectCode *RejectMintCode `protobuf:"varint,4,opt,name=reject_code,json=rejectCode,proto3,enum=blast.v1.square.RejectMintCode,oneof" json:"reject_code,omitempty"`
}

func (x *CheckMintEligibilityResponse) Reset() {
	*x = CheckMintEligibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMintEligibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMintEligibilityResponse) ProtoMessage() {}

func (x *CheckMintEligibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMintEligibilityResponse.ProtoReflect.Descriptor instead.
func (*CheckMintEligibilityResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{13}
}

func (x *CheckMintEligibilityResponse) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CheckMintEligibilityResponse) GetEligibility() MintEligibility {
	if x != nil {
		return x.Eligibility
	}
	return MintEligibility_MINT_ELIGIBILITY_UNSPECIFIED
}

func (x *CheckMintEligibilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CheckMintEligibilityResponse) GetRejectCode() RejectMintCode {
	if x != nil && x.RejectCode != nil {
		return *x.RejectCode
	}
	return RejectMintCode_REJECT_MINT_CODE_UNSPECIFIED
}

type ApproveJoinSquareAndSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The resource name of the user to join.
	// Format: users/{address}
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// The private code of the square.
	// This field is required if the square is private.
	// Otherwise, this field should be empty.
	PrivateCode *string `protobuf:"bytes,3,opt,name=private_code,json=privateCode,proto3,oneof" json:"private_code,omitempty"`
	Nonce       string  `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ApproveJoinSquareAndSignRequest) Reset() {
	*x = ApproveJoinSquareAndSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveJoinSquareAndSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinSquareAndSignRequest) ProtoMessage() {}

func (x *ApproveJoinSquareAndSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinSquareAndSignRequest.ProtoReflect.Descriptor instead.
func (*ApproveJoinSquareAndSignRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{14}
}

func (x *ApproveJoinSquareAndSignRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ApproveJoinSquareAndSignRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ApproveJoinSquareAndSignRequest) GetPrivateCode() string {
	if x != nil && x.PrivateCode != nil {
		return *x.PrivateCode
	}
	return ""
}

func (x *ApproveJoinSquareAndSignRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ApproveJoinSquareAndSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approved   bool                    `protobuf:"varint,1,opt,name=approved,proto3" json:"approved,omitempty"`
	Signature  string                  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	RejectCode *RejectJoinSquareCode   `protobuf:"varint,3,opt,name=reject_code,json=rejectCode,proto3,enum=blast.v1.square.RejectJoinSquareCode,oneof" json:"reject_code,omitempty"`
	Params     *chain.JoinSquareParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ApproveJoinSquareAndSignResponse) Reset() {
	*x = ApproveJoinSquareAndSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveJoinSquareAndSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinSquareAndSignResponse) ProtoMessage() {}

func (x *ApproveJoinSquareAndSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinSquareAndSignResponse.ProtoReflect.Descriptor instead.
func (*ApproveJoinSquareAndSignResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{15}
}

func (x *ApproveJoinSquareAndSignResponse) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *ApproveJoinSquareAndSignResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ApproveJoinSquareAndSignResponse) GetRejectCode() RejectJoinSquareCode {
	if x != nil && x.RejectCode != nil {
		return *x.RejectCode
	}
	return RejectJoinSquareCode_REJECT_JOIN_CODE_UNSPECIFIED
}

func (x *ApproveJoinSquareAndSignResponse) GetParams() *chain.JoinSquareParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ApproveTransferSquareAndSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the square to transfer.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The resource name of the user to transfer.
	// Format: users/{address}
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// The private code of the square.
	// This field is required if the square is private.
	// Otherwise, this field should be empty.
	PrivateCode *string `protobuf:"bytes,3,opt,name=private_code,json=privateCode,proto3,oneof" json:"private_code,omitempty"`
	Nonce       string  `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ApproveTransferSquareAndSignRequest) Reset() {
	*x = ApproveTransferSquareAndSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransferSquareAndSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransferSquareAndSignRequest) ProtoMessage() {}

func (x *ApproveTransferSquareAndSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransferSquareAndSignRequest.ProtoReflect.Descriptor instead.
func (*ApproveTransferSquareAndSignRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{16}
}

func (x *ApproveTransferSquareAndSignRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ApproveTransferSquareAndSignRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ApproveTransferSquareAndSignRequest) GetPrivateCode() string {
	if x != nil && x.PrivateCode != nil {
		return *x.PrivateCode
	}
	return ""
}

func (x *ApproveTransferSquareAndSignRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ApproveTransferSquareAndSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approved   bool                        `protobuf:"varint,1,opt,name=approved,proto3" json:"approved,omitempty"`
	Signature  string                      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	RejectCode *RejectTransferSquareCode   `protobuf:"varint,3,opt,name=reject_code,json=rejectCode,proto3,enum=blast.v1.square.RejectTransferSquareCode,oneof" json:"reject_code,omitempty"`
	Params     *chain.TransferSquareParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ApproveTransferSquareAndSignResponse) Reset() {
	*x = ApproveTransferSquareAndSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransferSquareAndSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransferSquareAndSignResponse) ProtoMessage() {}

func (x *ApproveTransferSquareAndSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransferSquareAndSignResponse.ProtoReflect.Descriptor instead.
func (*ApproveTransferSquareAndSignResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{17}
}

func (x *ApproveTransferSquareAndSignResponse) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *ApproveTransferSquareAndSignResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ApproveTransferSquareAndSignResponse) GetRejectCode() RejectTransferSquareCode {
	if x != nil && x.RejectCode != nil {
		return *x.RejectCode
	}
	return RejectTransferSquareCode_REJECT_TRANSFER_CODE_UNSPECIFIED
}

func (x *ApproveTransferSquareAndSignResponse) GetParams() *chain.TransferSquareParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetSquareWeeklyPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The week number to retrieve.
	// If unspecified, the current week will be returned.
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetSquareWeeklyPointsRequest) Reset() {
	*x = GetSquareWeeklyPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareWeeklyPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareWeeklyPointsRequest) ProtoMessage() {}

func (x *GetSquareWeeklyPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareWeeklyPointsRequest.ProtoReflect.Descriptor instead.
func (*GetSquareWeeklyPointsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{18}
}

func (x *GetSquareWeeklyPointsRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *GetSquareWeeklyPointsRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

type GetSquareWeeklyPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The weekly points of the square.
	WeeklyPoints uint32 `protobuf:"varint,1,opt,name=weekly_points,json=weeklyPoints,proto3" json:"weekly_points,omitempty"`
	// The week number of the points.
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetSquareWeeklyPointsResponse) Reset() {
	*x = GetSquareWeeklyPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareWeeklyPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareWeeklyPointsResponse) ProtoMessage() {}

func (x *GetSquareWeeklyPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareWeeklyPointsResponse.ProtoReflect.Descriptor instead.
func (*GetSquareWeeklyPointsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{19}
}

func (x *GetSquareWeeklyPointsResponse) GetWeeklyPoints() uint32 {
	if x != nil {
		return x.WeeklyPoints
	}
	return 0
}

func (x *GetSquareWeeklyPointsResponse) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

type ListSquareSpiritHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The maximum number of spirits to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListSquareSpiritHistories` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSquareSpiritHistoriesRequest) Reset() {
	*x = ListSquareSpiritHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareSpiritHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareSpiritHistoriesRequest) ProtoMessage() {}

func (x *ListSquareSpiritHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareSpiritHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ListSquareSpiritHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{20}
}

func (x *ListSquareSpiritHistoriesRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ListSquareSpiritHistoriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquareSpiritHistoriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSquareSpiritHistoriesResposne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Histories []*SquareSpiritHistory `protobuf:"bytes,1,rep,name=histories,proto3" json:"histories,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content
	// of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquareSpiritHistoriesResposne) Reset() {
	*x = ListSquareSpiritHistoriesResposne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareSpiritHistoriesResposne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareSpiritHistoriesResposne) ProtoMessage() {}

func (x *ListSquareSpiritHistoriesResposne) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareSpiritHistoriesResposne.ProtoReflect.Descriptor instead.
func (*ListSquareSpiritHistoriesResposne) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{21}
}

func (x *ListSquareSpiritHistoriesResposne) GetHistories() []*SquareSpiritHistory {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ListSquareSpiritHistoriesResposne) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListSquareMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The maximum number of squares to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListSquareMembers` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * user
	//   - `=`
	//
	// * member
	//   - `=`
	//
	// * member_address
	//   - `=`
	//
	// * join_time
	//   - `>`, `<`, `>=`, `<=`
	//
	// * show_left
	//   - `NOT`
	//
	// Examples
	// * member_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * join_time>"2024-04-10T11:30:00Z"
	// * show_left
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. One or more fields to compare and use to sort the output.
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "total_points", "join_time"
	//
	// Examples
	// * order_by=join_time asc
	// * order_by=total_points desc, join_time asc
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSquareMembersRequest) Reset() {
	*x = ListSquareMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMembersRequest) ProtoMessage() {}

func (x *ListSquareMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMembersRequest.ProtoReflect.Descriptor instead.
func (*ListSquareMembersRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{22}
}

func (x *ListSquareMembersRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ListSquareMembersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquareMembersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSquareMembersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSquareMembersRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListSquareMembersResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListSquareMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Members []*SquareMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquareMembersResponse) Reset() {
	*x = ListSquareMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMembersResponse) ProtoMessage() {}

func (x *ListSquareMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMembersResponse.ProtoReflect.Descriptor instead.
func (*ListSquareMembersResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{23}
}

func (x *ListSquareMembersResponse) GetMembers() []*SquareMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ListSquareMembersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListSquareMemberRankingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square   string               `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	RankType SquareMemberRankType `protobuf:"varint,2,opt,name=rank_type,json=rankType,proto3,enum=blast.v1.square.SquareMemberRankType" json:"rank_type,omitempty"`
	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSquareMemberRankingsRequest) Reset() {
	*x = ListSquareMemberRankingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMemberRankingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMemberRankingsRequest) ProtoMessage() {}

func (x *ListSquareMemberRankingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMemberRankingsRequest.ProtoReflect.Descriptor instead.
func (*ListSquareMemberRankingsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{24}
}

func (x *ListSquareMemberRankingsRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ListSquareMemberRankingsRequest) GetRankType() SquareMemberRankType {
	if x != nil {
		return x.RankType
	}
	return SquareMemberRankType_SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED
}

func (x *ListSquareMemberRankingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquareMemberRankingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSquareMemberRankingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Rankings []*SquareMemberRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquareMemberRankingsResponse) Reset() {
	*x = ListSquareMemberRankingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMemberRankingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMemberRankingsResponse) ProtoMessage() {}

func (x *ListSquareMemberRankingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMemberRankingsResponse.ProtoReflect.Descriptor instead.
func (*ListSquareMemberRankingsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{25}
}

func (x *ListSquareMemberRankingsResponse) GetRankings() []*SquareMemberRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *ListSquareMemberRankingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Square struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Square.
	// Format: squares/{token_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ERC721 token ID of the Square.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	OwnerAddress string `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// The created time of Square.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	State      SquareState            `protobuf:"varint,5,opt,name=state,proto3,enum=blast.v1.square.SquareState" json:"state,omitempty"`
	// The signature id of the Square.
	// This field is used for multi signature when minting the Square NFT.
	SignatureId string `protobuf:"bytes,6,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	// The join type of the square.
	JoinType SquareJoinType `protobuf:"varint,7,opt,name=join_type,json=joinType,proto3,enum=blast.v1.square.SquareJoinType" json:"join_type,omitempty"`
	// Types that are assignable to Join:
	//
	//	*Square_Public
	//	*Square_Private
	//	*Square_TokenGated
	Join isSquare_Join `protobuf_oneof:"join"`
	// The display name of the square.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The introduction of the square.
	Introduction string `protobuf:"bytes,12,opt,name=introduction,proto3" json:"introduction,omitempty"`
	// The minimum required staking amount to join the square in ETH.
	MinimumStakingAmountToJoinInEth float32 `protobuf:"fixed32,13,opt,name=minimum_staking_amount_to_join_in_eth,json=minimumStakingAmountToJoinInEth,proto3" json:"minimum_staking_amount_to_join_in_eth,omitempty"`
	// The total staking amount of all members in the square in ETH.
	TotalMembersStakingAmountInEth float32 `protobuf:"fixed32,14,opt,name=total_members_staking_amount_in_eth,json=totalMembersStakingAmountInEth,proto3" json:"total_members_staking_amount_in_eth,omitempty"`
	// The multiplier of the square.
	Multiplier float32 `protobuf:"fixed32,15,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// The all-time total points of the square.
	TotalPoints uint32 `protobuf:"varint,16,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	// The total capacity of the square.
	Capacity uint32 `protobuf:"varint,17,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The current number of members in the square.
	Occupancy uint32 `protobuf:"varint,18,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	// The occupancy of the square including join pending members.
	OccupancyIncludingPending uint32 `protobuf:"varint,19,opt,name=occupancy_including_pending,json=occupancyIncludingPending,proto3" json:"occupancy_including_pending,omitempty"`
	// The PFP boost of the square.
	PfpBoost *PFPBoost `protobuf:"bytes,20,opt,name=pfp_boost,json=pfpBoost,proto3" json:"pfp_boost,omitempty"`
	// The NFT of the square.
	Nft     *SquareNFT `protobuf:"bytes,21,opt,name=nft,proto3" json:"nft,omitempty"`
	Spirits uint32     `protobuf:"varint,22,opt,name=spirits,proto3" json:"spirits,omitempty"`
	Stars uint32 `protobuf:"varint,23,opt,name=stars,proto3" json:"stars,omitempty"`
	// DEPRECATED: Use spirits instead.
	TotalSpirits uint32 `protobuf:"varint,24,opt,name=total_spirits,json=totalSpirits,proto3" json:"total_spirits,omitempty"`
	// DEPRECATED: Use GetSquareWeeklySpirits API instead.
	WeeklySpirits uint32 `protobuf:"varint,25,opt,name=weekly_spirits,json=weeklySpirits,proto3" json:"weekly_spirits,omitempty"`
}

func (x *Square) Reset() {
	*x = Square{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Square) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Square) ProtoMessage() {}

func (x *Square) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Square.ProtoReflect.Descriptor instead.
func (*Square) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{26}
}

func (x *Square) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Square) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *Square) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *Square) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Square) GetState() SquareState {
	if x != nil {
		return x.State
	}
	return SquareState_STATE_UNSPECIFIED
}

func (x *Square) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *Square) GetJoinType() SquareJoinType {
	if x != nil {
		return x.JoinType
	}
	return SquareJoinType_TYPE_UNSPECIFIED
}

func (m *Square) GetJoin() isSquare_Join {
	if m != nil {
		return m.Join
	}
	return nil
}

func (x *Square) GetPublic() *Public {
	if x, ok := x.GetJoin().(*Square_Public); ok {
		return x.Public
	}
	return nil
}

func (x *Square) GetPrivate() *Private {
	if x, ok := x.GetJoin().(*Square_Private); ok {
		return x.Private
	}
	return nil
}

func (x *Square) GetTokenGated() *TokenGated {
	if x, ok := x.GetJoin().(*Square_TokenGated); ok {
		return x.TokenGated
	}
	return nil
}

func (x *Square) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Square) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Square) GetMinimumStakingAmountToJoinInEth() float32 {
	if x != nil {
		return x.MinimumStakingAmountToJoinInEth
	}
	return 0
}

func (x *Square) GetTotalMembersStakingAmountInEth() float32 {
	if x != nil {
		return x.TotalMembersStakingAmountInEth
	}
	return 0
}

func (x *Square) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Square) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Square) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Square) GetOccupancy() uint32 {
	if x != nil {
		return x.Occupancy
	}
	return 0
}

func (x *Square) GetOccupancyIncludingPending() uint32 {
	if x != nil {
		return x.OccupancyIncludingPending
	}
	return 0
}

func (x *Square) GetPfpBoost() *PFPBoost {
	if x != nil {
		return x.PfpBoost
	}
	return nil
}

func (x *Square) GetNft() *SquareNFT {
	if x != nil {
		return x.Nft
	}
	return nil
}

func (x *Square) GetSpirits() uint32 {
	if x != nil {
		return x.Spirits
	}
	return 0
}

func (x *Square) GetStars() uint32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *Square) GetTotalSpirits() uint32 {
	if x != nil {
		return x.TotalSpirits
	}
	return 0
}

func (x *Square) GetWeeklySpirits() uint32 {
	if x != nil {
		return x.WeeklySpirits
	}
	return 0
}

type isSquare_Join interface {
	isSquare_Join()
}

type Square_Public struct {
	Public *Public `protobuf:"bytes,8,opt,name=public,proto3,oneof"`
}

type Square_Private struct {
	Private *Private `protobuf:"bytes,9,opt,name=private,proto3,oneof"`
}

type Square_TokenGated struct {
	TokenGated *TokenGated `protobuf:"bytes,10,opt,name=token_gated,json=tokenGated,proto3,oneof"`
}

func (*Square_Public) isSquare_Join() {}

func (*Square_Private) isSquare_Join() {}

func (*Square_TokenGated) isSquare_Join() {}

type PFPBoost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage  float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	MemberCount uint32  `protobuf:"varint,2,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	// The resource name of the NFT contract.
	// Format: nfts/{chain_type}/{contract_address}
	NftContract string `protobuf:"bytes,3,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
}

func (x *PFPBoost) Reset() {
	*x = PFPBoost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFPBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFPBoost) ProtoMessage() {}

func (x *PFPBoost) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFPBoost.ProtoReflect.Descriptor instead.
func (*PFPBoost) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{27}
}

func (x *PFPBoost) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *PFPBoost) GetMemberCount() uint32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *PFPBoost) GetNftContract() string {
	if x != nil {
		return x.NftContract
	}
	return ""
}

type Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Public) Reset() {
	*x = Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Public) ProtoMessage() {}

func (x *Public) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Public.ProtoReflect.Descriptor instead.
func (*Public) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{28}
}

type Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Private) Reset() {
	*x = Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Private) ProtoMessage() {}

func (x *Private) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Private.ProtoReflect.Descriptor instead.
func (*Private) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{29}
}

func (x *Private) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TokenGated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the NFT contract.
	// Format: nfts/{chain_type}/{contract_address}
	NftContract string `protobuf:"bytes,1,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
}

func (x *TokenGated) Reset() {
	*x = TokenGated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenGated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenGated) ProtoMessage() {}

func (x *TokenGated) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenGated.ProtoReflect.Descriptor instead.
func (*TokenGated) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{30}
}

func (x *TokenGated) GetNftContract() string {
	if x != nil {
		return x.NftContract
	}
	return ""
}

type SquareNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token ID of the NFT asset.
	TokenId uint32 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The URI of the NFT asset's image.
	// This URI is cached version of image original URI
	// e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The URI of the NFT asset's metadata.
	MetadataUri string `protobuf:"bytes,3,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
}

func (x *SquareNFT) Reset() {
	*x = SquareNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareNFT) ProtoMessage() {}

func (x *SquareNFT) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareNFT.ProtoReflect.Descriptor instead.
func (*SquareNFT) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{31}
}

func (x *SquareNFT) GetTokenId() uint32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *SquareNFT) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *SquareNFT) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

type SquareMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Square.
	// Format: squares/{square_token_id}/members/{user_address}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The token ID of the Square.
	SquareTokenId string `protobuf:"bytes,2,opt,name=square_token_id,json=squareTokenId,proto3" json:"square_token_id,omitempty"`
	// The user address of the member.
	UserAddress string `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// The member type of the square.
	Type        SquareMemberType `protobuf:"varint,4,opt,name=type,proto3,enum=blast.v1.square.SquareMemberType" json:"type,omitempty"`
	TotalPoints uint32           `protobuf:"varint,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	JoinTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
}

func (x *SquareMember) Reset() {
	*x = SquareMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMember) ProtoMessage() {}

func (x *SquareMember) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMember.ProtoReflect.Descriptor instead.
func (*SquareMember) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{32}
}

func (x *SquareMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SquareMember) GetSquareTokenId() string {
	if x != nil {
		return x.SquareTokenId
	}
	return ""
}

func (x *SquareMember) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *SquareMember) GetType() SquareMemberType {
	if x != nil {
		return x.Type
	}
	return SquareMemberType_SQUARE_MEMBER_TYPE_UNSPECIFIED
}

func (x *SquareMember) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *SquareMember) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

type SquareMemberRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   uint32        `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Points uint32        `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Member *SquareMember `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *SquareMemberRanking) Reset() {
	*x = SquareMemberRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMemberRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMemberRanking) ProtoMessage() {}

func (x *SquareMemberRanking) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMemberRanking.ProtoReflect.Descriptor instead.
func (*SquareMemberRanking) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{33}
}

func (x *SquareMemberRanking) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SquareMemberRanking) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *SquareMemberRanking) GetMember() *SquareMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type SquareSpiritHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Square
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,2,opt,name=square,proto3" json:"square,omitempty"`
	// The spirit type of the square.
	Type SpiritType `protobuf:"varint,3,opt,name=type,proto3,enum=blast.v1.square.SpiritType" json:"type,omitempty"`
	// The user address of the member.
	Amount uint32 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *SquareSpiritHistory) Reset() {
	*x = SquareSpiritHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_square_square_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareSpiritHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareSpiritHistory) ProtoMessage() {}

func (x *SquareSpiritHistory) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_square_square_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareSpiritHistory.ProtoReflect.Descriptor instead.
func (*SquareSpiritHistory) Descriptor() ([]byte, []int) {
	return file_blast_v1_square_square_proto_rawDescGZIP(), []int{34}
}

func (x *SquareSpiritHistory) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *SquareSpiritHistory) GetType() SpiritType {
	if x != nil {
		return x.Type
	}
	return SpiritType_SQUARE_SPIRIT_TYPE_UNSPECIFIED
}

func (x *SquareSpiritHistory) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SquareSpiritHistory) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

var File_blast_v1_square_square_proto protoreflect.FileDescriptor

var file_blast_v1_square_square_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74,
	0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x70, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x51, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x27, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x4d, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x52, 0x07, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x47,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x74,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0b, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x23,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xff, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x7c,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73,
	0x6e, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcb,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7c, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x0a, 0x0a, 0x06,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x34, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x47, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x25, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x45, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x23, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x1e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x45, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x12, 0x44, 0x0a, 0x1b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x19, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x66, 0x70, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x46,
	0x50, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x70, 0x66,
	0x70, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4e, 0x46, 0x54, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x07, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x3a, 0x38,
	0xea, 0x41, 0x35, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x12, 0x12, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x06, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e,
	0x22, 0xab, 0x01, 0x0a, 0x08, 0x50, 0x46, 0x50, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x08,
	0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x47, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x41, 0x26,
	0x0a, 0x24, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x09, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4e, 0x46, 0x54,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x22, 0xfd, 0x02,
	0x0a, 0x0c, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x5d,
	0xea, 0x41, 0x5a, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x12, 0x30, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x22, 0x78, 0x0a,
	0x13, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x74, 0x0a, 0x0a, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x51, 0x55, 0x41, 0x52,
	0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x2a,
	0x51, 0x0a, 0x0b, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57,
	0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4f, 0x57, 0x4e, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x50, 0x0a, 0x0e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x4d, 0x0a, 0x10, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x51, 0x55, 0x41,
	0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x14, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x74,
	0x0a, 0x0e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xed, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0xb9, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59,
	0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06,
	0x2a, 0x8f, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4c,
	0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x49, 0x47,
	0x49, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x31, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x32,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x31, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x32,
	0x10, 0x04, 0x2a, 0x65, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4b,
	0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x4f, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x0a, 0x53, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x51, 0x55, 0x41,
	0x52, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x52, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x4d, 0x4d,
	0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x42, 0x4f, 0x42, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x45, 0x42,
	0x4f, 0x42, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x53, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x32, 0xed, 0x10, 0x0a, 0x0d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x22,
	0x27, 0xda, 0x41, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x70, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x22, 0x40, 0xda, 0x41, 0x12, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x32,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb0, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0xda, 0x41, 0x06, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x12,
	0xa0, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69,
	0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x3a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0xcb, 0x01, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x73, 0x3a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x33, 0xda, 0x41, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2c, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x18, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x73, 0x3a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x3a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xda, 0x41, 0x06,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0xb5, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x53,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x22, 0x31, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0xb0, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3b, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_square_square_proto_rawDescOnce sync.Once
	file_blast_v1_square_square_proto_rawDescData = file_blast_v1_square_square_proto_rawDesc
)

func file_blast_v1_square_square_proto_rawDescGZIP() []byte {
	file_blast_v1_square_square_proto_rawDescOnce.Do(func() {
		file_blast_v1_square_square_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_square_square_proto_rawDescData)
	})
	return file_blast_v1_square_square_proto_rawDescData
}

var file_blast_v1_square_square_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_blast_v1_square_square_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_blast_v1_square_square_proto_goTypes = []interface{}{
	(SquareView)(0),                                 // 0: blast.v1.square.SquareView
	(SquareState)(0),                                // 1: blast.v1.square.SquareState
	(SquareJoinType)(0),                             // 2: blast.v1.square.SquareJoinType
	(SquareMemberType)(0),                           // 3: blast.v1.square.SquareMemberType
	(SquareMemberRankType)(0),                       // 4: blast.v1.square.SquareMemberRankType
	(RejectMintCode)(0),                             // 5: blast.v1.square.RejectMintCode
	(RejectJoinSquareCode)(0),                       // 6: blast.v1.square.RejectJoinSquareCode
	(RejectTransferSquareCode)(0),                   // 7: blast.v1.square.RejectTransferSquareCode
	(MintEligibility)(0),                            // 8: blast.v1.square.MintEligibility
	(TransferMemberType)(0),                         // 9: blast.v1.square.TransferMemberType
	(SpiritType)(0),                                 // 10: blast.v1.square.SpiritType
	(*GetSquareRequest)(nil),                        // 11: blast.v1.square.GetSquareRequest
	(*ListSquaresRequest)(nil),                      // 12: blast.v1.square.ListSquaresRequest
	(*ListSquaresResponse)(nil),                     // 13: blast.v1.square.ListSquaresResponse
	(*ValidateDisplayNameAvailabilityRequest)(nil),  // 14: blast.v1.square.ValidateDisplayNameAvailabilityRequest
	(*ValidateDisplayNameAvailabilityResponse)(nil), // 15: blast.v1.square.ValidateDisplayNameAvailabilityResponse
	(*CreateSquareAndSignRequest)(nil),              // 16: blast.v1.square.CreateSquareAndSignRequest
	(*CreateSquareAndSignResponse)(nil),             // 17: blast.v1.square.CreateSquareAndSignResponse
	(*ListUsersSquaresRequest)(nil),                 // 18: blast.v1.square.ListUsersSquaresRequest
	(*ListUsersSquaresResponse)(nil),                // 19: blast.v1.square.ListUsersSquaresResponse
	(*UpdateSquareRequest)(nil),                     // 20: blast.v1.square.UpdateSquareRequest
	(*GetSquareWeeklySpiritsRequest)(nil),           // 21: blast.v1.square.GetSquareWeeklySpiritsRequest
	(*GetSquareWeeklySpiritsResponse)(nil),          // 22: blast.v1.square.GetSquareWeeklySpiritsResponse
	(*CheckMintEligibilityRequest)(nil),             // 23: blast.v1.square.CheckMintEligibilityRequest
	(*CheckMintEligibilityResponse)(nil),            // 24: blast.v1.square.CheckMintEligibilityResponse
	(*ApproveJoinSquareAndSignRequest)(nil),         // 25: blast.v1.square.ApproveJoinSquareAndSignRequest
	(*ApproveJoinSquareAndSignResponse)(nil),        // 26: blast.v1.square.ApproveJoinSquareAndSignResponse
	(*ApproveTransferSquareAndSignRequest)(nil),     // 27: blast.v1.square.ApproveTransferSquareAndSignRequest
	(*ApproveTransferSquareAndSignResponse)(nil),    // 28: blast.v1.square.ApproveTransferSquareAndSignResponse
	(*GetSquareWeeklyPointsRequest)(nil),            // 29: blast.v1.square.GetSquareWeeklyPointsRequest
	(*GetSquareWeeklyPointsResponse)(nil),           // 30: blast.v1.square.GetSquareWeeklyPointsResponse
	(*ListSquareSpiritHistoriesRequest)(nil),        // 31: blast.v1.square.ListSquareSpiritHistoriesRequest
	(*ListSquareSpiritHistoriesResposne)(nil),       // 32: blast.v1.square.ListSquareSpiritHistoriesResposne
	(*ListSquareMembersRequest)(nil),                // 33: blast.v1.square.ListSquareMembersRequest
	(*ListSquareMembersResponse)(nil),               // 34: blast.v1.square.ListSquareMembersResponse
	(*ListSquareMemberRankingsRequest)(nil),         // 35: blast.v1.square.ListSquareMemberRankingsRequest
	(*ListSquareMemberRankingsResponse)(nil),        // 36: blast.v1.square.ListSquareMemberRankingsResponse
	(*Square)(nil),                                  // 37: blast.v1.square.Square
	(*PFPBoost)(nil),                                // 38: blast.v1.square.PFPBoost
	(*Public)(nil),                                  // 39: blast.v1.square.Public
	(*Private)(nil),                                 // 40: blast.v1.square.Private
	(*TokenGated)(nil),                              // 41: blast.v1.square.TokenGated
	(*SquareNFT)(nil),                               // 42: blast.v1.square.SquareNFT
	(*SquareMember)(nil),                            // 43: blast.v1.square.SquareMember
	(*SquareMemberRanking)(nil),                     // 44: blast.v1.square.SquareMemberRanking
	(*SquareSpiritHistory)(nil),                     // 45: blast.v1.square.SquareSpiritHistory
	(*chain.MintAndCreateSquareParams)(nil),         // 46: blast.v1.chain.MintAndCreateSquareParams
	(*fieldmaskpb.FieldMask)(nil),                   // 47: google.protobuf.FieldMask
	(*chain.JoinSquareParams)(nil),                  // 48: blast.v1.chain.JoinSquareParams
	(*chain.TransferSquareParams)(nil),              // 49: blast.v1.chain.TransferSquareParams
	(*timestamppb.Timestamp)(nil),                   // 50: google.protobuf.Timestamp
}
var file_blast_v1_square_square_proto_depIdxs = []int32{
	0,  // 0: blast.v1.square.GetSquareRequest.view:type_name -> blast.v1.square.SquareView
	37, // 1: blast.v1.square.ListSquaresResponse.squares:type_name -> blast.v1.square.Square
	37, // 2: blast.v1.square.CreateSquareAndSignRequest.square:type_name -> blast.v1.square.Square
	37, // 3: blast.v1.square.CreateSquareAndSignResponse.square:type_name -> blast.v1.square.Square
	46, // 4: blast.v1.square.CreateSquareAndSignResponse.params:type_name -> blast.v1.chain.MintAndCreateSquareParams
	37, // 5: blast.v1.square.ListUsersSquaresResponse.squares:type_name -> blast.v1.square.Square
	37, // 6: blast.v1.square.UpdateSquareRequest.square:type_name -> blast.v1.square.Square
	47, // 7: blast.v1.square.UpdateSquareRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 8: blast.v1.square.CheckMintEligibilityResponse.eligibility:type_name -> blast.v1.square.MintEligibility
	5,  // 9: blast.v1.square.CheckMintEligibilityResponse.reject_code:type_name -> blast.v1.square.RejectMintCode
	6,  // 10: blast.v1.square.ApproveJoinSquareAndSignResponse.reject_code:type_name -> blast.v1.square.RejectJoinSquareCode
	48, // 11: blast.v1.square.ApproveJoinSquareAndSignResponse.params:type_name -> blast.v1.chain.JoinSquareParams
	7,  // 12: blast.v1.square.ApproveTransferSquareAndSignResponse.reject_code:type_name -> blast.v1.square.RejectTransferSquareCode
	49, // 13: blast.v1.square.ApproveTransferSquareAndSignResponse.params:type_name -> blast.v1.chain.TransferSquareParams
	45, // 14: blast.v1.square.ListSquareSpiritHistoriesResposne.histories:type_name -> blast.v1.square.SquareSpiritHistory
	43, // 15: blast.v1.square.ListSquareMembersResponse.members:type_name -> blast.v1.square.SquareMember
	4,  // 16: blast.v1.square.ListSquareMemberRankingsRequest.rank_type:type_name -> blast.v1.square.SquareMemberRankType
	44, // 17: blast.v1.square.ListSquareMemberRankingsResponse.rankings:type_name -> blast.v1.square.SquareMemberRanking
	50, // 18: blast.v1.square.Square.create_time:type_name -> google.protobuf.Timestamp
	1,  // 19: blast.v1.square.Square.state:type_name -> blast.v1.square.SquareState
	2,  // 20: blast.v1.square.Square.join_type:type_name -> blast.v1.square.SquareJoinType
	39, // 21: blast.v1.square.Square.public:type_name -> blast.v1.square.Public
	40, // 22: blast.v1.square.Square.private:type_name -> blast.v1.square.Private
	41, // 23: blast.v1.square.Square.token_gated:type_name -> blast.v1.square.TokenGated
	38, // 24: blast.v1.square.Square.pfp_boost:type_name -> blast.v1.square.PFPBoost
	42, // 25: blast.v1.square.Square.nft:type_name -> blast.v1.square.SquareNFT
	3,  // 26: blast.v1.square.SquareMember.type:type_name -> blast.v1.square.SquareMemberType
	50, // 27: blast.v1.square.SquareMember.join_time:type_name -> google.protobuf.Timestamp
	43, // 28: blast.v1.square.SquareMemberRanking.member:type_name -> blast.v1.square.SquareMember
	10, // 29: blast.v1.square.SquareSpiritHistory.type:type_name -> blast.v1.square.SpiritType
	50, // 30: blast.v1.square.SquareSpiritHistory.create_time:type_name -> google.protobuf.Timestamp
	11, // 31: blast.v1.square.SquareService.GetSquare:input_type -> blast.v1.square.GetSquareRequest
	12, // 32: blast.v1.square.SquareService.ListSquares:input_type -> blast.v1.square.ListSquaresRequest
	20, // 33: blast.v1.square.SquareService.UpdateSquare:input_type -> blast.v1.square.UpdateSquareRequest
	21, // 34: blast.v1.square.SquareService.GetSquareWeeklySpirits:input_type -> blast.v1.square.GetSquareWeeklySpiritsRequest
	23, // 35: blast.v1.square.SquareService.CheckMintEligibility:input_type -> blast.v1.square.CheckMintEligibilityRequest
	14, // 36: blast.v1.square.SquareService.ValidateDisplayNameAvailability:input_type -> blast.v1.square.ValidateDisplayNameAvailabilityRequest
	16, // 37: blast.v1.square.SquareService.CreateSquareAndSign:input_type -> blast.v1.square.CreateSquareAndSignRequest
	25, // 38: blast.v1.square.SquareService.ApproveJoinSquareAndSign:input_type -> blast.v1.square.ApproveJoinSquareAndSignRequest
	27, // 39: blast.v1.square.SquareService.ApproveTransferSquareAndSign:input_type -> blast.v1.square.ApproveTransferSquareAndSignRequest
	29, // 40: blast.v1.square.SquareService.GetSquareWeeklyPoints:input_type -> blast.v1.square.GetSquareWeeklyPointsRequest
	31, // 41: blast.v1.square.SquareService.ListSquareSpiritHistories:input_type -> blast.v1.square.ListSquareSpiritHistoriesRequest
	33, // 42: blast.v1.square.SquareService.ListSquareMembers:input_type -> blast.v1.square.ListSquareMembersRequest
	35, // 43: blast.v1.square.SquareService.ListSquareMemberRankings:input_type -> blast.v1.square.ListSquareMemberRankingsRequest
	37, // 44: blast.v1.square.SquareService.GetSquare:output_type -> blast.v1.square.Square
	13, // 45: blast.v1.square.SquareService.ListSquares:output_type -> blast.v1.square.ListSquaresResponse
	37, // 46: blast.v1.square.SquareService.UpdateSquare:output_type -> blast.v1.square.Square
	22, // 47: blast.v1.square.SquareService.GetSquareWeeklySpirits:output_type -> blast.v1.square.GetSquareWeeklySpiritsResponse
	24, // 48: blast.v1.square.SquareService.CheckMintEligibility:output_type -> blast.v1.square.CheckMintEligibilityResponse
	15, // 49: blast.v1.square.SquareService.ValidateDisplayNameAvailability:output_type -> blast.v1.square.ValidateDisplayNameAvailabilityResponse
	17, // 50: blast.v1.square.SquareService.CreateSquareAndSign:output_type -> blast.v1.square.CreateSquareAndSignResponse
	26, // 51: blast.v1.square.SquareService.ApproveJoinSquareAndSign:output_type -> blast.v1.square.ApproveJoinSquareAndSignResponse
	28, // 52: blast.v1.square.SquareService.ApproveTransferSquareAndSign:output_type -> blast.v1.square.ApproveTransferSquareAndSignResponse
	30, // 53: blast.v1.square.SquareService.GetSquareWeeklyPoints:output_type -> blast.v1.square.GetSquareWeeklyPointsResponse
	32, // 54: blast.v1.square.SquareService.ListSquareSpiritHistories:output_type -> blast.v1.square.ListSquareSpiritHistoriesResposne
	34, // 55: blast.v1.square.SquareService.ListSquareMembers:output_type -> blast.v1.square.ListSquareMembersResponse
	36, // 56: blast.v1.square.SquareService.ListSquareMemberRankings:output_type -> blast.v1.square.ListSquareMemberRankingsResponse
	44, // [44:57] is the sub-list for method output_type
	31, // [31:44] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_blast_v1_square_square_proto_init() }
func file_blast_v1_square_square_proto_init() {
	if File_blast_v1_square_square_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_square_square_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDisplayNameAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDisplayNameAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSquareAndSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSquareAndSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersSquaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersSquaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSquareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareWeeklySpiritsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareWeeklySpiritsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMintEligibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMintEligibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveJoinSquareAndSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveJoinSquareAndSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransferSquareAndSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransferSquareAndSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareWeeklyPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareWeeklyPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareSpiritHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareSpiritHistoriesResposne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMemberRankingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMemberRankingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Square); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PFPBoost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenGated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMemberRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_square_square_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareSpiritHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blast_v1_square_square_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_blast_v1_square_square_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Square_Public)(nil),
		(*Square_Private)(nil),
		(*Square_TokenGated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_square_square_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_square_square_proto_goTypes,
		DependencyIndexes: file_blast_v1_square_square_proto_depIdxs,
		EnumInfos:         file_blast_v1_square_square_proto_enumTypes,
		MessageInfos:      file_blast_v1_square_square_proto_msgTypes,
	}.Build()
	File_blast_v1_square_square_proto = out.File
	file_blast_v1_square_square_proto_rawDesc = nil
	file_blast_v1_square_square_proto_goTypes = nil
	file_blast_v1_square_square_proto_depIdxs = nil
}
