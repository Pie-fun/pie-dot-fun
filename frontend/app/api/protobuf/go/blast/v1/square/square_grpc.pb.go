// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/square/square.proto

package square

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquareServiceClient is the client API for SquareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquareServiceClient interface {
	// GetSquare will return Square.
	GetSquare(ctx context.Context, in *GetSquareRequest, opts ...grpc.CallOption) (*Square, error)
	// ListSquares will return Squares.
	ListSquares(ctx context.Context, in *ListSquaresRequest, opts ...grpc.CallOption) (*ListSquaresResponse, error)
	// UpdateSquare update Square.
	UpdateSquare(ctx context.Context, in *UpdateSquareRequest, opts ...grpc.CallOption) (*Square, error)
	// GetSquareWeeklySpirits will return weekly spirits of the Square.
	GetSquareWeeklySpirits(ctx context.Context, in *GetSquareWeeklySpiritsRequest, opts ...grpc.CallOption) (*GetSquareWeeklySpiritsResponse, error)
	// CheckMintEligibility check if the user is eligible to mint the NFT of the Square.
	CheckMintEligibility(ctx context.Context, in *CheckMintEligibilityRequest, opts ...grpc.CallOption) (*CheckMintEligibilityResponse, error)
	// ValidateDisplayNameAvailability check if the display name is available.
	ValidateDisplayNameAvailability(ctx context.Context, in *ValidateDisplayNameAvailabilityRequest, opts ...grpc.CallOption) (*ValidateDisplayNameAvailabilityResponse, error)
	// CreateSquareAndSign create Square with CREATED_PENDING state and response with signature to sign the onchain tx.
	CreateSquareAndSign(ctx context.Context, in *CreateSquareAndSignRequest, opts ...grpc.CallOption) (*CreateSquareAndSignResponse, error)
	// ApproveJoinSquareAndSign verify the member join the square and return signature to sign the onchain tx.
	ApproveJoinSquareAndSign(ctx context.Context, in *ApproveJoinSquareAndSignRequest, opts ...grpc.CallOption) (*ApproveJoinSquareAndSignResponse, error)
	// ApproveTransferSquareAndSign verify the member transfer the square and return signature to sign the onchain tx.
	ApproveTransferSquareAndSign(ctx context.Context, in *ApproveTransferSquareAndSignRequest, opts ...grpc.CallOption) (*ApproveTransferSquareAndSignResponse, error)
	// GetSquareWeeklyPoints will return Square.
	GetSquareWeeklyPoints(ctx context.Context, in *GetSquareWeeklyPointsRequest, opts ...grpc.CallOption) (*GetSquareWeeklyPointsResponse, error)
	// ListSquareSpiritHistories will return the spirit history of the Square.
	ListSquareSpiritHistories(ctx context.Context, in *ListSquareSpiritHistoriesRequest, opts ...grpc.CallOption) (*ListSquareSpiritHistoriesResposne, error)
	// ListSquareMembers will return the members of the Square.
	ListSquareMembers(ctx context.Context, in *ListSquareMembersRequest, opts ...grpc.CallOption) (*ListSquareMembersResponse, error)
	// ListSquareMemberRankings will return the leaderboard of the Square.
	ListSquareMemberRankings(ctx context.Context, in *ListSquareMemberRankingsRequest, opts ...grpc.CallOption) (*ListSquareMemberRankingsResponse, error)
}

type squareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSquareServiceClient(cc grpc.ClientConnInterface) SquareServiceClient {
	return &squareServiceClient{cc}
}

func (c *squareServiceClient) GetSquare(ctx context.Context, in *GetSquareRequest, opts ...grpc.CallOption) (*Square, error) {
	out := new(Square)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/GetSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ListSquares(ctx context.Context, in *ListSquaresRequest, opts ...grpc.CallOption) (*ListSquaresResponse, error) {
	out := new(ListSquaresResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ListSquares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) UpdateSquare(ctx context.Context, in *UpdateSquareRequest, opts ...grpc.CallOption) (*Square, error) {
	out := new(Square)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/UpdateSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) GetSquareWeeklySpirits(ctx context.Context, in *GetSquareWeeklySpiritsRequest, opts ...grpc.CallOption) (*GetSquareWeeklySpiritsResponse, error) {
	out := new(GetSquareWeeklySpiritsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/GetSquareWeeklySpirits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) CheckMintEligibility(ctx context.Context, in *CheckMintEligibilityRequest, opts ...grpc.CallOption) (*CheckMintEligibilityResponse, error) {
	out := new(CheckMintEligibilityResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/CheckMintEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ValidateDisplayNameAvailability(ctx context.Context, in *ValidateDisplayNameAvailabilityRequest, opts ...grpc.CallOption) (*ValidateDisplayNameAvailabilityResponse, error) {
	out := new(ValidateDisplayNameAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ValidateDisplayNameAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) CreateSquareAndSign(ctx context.Context, in *CreateSquareAndSignRequest, opts ...grpc.CallOption) (*CreateSquareAndSignResponse, error) {
	out := new(CreateSquareAndSignResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/CreateSquareAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ApproveJoinSquareAndSign(ctx context.Context, in *ApproveJoinSquareAndSignRequest, opts ...grpc.CallOption) (*ApproveJoinSquareAndSignResponse, error) {
	out := new(ApproveJoinSquareAndSignResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ApproveJoinSquareAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ApproveTransferSquareAndSign(ctx context.Context, in *ApproveTransferSquareAndSignRequest, opts ...grpc.CallOption) (*ApproveTransferSquareAndSignResponse, error) {
	out := new(ApproveTransferSquareAndSignResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ApproveTransferSquareAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) GetSquareWeeklyPoints(ctx context.Context, in *GetSquareWeeklyPointsRequest, opts ...grpc.CallOption) (*GetSquareWeeklyPointsResponse, error) {
	out := new(GetSquareWeeklyPointsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/GetSquareWeeklyPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ListSquareSpiritHistories(ctx context.Context, in *ListSquareSpiritHistoriesRequest, opts ...grpc.CallOption) (*ListSquareSpiritHistoriesResposne, error) {
	out := new(ListSquareSpiritHistoriesResposne)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ListSquareSpiritHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ListSquareMembers(ctx context.Context, in *ListSquareMembersRequest, opts ...grpc.CallOption) (*ListSquareMembersResponse, error) {
	out := new(ListSquareMembersResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ListSquareMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareServiceClient) ListSquareMemberRankings(ctx context.Context, in *ListSquareMemberRankingsRequest, opts ...grpc.CallOption) (*ListSquareMemberRankingsResponse, error) {
	out := new(ListSquareMemberRankingsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.square.SquareService/ListSquareMemberRankings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquareServiceServer is the server API for SquareService service.
// All implementations must embed UnimplementedSquareServiceServer
// for forward compatibility
type SquareServiceServer interface {
	// GetSquare will return Square.
	GetSquare(context.Context, *GetSquareRequest) (*Square, error)
	// ListSquares will return Squares.
	ListSquares(context.Context, *ListSquaresRequest) (*ListSquaresResponse, error)
	// UpdateSquare update Square.
	UpdateSquare(context.Context, *UpdateSquareRequest) (*Square, error)
	// GetSquareWeeklySpirits will return weekly spirits of the Square.
	GetSquareWeeklySpirits(context.Context, *GetSquareWeeklySpiritsRequest) (*GetSquareWeeklySpiritsResponse, error)
	// CheckMintEligibility check if the user is eligible to mint the NFT of the Square.
	CheckMintEligibility(context.Context, *CheckMintEligibilityRequest) (*CheckMintEligibilityResponse, error)
	// ValidateDisplayNameAvailability check if the display name is available.
	ValidateDisplayNameAvailability(context.Context, *ValidateDisplayNameAvailabilityRequest) (*ValidateDisplayNameAvailabilityResponse, error)
	// CreateSquareAndSign create Square with CREATED_PENDING state and response with signature to sign the onchain tx.
	CreateSquareAndSign(context.Context, *CreateSquareAndSignRequest) (*CreateSquareAndSignResponse, error)
	// ApproveJoinSquareAndSign verify the member join the square and return signature to sign the onchain tx.
	ApproveJoinSquareAndSign(context.Context, *ApproveJoinSquareAndSignRequest) (*ApproveJoinSquareAndSignResponse, error)
	// ApproveTransferSquareAndSign verify the member transfer the square and return signature to sign the onchain tx.
	ApproveTransferSquareAndSign(context.Context, *ApproveTransferSquareAndSignRequest) (*ApproveTransferSquareAndSignResponse, error)
	// GetSquareWeeklyPoints will return Square.
	GetSquareWeeklyPoints(context.Context, *GetSquareWeeklyPointsRequest) (*GetSquareWeeklyPointsResponse, error)
	// ListSquareSpiritHistories will return the spirit history of the Square.
	ListSquareSpiritHistories(context.Context, *ListSquareSpiritHistoriesRequest) (*ListSquareSpiritHistoriesResposne, error)
	// ListSquareMembers will return the members of the Square.
	ListSquareMembers(context.Context, *ListSquareMembersRequest) (*ListSquareMembersResponse, error)
	// ListSquareMemberRankings will return the leaderboard of the Square.
	ListSquareMemberRankings(context.Context, *ListSquareMemberRankingsRequest) (*ListSquareMemberRankingsResponse, error)
	mustEmbedUnimplementedSquareServiceServer()
}

// UnimplementedSquareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSquareServiceServer struct {
}

func (UnimplementedSquareServiceServer) GetSquare(context.Context, *GetSquareRequest) (*Square, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquare not implemented")
}
func (UnimplementedSquareServiceServer) ListSquares(context.Context, *ListSquaresRequest) (*ListSquaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquares not implemented")
}
func (UnimplementedSquareServiceServer) UpdateSquare(context.Context, *UpdateSquareRequest) (*Square, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSquare not implemented")
}
func (UnimplementedSquareServiceServer) GetSquareWeeklySpirits(context.Context, *GetSquareWeeklySpiritsRequest) (*GetSquareWeeklySpiritsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareWeeklySpirits not implemented")
}
func (UnimplementedSquareServiceServer) CheckMintEligibility(context.Context, *CheckMintEligibilityRequest) (*CheckMintEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMintEligibility not implemented")
}
func (UnimplementedSquareServiceServer) ValidateDisplayNameAvailability(context.Context, *ValidateDisplayNameAvailabilityRequest) (*ValidateDisplayNameAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDisplayNameAvailability not implemented")
}
func (UnimplementedSquareServiceServer) CreateSquareAndSign(context.Context, *CreateSquareAndSignRequest) (*CreateSquareAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSquareAndSign not implemented")
}
func (UnimplementedSquareServiceServer) ApproveJoinSquareAndSign(context.Context, *ApproveJoinSquareAndSignRequest) (*ApproveJoinSquareAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJoinSquareAndSign not implemented")
}
func (UnimplementedSquareServiceServer) ApproveTransferSquareAndSign(context.Context, *ApproveTransferSquareAndSignRequest) (*ApproveTransferSquareAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransferSquareAndSign not implemented")
}
func (UnimplementedSquareServiceServer) GetSquareWeeklyPoints(context.Context, *GetSquareWeeklyPointsRequest) (*GetSquareWeeklyPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareWeeklyPoints not implemented")
}
func (UnimplementedSquareServiceServer) ListSquareSpiritHistories(context.Context, *ListSquareSpiritHistoriesRequest) (*ListSquareSpiritHistoriesResposne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquareSpiritHistories not implemented")
}
func (UnimplementedSquareServiceServer) ListSquareMembers(context.Context, *ListSquareMembersRequest) (*ListSquareMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquareMembers not implemented")
}
func (UnimplementedSquareServiceServer) ListSquareMemberRankings(context.Context, *ListSquareMemberRankingsRequest) (*ListSquareMemberRankingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquareMemberRankings not implemented")
}
func (UnimplementedSquareServiceServer) mustEmbedUnimplementedSquareServiceServer() {}

// UnsafeSquareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquareServiceServer will
// result in compilation errors.
type UnsafeSquareServiceServer interface {
	mustEmbedUnimplementedSquareServiceServer()
}

func RegisterSquareServiceServer(s grpc.ServiceRegistrar, srv SquareServiceServer) {
	s.RegisterService(&SquareService_ServiceDesc, srv)
}

func _SquareService_GetSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).GetSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/GetSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).GetSquare(ctx, req.(*GetSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ListSquares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ListSquares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ListSquares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ListSquares(ctx, req.(*ListSquaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_UpdateSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).UpdateSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/UpdateSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).UpdateSquare(ctx, req.(*UpdateSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_GetSquareWeeklySpirits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareWeeklySpiritsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).GetSquareWeeklySpirits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/GetSquareWeeklySpirits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).GetSquareWeeklySpirits(ctx, req.(*GetSquareWeeklySpiritsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_CheckMintEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMintEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).CheckMintEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/CheckMintEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).CheckMintEligibility(ctx, req.(*CheckMintEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ValidateDisplayNameAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDisplayNameAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ValidateDisplayNameAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ValidateDisplayNameAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ValidateDisplayNameAvailability(ctx, req.(*ValidateDisplayNameAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_CreateSquareAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSquareAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).CreateSquareAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/CreateSquareAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).CreateSquareAndSign(ctx, req.(*CreateSquareAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ApproveJoinSquareAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJoinSquareAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ApproveJoinSquareAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ApproveJoinSquareAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ApproveJoinSquareAndSign(ctx, req.(*ApproveJoinSquareAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ApproveTransferSquareAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTransferSquareAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ApproveTransferSquareAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ApproveTransferSquareAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ApproveTransferSquareAndSign(ctx, req.(*ApproveTransferSquareAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_GetSquareWeeklyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareWeeklyPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).GetSquareWeeklyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/GetSquareWeeklyPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).GetSquareWeeklyPoints(ctx, req.(*GetSquareWeeklyPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ListSquareSpiritHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquareSpiritHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ListSquareSpiritHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ListSquareSpiritHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ListSquareSpiritHistories(ctx, req.(*ListSquareSpiritHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ListSquareMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquareMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ListSquareMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ListSquareMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ListSquareMembers(ctx, req.(*ListSquareMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareService_ListSquareMemberRankings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquareMemberRankingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServiceServer).ListSquareMemberRankings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.square.SquareService/ListSquareMemberRankings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServiceServer).ListSquareMemberRankings(ctx, req.(*ListSquareMemberRankingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SquareService_ServiceDesc is the grpc.ServiceDesc for SquareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.square.SquareService",
	HandlerType: (*SquareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSquare",
			Handler:    _SquareService_GetSquare_Handler,
		},
		{
			MethodName: "ListSquares",
			Handler:    _SquareService_ListSquares_Handler,
		},
		{
			MethodName: "UpdateSquare",
			Handler:    _SquareService_UpdateSquare_Handler,
		},
		{
			MethodName: "GetSquareWeeklySpirits",
			Handler:    _SquareService_GetSquareWeeklySpirits_Handler,
		},
		{
			MethodName: "CheckMintEligibility",
			Handler:    _SquareService_CheckMintEligibility_Handler,
		},
		{
			MethodName: "ValidateDisplayNameAvailability",
			Handler:    _SquareService_ValidateDisplayNameAvailability_Handler,
		},
		{
			MethodName: "CreateSquareAndSign",
			Handler:    _SquareService_CreateSquareAndSign_Handler,
		},
		{
			MethodName: "ApproveJoinSquareAndSign",
			Handler:    _SquareService_ApproveJoinSquareAndSign_Handler,
		},
		{
			MethodName: "ApproveTransferSquareAndSign",
			Handler:    _SquareService_ApproveTransferSquareAndSign_Handler,
		},
		{
			MethodName: "GetSquareWeeklyPoints",
			Handler:    _SquareService_GetSquareWeeklyPoints_Handler,
		},
		{
			MethodName: "ListSquareSpiritHistories",
			Handler:    _SquareService_ListSquareSpiritHistories_Handler,
		},
		{
			MethodName: "ListSquareMembers",
			Handler:    _SquareService_ListSquareMembers_Handler,
		},
		{
			MethodName: "ListSquareMemberRankings",
			Handler:    _SquareService_ListSquareMemberRankings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/square/square.proto",
}
