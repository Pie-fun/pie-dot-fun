// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/nft/nft.proto

package nft

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChainType enumeration represents the type of blockchain.
// Does not support optimism, zksync, bsc yet
type ChainType int32

const (
	// Unspecified blockchain type.
	ChainType_CHAIN_UNSPECIFIED ChainType = 0
	// Ethereum Mainnet blockchain.
	ChainType_ETHEREUM ChainType = 1
	// Polygon Mainnet blockchain.
	ChainType_POLYGON ChainType = 137
	// Arbitrum Mainnet blockchain.
	ChainType_ARBITRUM ChainType = 42161
	// Optimism Mainnet blockchain.
	ChainType_OPTIMISM ChainType = 10
	// Base Mainnet blockchain.
	ChainType_BASE ChainType = 8453
	// Blast Mainnet blockchain.
	ChainType_BLAST ChainType = 81457
	// Sepolia Testnet blockchain.
	ChainType_ETHEREUM_SEPOLIA ChainType = 11155111
	// Polygon Testnet blockchain.
	ChainType_POLYGON_MUMBAI ChainType = 80001
	// Blast Testnet blockchain.
	ChainType_BLAST_SEPOLIA ChainType = 168587773
)

// Enum value maps for ChainType.
var (
	ChainType_name = map[int32]string{
		0:         "CHAIN_UNSPECIFIED",
		1:         "ETHEREUM",
		137:       "POLYGON",
		42161:     "ARBITRUM",
		10:        "OPTIMISM",
		8453:      "BASE",
		81457:     "BLAST",
		11155111:  "ETHEREUM_SEPOLIA",
		80001:     "POLYGON_MUMBAI",
		168587773: "BLAST_SEPOLIA",
	}
	ChainType_value = map[string]int32{
		"CHAIN_UNSPECIFIED": 0,
		"ETHEREUM":          1,
		"POLYGON":           137,
		"ARBITRUM":          42161,
		"OPTIMISM":          10,
		"BASE":              8453,
		"BLAST":             81457,
		"ETHEREUM_SEPOLIA":  11155111,
		"POLYGON_MUMBAI":    80001,
		"BLAST_SEPOLIA":     168587773,
	}
)

func (x ChainType) Enum() *ChainType {
	p := new(ChainType)
	*p = x
	return p
}

func (x ChainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_nft_nft_proto_enumTypes[0].Descriptor()
}

func (ChainType) Type() protoreflect.EnumType {
	return &file_blast_v1_nft_nft_proto_enumTypes[0]
}

func (x ChainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainType.Descriptor instead.
func (ChainType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{0}
}

type ContractType int32

const (
	// Unspecified contract type.
	ContractType_CONTRACT_TYPE_UNSPECIFIED ContractType = 0
	// ERC721 contract type.
	ContractType_ERC721 ContractType = 1
	// ERC1155 contract type.
	ContractType_ERC1155 ContractType = 2
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "CONTRACT_TYPE_UNSPECIFIED",
		1: "ERC721",
		2: "ERC1155",
	}
	ContractType_value = map[string]int32{
		"CONTRACT_TYPE_UNSPECIFIED": 0,
		"ERC721":                    1,
		"ERC1155":                   2,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_nft_nft_proto_enumTypes[1].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_blast_v1_nft_nft_proto_enumTypes[1]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{1}
}

// ListNFTsRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type ListNFTsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner address of the profile.
	// This field is required if `sync_onchain` is true.
	// When `sync_onchain` is true, only EOA address is supported.
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// The maximum number of nfts to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When page token is not specified, nft assets are synced with the blockchain. If
	// page token is specified, nft assets are not synced with the blockchain and retrieved from the database.
	//
	// The page token is valid for only 2 hours.
	//
	// When paginating, all other parameters provided to `ListNFTs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `equal`
	//
	// * has_image
	//   - `negation`
	//
	// * address
	//   - `equal`
	//
	// * contract.address
	//   - `equal`
	//
	// * contract.display_name
	//   - `equal`
	//
	// * contract.chain
	//   - supported value is [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BASE, STARKNET, ETHEREUM_SEPOLIA, POLYGON_MUMBAI]
	//   - `equal`
	//
	// * contract.type
	//   - `equal`
	//
	// Examples
	// * filter=name="nfts/MUMBAI/0xb4Afd0Ecb77460f0d8F93E7Fba93D7c18491f7a3/424"
	// * filter=has_image
	// * filter=address="0xa3d8090e4ea02d4cc76ecb2e8b09ab140cd11dee"
	// * filter=contract.address="0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
	// * filter=contract.display_name="CryptoKitties"
	// * filter=contract.chain=ETHEREUM
	// * filter=contract.type=ERC721
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Supported value is ["true", "1", "yes", "y"], other then all this value will be treated as false.
	// If true, the service will fetch assets using third party NFT APIs.
	SyncOnchain string `protobuf:"bytes,5,opt,name=sync_onchain,json=syncOnchain,proto3" json:"sync_onchain,omitempty"`
}

func (x *ListNFTsRequest) Reset() {
	*x = ListNFTsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsRequest) ProtoMessage() {}

func (x *ListNFTsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsRequest.ProtoReflect.Descriptor instead.
func (*ListNFTsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *ListNFTsRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *ListNFTsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNFTsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNFTsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListNFTsRequest) GetSyncOnchain() string {
	if x != nil {
		return x.SyncOnchain
	}
	return ""
}

// ListNFTsResponse response
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListNFTsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Nfts []*NFT `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNFTsResponse) Reset() {
	*x = ListNFTsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsResponse) ProtoMessage() {}

func (x *ListNFTsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsResponse.ProtoReflect.Descriptor instead.
func (*ListNFTsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *ListNFTsResponse) GetNfts() []*NFT {
	if x != nil {
		return x.Nfts
	}
	return nil
}

func (x *ListNFTsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// ListNFTsDelegateRequest
type ListNFTsDelegateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner address of the profile.
	// This field is required if `sync_onchain` is true.
	// When `sync_onchain` is true, only EOA address is supported.
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (x *ListNFTsDelegateRequest) Reset() {
	*x = ListNFTsDelegateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsDelegateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsDelegateRequest) ProtoMessage() {}

func (x *ListNFTsDelegateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsDelegateRequest.ProtoReflect.Descriptor instead.
func (*ListNFTsDelegateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{2}
}

func (x *ListNFTsDelegateRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

// ListNFTsDelegateRequest
type ListNFTsDelegateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Nfts []*NFT `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ListNFTsDelegateResponse) Reset() {
	*x = ListNFTsDelegateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsDelegateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsDelegateResponse) ProtoMessage() {}

func (x *ListNFTsDelegateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsDelegateResponse.ProtoReflect.Descriptor instead.
func (*ListNFTsDelegateResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{3}
}

func (x *ListNFTsDelegateResponse) GetNfts() []*NFT {
	if x != nil {
		return x.Nfts
	}
	return nil
}

// GetNFTRequest
type GetNFTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft to retrieve.
	// Format: nfts/{chain_type}/{contract_address}/{token_id}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
	Nft string `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (x *GetNFTRequest) Reset() {
	*x = GetNFTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTRequest) ProtoMessage() {}

func (x *GetNFTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTRequest.ProtoReflect.Descriptor instead.
func (*GetNFTRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{4}
}

func (x *GetNFTRequest) GetNft() string {
	if x != nil {
		return x.Nft
	}
	return ""
}

// ValidateNFTAccessRequest
type ValidateNFTAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft to retrieve.
	// Format: nfts/{chain_type}/{contract_address}/{token_id}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
	Nft string `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
	// The owner address of the NFT asset.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (x *ValidateNFTAccessRequest) Reset() {
	*x = ValidateNFTAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNFTAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNFTAccessRequest) ProtoMessage() {}

func (x *ValidateNFTAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNFTAccessRequest.ProtoReflect.Descriptor instead.
func (*ValidateNFTAccessRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateNFTAccessRequest) GetNft() string {
	if x != nil {
		return x.Nft
	}
	return ""
}

func (x *ValidateNFTAccessRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

type ValidateNFTAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nft    *NFT `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
	Access bool `protobuf:"varint,2,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *ValidateNFTAccessResponse) Reset() {
	*x = ValidateNFTAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNFTAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNFTAccessResponse) ProtoMessage() {}

func (x *ValidateNFTAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNFTAccessResponse.ProtoReflect.Descriptor instead.
func (*ValidateNFTAccessResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateNFTAccessResponse) GetNft() *NFT {
	if x != nil {
		return x.Nft
	}
	return nil
}

func (x *ValidateNFTAccessResponse) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

type ListOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts []string `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ListOwnersRequest) Reset() {
	*x = ListOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnersRequest) ProtoMessage() {}

func (x *ListOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnersRequest.ProtoReflect.Descriptor instead.
func (*ListOwnersRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{7}
}

func (x *ListOwnersRequest) GetNfts() []string {
	if x != nil {
		return x.Nfts
	}
	return nil
}

type ListOwnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owners map[string]*ListOwnersResponse_NFTs `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListOwnersResponse) Reset() {
	*x = ListOwnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnersResponse) ProtoMessage() {}

func (x *ListOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnersResponse.ProtoReflect.Descriptor instead.
func (*ListOwnersResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{8}
}

func (x *ListOwnersResponse) GetOwners() map[string]*ListOwnersResponse_NFTs {
	if x != nil {
		return x.Owners
	}
	return nil
}

// ValidateNFTRequest
type ValidateNFTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft to retrieve.
	// Format: nfts/{chain_type}/{contract_address}/{token_id}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
	Nft string `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (x *ValidateNFTRequest) Reset() {
	*x = ValidateNFTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNFTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNFTRequest) ProtoMessage() {}

func (x *ValidateNFTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNFTRequest.ProtoReflect.Descriptor instead.
func (*ValidateNFTRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{9}
}

func (x *ValidateNFTRequest) GetNft() string {
	if x != nil {
		return x.Nft
	}
	return ""
}

type ValidateNFTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidateNFTResponse) Reset() {
	*x = ValidateNFTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateNFTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateNFTResponse) ProtoMessage() {}

func (x *ValidateNFTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateNFTResponse.ProtoReflect.Descriptor instead.
func (*ValidateNFTResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateNFTResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GetContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft contract to retrieve.
	// Format: nfts/{chain_type}/{contract_address}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
	NftContract string `protobuf:"bytes,1,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
}

func (x *GetContractRequest) Reset() {
	*x = GetContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRequest) ProtoMessage() {}

func (x *GetContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRequest.ProtoReflect.Descriptor instead.
func (*GetContractRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{11}
}

func (x *GetContractRequest) GetNftContract() string {
	if x != nil {
		return x.NftContract
	}
	return ""
}

type CheckHolderOfContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft contract to retrieve.
	// Format: nfts/{chain_type}/{contract_address}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
	NftContract   string `protobuf:"bytes,1,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *CheckHolderOfContractRequest) Reset() {
	*x = CheckHolderOfContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHolderOfContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHolderOfContractRequest) ProtoMessage() {}

func (x *CheckHolderOfContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHolderOfContractRequest.ProtoReflect.Descriptor instead.
func (*CheckHolderOfContractRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{12}
}

func (x *CheckHolderOfContractRequest) GetNftContract() string {
	if x != nil {
		return x.NftContract
	}
	return ""
}

func (x *CheckHolderOfContractRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type CheckHolderOfContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHolder bool `protobuf:"varint,1,opt,name=is_holder,json=isHolder,proto3" json:"is_holder,omitempty"`
}

func (x *CheckHolderOfContractResponse) Reset() {
	*x = CheckHolderOfContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHolderOfContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHolderOfContractResponse) ProtoMessage() {}

func (x *CheckHolderOfContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHolderOfContractResponse.ProtoReflect.Descriptor instead.
func (*CheckHolderOfContractResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{13}
}

func (x *CheckHolderOfContractResponse) GetIsHolder() bool {
	if x != nil {
		return x.IsHolder
	}
	return false
}

// NFT message represents an NFT asset.
type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the NFT asset.
	// Format: nfts/{chain_type}/{contract_address}/{token_id}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EIP-6551 TBA Address of the NFT asset.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Token ID of the NFT asset.
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// Token Name of the NFT asset.
	TokenName string `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// The URI of the NFT asset's image.
	// This URI can be cached version of image original URI
	// e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
	ImageUri string `protobuf:"bytes,5,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The URI of the NFT asset's original image.
	// e.g. "https://www.larvalabs.com/cryptopunks/cryptopunk1.png"
	ImageOriginalUri string `protobuf:"bytes,6,opt,name=image_original_uri,json=imageOriginalUri,proto3" json:"image_original_uri,omitempty"`
	// The URI of the NFT asset's animation.
	// This URI can be cached version of animation original URI
	// This field is optional
	AnimationUri *string `protobuf:"bytes,7,opt,name=animation_uri,json=animationUri,proto3,oneof" json:"animation_uri,omitempty"`
	// The URI of the NFT asset's original animation.
	// This field is optional
	AnimationOriginalUri *string `protobuf:"bytes,8,opt,name=animation_original_uri,json=animationOriginalUri,proto3,oneof" json:"animation_original_uri,omitempty"`
	// Additional metadata about the NFT asset.
	MetadataUri string `protobuf:"bytes,9,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	// The owner address of the NFT asset.
	// This field is optional
	OwnerAddress *string `protobuf:"bytes,10,opt,name=ownerAddress,proto3,oneof" json:"ownerAddress,omitempty"`
	// The contract that owns the NFT asset.
	// Output only.
	Contract *NFTContract `protobuf:"bytes,11,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{14}
}

func (x *NFT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFT) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFT) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *NFT) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *NFT) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *NFT) GetImageOriginalUri() string {
	if x != nil {
		return x.ImageOriginalUri
	}
	return ""
}

func (x *NFT) GetAnimationUri() string {
	if x != nil && x.AnimationUri != nil {
		return *x.AnimationUri
	}
	return ""
}

func (x *NFT) GetAnimationOriginalUri() string {
	if x != nil && x.AnimationOriginalUri != nil {
		return *x.AnimationOriginalUri
	}
	return ""
}

func (x *NFT) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

func (x *NFT) GetOwnerAddress() string {
	if x != nil && x.OwnerAddress != nil {
		return *x.OwnerAddress
	}
	return ""
}

func (x *NFT) GetContract() *NFTContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NFTContract message represents an NFT contract.
type NFTContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the nft contract.
	// Format: nfts/{chain_type}/{contract_address}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The address of the NFT contract.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The display name of the NFT contract.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The symbol of the NFT contract.
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The blockchain on which the NFT contract resides.
	Chain ChainType `protobuf:"varint,5,opt,name=chain,proto3,enum=blast.v1.nft.ChainType" json:"chain,omitempty"`
	// The type of the NFT contract.
	Type ContractType `protobuf:"varint,6,opt,name=type,proto3,enum=blast.v1.nft.ContractType" json:"type,omitempty"`
	// The URI of the contract image
	ImageUri string `protobuf:"bytes,7,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
}

func (x *NFTContract) Reset() {
	*x = NFTContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTContract) ProtoMessage() {}

func (x *NFTContract) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTContract.ProtoReflect.Descriptor instead.
func (*NFTContract) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{15}
}

func (x *NFTContract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTContract) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *NFTContract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFTContract) GetChain() ChainType {
	if x != nil {
		return x.Chain
	}
	return ChainType_CHAIN_UNSPECIFIED
}

func (x *NFTContract) GetType() ContractType {
	if x != nil {
		return x.Type
	}
	return ContractType_CONTRACT_TYPE_UNSPECIFIED
}

func (x *NFTContract) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

type ListOwnersResponse_NFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts []string `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ListOwnersResponse_NFTs) Reset() {
	*x = ListOwnersResponse_NFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_nft_nft_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnersResponse_NFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnersResponse_NFTs) ProtoMessage() {}

func (x *ListOwnersResponse_NFTs) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_nft_nft_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnersResponse_NFTs.ProtoReflect.Descriptor instead.
func (*ListOwnersResponse_NFTs) Descriptor() ([]byte, []int) {
	return file_blast_v1_nft_nft_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListOwnersResponse_NFTs) GetNfts() []string {
	if x != nil {
		return x.Nfts
	}
	return nil
}

var File_blast_v1_nft_nft_proto protoreflect.FileDescriptor

var file_blast_v1_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x6e,
	0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79,
	0x6e, 0x63, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x04,
	0x6e, 0x66, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x22,
	0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x4e, 0x46, 0x54, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x22, 0x7e, 0x0a, 0x18, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x29,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x19, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1e, 0x0a,
	0x1c, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x52, 0x04, 0x6e,
	0x66, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x04, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x41,
	0x1e, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x52,
	0x04, 0x6e, 0x66, 0x74, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x03, 0x6e, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46,
	0x54, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x22, 0x74, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b,
	0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xee, 0x04, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x12, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x10, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12,
	0x2e, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x16, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x01, 0x52, 0x14, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12, 0x2d, 0x0a, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x52, 0xea, 0x41, 0x4f, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x70,
	0x6f, 0x73, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4e, 0x46, 0x54, 0x12, 0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x7b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x4e, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69,
	0x3a, 0x4f, 0xea, 0x41, 0x4c, 0x0a, 0x24, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f,
	0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x6e, 0x66, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x2a, 0xb9, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45,
	0x55, 0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10,
	0x89, 0x01, 0x12, 0x0e, 0x0a, 0x08, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x55, 0x4d, 0x10, 0xb1,
	0xc9, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x4d, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x85, 0x42, 0x12, 0x0b, 0x0a, 0x05, 0x42,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0xb1, 0xfc, 0x04, 0x12, 0x17, 0x0a, 0x10, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10, 0xa7, 0xed, 0xa8,
	0x05, 0x12, 0x14, 0x0a, 0x0e, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4d,
	0x42, 0x41, 0x49, 0x10, 0x81, 0xf1, 0x04, 0x12, 0x14, 0x0a, 0x0d, 0x42, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10, 0xfd, 0xe3, 0xb1, 0x50, 0x2a, 0x46, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x43, 0x31,
	0x31, 0x35, 0x35, 0x10, 0x02, 0x32, 0xdb, 0x07, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x12, 0x1b,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x22, 0x22,
	0xda, 0x41, 0x03, 0x6e, 0x66, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x66, 0x74, 0x3d, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f,
	0x2a, 0x7d, 0x12, 0x5e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x1d,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0xda,
	0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66,
	0x74, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x94,
	0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x66, 0x74, 0x3d, 0x6e, 0x66, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x3a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x7c,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x12, 0x20, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x66, 0x74, 0x3d, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a,
	0x2f, 0x2a, 0x7d, 0x3a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x3d, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x12, 0xa3, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3d, 0x6e,
	0x66, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x3a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x3b, 0x6e, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_nft_nft_proto_rawDescOnce sync.Once
	file_blast_v1_nft_nft_proto_rawDescData = file_blast_v1_nft_nft_proto_rawDesc
)

func file_blast_v1_nft_nft_proto_rawDescGZIP() []byte {
	file_blast_v1_nft_nft_proto_rawDescOnce.Do(func() {
		file_blast_v1_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_nft_nft_proto_rawDescData)
	})
	return file_blast_v1_nft_nft_proto_rawDescData
}

var file_blast_v1_nft_nft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_blast_v1_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_blast_v1_nft_nft_proto_goTypes = []interface{}{
	(ChainType)(0),                        // 0: blast.v1.nft.ChainType
	(ContractType)(0),                     // 1: blast.v1.nft.ContractType
	(*ListNFTsRequest)(nil),               // 2: blast.v1.nft.ListNFTsRequest
	(*ListNFTsResponse)(nil),              // 3: blast.v1.nft.ListNFTsResponse
	(*ListNFTsDelegateRequest)(nil),       // 4: blast.v1.nft.ListNFTsDelegateRequest
	(*ListNFTsDelegateResponse)(nil),      // 5: blast.v1.nft.ListNFTsDelegateResponse
	(*GetNFTRequest)(nil),                 // 6: blast.v1.nft.GetNFTRequest
	(*ValidateNFTAccessRequest)(nil),      // 7: blast.v1.nft.ValidateNFTAccessRequest
	(*ValidateNFTAccessResponse)(nil),     // 8: blast.v1.nft.ValidateNFTAccessResponse
	(*ListOwnersRequest)(nil),             // 9: blast.v1.nft.ListOwnersRequest
	(*ListOwnersResponse)(nil),            // 10: blast.v1.nft.ListOwnersResponse
	(*ValidateNFTRequest)(nil),            // 11: blast.v1.nft.ValidateNFTRequest
	(*ValidateNFTResponse)(nil),           // 12: blast.v1.nft.ValidateNFTResponse
	(*GetContractRequest)(nil),            // 13: blast.v1.nft.GetContractRequest
	(*CheckHolderOfContractRequest)(nil),  // 14: blast.v1.nft.CheckHolderOfContractRequest
	(*CheckHolderOfContractResponse)(nil), // 15: blast.v1.nft.CheckHolderOfContractResponse
	(*NFT)(nil),                           // 16: blast.v1.nft.NFT
	(*NFTContract)(nil),                   // 17: blast.v1.nft.NFTContract
	(*ListOwnersResponse_NFTs)(nil),       // 18: blast.v1.nft.ListOwnersResponse.NFTs
	nil,                                   // 19: blast.v1.nft.ListOwnersResponse.OwnersEntry
}
var file_blast_v1_nft_nft_proto_depIdxs = []int32{
	16, // 0: blast.v1.nft.ListNFTsResponse.nfts:type_name -> blast.v1.nft.NFT
	16, // 1: blast.v1.nft.ListNFTsDelegateResponse.nfts:type_name -> blast.v1.nft.NFT
	16, // 2: blast.v1.nft.ValidateNFTAccessResponse.nft:type_name -> blast.v1.nft.NFT
	19, // 3: blast.v1.nft.ListOwnersResponse.owners:type_name -> blast.v1.nft.ListOwnersResponse.OwnersEntry
	17, // 4: blast.v1.nft.NFT.contract:type_name -> blast.v1.nft.NFTContract
	0,  // 5: blast.v1.nft.NFTContract.chain:type_name -> blast.v1.nft.ChainType
	1,  // 6: blast.v1.nft.NFTContract.type:type_name -> blast.v1.nft.ContractType
	18, // 7: blast.v1.nft.ListOwnersResponse.OwnersEntry.value:type_name -> blast.v1.nft.ListOwnersResponse.NFTs
	6,  // 8: blast.v1.nft.NFTService.GetNFT:input_type -> blast.v1.nft.GetNFTRequest
	2,  // 9: blast.v1.nft.NFTService.ListNFTs:input_type -> blast.v1.nft.ListNFTsRequest
	9,  // 10: blast.v1.nft.NFTService.ListOwners:input_type -> blast.v1.nft.ListOwnersRequest
	7,  // 11: blast.v1.nft.NFTService.ValidateNFTAccess:input_type -> blast.v1.nft.ValidateNFTAccessRequest
	4,  // 12: blast.v1.nft.NFTService.ListNFTsDelegate:input_type -> blast.v1.nft.ListNFTsDelegateRequest
	11, // 13: blast.v1.nft.NFTService.ValidateNFT:input_type -> blast.v1.nft.ValidateNFTRequest
	13, // 14: blast.v1.nft.NFTService.GetContract:input_type -> blast.v1.nft.GetContractRequest
	14, // 15: blast.v1.nft.NFTService.CheckHolderOfContract:input_type -> blast.v1.nft.CheckHolderOfContractRequest
	16, // 16: blast.v1.nft.NFTService.GetNFT:output_type -> blast.v1.nft.NFT
	3,  // 17: blast.v1.nft.NFTService.ListNFTs:output_type -> blast.v1.nft.ListNFTsResponse
	10, // 18: blast.v1.nft.NFTService.ListOwners:output_type -> blast.v1.nft.ListOwnersResponse
	8,  // 19: blast.v1.nft.NFTService.ValidateNFTAccess:output_type -> blast.v1.nft.ValidateNFTAccessResponse
	3,  // 20: blast.v1.nft.NFTService.ListNFTsDelegate:output_type -> blast.v1.nft.ListNFTsResponse
	12, // 21: blast.v1.nft.NFTService.ValidateNFT:output_type -> blast.v1.nft.ValidateNFTResponse
	17, // 22: blast.v1.nft.NFTService.GetContract:output_type -> blast.v1.nft.NFTContract
	15, // 23: blast.v1.nft.NFTService.CheckHolderOfContract:output_type -> blast.v1.nft.CheckHolderOfContractResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_blast_v1_nft_nft_proto_init() }
func file_blast_v1_nft_nft_proto_init() {
	if File_blast_v1_nft_nft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsDelegateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsDelegateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNFTAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNFTAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNFTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateNFTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHolderOfContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHolderOfContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_nft_nft_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnersResponse_NFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blast_v1_nft_nft_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_nft_nft_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_nft_nft_proto_goTypes,
		DependencyIndexes: file_blast_v1_nft_nft_proto_depIdxs,
		EnumInfos:         file_blast_v1_nft_nft_proto_enumTypes,
		MessageInfos:      file_blast_v1_nft_nft_proto_msgTypes,
	}.Build()
	File_blast_v1_nft_nft_proto = out.File
	file_blast_v1_nft_nft_proto_rawDesc = nil
	file_blast_v1_nft_nft_proto_goTypes = nil
	file_blast_v1_nft_nft_proto_depIdxs = nil
}
