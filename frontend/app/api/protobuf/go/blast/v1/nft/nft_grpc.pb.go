// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/nft/nft.proto

package nft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NFTServiceClient is the client API for NFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFTServiceClient interface {
	// GetNFT will return NFT.
	GetNFT(ctx context.Context, in *GetNFTRequest, opts ...grpc.CallOption) (*NFT, error)
	// ListNFTs will return NFTs.
	ListNFTs(ctx context.Context, in *ListNFTsRequest, opts ...grpc.CallOption) (*ListNFTsResponse, error)
	// ListOwners will return the owner of the NFT.
	ListOwners(ctx context.Context, in *ListOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error)
	// ValidateNFTAccessRequest will validate user address access to the NFT.
	ValidateNFTAccess(ctx context.Context, in *ValidateNFTAccessRequest, opts ...grpc.CallOption) (*ValidateNFTAccessResponse, error)
	// ListNFTsDelegate will return NFTs using Delegate Cash.
	ListNFTsDelegate(ctx context.Context, in *ListNFTsDelegateRequest, opts ...grpc.CallOption) (*ListNFTsResponse, error)
	// ValidateNFT will validate given NFT is valid and image is available.
	ValidateNFT(ctx context.Context, in *ValidateNFTRequest, opts ...grpc.CallOption) (*ValidateNFTResponse, error)
	// GetContract will return NFTContract.
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*NFTContract, error)
	// CheckHolderOfContract will check if the wallet address is the holder of the contract.
	CheckHolderOfContract(ctx context.Context, in *CheckHolderOfContractRequest, opts ...grpc.CallOption) (*CheckHolderOfContractResponse, error)
}

type nFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFTServiceClient(cc grpc.ClientConnInterface) NFTServiceClient {
	return &nFTServiceClient{cc}
}

func (c *nFTServiceClient) GetNFT(ctx context.Context, in *GetNFTRequest, opts ...grpc.CallOption) (*NFT, error) {
	out := new(NFT)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/GetNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ListNFTs(ctx context.Context, in *ListNFTsRequest, opts ...grpc.CallOption) (*ListNFTsResponse, error) {
	out := new(ListNFTsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/ListNFTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ListOwners(ctx context.Context, in *ListOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error) {
	out := new(ListOwnersResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/ListOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ValidateNFTAccess(ctx context.Context, in *ValidateNFTAccessRequest, opts ...grpc.CallOption) (*ValidateNFTAccessResponse, error) {
	out := new(ValidateNFTAccessResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/ValidateNFTAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ListNFTsDelegate(ctx context.Context, in *ListNFTsDelegateRequest, opts ...grpc.CallOption) (*ListNFTsResponse, error) {
	out := new(ListNFTsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/ListNFTsDelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ValidateNFT(ctx context.Context, in *ValidateNFTRequest, opts ...grpc.CallOption) (*ValidateNFTResponse, error) {
	out := new(ValidateNFTResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/ValidateNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*NFTContract, error) {
	out := new(NFTContract)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CheckHolderOfContract(ctx context.Context, in *CheckHolderOfContractRequest, opts ...grpc.CallOption) (*CheckHolderOfContractResponse, error) {
	out := new(CheckHolderOfContractResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.nft.NFTService/CheckHolderOfContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFTServiceServer is the server API for NFTService service.
// All implementations must embed UnimplementedNFTServiceServer
// for forward compatibility
type NFTServiceServer interface {
	// GetNFT will return NFT.
	GetNFT(context.Context, *GetNFTRequest) (*NFT, error)
	// ListNFTs will return NFTs.
	ListNFTs(context.Context, *ListNFTsRequest) (*ListNFTsResponse, error)
	// ListOwners will return the owner of the NFT.
	ListOwners(context.Context, *ListOwnersRequest) (*ListOwnersResponse, error)
	// ValidateNFTAccessRequest will validate user address access to the NFT.
	ValidateNFTAccess(context.Context, *ValidateNFTAccessRequest) (*ValidateNFTAccessResponse, error)
	// ListNFTsDelegate will return NFTs using Delegate Cash.
	ListNFTsDelegate(context.Context, *ListNFTsDelegateRequest) (*ListNFTsResponse, error)
	// ValidateNFT will validate given NFT is valid and image is available.
	ValidateNFT(context.Context, *ValidateNFTRequest) (*ValidateNFTResponse, error)
	// GetContract will return NFTContract.
	GetContract(context.Context, *GetContractRequest) (*NFTContract, error)
	// CheckHolderOfContract will check if the wallet address is the holder of the contract.
	CheckHolderOfContract(context.Context, *CheckHolderOfContractRequest) (*CheckHolderOfContractResponse, error)
	mustEmbedUnimplementedNFTServiceServer()
}

// UnimplementedNFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNFTServiceServer struct {
}

func (UnimplementedNFTServiceServer) GetNFT(context.Context, *GetNFTRequest) (*NFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNFT not implemented")
}
func (UnimplementedNFTServiceServer) ListNFTs(context.Context, *ListNFTsRequest) (*ListNFTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNFTs not implemented")
}
func (UnimplementedNFTServiceServer) ListOwners(context.Context, *ListOwnersRequest) (*ListOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwners not implemented")
}
func (UnimplementedNFTServiceServer) ValidateNFTAccess(context.Context, *ValidateNFTAccessRequest) (*ValidateNFTAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNFTAccess not implemented")
}
func (UnimplementedNFTServiceServer) ListNFTsDelegate(context.Context, *ListNFTsDelegateRequest) (*ListNFTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNFTsDelegate not implemented")
}
func (UnimplementedNFTServiceServer) ValidateNFT(context.Context, *ValidateNFTRequest) (*ValidateNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNFT not implemented")
}
func (UnimplementedNFTServiceServer) GetContract(context.Context, *GetContractRequest) (*NFTContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedNFTServiceServer) CheckHolderOfContract(context.Context, *CheckHolderOfContractRequest) (*CheckHolderOfContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHolderOfContract not implemented")
}
func (UnimplementedNFTServiceServer) mustEmbedUnimplementedNFTServiceServer() {}

// UnsafeNFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFTServiceServer will
// result in compilation errors.
type UnsafeNFTServiceServer interface {
	mustEmbedUnimplementedNFTServiceServer()
}

func RegisterNFTServiceServer(s grpc.ServiceRegistrar, srv NFTServiceServer) {
	s.RegisterService(&NFTService_ServiceDesc, srv)
}

func _NFTService_GetNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).GetNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/GetNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).GetNFT(ctx, req.(*GetNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ListNFTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNFTsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ListNFTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/ListNFTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ListNFTs(ctx, req.(*ListNFTsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ListOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ListOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/ListOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ListOwners(ctx, req.(*ListOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ValidateNFTAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNFTAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ValidateNFTAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/ValidateNFTAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ValidateNFTAccess(ctx, req.(*ValidateNFTAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ListNFTsDelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNFTsDelegateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ListNFTsDelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/ListNFTsDelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ListNFTsDelegate(ctx, req.(*ListNFTsDelegateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ValidateNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ValidateNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/ValidateNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ValidateNFT(ctx, req.(*ValidateNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CheckHolderOfContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHolderOfContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CheckHolderOfContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.nft.NFTService/CheckHolderOfContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CheckHolderOfContract(ctx, req.(*CheckHolderOfContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NFTService_ServiceDesc is the grpc.ServiceDesc for NFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.nft.NFTService",
	HandlerType: (*NFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNFT",
			Handler:    _NFTService_GetNFT_Handler,
		},
		{
			MethodName: "ListNFTs",
			Handler:    _NFTService_ListNFTs_Handler,
		},
		{
			MethodName: "ListOwners",
			Handler:    _NFTService_ListOwners_Handler,
		},
		{
			MethodName: "ValidateNFTAccess",
			Handler:    _NFTService_ValidateNFTAccess_Handler,
		},
		{
			MethodName: "ListNFTsDelegate",
			Handler:    _NFTService_ListNFTsDelegate_Handler,
		},
		{
			MethodName: "ValidateNFT",
			Handler:    _NFTService_ValidateNFT_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _NFTService_GetContract_Handler,
		},
		{
			MethodName: "CheckHolderOfContract",
			Handler:    _NFTService_CheckHolderOfContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/nft/nft.proto",
}
