// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/points/points.proto

package points

import (
	_ "github.com/ao-labs/spacebar-apis/go/blast/v1/nft"
	user "github.com/ao-labs/spacebar-apis/go/blast/v1/user"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PointsType 을 유저의 행동군에 따라 2차 그룹핑함.
type PointsTypeBehaviorGroup int32

const (
	// default value. this value is unused.
	PointsTypeBehaviorGroup_GROUP_UNSPECIFIED PointsTypeBehaviorGroup = 0
	PointsTypeBehaviorGroup_REFERRAL          PointsTypeBehaviorGroup = 1
	PointsTypeBehaviorGroup_STAKING           PointsTypeBehaviorGroup = 2
	PointsTypeBehaviorGroup_ACTIVITY          PointsTypeBehaviorGroup = 3
	PointsTypeBehaviorGroup_BONUS             PointsTypeBehaviorGroup = 4
)

// Enum value maps for PointsTypeBehaviorGroup.
var (
	PointsTypeBehaviorGroup_name = map[int32]string{
		0: "GROUP_UNSPECIFIED",
		1: "REFERRAL",
		2: "STAKING",
		3: "ACTIVITY",
		4: "BONUS",
	}
	PointsTypeBehaviorGroup_value = map[string]int32{
		"GROUP_UNSPECIFIED": 0,
		"REFERRAL":          1,
		"STAKING":           2,
		"ACTIVITY":          3,
		"BONUS":             4,
	}
)

func (x PointsTypeBehaviorGroup) Enum() *PointsTypeBehaviorGroup {
	p := new(PointsTypeBehaviorGroup)
	*p = x
	return p
}

func (x PointsTypeBehaviorGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointsTypeBehaviorGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_points_points_proto_enumTypes[0].Descriptor()
}

func (PointsTypeBehaviorGroup) Type() protoreflect.EnumType {
	return &file_blast_v1_points_points_proto_enumTypes[0]
}

func (x PointsTypeBehaviorGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointsTypeBehaviorGroup.Descriptor instead.
func (PointsTypeBehaviorGroup) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{0}
}

type PointsType int32

const (
	// default value. this value is unused.
	PointsType_TYPE_UNKNOWN                      PointsType = 0
	PointsType_WELCOME                           PointsType = 1
	PointsType_REFERRAL_REFFERED_BY              PointsType = 100
	PointsType_REFERRAL_REFERRER_BONUS           PointsType = 101
	PointsType_STAKING_INTEREST                  PointsType = 200
	PointsType_ACTIVITY_DAILY_CHECKIN            PointsType = 300
	PointsType_ACTIVITY_COMMUNITY_EVENT_WINNER   PointsType = 301
	PointsType_ACTIVITY_COMMUNITY_CONTRIBUTION   PointsType = 302
	PointsType_ACTIVITY_GM                       PointsType = 303
	PointsType_ACTIVITY_SQUARE_BEBOB_SUMMON      PointsType = 304
	PointsType_ACTIVITY_SQUARE_BEBOB_ATTACK      PointsType = 305
	PointsType_ACTIVITY_SCORE_UPLOAD             PointsType = 306
	PointsType_ACTIVITY_SCORE_LEADERBOARD_WINNER PointsType = 307
	PointsType_ACTIVITY_SCORE_LEADERBOARD_RAFFLE PointsType = 308
	PointsType_BONUS_SQUARE_OWNER                PointsType = 400
	PointsType_BONUS_SQUARE_MEMBER               PointsType = 401
)

// Enum value maps for PointsType.
var (
	PointsType_name = map[int32]string{
		0:   "TYPE_UNKNOWN",
		1:   "WELCOME",
		100: "REFERRAL_REFFERED_BY",
		101: "REFERRAL_REFERRER_BONUS",
		200: "STAKING_INTEREST",
		300: "ACTIVITY_DAILY_CHECKIN",
		301: "ACTIVITY_COMMUNITY_EVENT_WINNER",
		302: "ACTIVITY_COMMUNITY_CONTRIBUTION",
		303: "ACTIVITY_GM",
		304: "ACTIVITY_SQUARE_BEBOB_SUMMON",
		305: "ACTIVITY_SQUARE_BEBOB_ATTACK",
		306: "ACTIVITY_SCORE_UPLOAD",
		307: "ACTIVITY_SCORE_LEADERBOARD_WINNER",
		308: "ACTIVITY_SCORE_LEADERBOARD_RAFFLE",
		400: "BONUS_SQUARE_OWNER",
		401: "BONUS_SQUARE_MEMBER",
	}
	PointsType_value = map[string]int32{
		"TYPE_UNKNOWN":                      0,
		"WELCOME":                           1,
		"REFERRAL_REFFERED_BY":              100,
		"REFERRAL_REFERRER_BONUS":           101,
		"STAKING_INTEREST":                  200,
		"ACTIVITY_DAILY_CHECKIN":            300,
		"ACTIVITY_COMMUNITY_EVENT_WINNER":   301,
		"ACTIVITY_COMMUNITY_CONTRIBUTION":   302,
		"ACTIVITY_GM":                       303,
		"ACTIVITY_SQUARE_BEBOB_SUMMON":      304,
		"ACTIVITY_SQUARE_BEBOB_ATTACK":      305,
		"ACTIVITY_SCORE_UPLOAD":             306,
		"ACTIVITY_SCORE_LEADERBOARD_WINNER": 307,
		"ACTIVITY_SCORE_LEADERBOARD_RAFFLE": 308,
		"BONUS_SQUARE_OWNER":                400,
		"BONUS_SQUARE_MEMBER":               401,
	}
)

func (x PointsType) Enum() *PointsType {
	p := new(PointsType)
	*p = x
	return p
}

func (x PointsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointsType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_points_points_proto_enumTypes[1].Descriptor()
}

func (PointsType) Type() protoreflect.EnumType {
	return &file_blast_v1_points_points_proto_enumTypes[1]
}

func (x PointsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointsType.Descriptor instead.
func (PointsType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{1}
}

type MultiplierType int32

const (
	// default value. this value is unused.
	MultiplierType_MULTIPLIER_TYPE_UNSPECIFIED MultiplierType = 0
	MultiplierType_SQUARE_OWNER_BONUS          MultiplierType = 1
	MultiplierType_SQUARE_MULTIPLIER           MultiplierType = 2
	MultiplierType_SQUARE_PFP_COLLECTION_BOOST MultiplierType = 3
)

// Enum value maps for MultiplierType.
var (
	MultiplierType_name = map[int32]string{
		0: "MULTIPLIER_TYPE_UNSPECIFIED",
		1: "SQUARE_OWNER_BONUS",
		2: "SQUARE_MULTIPLIER",
		3: "SQUARE_PFP_COLLECTION_BOOST",
	}
	MultiplierType_value = map[string]int32{
		"MULTIPLIER_TYPE_UNSPECIFIED": 0,
		"SQUARE_OWNER_BONUS":          1,
		"SQUARE_MULTIPLIER":           2,
		"SQUARE_PFP_COLLECTION_BOOST": 3,
	}
)

func (x MultiplierType) Enum() *MultiplierType {
	p := new(MultiplierType)
	*p = x
	return p
}

func (x MultiplierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiplierType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_points_points_proto_enumTypes[2].Descriptor()
}

func (MultiplierType) Type() protoreflect.EnumType {
	return &file_blast_v1_points_points_proto_enumTypes[2]
}

func (x MultiplierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiplierType.Descriptor instead.
func (MultiplierType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{2}
}

type GetPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the points to retrieve.
	// Format: users/{address}/points
	Points string `protobuf:"bytes,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *GetPointsRequest) Reset() {
	*x = GetPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointsRequest) ProtoMessage() {}

func (x *GetPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointsRequest.ProtoReflect.Descriptor instead.
func (*GetPointsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{0}
}

func (x *GetPointsRequest) GetPoints() string {
	if x != nil {
		return x.Points
	}
	return ""
}

type ListPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// * user_address
	//   - `=`
	//
	// Examples
	// * name="points/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "id", "user_address", "points"
	//
	// Examples
	// * order_by=points desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListPointsRequest) Reset() {
	*x = ListPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsRequest) ProtoMessage() {}

func (x *ListPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsRequest.ProtoReflect.Descriptor instead.
func (*ListPointsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{1}
}

func (x *ListPointsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPointsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPointsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListPointsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListPointsResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Points []*Points `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPointsResponse) Reset() {
	*x = ListPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsResponse) ProtoMessage() {}

func (x *ListPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsResponse.ProtoReflect.Descriptor instead.
func (*ListPointsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{2}
}

func (x *ListPointsResponse) GetPoints() []*Points {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ListPointsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type EarnStakingInterestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the points to retrieve.
	// Format: users/{address}/points
	Points string `protobuf:"bytes,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *EarnStakingInterestRequest) Reset() {
	*x = EarnStakingInterestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarnStakingInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarnStakingInterestRequest) ProtoMessage() {}

func (x *EarnStakingInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarnStakingInterestRequest.ProtoReflect.Descriptor instead.
func (*EarnStakingInterestRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{3}
}

func (x *EarnStakingInterestRequest) GetPoints() string {
	if x != nil {
		return x.Points
	}
	return ""
}

type ListPointsReferralBonusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPointsReferralBonuses` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPointsReferralBonusesRequest) Reset() {
	*x = ListPointsReferralBonusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsReferralBonusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsReferralBonusesRequest) ProtoMessage() {}

func (x *ListPointsReferralBonusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsReferralBonusesRequest.ProtoReflect.Descriptor instead.
func (*ListPointsReferralBonusesRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{4}
}

func (x *ListPointsReferralBonusesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPointsReferralBonusesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListPointsReferralBonusResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListPointsReferralBonusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	ReferralBonuses []*PointsReferralBonus `protobuf:"bytes,1,rep,name=referral_bonuses,json=referralBonuses,proto3" json:"referral_bonuses,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPointsReferralBonusesResponse) Reset() {
	*x = ListPointsReferralBonusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsReferralBonusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsReferralBonusesResponse) ProtoMessage() {}

func (x *ListPointsReferralBonusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsReferralBonusesResponse.ProtoReflect.Descriptor instead.
func (*ListPointsReferralBonusesResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{5}
}

func (x *ListPointsReferralBonusesResponse) GetReferralBonuses() []*PointsReferralBonus {
	if x != nil {
		return x.ReferralBonuses
	}
	return nil
}

func (x *ListPointsReferralBonusesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Points struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Points.
	// Format: users/{address}/points
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	TotalPoints uint32        `protobuf:"varint,3,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	Referral    *Referral     `protobuf:"bytes,5,opt,name=referral,proto3" json:"referral,omitempty"`
	Staking     *Staking      `protobuf:"bytes,6,opt,name=staking,proto3" json:"staking,omitempty"`
	Activity    *Activity     `protobuf:"bytes,7,opt,name=activity,proto3" json:"activity,omitempty"`
	Bonus       *Bonus        `protobuf:"bytes,8,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Multipliers []*Multiplier `protobuf:"bytes,9,rep,name=multipliers,proto3" json:"multipliers,omitempty"`
}

func (x *Points) Reset() {
	*x = Points{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Points) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Points) ProtoMessage() {}

func (x *Points) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Points.ProtoReflect.Descriptor instead.
func (*Points) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{6}
}

func (x *Points) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Points) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *Points) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Points) GetReferral() *Referral {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *Points) GetStaking() *Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

func (x *Points) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Points) GetBonus() *Bonus {
	if x != nil {
		return x.Bonus
	}
	return nil
}

func (x *Points) GetMultipliers() []*Multiplier {
	if x != nil {
		return x.Multipliers
	}
	return nil
}

type Referral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferredByPoints uint32 `protobuf:"varint,1,opt,name=referred_by_points,json=referredByPoints,proto3" json:"referred_by_points,omitempty"`
	ReferredPoints   uint32 `protobuf:"varint,2,opt,name=referred_points,json=referredPoints,proto3" json:"referred_points,omitempty"`
	Points           uint32 `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *Referral) Reset() {
	*x = Referral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referral) ProtoMessage() {}

func (x *Referral) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referral.ProtoReflect.Descriptor instead.
func (*Referral) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{7}
}

func (x *Referral) GetReferredByPoints() uint32 {
	if x != nil {
		return x.ReferredByPoints
	}
	return 0
}

func (x *Referral) GetReferredPoints() uint32 {
	if x != nil {
		return x.ReferredPoints
	}
	return 0
}

func (x *Referral) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points uint32 `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *Staking) Reset() {
	*x = Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{8}
}

func (x *Staking) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points       uint32 `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	DailyCheckin uint32 `protobuf:"varint,2,opt,name=daily_checkin,json=dailyCheckin,proto3" json:"daily_checkin,omitempty"`
	Gm           uint32 `protobuf:"varint,3,opt,name=gm,proto3" json:"gm,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{9}
}

func (x *Activity) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Activity) GetDailyCheckin() uint32 {
	if x != nil {
		return x.DailyCheckin
	}
	return 0
}

func (x *Activity) GetGm() uint32 {
	if x != nil {
		return x.Gm
	}
	return 0
}

type Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner bonus
	SquareOwner uint32 `protobuf:"varint,1,opt,name=square_owner,json=squareOwner,proto3" json:"square_owner,omitempty"`
}

func (x *Bonus) Reset() {
	*x = Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus) ProtoMessage() {}

func (x *Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus.ProtoReflect.Descriptor instead.
func (*Bonus) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{10}
}

func (x *Bonus) GetSquareOwner() uint32 {
	if x != nil {
		return x.SquareOwner
	}
	return 0
}

type Multiplier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       MultiplierType `protobuf:"varint,1,opt,name=type,proto3,enum=blast.v1.points.MultiplierType" json:"type,omitempty"`
	Percentage float32        `protobuf:"fixed32,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *Multiplier) Reset() {
	*x = Multiplier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multiplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiplier) ProtoMessage() {}

func (x *Multiplier) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiplier.ProtoReflect.Descriptor instead.
func (*Multiplier) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{11}
}

func (x *Multiplier) GetType() MultiplierType {
	if x != nil {
		return x.Type
	}
	return MultiplierType_MULTIPLIER_TYPE_UNSPECIFIED
}

func (x *Multiplier) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type PointsHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAddress             string                  `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	Amount                  float32                 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PointsType              PointsType              `protobuf:"varint,3,opt,name=points_type,json=pointsType,proto3,enum=blast.v1.points.PointsType" json:"points_type,omitempty"`
	PointsTypeBehaviorGroup PointsTypeBehaviorGroup `protobuf:"varint,4,opt,name=points_type_behavior_group,json=pointsTypeBehaviorGroup,proto3,enum=blast.v1.points.PointsTypeBehaviorGroup" json:"points_type_behavior_group,omitempty"`
}

func (x *PointsHistory) Reset() {
	*x = PointsHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsHistory) ProtoMessage() {}

func (x *PointsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsHistory.ProtoReflect.Descriptor instead.
func (*PointsHistory) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{12}
}

func (x *PointsHistory) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *PointsHistory) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PointsHistory) GetPointsType() PointsType {
	if x != nil {
		return x.PointsType
	}
	return PointsType_TYPE_UNKNOWN
}

func (x *PointsHistory) GetPointsTypeBehaviorGroup() PointsTypeBehaviorGroup {
	if x != nil {
		return x.PointsTypeBehaviorGroup
	}
	return PointsTypeBehaviorGroup_GROUP_UNSPECIFIED
}

type PointsReferralBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Referred       *user.User `protobuf:"bytes,1,opt,name=referred,proto3" json:"referred,omitempty"`
	SameCollection bool       `protobuf:"varint,2,opt,name=same_collection,json=sameCollection,proto3" json:"same_collection,omitempty"`
	Amount         uint32     `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PointsReferralBonus) Reset() {
	*x = PointsReferralBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_points_points_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsReferralBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsReferralBonus) ProtoMessage() {}

func (x *PointsReferralBonus) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_points_points_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsReferralBonus.ProtoReflect.Descriptor instead.
func (*PointsReferralBonus) Descriptor() ([]byte, []int) {
	return file_blast_v1_points_points_proto_rawDescGZIP(), []int{13}
}

func (x *PointsReferralBonus) GetReferred() *user.User {
	if x != nil {
		return x.Referred
	}
	return nil
}

func (x *PointsReferralBonus) GetSameCollection() bool {
	if x != nil {
		return x.SameCollection
	}
	return false
}

func (x *PointsReferralBonus) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_blast_v1_points_points_proto protoreflect.FileDescriptor

var file_blast_v1_points_points_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74,
	0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41,
	0x21, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x6d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5e,
	0x0a, 0x1a, 0x45, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5e,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9c,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd9, 0x03,
	0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x3a, 0x3c, 0xea, 0x41, 0x39,
	0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x7d, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x08, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x67, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x6d,
	0x22, 0x2a, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0a,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xef, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x17, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2a, 0x64, 0x0a, 0x17, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x04, 0x2a, 0xd9, 0x03, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x4c, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x64, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54,
	0x10, 0xc8, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x10, 0xac, 0x02,
	0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x10, 0xad, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xae, 0x02, 0x12, 0x10, 0x0a, 0x0b,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x4d, 0x10, 0xaf, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52,
	0x45, 0x5f, 0x42, 0x45, 0x42, 0x4f, 0x42, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0xb0,
	0x02, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x51,
	0x55, 0x41, 0x52, 0x45, 0x5f, 0x42, 0x45, 0x42, 0x4f, 0x42, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0xb1, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xb2, 0x02,
	0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0xb3, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45, 0x10, 0xb4, 0x02,
	0x12, 0x17, 0x0a, 0x12, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45,
	0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x91, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x51, 0x55, 0x41, 0x52,
	0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45,
	0x5f, 0x50, 0x46, 0x50, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x32, 0x96, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x2c, 0xda, 0x41, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x7d,
	0x12, 0x74, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2d, 0x2f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x45, 0x61, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3d, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x7d, 0x3a, 0x65, 0x61, 0x72,
	0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_points_points_proto_rawDescOnce sync.Once
	file_blast_v1_points_points_proto_rawDescData = file_blast_v1_points_points_proto_rawDesc
)

func file_blast_v1_points_points_proto_rawDescGZIP() []byte {
	file_blast_v1_points_points_proto_rawDescOnce.Do(func() {
		file_blast_v1_points_points_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_points_points_proto_rawDescData)
	})
	return file_blast_v1_points_points_proto_rawDescData
}

var file_blast_v1_points_points_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_blast_v1_points_points_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_blast_v1_points_points_proto_goTypes = []interface{}{
	(PointsTypeBehaviorGroup)(0),              // 0: blast.v1.points.PointsTypeBehaviorGroup
	(PointsType)(0),                           // 1: blast.v1.points.PointsType
	(MultiplierType)(0),                       // 2: blast.v1.points.MultiplierType
	(*GetPointsRequest)(nil),                  // 3: blast.v1.points.GetPointsRequest
	(*ListPointsRequest)(nil),                 // 4: blast.v1.points.ListPointsRequest
	(*ListPointsResponse)(nil),                // 5: blast.v1.points.ListPointsResponse
	(*EarnStakingInterestRequest)(nil),        // 6: blast.v1.points.EarnStakingInterestRequest
	(*ListPointsReferralBonusesRequest)(nil),  // 7: blast.v1.points.ListPointsReferralBonusesRequest
	(*ListPointsReferralBonusesResponse)(nil), // 8: blast.v1.points.ListPointsReferralBonusesResponse
	(*Points)(nil),                            // 9: blast.v1.points.Points
	(*Referral)(nil),                          // 10: blast.v1.points.Referral
	(*Staking)(nil),                           // 11: blast.v1.points.Staking
	(*Activity)(nil),                          // 12: blast.v1.points.Activity
	(*Bonus)(nil),                             // 13: blast.v1.points.Bonus
	(*Multiplier)(nil),                        // 14: blast.v1.points.Multiplier
	(*PointsHistory)(nil),                     // 15: blast.v1.points.PointsHistory
	(*PointsReferralBonus)(nil),               // 16: blast.v1.points.PointsReferralBonus
	(*user.User)(nil),                         // 17: blast.v1.user.User
}
var file_blast_v1_points_points_proto_depIdxs = []int32{
	9,  // 0: blast.v1.points.ListPointsResponse.points:type_name -> blast.v1.points.Points
	16, // 1: blast.v1.points.ListPointsReferralBonusesResponse.referral_bonuses:type_name -> blast.v1.points.PointsReferralBonus
	10, // 2: blast.v1.points.Points.referral:type_name -> blast.v1.points.Referral
	11, // 3: blast.v1.points.Points.staking:type_name -> blast.v1.points.Staking
	12, // 4: blast.v1.points.Points.activity:type_name -> blast.v1.points.Activity
	13, // 5: blast.v1.points.Points.bonus:type_name -> blast.v1.points.Bonus
	14, // 6: blast.v1.points.Points.multipliers:type_name -> blast.v1.points.Multiplier
	2,  // 7: blast.v1.points.Multiplier.type:type_name -> blast.v1.points.MultiplierType
	1,  // 8: blast.v1.points.PointsHistory.points_type:type_name -> blast.v1.points.PointsType
	0,  // 9: blast.v1.points.PointsHistory.points_type_behavior_group:type_name -> blast.v1.points.PointsTypeBehaviorGroup
	17, // 10: blast.v1.points.PointsReferralBonus.referred:type_name -> blast.v1.user.User
	3,  // 11: blast.v1.points.PointsService.GetPoints:input_type -> blast.v1.points.GetPointsRequest
	4,  // 12: blast.v1.points.PointsService.ListPoints:input_type -> blast.v1.points.ListPointsRequest
	6,  // 13: blast.v1.points.PointsService.EarnStakingInterest:input_type -> blast.v1.points.EarnStakingInterestRequest
	9,  // 14: blast.v1.points.PointsService.GetPoints:output_type -> blast.v1.points.Points
	5,  // 15: blast.v1.points.PointsService.ListPoints:output_type -> blast.v1.points.ListPointsResponse
	9,  // 16: blast.v1.points.PointsService.EarnStakingInterest:output_type -> blast.v1.points.Points
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_blast_v1_points_points_proto_init() }
func file_blast_v1_points_points_proto_init() {
	if File_blast_v1_points_points_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_points_points_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarnStakingInterestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsReferralBonusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsReferralBonusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Points); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multiplier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_points_points_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsReferralBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_points_points_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_points_points_proto_goTypes,
		DependencyIndexes: file_blast_v1_points_points_proto_depIdxs,
		EnumInfos:         file_blast_v1_points_points_proto_enumTypes,
		MessageInfos:      file_blast_v1_points_points_proto_msgTypes,
	}.Build()
	File_blast_v1_points_points_proto = out.File
	file_blast_v1_points_points_proto_rawDesc = nil
	file_blast_v1_points_points_proto_goTypes = nil
	file_blast_v1_points_points_proto_depIdxs = nil
}
