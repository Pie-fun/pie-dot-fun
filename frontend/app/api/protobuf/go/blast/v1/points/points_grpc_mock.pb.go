// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/points/points.proto

package points

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPointsServiceClient is a mock of PointsServiceClient interface.
type MockPointsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPointsServiceClientMockRecorder
}

// MockPointsServiceClientMockRecorder is the mock recorder for MockPointsServiceClient.
type MockPointsServiceClientMockRecorder struct {
	mock *MockPointsServiceClient
}

// NewMockPointsServiceClient creates a new mock instance.
func NewMockPointsServiceClient(ctrl *gomock.Controller) *MockPointsServiceClient {
	mock := &MockPointsServiceClient{ctrl: ctrl}
	mock.recorder = &MockPointsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointsServiceClient) EXPECT() *MockPointsServiceClientMockRecorder {
	return m.recorder
}

// EarnStakingInterest mocks base method.
func (m *MockPointsServiceClient) EarnStakingInterest(ctx context.Context, in *EarnStakingInterestRequest, opts ...grpc.CallOption) (*Points, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EarnStakingInterest", varargs...)
	ret0, _ := ret[0].(*Points)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EarnStakingInterest indicates an expected call of EarnStakingInterest.
func (mr *MockPointsServiceClientMockRecorder) EarnStakingInterest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EarnStakingInterest", reflect.TypeOf((*MockPointsServiceClient)(nil).EarnStakingInterest), varargs...)
}

// GetPoints mocks base method.
func (m *MockPointsServiceClient) GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*Points, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPoints", varargs...)
	ret0, _ := ret[0].(*Points)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockPointsServiceClientMockRecorder) GetPoints(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockPointsServiceClient)(nil).GetPoints), varargs...)
}

// ListPoints mocks base method.
func (m *MockPointsServiceClient) ListPoints(ctx context.Context, in *ListPointsRequest, opts ...grpc.CallOption) (*ListPointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoints", varargs...)
	ret0, _ := ret[0].(*ListPointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoints indicates an expected call of ListPoints.
func (mr *MockPointsServiceClientMockRecorder) ListPoints(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoints", reflect.TypeOf((*MockPointsServiceClient)(nil).ListPoints), varargs...)
}

// MockPointsServiceServer is a mock of PointsServiceServer interface.
type MockPointsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPointsServiceServerMockRecorder
}

// MockPointsServiceServerMockRecorder is the mock recorder for MockPointsServiceServer.
type MockPointsServiceServerMockRecorder struct {
	mock *MockPointsServiceServer
}

// NewMockPointsServiceServer creates a new mock instance.
func NewMockPointsServiceServer(ctrl *gomock.Controller) *MockPointsServiceServer {
	mock := &MockPointsServiceServer{ctrl: ctrl}
	mock.recorder = &MockPointsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointsServiceServer) EXPECT() *MockPointsServiceServerMockRecorder {
	return m.recorder
}

// EarnStakingInterest mocks base method.
func (m *MockPointsServiceServer) EarnStakingInterest(ctx context.Context, in *EarnStakingInterestRequest) (*Points, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EarnStakingInterest", ctx, in)
	ret0, _ := ret[0].(*Points)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EarnStakingInterest indicates an expected call of EarnStakingInterest.
func (mr *MockPointsServiceServerMockRecorder) EarnStakingInterest(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EarnStakingInterest", reflect.TypeOf((*MockPointsServiceServer)(nil).EarnStakingInterest), ctx, in)
}

// GetPoints mocks base method.
func (m *MockPointsServiceServer) GetPoints(ctx context.Context, in *GetPointsRequest) (*Points, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoints", ctx, in)
	ret0, _ := ret[0].(*Points)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockPointsServiceServerMockRecorder) GetPoints(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockPointsServiceServer)(nil).GetPoints), ctx, in)
}

// ListPoints mocks base method.
func (m *MockPointsServiceServer) ListPoints(ctx context.Context, in *ListPointsRequest) (*ListPointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoints", ctx, in)
	ret0, _ := ret[0].(*ListPointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoints indicates an expected call of ListPoints.
func (mr *MockPointsServiceServerMockRecorder) ListPoints(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoints", reflect.TypeOf((*MockPointsServiceServer)(nil).ListPoints), ctx, in)
}
