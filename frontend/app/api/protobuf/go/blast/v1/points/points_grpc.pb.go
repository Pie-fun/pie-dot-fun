// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/points/points.proto

package points

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointsServiceClient is the client API for PointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsServiceClient interface {
	// GetPoints will return Points.
	GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*Points, error)
	// ListPoints will return Points.
	// reads across collections, reference: https://google.aip.dev/159
	ListPoints(ctx context.Context, in *ListPointsRequest, opts ...grpc.CallOption) (*ListPointsResponse, error)
	// EarnStakingInterestPoints will earn Staking Interest Points.
	// This function will be called by internal service and not open to the public.
	EarnStakingInterest(ctx context.Context, in *EarnStakingInterestRequest, opts ...grpc.CallOption) (*Points, error)
}

type pointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsServiceClient(cc grpc.ClientConnInterface) PointsServiceClient {
	return &pointsServiceClient{cc}
}

func (c *pointsServiceClient) GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*Points, error) {
	out := new(Points)
	err := c.cc.Invoke(ctx, "/blast.v1.points.PointsService/GetPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) ListPoints(ctx context.Context, in *ListPointsRequest, opts ...grpc.CallOption) (*ListPointsResponse, error) {
	out := new(ListPointsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.points.PointsService/ListPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) EarnStakingInterest(ctx context.Context, in *EarnStakingInterestRequest, opts ...grpc.CallOption) (*Points, error) {
	out := new(Points)
	err := c.cc.Invoke(ctx, "/blast.v1.points.PointsService/EarnStakingInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsServiceServer is the server API for PointsService service.
// All implementations must embed UnimplementedPointsServiceServer
// for forward compatibility
type PointsServiceServer interface {
	// GetPoints will return Points.
	GetPoints(context.Context, *GetPointsRequest) (*Points, error)
	// ListPoints will return Points.
	// reads across collections, reference: https://google.aip.dev/159
	ListPoints(context.Context, *ListPointsRequest) (*ListPointsResponse, error)
	// EarnStakingInterestPoints will earn Staking Interest Points.
	// This function will be called by internal service and not open to the public.
	EarnStakingInterest(context.Context, *EarnStakingInterestRequest) (*Points, error)
	mustEmbedUnimplementedPointsServiceServer()
}

// UnimplementedPointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPointsServiceServer struct {
}

func (UnimplementedPointsServiceServer) GetPoints(context.Context, *GetPointsRequest) (*Points, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (UnimplementedPointsServiceServer) ListPoints(context.Context, *ListPointsRequest) (*ListPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoints not implemented")
}
func (UnimplementedPointsServiceServer) EarnStakingInterest(context.Context, *EarnStakingInterestRequest) (*Points, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnStakingInterest not implemented")
}
func (UnimplementedPointsServiceServer) mustEmbedUnimplementedPointsServiceServer() {}

// UnsafePointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsServiceServer will
// result in compilation errors.
type UnsafePointsServiceServer interface {
	mustEmbedUnimplementedPointsServiceServer()
}

func RegisterPointsServiceServer(s grpc.ServiceRegistrar, srv PointsServiceServer) {
	s.RegisterService(&PointsService_ServiceDesc, srv)
}

func _PointsService_GetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).GetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.points.PointsService/GetPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).GetPoints(ctx, req.(*GetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_ListPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).ListPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.points.PointsService/ListPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).ListPoints(ctx, req.(*ListPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_EarnStakingInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnStakingInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).EarnStakingInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.points.PointsService/EarnStakingInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).EarnStakingInterest(ctx, req.(*EarnStakingInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointsService_ServiceDesc is the grpc.ServiceDesc for PointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.points.PointsService",
	HandlerType: (*PointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoints",
			Handler:    _PointsService_GetPoints_Handler,
		},
		{
			MethodName: "ListPoints",
			Handler:    _PointsService_ListPoints_Handler,
		},
		{
			MethodName: "EarnStakingInterest",
			Handler:    _PointsService_EarnStakingInterest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/points/points.proto",
}
