// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/aggregate/aggregate.proto

package aggregate

import (
	points "github.com/ao-labs/spacebar-apis/go/blast/v1/points"
	square "github.com/ao-labs/spacebar-apis/go/blast/v1/square"
	user "github.com/ao-labs/spacebar-apis/go/blast/v1/user"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListPointsAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// * user_address
	//   - `=`
	//
	// Examples
	// * name="points/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "id", "user_address", "points"
	//
	// Examples
	// * order_by=points desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListPointsAggregateRequest) Reset() {
	*x = ListPointsAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsAggregateRequest) ProtoMessage() {}

func (x *ListPointsAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsAggregateRequest.ProtoReflect.Descriptor instead.
func (*ListPointsAggregateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{0}
}

func (x *ListPointsAggregateRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPointsAggregateRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPointsAggregateRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListPointsAggregateRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListPointsResponse
type ListPointsAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	PointsAggregate []*PointsAggregate `protobuf:"bytes,1,rep,name=points_aggregate,json=pointsAggregate,proto3" json:"points_aggregate,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPointsAggregateResponse) Reset() {
	*x = ListPointsAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointsAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointsAggregateResponse) ProtoMessage() {}

func (x *ListPointsAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointsAggregateResponse.ProtoReflect.Descriptor instead.
func (*ListPointsAggregateResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{1}
}

func (x *ListPointsAggregateResponse) GetPointsAggregate() []*PointsAggregate {
	if x != nil {
		return x.PointsAggregate
	}
	return nil
}

func (x *ListPointsAggregateResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type PointsAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Points.
	// Format: users/{address}/points
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User *user.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	TotalPoints uint32               `protobuf:"varint,3,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	Referral    *points.Referral     `protobuf:"bytes,5,opt,name=referral,proto3" json:"referral,omitempty"`
	Staking     *points.Staking      `protobuf:"bytes,6,opt,name=staking,proto3" json:"staking,omitempty"`
	Activity    *points.Activity     `protobuf:"bytes,7,opt,name=activity,proto3" json:"activity,omitempty"`
	Bonus       *points.Bonus        `protobuf:"bytes,8,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Multipliers []*points.Multiplier `protobuf:"bytes,9,rep,name=multipliers,proto3" json:"multipliers,omitempty"`
}

func (x *PointsAggregate) Reset() {
	*x = PointsAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsAggregate) ProtoMessage() {}

func (x *PointsAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsAggregate.ProtoReflect.Descriptor instead.
func (*PointsAggregate) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{2}
}

func (x *PointsAggregate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PointsAggregate) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PointsAggregate) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *PointsAggregate) GetReferral() *points.Referral {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *PointsAggregate) GetStaking() *points.Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

func (x *PointsAggregate) GetActivity() *points.Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *PointsAggregate) GetBonus() *points.Bonus {
	if x != nil {
		return x.Bonus
	}
	return nil
}

func (x *PointsAggregate) GetMultipliers() []*points.Multiplier {
	if x != nil {
		return x.Multipliers
	}
	return nil
}

type ListSquareMemberRankingsAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square   string                      `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	RankType square.SquareMemberRankType `protobuf:"varint,2,opt,name=rank_type,json=rankType,proto3,enum=blast.v1.square.SquareMemberRankType" json:"rank_type,omitempty"`
	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSquareMemberRankingsAggregateRequest) Reset() {
	*x = ListSquareMemberRankingsAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMemberRankingsAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMemberRankingsAggregateRequest) ProtoMessage() {}

func (x *ListSquareMemberRankingsAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMemberRankingsAggregateRequest.ProtoReflect.Descriptor instead.
func (*ListSquareMemberRankingsAggregateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{3}
}

func (x *ListSquareMemberRankingsAggregateRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *ListSquareMemberRankingsAggregateRequest) GetRankType() square.SquareMemberRankType {
	if x != nil {
		return x.RankType
	}
	return square.SquareMemberRankType(0)
}

func (x *ListSquareMemberRankingsAggregateRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquareMemberRankingsAggregateRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSquareMemberRankingsAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	RankingsAggregate []*SquareMemberRankingAggregate `protobuf:"bytes,1,rep,name=rankings_aggregate,json=rankingsAggregate,proto3" json:"rankings_aggregate,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquareMemberRankingsAggregateResponse) Reset() {
	*x = ListSquareMemberRankingsAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareMemberRankingsAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareMemberRankingsAggregateResponse) ProtoMessage() {}

func (x *ListSquareMemberRankingsAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareMemberRankingsAggregateResponse.ProtoReflect.Descriptor instead.
func (*ListSquareMemberRankingsAggregateResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{4}
}

func (x *ListSquareMemberRankingsAggregateResponse) GetRankingsAggregate() []*SquareMemberRankingAggregate {
	if x != nil {
		return x.RankingsAggregate
	}
	return nil
}

func (x *ListSquareMemberRankingsAggregateResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SquareMemberRankingAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   uint32                 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Points uint32                 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Member *SquareMemberAggregate `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *SquareMemberRankingAggregate) Reset() {
	*x = SquareMemberRankingAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMemberRankingAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMemberRankingAggregate) ProtoMessage() {}

func (x *SquareMemberRankingAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMemberRankingAggregate.ProtoReflect.Descriptor instead.
func (*SquareMemberRankingAggregate) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{5}
}

func (x *SquareMemberRankingAggregate) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SquareMemberRankingAggregate) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *SquareMemberRankingAggregate) GetMember() *SquareMemberAggregate {
	if x != nil {
		return x.Member
	}
	return nil
}

type SquareMemberAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Square.
	// Format: squares/{square_token_id}/members/{user_address}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The token ID of the Square.
	SquareTokenId string `protobuf:"bytes,2,opt,name=square_token_id,json=squareTokenId,proto3" json:"square_token_id,omitempty"`
	// The user address of the member.
	User *user.User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// The member type of the square.
	Type        square.SquareMemberType `protobuf:"varint,4,opt,name=type,proto3,enum=blast.v1.square.SquareMemberType" json:"type,omitempty"`
	TotalPoints uint32                  `protobuf:"varint,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	JoinTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
}

func (x *SquareMemberAggregate) Reset() {
	*x = SquareMemberAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMemberAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMemberAggregate) ProtoMessage() {}

func (x *SquareMemberAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMemberAggregate.ProtoReflect.Descriptor instead.
func (*SquareMemberAggregate) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{6}
}

func (x *SquareMemberAggregate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SquareMemberAggregate) GetSquareTokenId() string {
	if x != nil {
		return x.SquareTokenId
	}
	return ""
}

func (x *SquareMemberAggregate) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SquareMemberAggregate) GetType() square.SquareMemberType {
	if x != nil {
		return x.Type
	}
	return square.SquareMemberType(0)
}

func (x *SquareMemberAggregate) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *SquareMemberAggregate) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

type GetSquareAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the square to retrieve.
	// Format: squares/{token_id}
	Square string `protobuf:"bytes,1,opt,name=square,proto3" json:"square,omitempty"`
	// The view of the square.
	View square.SquareView `protobuf:"varint,2,opt,name=view,proto3,enum=blast.v1.square.SquareView" json:"view,omitempty"`
}

func (x *GetSquareAggregateRequest) Reset() {
	*x = GetSquareAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareAggregateRequest) ProtoMessage() {}

func (x *GetSquareAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareAggregateRequest.ProtoReflect.Descriptor instead.
func (*GetSquareAggregateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{7}
}

func (x *GetSquareAggregateRequest) GetSquare() string {
	if x != nil {
		return x.Square
	}
	return ""
}

func (x *GetSquareAggregateRequest) GetView() square.SquareView {
	if x != nil {
		return x.View
	}
	return square.SquareView(0)
}

type SquareAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Square.
	// Format: squares/{token_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ERC721 token ID of the Square.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Owner *user.User `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The created time of Square.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	State      square.SquareState     `protobuf:"varint,5,opt,name=state,proto3,enum=blast.v1.square.SquareState" json:"state,omitempty"`
	// The signature id of the Square.
	// This field is used for multi signature when minting the Square NFT.
	SignatureId string `protobuf:"bytes,6,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	// The join type of the square.
	JoinType square.SquareJoinType `protobuf:"varint,7,opt,name=join_type,json=joinType,proto3,enum=blast.v1.square.SquareJoinType" json:"join_type,omitempty"`
	// Types that are assignable to Join:
	//
	//	*SquareAggregate_Public
	//	*SquareAggregate_Private
	//	*SquareAggregate_TokenGated
	Join isSquareAggregate_Join `protobuf_oneof:"join"`
	// The display name of the square.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The introduction of the square.
	Introduction string `protobuf:"bytes,12,opt,name=introduction,proto3" json:"introduction,omitempty"`
	// The minimum required staking amount to join the square in ETH.
	MinimumStakingAmountToJoinInEth float32 `protobuf:"fixed32,13,opt,name=minimum_staking_amount_to_join_in_eth,json=minimumStakingAmountToJoinInEth,proto3" json:"minimum_staking_amount_to_join_in_eth,omitempty"`
	// The total staking amount of all members in the square in ETH.
	TotalMembersStakingAmountInEth float32 `protobuf:"fixed32,14,opt,name=total_members_staking_amount_in_eth,json=totalMembersStakingAmountInEth,proto3" json:"total_members_staking_amount_in_eth,omitempty"`
	// The multiplier of the square.
	Multiplier float32 `protobuf:"fixed32,15,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// The all-time total points of the square.
	TotalPoints uint32 `protobuf:"varint,16,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	// The total capacity of the square.
	Capacity uint32 `protobuf:"varint,17,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The current number of members in the square.
	Occupancy uint32 `protobuf:"varint,18,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	// The occupancy of the square including join pending members.
	OccupancyIncludingPending uint32 `protobuf:"varint,19,opt,name=occupancy_including_pending,json=occupancyIncludingPending,proto3" json:"occupancy_including_pending,omitempty"`
	// The PFP boost of the square.
	PfpBoost *square.PFPBoost `protobuf:"bytes,20,opt,name=pfp_boost,json=pfpBoost,proto3" json:"pfp_boost,omitempty"`
	// The NFT of the square.
	Nft *square.SquareNFT `protobuf:"bytes,21,opt,name=nft,proto3" json:"nft,omitempty"`
	Spirits uint32 `protobuf:"varint,22,opt,name=spirits,proto3" json:"spirits,omitempty"`
	Stars         uint32 `protobuf:"varint,23,opt,name=stars,proto3" json:"stars,omitempty"`
	TotalSpirits  uint32 `protobuf:"varint,24,opt,name=total_spirits,json=totalSpirits,proto3" json:"total_spirits,omitempty"`
	WeeklySpirits uint32 `protobuf:"varint,25,opt,name=weekly_spirits,json=weeklySpirits,proto3" json:"weekly_spirits,omitempty"`
}

func (x *SquareAggregate) Reset() {
	*x = SquareAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareAggregate) ProtoMessage() {}

func (x *SquareAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareAggregate.ProtoReflect.Descriptor instead.
func (*SquareAggregate) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{8}
}

func (x *SquareAggregate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SquareAggregate) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *SquareAggregate) GetOwner() *user.User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SquareAggregate) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SquareAggregate) GetState() square.SquareState {
	if x != nil {
		return x.State
	}
	return square.SquareState(0)
}

func (x *SquareAggregate) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *SquareAggregate) GetJoinType() square.SquareJoinType {
	if x != nil {
		return x.JoinType
	}
	return square.SquareJoinType(0)
}

func (m *SquareAggregate) GetJoin() isSquareAggregate_Join {
	if m != nil {
		return m.Join
	}
	return nil
}

func (x *SquareAggregate) GetPublic() *square.Public {
	if x, ok := x.GetJoin().(*SquareAggregate_Public); ok {
		return x.Public
	}
	return nil
}

func (x *SquareAggregate) GetPrivate() *square.Private {
	if x, ok := x.GetJoin().(*SquareAggregate_Private); ok {
		return x.Private
	}
	return nil
}

func (x *SquareAggregate) GetTokenGated() *square.TokenGated {
	if x, ok := x.GetJoin().(*SquareAggregate_TokenGated); ok {
		return x.TokenGated
	}
	return nil
}

func (x *SquareAggregate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SquareAggregate) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SquareAggregate) GetMinimumStakingAmountToJoinInEth() float32 {
	if x != nil {
		return x.MinimumStakingAmountToJoinInEth
	}
	return 0
}

func (x *SquareAggregate) GetTotalMembersStakingAmountInEth() float32 {
	if x != nil {
		return x.TotalMembersStakingAmountInEth
	}
	return 0
}

func (x *SquareAggregate) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *SquareAggregate) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *SquareAggregate) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *SquareAggregate) GetOccupancy() uint32 {
	if x != nil {
		return x.Occupancy
	}
	return 0
}

func (x *SquareAggregate) GetOccupancyIncludingPending() uint32 {
	if x != nil {
		return x.OccupancyIncludingPending
	}
	return 0
}

func (x *SquareAggregate) GetPfpBoost() *square.PFPBoost {
	if x != nil {
		return x.PfpBoost
	}
	return nil
}

func (x *SquareAggregate) GetNft() *square.SquareNFT {
	if x != nil {
		return x.Nft
	}
	return nil
}

func (x *SquareAggregate) GetSpirits() uint32 {
	if x != nil {
		return x.Spirits
	}
	return 0
}

func (x *SquareAggregate) GetStars() uint32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *SquareAggregate) GetTotalSpirits() uint32 {
	if x != nil {
		return x.TotalSpirits
	}
	return 0
}

func (x *SquareAggregate) GetWeeklySpirits() uint32 {
	if x != nil {
		return x.WeeklySpirits
	}
	return 0
}

type isSquareAggregate_Join interface {
	isSquareAggregate_Join()
}

type SquareAggregate_Public struct {
	Public *square.Public `protobuf:"bytes,8,opt,name=public,proto3,oneof"`
}

type SquareAggregate_Private struct {
	Private *square.Private `protobuf:"bytes,9,opt,name=private,proto3,oneof"`
}

type SquareAggregate_TokenGated struct {
	TokenGated *square.TokenGated `protobuf:"bytes,10,opt,name=token_gated,json=tokenGated,proto3,oneof"`
}

func (*SquareAggregate_Public) isSquareAggregate_Join() {}

func (*SquareAggregate_Private) isSquareAggregate_Join() {}

func (*SquareAggregate_TokenGated) isSquareAggregate_Join() {}

type ListSquaresAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of squares to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListSquares` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// * token_id
	//   - `=`
	//
	// * signature_id
	//   - `=`
	//
	// * state
	//   - `=`
	//
	// * join_type
	//   - `=`
	//
	// * display_name
	//   - `=`
	//
	// Examples
	// * name="squares/10"
	// * token_id="10"
	// * signature_id="3ed92b99-00be-4417-b69f-dca2d8d14c7f"
	// * join_type=TOKEN_GATED
	// * display_name="SQUARE"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. One or more fields to compare and use to sort the output.
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "token_id", "total_points", "spirits"
	//
	// Examples
	// * order_by=token_id asc
	// * order_by=total_points desc
	// * order_by=spirits asc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSquaresAggregateRequest) Reset() {
	*x = ListSquaresAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquaresAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquaresAggregateRequest) ProtoMessage() {}

func (x *ListSquaresAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquaresAggregateRequest.ProtoReflect.Descriptor instead.
func (*ListSquaresAggregateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{9}
}

func (x *ListSquaresAggregateRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquaresAggregateRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSquaresAggregateRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSquaresAggregateRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListSquaresAggregateResponse
type ListSquaresAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	SquaresAggregate []*SquareAggregate `protobuf:"bytes,1,rep,name=squares_aggregate,json=squaresAggregate,proto3" json:"squares_aggregate,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquaresAggregateResponse) Reset() {
	*x = ListSquaresAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquaresAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquaresAggregateResponse) ProtoMessage() {}

func (x *ListSquaresAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_aggregate_aggregate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquaresAggregateResponse.ProtoReflect.Descriptor instead.
func (*ListSquaresAggregateResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_aggregate_aggregate_proto_rawDescGZIP(), []int{10}
}

func (x *ListSquaresAggregateResponse) GetSquaresAggregate() []*SquareAggregate {
	if x != nil {
		return x.SquaresAggregate
	}
	return nil
}

func (x *ListSquaresAggregateResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_blast_v1_aggregate_aggregate_proto protoreflect.FileDescriptor

var file_blast_v1_aggregate_aggregate_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x95, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe8, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x73, 0x3a, 0x3c, 0xea, 0x41, 0x39, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb4, 0x01,
	0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x8c, 0x03, 0x0a, 0x15, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x5d, 0xea, 0x41, 0x5a, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65,
	0x72, 0x12, 0x30, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7d, 0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x91, 0x0a, 0x0a, 0x0f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x47, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x25, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x45, 0x74, 0x68, 0x12, 0x51, 0x0a,
	0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x45, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x1b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x19, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x09, 0x70,
	0x66, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x2e, 0x50, 0x46, 0x50, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x08, 0x70, 0x66, 0x70, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x66, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4e,
	0x46, 0x54, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x73, 0x3a, 0x38, 0xea, 0x41, 0x35, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x12, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x06, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xbe, 0x05,
	0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xdc, 0x01, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x3d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0x9c, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0xda, 0x41, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x42, 0x42,
	0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_aggregate_aggregate_proto_rawDescOnce sync.Once
	file_blast_v1_aggregate_aggregate_proto_rawDescData = file_blast_v1_aggregate_aggregate_proto_rawDesc
)

func file_blast_v1_aggregate_aggregate_proto_rawDescGZIP() []byte {
	file_blast_v1_aggregate_aggregate_proto_rawDescOnce.Do(func() {
		file_blast_v1_aggregate_aggregate_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_aggregate_aggregate_proto_rawDescData)
	})
	return file_blast_v1_aggregate_aggregate_proto_rawDescData
}

var file_blast_v1_aggregate_aggregate_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_blast_v1_aggregate_aggregate_proto_goTypes = []interface{}{
	(*ListPointsAggregateRequest)(nil),                // 0: blast.v1.aggregate.ListPointsAggregateRequest
	(*ListPointsAggregateResponse)(nil),               // 1: blast.v1.aggregate.ListPointsAggregateResponse
	(*PointsAggregate)(nil),                           // 2: blast.v1.aggregate.PointsAggregate
	(*ListSquareMemberRankingsAggregateRequest)(nil),  // 3: blast.v1.aggregate.ListSquareMemberRankingsAggregateRequest
	(*ListSquareMemberRankingsAggregateResponse)(nil), // 4: blast.v1.aggregate.ListSquareMemberRankingsAggregateResponse
	(*SquareMemberRankingAggregate)(nil),              // 5: blast.v1.aggregate.SquareMemberRankingAggregate
	(*SquareMemberAggregate)(nil),                     // 6: blast.v1.aggregate.SquareMemberAggregate
	(*GetSquareAggregateRequest)(nil),                 // 7: blast.v1.aggregate.GetSquareAggregateRequest
	(*SquareAggregate)(nil),                           // 8: blast.v1.aggregate.SquareAggregate
	(*ListSquaresAggregateRequest)(nil),               // 9: blast.v1.aggregate.ListSquaresAggregateRequest
	(*ListSquaresAggregateResponse)(nil),              // 10: blast.v1.aggregate.ListSquaresAggregateResponse
	(*user.User)(nil),                                 // 11: blast.v1.user.User
	(*points.Referral)(nil),                           // 12: blast.v1.points.Referral
	(*points.Staking)(nil),                            // 13: blast.v1.points.Staking
	(*points.Activity)(nil),                           // 14: blast.v1.points.Activity
	(*points.Bonus)(nil),                              // 15: blast.v1.points.Bonus
	(*points.Multiplier)(nil),                         // 16: blast.v1.points.Multiplier
	(square.SquareMemberRankType)(0),                  // 17: blast.v1.square.SquareMemberRankType
	(square.SquareMemberType)(0),                      // 18: blast.v1.square.SquareMemberType
	(*timestamppb.Timestamp)(nil),                     // 19: google.protobuf.Timestamp
	(square.SquareView)(0),                            // 20: blast.v1.square.SquareView
	(square.SquareState)(0),                           // 21: blast.v1.square.SquareState
	(square.SquareJoinType)(0),                        // 22: blast.v1.square.SquareJoinType
	(*square.Public)(nil),                             // 23: blast.v1.square.Public
	(*square.Private)(nil),                            // 24: blast.v1.square.Private
	(*square.TokenGated)(nil),                         // 25: blast.v1.square.TokenGated
	(*square.PFPBoost)(nil),                           // 26: blast.v1.square.PFPBoost
	(*square.SquareNFT)(nil),                          // 27: blast.v1.square.SquareNFT
}
var file_blast_v1_aggregate_aggregate_proto_depIdxs = []int32{
	2,  // 0: blast.v1.aggregate.ListPointsAggregateResponse.points_aggregate:type_name -> blast.v1.aggregate.PointsAggregate
	11, // 1: blast.v1.aggregate.PointsAggregate.user:type_name -> blast.v1.user.User
	12, // 2: blast.v1.aggregate.PointsAggregate.referral:type_name -> blast.v1.points.Referral
	13, // 3: blast.v1.aggregate.PointsAggregate.staking:type_name -> blast.v1.points.Staking
	14, // 4: blast.v1.aggregate.PointsAggregate.activity:type_name -> blast.v1.points.Activity
	15, // 5: blast.v1.aggregate.PointsAggregate.bonus:type_name -> blast.v1.points.Bonus
	16, // 6: blast.v1.aggregate.PointsAggregate.multipliers:type_name -> blast.v1.points.Multiplier
	17, // 7: blast.v1.aggregate.ListSquareMemberRankingsAggregateRequest.rank_type:type_name -> blast.v1.square.SquareMemberRankType
	5,  // 8: blast.v1.aggregate.ListSquareMemberRankingsAggregateResponse.rankings_aggregate:type_name -> blast.v1.aggregate.SquareMemberRankingAggregate
	6,  // 9: blast.v1.aggregate.SquareMemberRankingAggregate.member:type_name -> blast.v1.aggregate.SquareMemberAggregate
	11, // 10: blast.v1.aggregate.SquareMemberAggregate.user:type_name -> blast.v1.user.User
	18, // 11: blast.v1.aggregate.SquareMemberAggregate.type:type_name -> blast.v1.square.SquareMemberType
	19, // 12: blast.v1.aggregate.SquareMemberAggregate.join_time:type_name -> google.protobuf.Timestamp
	20, // 13: blast.v1.aggregate.GetSquareAggregateRequest.view:type_name -> blast.v1.square.SquareView
	11, // 14: blast.v1.aggregate.SquareAggregate.owner:type_name -> blast.v1.user.User
	19, // 15: blast.v1.aggregate.SquareAggregate.create_time:type_name -> google.protobuf.Timestamp
	21, // 16: blast.v1.aggregate.SquareAggregate.state:type_name -> blast.v1.square.SquareState
	22, // 17: blast.v1.aggregate.SquareAggregate.join_type:type_name -> blast.v1.square.SquareJoinType
	23, // 18: blast.v1.aggregate.SquareAggregate.public:type_name -> blast.v1.square.Public
	24, // 19: blast.v1.aggregate.SquareAggregate.private:type_name -> blast.v1.square.Private
	25, // 20: blast.v1.aggregate.SquareAggregate.token_gated:type_name -> blast.v1.square.TokenGated
	26, // 21: blast.v1.aggregate.SquareAggregate.pfp_boost:type_name -> blast.v1.square.PFPBoost
	27, // 22: blast.v1.aggregate.SquareAggregate.nft:type_name -> blast.v1.square.SquareNFT
	8,  // 23: blast.v1.aggregate.ListSquaresAggregateResponse.squares_aggregate:type_name -> blast.v1.aggregate.SquareAggregate
	0,  // 24: blast.v1.aggregate.AggregateService.ListPointsAggregate:input_type -> blast.v1.aggregate.ListPointsAggregateRequest
	3,  // 25: blast.v1.aggregate.AggregateService.ListSquareMemberRankingsAggregate:input_type -> blast.v1.aggregate.ListSquareMemberRankingsAggregateRequest
	7,  // 26: blast.v1.aggregate.AggregateService.GetSquareAggregate:input_type -> blast.v1.aggregate.GetSquareAggregateRequest
	9,  // 27: blast.v1.aggregate.AggregateService.ListSquaresAggregate:input_type -> blast.v1.aggregate.ListSquaresAggregateRequest
	1,  // 28: blast.v1.aggregate.AggregateService.ListPointsAggregate:output_type -> blast.v1.aggregate.ListPointsAggregateResponse
	4,  // 29: blast.v1.aggregate.AggregateService.ListSquareMemberRankingsAggregate:output_type -> blast.v1.aggregate.ListSquareMemberRankingsAggregateResponse
	8,  // 30: blast.v1.aggregate.AggregateService.GetSquareAggregate:output_type -> blast.v1.aggregate.SquareAggregate
	10, // 31: blast.v1.aggregate.AggregateService.ListSquaresAggregate:output_type -> blast.v1.aggregate.ListSquaresAggregateResponse
	28, // [28:32] is the sub-list for method output_type
	24, // [24:28] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_blast_v1_aggregate_aggregate_proto_init() }
func file_blast_v1_aggregate_aggregate_proto_init() {
	if File_blast_v1_aggregate_aggregate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_aggregate_aggregate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointsAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMemberRankingsAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareMemberRankingsAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMemberRankingAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMemberAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquaresAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_aggregate_aggregate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquaresAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blast_v1_aggregate_aggregate_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SquareAggregate_Public)(nil),
		(*SquareAggregate_Private)(nil),
		(*SquareAggregate_TokenGated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_aggregate_aggregate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_aggregate_aggregate_proto_goTypes,
		DependencyIndexes: file_blast_v1_aggregate_aggregate_proto_depIdxs,
		MessageInfos:      file_blast_v1_aggregate_aggregate_proto_msgTypes,
	}.Build()
	File_blast_v1_aggregate_aggregate_proto = out.File
	file_blast_v1_aggregate_aggregate_proto_rawDesc = nil
	file_blast_v1_aggregate_aggregate_proto_goTypes = nil
	file_blast_v1_aggregate_aggregate_proto_depIdxs = nil
}
