// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/aggregate/aggregate.proto

package aggregate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregateServiceClient is the client API for AggregateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregateServiceClient interface {
	// ListPointsAggregate returns the PointsAggregate for the given request.
	ListPointsAggregate(ctx context.Context, in *ListPointsAggregateRequest, opts ...grpc.CallOption) (*ListPointsAggregateResponse, error)
	// ListSquareMemberRankingsAggregate returns the SquareMemberRankingsAggregate for the given request.
	ListSquareMemberRankingsAggregate(ctx context.Context, in *ListSquareMemberRankingsAggregateRequest, opts ...grpc.CallOption) (*ListSquareMemberRankingsAggregateResponse, error)
	// GetSquareAggregate returns the GetSquareAggregate for the given request.
	GetSquareAggregate(ctx context.Context, in *GetSquareAggregateRequest, opts ...grpc.CallOption) (*SquareAggregate, error)
	// ListSquaresAggregate returns the ListSquaresAggregate for the given request.
	ListSquaresAggregate(ctx context.Context, in *ListSquaresAggregateRequest, opts ...grpc.CallOption) (*ListSquaresAggregateResponse, error)
}

type aggregateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregateServiceClient(cc grpc.ClientConnInterface) AggregateServiceClient {
	return &aggregateServiceClient{cc}
}

func (c *aggregateServiceClient) ListPointsAggregate(ctx context.Context, in *ListPointsAggregateRequest, opts ...grpc.CallOption) (*ListPointsAggregateResponse, error) {
	out := new(ListPointsAggregateResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.aggregate.AggregateService/ListPointsAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) ListSquareMemberRankingsAggregate(ctx context.Context, in *ListSquareMemberRankingsAggregateRequest, opts ...grpc.CallOption) (*ListSquareMemberRankingsAggregateResponse, error) {
	out := new(ListSquareMemberRankingsAggregateResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.aggregate.AggregateService/ListSquareMemberRankingsAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) GetSquareAggregate(ctx context.Context, in *GetSquareAggregateRequest, opts ...grpc.CallOption) (*SquareAggregate, error) {
	out := new(SquareAggregate)
	err := c.cc.Invoke(ctx, "/blast.v1.aggregate.AggregateService/GetSquareAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) ListSquaresAggregate(ctx context.Context, in *ListSquaresAggregateRequest, opts ...grpc.CallOption) (*ListSquaresAggregateResponse, error) {
	out := new(ListSquaresAggregateResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.aggregate.AggregateService/ListSquaresAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregateServiceServer is the server API for AggregateService service.
// All implementations must embed UnimplementedAggregateServiceServer
// for forward compatibility
type AggregateServiceServer interface {
	// ListPointsAggregate returns the PointsAggregate for the given request.
	ListPointsAggregate(context.Context, *ListPointsAggregateRequest) (*ListPointsAggregateResponse, error)
	// ListSquareMemberRankingsAggregate returns the SquareMemberRankingsAggregate for the given request.
	ListSquareMemberRankingsAggregate(context.Context, *ListSquareMemberRankingsAggregateRequest) (*ListSquareMemberRankingsAggregateResponse, error)
	// GetSquareAggregate returns the GetSquareAggregate for the given request.
	GetSquareAggregate(context.Context, *GetSquareAggregateRequest) (*SquareAggregate, error)
	// ListSquaresAggregate returns the ListSquaresAggregate for the given request.
	ListSquaresAggregate(context.Context, *ListSquaresAggregateRequest) (*ListSquaresAggregateResponse, error)
	mustEmbedUnimplementedAggregateServiceServer()
}

// UnimplementedAggregateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggregateServiceServer struct {
}

func (UnimplementedAggregateServiceServer) ListPointsAggregate(context.Context, *ListPointsAggregateRequest) (*ListPointsAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPointsAggregate not implemented")
}
func (UnimplementedAggregateServiceServer) ListSquareMemberRankingsAggregate(context.Context, *ListSquareMemberRankingsAggregateRequest) (*ListSquareMemberRankingsAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquareMemberRankingsAggregate not implemented")
}
func (UnimplementedAggregateServiceServer) GetSquareAggregate(context.Context, *GetSquareAggregateRequest) (*SquareAggregate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareAggregate not implemented")
}
func (UnimplementedAggregateServiceServer) ListSquaresAggregate(context.Context, *ListSquaresAggregateRequest) (*ListSquaresAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquaresAggregate not implemented")
}
func (UnimplementedAggregateServiceServer) mustEmbedUnimplementedAggregateServiceServer() {}

// UnsafeAggregateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregateServiceServer will
// result in compilation errors.
type UnsafeAggregateServiceServer interface {
	mustEmbedUnimplementedAggregateServiceServer()
}

func RegisterAggregateServiceServer(s grpc.ServiceRegistrar, srv AggregateServiceServer) {
	s.RegisterService(&AggregateService_ServiceDesc, srv)
}

func _AggregateService_ListPointsAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointsAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).ListPointsAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.aggregate.AggregateService/ListPointsAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).ListPointsAggregate(ctx, req.(*ListPointsAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_ListSquareMemberRankingsAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquareMemberRankingsAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).ListSquareMemberRankingsAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.aggregate.AggregateService/ListSquareMemberRankingsAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).ListSquareMemberRankingsAggregate(ctx, req.(*ListSquareMemberRankingsAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_GetSquareAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).GetSquareAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.aggregate.AggregateService/GetSquareAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).GetSquareAggregate(ctx, req.(*GetSquareAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_ListSquaresAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquaresAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).ListSquaresAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.aggregate.AggregateService/ListSquaresAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).ListSquaresAggregate(ctx, req.(*ListSquaresAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregateService_ServiceDesc is the grpc.ServiceDesc for AggregateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.aggregate.AggregateService",
	HandlerType: (*AggregateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPointsAggregate",
			Handler:    _AggregateService_ListPointsAggregate_Handler,
		},
		{
			MethodName: "ListSquareMemberRankingsAggregate",
			Handler:    _AggregateService_ListSquareMemberRankingsAggregate_Handler,
		},
		{
			MethodName: "GetSquareAggregate",
			Handler:    _AggregateService_GetSquareAggregate_Handler,
		},
		{
			MethodName: "ListSquaresAggregate",
			Handler:    _AggregateService_ListSquaresAggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/aggregate/aggregate.proto",
}
