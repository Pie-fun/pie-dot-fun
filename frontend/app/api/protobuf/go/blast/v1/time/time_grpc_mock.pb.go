// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/time/time.proto

package time

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTimeServiceClient is a mock of TimeServiceClient interface.
type MockTimeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTimeServiceClientMockRecorder
}

// MockTimeServiceClientMockRecorder is the mock recorder for MockTimeServiceClient.
type MockTimeServiceClientMockRecorder struct {
	mock *MockTimeServiceClient
}

// NewMockTimeServiceClient creates a new mock instance.
func NewMockTimeServiceClient(ctrl *gomock.Controller) *MockTimeServiceClient {
	mock := &MockTimeServiceClient{ctrl: ctrl}
	mock.recorder = &MockTimeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeServiceClient) EXPECT() *MockTimeServiceClientMockRecorder {
	return m.recorder
}

// GetCurrentFullWeekBasedMonth mocks base method.
func (m *MockTimeServiceClient) GetCurrentFullWeekBasedMonth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentFullWeekBasedMonthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentFullWeekBasedMonth", varargs...)
	ret0, _ := ret[0].(*GetCurrentFullWeekBasedMonthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFullWeekBasedMonth indicates an expected call of GetCurrentFullWeekBasedMonth.
func (mr *MockTimeServiceClientMockRecorder) GetCurrentFullWeekBasedMonth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFullWeekBasedMonth", reflect.TypeOf((*MockTimeServiceClient)(nil).GetCurrentFullWeekBasedMonth), varargs...)
}

// GetCurrentFullWeekBasedWeek mocks base method.
func (m *MockTimeServiceClient) GetCurrentFullWeekBasedWeek(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentFullWeekBasedWeekResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentFullWeekBasedWeek", varargs...)
	ret0, _ := ret[0].(*GetCurrentFullWeekBasedWeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFullWeekBasedWeek indicates an expected call of GetCurrentFullWeekBasedWeek.
func (mr *MockTimeServiceClientMockRecorder) GetCurrentFullWeekBasedWeek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFullWeekBasedWeek", reflect.TypeOf((*MockTimeServiceClient)(nil).GetCurrentFullWeekBasedWeek), varargs...)
}

// GetCurrentTime mocks base method.
func (m *MockTimeServiceClient) GetCurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentTime", varargs...)
	ret0, _ := ret[0].(*GetCurrentTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockTimeServiceClientMockRecorder) GetCurrentTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockTimeServiceClient)(nil).GetCurrentTime), varargs...)
}

// GetCurrentWeek mocks base method.
func (m *MockTimeServiceClient) GetCurrentWeek(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentWeekResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentWeek", varargs...)
	ret0, _ := ret[0].(*GetCurrentWeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeek indicates an expected call of GetCurrentWeek.
func (mr *MockTimeServiceClientMockRecorder) GetCurrentWeek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeek", reflect.TypeOf((*MockTimeServiceClient)(nil).GetCurrentWeek), varargs...)
}

// GetSpacebarWeek mocks base method.
func (m *MockTimeServiceClient) GetSpacebarWeek(ctx context.Context, in *GetSpacebarWeekRequest, opts ...grpc.CallOption) (*SpacebarWeek, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpacebarWeek", varargs...)
	ret0, _ := ret[0].(*SpacebarWeek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpacebarWeek indicates an expected call of GetSpacebarWeek.
func (mr *MockTimeServiceClientMockRecorder) GetSpacebarWeek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpacebarWeek", reflect.TypeOf((*MockTimeServiceClient)(nil).GetSpacebarWeek), varargs...)
}

// GetSpacebarWeekByDate mocks base method.
func (m *MockTimeServiceClient) GetSpacebarWeekByDate(ctx context.Context, in *GetSpacebarWeekByDateRequest, opts ...grpc.CallOption) (*SpacebarWeek, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpacebarWeekByDate", varargs...)
	ret0, _ := ret[0].(*SpacebarWeek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpacebarWeekByDate indicates an expected call of GetSpacebarWeekByDate.
func (mr *MockTimeServiceClientMockRecorder) GetSpacebarWeekByDate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpacebarWeekByDate", reflect.TypeOf((*MockTimeServiceClient)(nil).GetSpacebarWeekByDate), varargs...)
}

// MockTimeServiceServer is a mock of TimeServiceServer interface.
type MockTimeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTimeServiceServerMockRecorder
}

// MockTimeServiceServerMockRecorder is the mock recorder for MockTimeServiceServer.
type MockTimeServiceServerMockRecorder struct {
	mock *MockTimeServiceServer
}

// NewMockTimeServiceServer creates a new mock instance.
func NewMockTimeServiceServer(ctrl *gomock.Controller) *MockTimeServiceServer {
	mock := &MockTimeServiceServer{ctrl: ctrl}
	mock.recorder = &MockTimeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeServiceServer) EXPECT() *MockTimeServiceServerMockRecorder {
	return m.recorder
}

// GetCurrentFullWeekBasedMonth mocks base method.
func (m *MockTimeServiceServer) GetCurrentFullWeekBasedMonth(ctx context.Context, in *emptypb.Empty) (*GetCurrentFullWeekBasedMonthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentFullWeekBasedMonth", ctx, in)
	ret0, _ := ret[0].(*GetCurrentFullWeekBasedMonthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFullWeekBasedMonth indicates an expected call of GetCurrentFullWeekBasedMonth.
func (mr *MockTimeServiceServerMockRecorder) GetCurrentFullWeekBasedMonth(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFullWeekBasedMonth", reflect.TypeOf((*MockTimeServiceServer)(nil).GetCurrentFullWeekBasedMonth), ctx, in)
}

// GetCurrentFullWeekBasedWeek mocks base method.
func (m *MockTimeServiceServer) GetCurrentFullWeekBasedWeek(ctx context.Context, in *emptypb.Empty) (*GetCurrentFullWeekBasedWeekResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentFullWeekBasedWeek", ctx, in)
	ret0, _ := ret[0].(*GetCurrentFullWeekBasedWeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFullWeekBasedWeek indicates an expected call of GetCurrentFullWeekBasedWeek.
func (mr *MockTimeServiceServerMockRecorder) GetCurrentFullWeekBasedWeek(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFullWeekBasedWeek", reflect.TypeOf((*MockTimeServiceServer)(nil).GetCurrentFullWeekBasedWeek), ctx, in)
}

// GetCurrentTime mocks base method.
func (m *MockTimeServiceServer) GetCurrentTime(ctx context.Context, in *emptypb.Empty) (*GetCurrentTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime", ctx, in)
	ret0, _ := ret[0].(*GetCurrentTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockTimeServiceServerMockRecorder) GetCurrentTime(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockTimeServiceServer)(nil).GetCurrentTime), ctx, in)
}

// GetCurrentWeek mocks base method.
func (m *MockTimeServiceServer) GetCurrentWeek(ctx context.Context, in *emptypb.Empty) (*GetCurrentWeekResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeek", ctx, in)
	ret0, _ := ret[0].(*GetCurrentWeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeek indicates an expected call of GetCurrentWeek.
func (mr *MockTimeServiceServerMockRecorder) GetCurrentWeek(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeek", reflect.TypeOf((*MockTimeServiceServer)(nil).GetCurrentWeek), ctx, in)
}

// GetSpacebarWeek mocks base method.
func (m *MockTimeServiceServer) GetSpacebarWeek(ctx context.Context, in *GetSpacebarWeekRequest) (*SpacebarWeek, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpacebarWeek", ctx, in)
	ret0, _ := ret[0].(*SpacebarWeek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpacebarWeek indicates an expected call of GetSpacebarWeek.
func (mr *MockTimeServiceServerMockRecorder) GetSpacebarWeek(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpacebarWeek", reflect.TypeOf((*MockTimeServiceServer)(nil).GetSpacebarWeek), ctx, in)
}

// GetSpacebarWeekByDate mocks base method.
func (m *MockTimeServiceServer) GetSpacebarWeekByDate(ctx context.Context, in *GetSpacebarWeekByDateRequest) (*SpacebarWeek, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpacebarWeekByDate", ctx, in)
	ret0, _ := ret[0].(*SpacebarWeek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpacebarWeekByDate indicates an expected call of GetSpacebarWeekByDate.
func (mr *MockTimeServiceServerMockRecorder) GetSpacebarWeekByDate(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpacebarWeekByDate", reflect.TypeOf((*MockTimeServiceServer)(nil).GetSpacebarWeekByDate), ctx, in)
}
