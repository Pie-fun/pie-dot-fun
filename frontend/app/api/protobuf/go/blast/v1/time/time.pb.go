// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/time/time.proto

package time

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SpacebarWeek has the service-based incremental week number.
// 2024/02/19 ~ 2024/02/25 => 1
type SpacebarWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// week. incremental value.
	Week uint32 `protobuf:"varint,1,opt,name=week,proto3" json:"week,omitempty"`
	// date. [start_date, end_date]
	// start_date. It's monday
	StartDate *date.Date `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end_date. It's sunday
	EndDate *date.Date `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// full_week_based_year
	FullWeekBasedYear *uint32 `protobuf:"varint,4,opt,name=full_week_based_year,json=fullWeekBasedYear,proto3,oneof" json:"full_week_based_year,omitempty"`
	// full_week_based_year
	FullWeekBasedMonth *uint32 `protobuf:"varint,5,opt,name=full_week_based_month,json=fullWeekBasedMonth,proto3,oneof" json:"full_week_based_month,omitempty"`
	// full_week_based_week
	FullWeekBasedWeek *uint32 `protobuf:"varint,6,opt,name=full_week_based_week,json=fullWeekBasedWeek,proto3,oneof" json:"full_week_based_week,omitempty"`
	// full_week_based_week_string
	// Format: {year}-{month}-{week}. Example: 2021-01-W1
	FullWeekBasedWeekString string `protobuf:"bytes,7,opt,name=full_week_based_week_string,json=fullWeekBasedWeekString,proto3" json:"full_week_based_week_string,omitempty"`
	// full_week_based_month_string
	// Format: yyyy-MM. Example: 2021-01
	FullWeekBasedMonthString string `protobuf:"bytes,8,opt,name=full_week_based_month_string,json=fullWeekBasedMonthString,proto3" json:"full_week_based_month_string,omitempty"`
}

func (x *SpacebarWeek) Reset() {
	*x = SpacebarWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacebarWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacebarWeek) ProtoMessage() {}

func (x *SpacebarWeek) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacebarWeek.ProtoReflect.Descriptor instead.
func (*SpacebarWeek) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{0}
}

func (x *SpacebarWeek) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *SpacebarWeek) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *SpacebarWeek) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *SpacebarWeek) GetFullWeekBasedYear() uint32 {
	if x != nil && x.FullWeekBasedYear != nil {
		return *x.FullWeekBasedYear
	}
	return 0
}

func (x *SpacebarWeek) GetFullWeekBasedMonth() uint32 {
	if x != nil && x.FullWeekBasedMonth != nil {
		return *x.FullWeekBasedMonth
	}
	return 0
}

func (x *SpacebarWeek) GetFullWeekBasedWeek() uint32 {
	if x != nil && x.FullWeekBasedWeek != nil {
		return *x.FullWeekBasedWeek
	}
	return 0
}

func (x *SpacebarWeek) GetFullWeekBasedWeekString() string {
	if x != nil {
		return x.FullWeekBasedWeekString
	}
	return ""
}

func (x *SpacebarWeek) GetFullWeekBasedMonthString() string {
	if x != nil {
		return x.FullWeekBasedMonthString
	}
	return ""
}

// GetCurrentTimeResponse
type GetCurrentTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetCurrentTimeResponse) Reset() {
	*x = GetCurrentTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimeResponse) ProtoMessage() {}

func (x *GetCurrentTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimeResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentTimeResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{1}
}

func (x *GetCurrentTimeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// GetCurrentWeekResponse
type GetCurrentWeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// week
	Week uint32 `protobuf:"varint,1,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetCurrentWeekResponse) Reset() {
	*x = GetCurrentWeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentWeekResponse) ProtoMessage() {}

func (x *GetCurrentWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentWeekResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentWeekResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{2}
}

func (x *GetCurrentWeekResponse) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

// GetSpacebarWeekRequest
type GetSpacebarWeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// week
	Week uint32 `protobuf:"varint,1,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetSpacebarWeekRequest) Reset() {
	*x = GetSpacebarWeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpacebarWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpacebarWeekRequest) ProtoMessage() {}

func (x *GetSpacebarWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpacebarWeekRequest.ProtoReflect.Descriptor instead.
func (*GetSpacebarWeekRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{3}
}

func (x *GetSpacebarWeekRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

// GetSpacebarWeekByDateRequest
type GetSpacebarWeekByDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date
	// if null, it's today (UTC)
	Date *date.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
}

func (x *GetSpacebarWeekByDateRequest) Reset() {
	*x = GetSpacebarWeekByDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpacebarWeekByDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpacebarWeekByDateRequest) ProtoMessage() {}

func (x *GetSpacebarWeekByDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpacebarWeekByDateRequest.ProtoReflect.Descriptor instead.
func (*GetSpacebarWeekByDateRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{4}
}

func (x *GetSpacebarWeekByDateRequest) GetDate() *date.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

// GetCurrentFullWeekBasedWeekResponse
type GetCurrentFullWeekBasedWeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: {year}-{month}-{week}. Example: 2021-01-W1
	CurrentWeek string `protobuf:"bytes,1,opt,name=current_week,json=currentWeek,proto3" json:"current_week,omitempty"`
	// Format: {year}-{month}-{week}. Example: 2021-01-W1
	PreviousWeek string `protobuf:"bytes,2,opt,name=previous_week,json=previousWeek,proto3" json:"previous_week,omitempty"`
}

func (x *GetCurrentFullWeekBasedWeekResponse) Reset() {
	*x = GetCurrentFullWeekBasedWeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentFullWeekBasedWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentFullWeekBasedWeekResponse) ProtoMessage() {}

func (x *GetCurrentFullWeekBasedWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentFullWeekBasedWeekResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentFullWeekBasedWeekResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrentFullWeekBasedWeekResponse) GetCurrentWeek() string {
	if x != nil {
		return x.CurrentWeek
	}
	return ""
}

func (x *GetCurrentFullWeekBasedWeekResponse) GetPreviousWeek() string {
	if x != nil {
		return x.PreviousWeek
	}
	return ""
}

// GetFullWeekBasedWeekRequest
type GetFullWeekBasedWeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base
	//
	// Types that are assignable to Base:
	//
	//	*GetFullWeekBasedWeekRequest_Date
	//	*GetFullWeekBasedWeekRequest_Week
	Base isGetFullWeekBasedWeekRequest_Base `protobuf_oneof:"base"`
}

func (x *GetFullWeekBasedWeekRequest) Reset() {
	*x = GetFullWeekBasedWeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullWeekBasedWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullWeekBasedWeekRequest) ProtoMessage() {}

func (x *GetFullWeekBasedWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullWeekBasedWeekRequest.ProtoReflect.Descriptor instead.
func (*GetFullWeekBasedWeekRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{6}
}

func (m *GetFullWeekBasedWeekRequest) GetBase() isGetFullWeekBasedWeekRequest_Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (x *GetFullWeekBasedWeekRequest) GetDate() *date.Date {
	if x, ok := x.GetBase().(*GetFullWeekBasedWeekRequest_Date); ok {
		return x.Date
	}
	return nil
}

func (x *GetFullWeekBasedWeekRequest) GetWeek() uint32 {
	if x, ok := x.GetBase().(*GetFullWeekBasedWeekRequest_Week); ok {
		return x.Week
	}
	return 0
}

type isGetFullWeekBasedWeekRequest_Base interface {
	isGetFullWeekBasedWeekRequest_Base()
}

type GetFullWeekBasedWeekRequest_Date struct {
	// date
	Date *date.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type GetFullWeekBasedWeekRequest_Week struct {
	// week
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3,oneof"`
}

func (*GetFullWeekBasedWeekRequest_Date) isGetFullWeekBasedWeekRequest_Base() {}

func (*GetFullWeekBasedWeekRequest_Week) isGetFullWeekBasedWeekRequest_Base() {}

// GetFullWeekBasedWeekResponse
type GetFullWeekBasedWeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: {year}-{month}-{week}. Example: 2021-01-W1
	Week string `protobuf:"bytes,1,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetFullWeekBasedWeekResponse) Reset() {
	*x = GetFullWeekBasedWeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullWeekBasedWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullWeekBasedWeekResponse) ProtoMessage() {}

func (x *GetFullWeekBasedWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullWeekBasedWeekResponse.ProtoReflect.Descriptor instead.
func (*GetFullWeekBasedWeekResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{7}
}

func (x *GetFullWeekBasedWeekResponse) GetWeek() string {
	if x != nil {
		return x.Week
	}
	return ""
}

// GetCurrentFullWeekBasedMonthResponse
type GetCurrentFullWeekBasedMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: yyyy-MM. Example: 2021-01
	CurrentMonth string `protobuf:"bytes,1,opt,name=current_month,json=currentMonth,proto3" json:"current_month,omitempty"`
	// Format: yyyy-MM. Example: 2021-01
	PreviousMonth string `protobuf:"bytes,2,opt,name=previous_month,json=previousMonth,proto3" json:"previous_month,omitempty"`
}

func (x *GetCurrentFullWeekBasedMonthResponse) Reset() {
	*x = GetCurrentFullWeekBasedMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_time_time_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentFullWeekBasedMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentFullWeekBasedMonthResponse) ProtoMessage() {}

func (x *GetCurrentFullWeekBasedMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_time_time_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentFullWeekBasedMonthResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentFullWeekBasedMonthResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_time_time_proto_rawDescGZIP(), []int{8}
}

func (x *GetCurrentFullWeekBasedMonthResponse) GetCurrentMonth() string {
	if x != nil {
		return x.CurrentMonth
	}
	return ""
}

func (x *GetCurrentFullWeekBasedMonthResponse) GetPreviousMonth() string {
	if x != nil {
		return x.PreviousMonth
	}
	return ""
}

var File_blast_v1_time_time_proto protoreflect.FileDescriptor

var file_blast_v1_time_time_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0,
	0x03, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c,
	0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x75,
	0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x75, 0x6c,
	0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22,
	0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x53, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x6d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65, 0x65,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x57, 0x65, 0x65,
	0x6b, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x72, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65,
	0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32,
	0x82, 0x07, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x5a, 0x0e, 0x12, 0x0c, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x7e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72,
	0x57, 0x65, 0x65, 0x6b, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72,
	0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x2f, 0x7b, 0x77, 0x65, 0x65, 0x6b, 0x3d, 0x2a,
	0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49,
	0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x12, 0xb8, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x42, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_time_time_proto_rawDescOnce sync.Once
	file_blast_v1_time_time_proto_rawDescData = file_blast_v1_time_time_proto_rawDesc
)

func file_blast_v1_time_time_proto_rawDescGZIP() []byte {
	file_blast_v1_time_time_proto_rawDescOnce.Do(func() {
		file_blast_v1_time_time_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_time_time_proto_rawDescData)
	})
	return file_blast_v1_time_time_proto_rawDescData
}

var file_blast_v1_time_time_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_blast_v1_time_time_proto_goTypes = []interface{}{
	(*SpacebarWeek)(nil),                         // 0: blast.v1.time.SpacebarWeek
	(*GetCurrentTimeResponse)(nil),               // 1: blast.v1.time.GetCurrentTimeResponse
	(*GetCurrentWeekResponse)(nil),               // 2: blast.v1.time.GetCurrentWeekResponse
	(*GetSpacebarWeekRequest)(nil),               // 3: blast.v1.time.GetSpacebarWeekRequest
	(*GetSpacebarWeekByDateRequest)(nil),         // 4: blast.v1.time.GetSpacebarWeekByDateRequest
	(*GetCurrentFullWeekBasedWeekResponse)(nil),  // 5: blast.v1.time.GetCurrentFullWeekBasedWeekResponse
	(*GetFullWeekBasedWeekRequest)(nil),          // 6: blast.v1.time.GetFullWeekBasedWeekRequest
	(*GetFullWeekBasedWeekResponse)(nil),         // 7: blast.v1.time.GetFullWeekBasedWeekResponse
	(*GetCurrentFullWeekBasedMonthResponse)(nil), // 8: blast.v1.time.GetCurrentFullWeekBasedMonthResponse
	(*date.Date)(nil),                            // 9: google.type.Date
	(*timestamppb.Timestamp)(nil),                // 10: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                        // 11: google.protobuf.Empty
}
var file_blast_v1_time_time_proto_depIdxs = []int32{
	9,  // 0: blast.v1.time.SpacebarWeek.start_date:type_name -> google.type.Date
	9,  // 1: blast.v1.time.SpacebarWeek.end_date:type_name -> google.type.Date
	10, // 2: blast.v1.time.GetCurrentTimeResponse.time:type_name -> google.protobuf.Timestamp
	9,  // 3: blast.v1.time.GetSpacebarWeekByDateRequest.date:type_name -> google.type.Date
	9,  // 4: blast.v1.time.GetFullWeekBasedWeekRequest.date:type_name -> google.type.Date
	11, // 5: blast.v1.time.TimeService.GetCurrentTime:input_type -> google.protobuf.Empty
	11, // 6: blast.v1.time.TimeService.GetCurrentWeek:input_type -> google.protobuf.Empty
	3,  // 7: blast.v1.time.TimeService.GetSpacebarWeek:input_type -> blast.v1.time.GetSpacebarWeekRequest
	4,  // 8: blast.v1.time.TimeService.GetSpacebarWeekByDate:input_type -> blast.v1.time.GetSpacebarWeekByDateRequest
	11, // 9: blast.v1.time.TimeService.GetCurrentFullWeekBasedWeek:input_type -> google.protobuf.Empty
	11, // 10: blast.v1.time.TimeService.GetCurrentFullWeekBasedMonth:input_type -> google.protobuf.Empty
	1,  // 11: blast.v1.time.TimeService.GetCurrentTime:output_type -> blast.v1.time.GetCurrentTimeResponse
	2,  // 12: blast.v1.time.TimeService.GetCurrentWeek:output_type -> blast.v1.time.GetCurrentWeekResponse
	0,  // 13: blast.v1.time.TimeService.GetSpacebarWeek:output_type -> blast.v1.time.SpacebarWeek
	0,  // 14: blast.v1.time.TimeService.GetSpacebarWeekByDate:output_type -> blast.v1.time.SpacebarWeek
	5,  // 15: blast.v1.time.TimeService.GetCurrentFullWeekBasedWeek:output_type -> blast.v1.time.GetCurrentFullWeekBasedWeekResponse
	8,  // 16: blast.v1.time.TimeService.GetCurrentFullWeekBasedMonth:output_type -> blast.v1.time.GetCurrentFullWeekBasedMonthResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_blast_v1_time_time_proto_init() }
func file_blast_v1_time_time_proto_init() {
	if File_blast_v1_time_time_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_time_time_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacebarWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentWeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpacebarWeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpacebarWeekByDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentFullWeekBasedWeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullWeekBasedWeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullWeekBasedWeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_time_time_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentFullWeekBasedMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blast_v1_time_time_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_blast_v1_time_time_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_blast_v1_time_time_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetFullWeekBasedWeekRequest_Date)(nil),
		(*GetFullWeekBasedWeekRequest_Week)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_time_time_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_time_time_proto_goTypes,
		DependencyIndexes: file_blast_v1_time_time_proto_depIdxs,
		MessageInfos:      file_blast_v1_time_time_proto_msgTypes,
	}.Build()
	File_blast_v1_time_time_proto = out.File
	file_blast_v1_time_time_proto_rawDesc = nil
	file_blast_v1_time_time_proto_goTypes = nil
	file_blast_v1_time_time_proto_depIdxs = nil
}
