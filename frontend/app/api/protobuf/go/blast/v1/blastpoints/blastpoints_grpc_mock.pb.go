// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/blastpoints/blastpoints.proto

package blastpoints

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPointsServiceClient is a mock of PointsServiceClient interface.
type MockPointsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPointsServiceClientMockRecorder
}

// MockPointsServiceClientMockRecorder is the mock recorder for MockPointsServiceClient.
type MockPointsServiceClientMockRecorder struct {
	mock *MockPointsServiceClient
}

// NewMockPointsServiceClient creates a new mock instance.
func NewMockPointsServiceClient(ctrl *gomock.Controller) *MockPointsServiceClient {
	mock := &MockPointsServiceClient{ctrl: ctrl}
	mock.recorder = &MockPointsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointsServiceClient) EXPECT() *MockPointsServiceClientMockRecorder {
	return m.recorder
}

// BatchCreateBlastGoldReservations mocks base method.
func (m *MockPointsServiceClient) BatchCreateBlastGoldReservations(ctx context.Context, in *BatchCreateBlastGoldReservationsRequest, opts ...grpc.CallOption) (*BatchCreateBlastGoldReservationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateBlastGoldReservations", varargs...)
	ret0, _ := ret[0].(*BatchCreateBlastGoldReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateBlastGoldReservations indicates an expected call of BatchCreateBlastGoldReservations.
func (mr *MockPointsServiceClientMockRecorder) BatchCreateBlastGoldReservations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateBlastGoldReservations", reflect.TypeOf((*MockPointsServiceClient)(nil).BatchCreateBlastGoldReservations), varargs...)
}

// GetBlastBalances mocks base method.
func (m *MockPointsServiceClient) GetBlastBalances(ctx context.Context, in *GetBlastBalanceRequest, opts ...grpc.CallOption) (*BlastBalance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlastBalances", varargs...)
	ret0, _ := ret[0].(*BlastBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlastBalances indicates an expected call of GetBlastBalances.
func (mr *MockPointsServiceClientMockRecorder) GetBlastBalances(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlastBalances", reflect.TypeOf((*MockPointsServiceClient)(nil).GetBlastBalances), varargs...)
}

// GetBlastPoints mocks base method.
func (m *MockPointsServiceClient) GetBlastPoints(ctx context.Context, in *GetBlastPointsRequest, opts ...grpc.CallOption) (*BlastPoints, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlastPoints", varargs...)
	ret0, _ := ret[0].(*BlastPoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlastPoints indicates an expected call of GetBlastPoints.
func (mr *MockPointsServiceClientMockRecorder) GetBlastPoints(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlastPoints", reflect.TypeOf((*MockPointsServiceClient)(nil).GetBlastPoints), varargs...)
}

// ListAllPendingTransfers mocks base method.
func (m *MockPointsServiceClient) ListAllPendingTransfers(ctx context.Context, in *ListAllPendingTransfersRequest, opts ...grpc.CallOption) (*ListAllPendingTransfersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllPendingTransfers", varargs...)
	ret0, _ := ret[0].(*ListAllPendingTransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPendingTransfers indicates an expected call of ListAllPendingTransfers.
func (mr *MockPointsServiceClientMockRecorder) ListAllPendingTransfers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPendingTransfers", reflect.TypeOf((*MockPointsServiceClient)(nil).ListAllPendingTransfers), varargs...)
}

// ListBlastGoldReservations mocks base method.
func (m *MockPointsServiceClient) ListBlastGoldReservations(ctx context.Context, in *ListBlastGoldReservationsRequest, opts ...grpc.CallOption) (*ListBlastGoldReservationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlastGoldReservations", varargs...)
	ret0, _ := ret[0].(*ListBlastGoldReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlastGoldReservations indicates an expected call of ListBlastGoldReservations.
func (mr *MockPointsServiceClientMockRecorder) ListBlastGoldReservations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlastGoldReservations", reflect.TypeOf((*MockPointsServiceClient)(nil).ListBlastGoldReservations), varargs...)
}

// TransferReservedBlastGolds mocks base method.
func (m *MockPointsServiceClient) TransferReservedBlastGolds(ctx context.Context, in *TransferReservedBlastGoldsRequest, opts ...grpc.CallOption) (*TransferReservedBlastGoldsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferReservedBlastGolds", varargs...)
	ret0, _ := ret[0].(*TransferReservedBlastGoldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferReservedBlastGolds indicates an expected call of TransferReservedBlastGolds.
func (mr *MockPointsServiceClientMockRecorder) TransferReservedBlastGolds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferReservedBlastGolds", reflect.TypeOf((*MockPointsServiceClient)(nil).TransferReservedBlastGolds), varargs...)
}

// MockPointsServiceServer is a mock of PointsServiceServer interface.
type MockPointsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPointsServiceServerMockRecorder
}

// MockPointsServiceServerMockRecorder is the mock recorder for MockPointsServiceServer.
type MockPointsServiceServerMockRecorder struct {
	mock *MockPointsServiceServer
}

// NewMockPointsServiceServer creates a new mock instance.
func NewMockPointsServiceServer(ctrl *gomock.Controller) *MockPointsServiceServer {
	mock := &MockPointsServiceServer{ctrl: ctrl}
	mock.recorder = &MockPointsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointsServiceServer) EXPECT() *MockPointsServiceServerMockRecorder {
	return m.recorder
}

// BatchCreateBlastGoldReservations mocks base method.
func (m *MockPointsServiceServer) BatchCreateBlastGoldReservations(ctx context.Context, in *BatchCreateBlastGoldReservationsRequest) (*BatchCreateBlastGoldReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateBlastGoldReservations", ctx, in)
	ret0, _ := ret[0].(*BatchCreateBlastGoldReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateBlastGoldReservations indicates an expected call of BatchCreateBlastGoldReservations.
func (mr *MockPointsServiceServerMockRecorder) BatchCreateBlastGoldReservations(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateBlastGoldReservations", reflect.TypeOf((*MockPointsServiceServer)(nil).BatchCreateBlastGoldReservations), ctx, in)
}

// GetBlastBalances mocks base method.
func (m *MockPointsServiceServer) GetBlastBalances(ctx context.Context, in *GetBlastBalanceRequest) (*BlastBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlastBalances", ctx, in)
	ret0, _ := ret[0].(*BlastBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlastBalances indicates an expected call of GetBlastBalances.
func (mr *MockPointsServiceServerMockRecorder) GetBlastBalances(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlastBalances", reflect.TypeOf((*MockPointsServiceServer)(nil).GetBlastBalances), ctx, in)
}

// GetBlastPoints mocks base method.
func (m *MockPointsServiceServer) GetBlastPoints(ctx context.Context, in *GetBlastPointsRequest) (*BlastPoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlastPoints", ctx, in)
	ret0, _ := ret[0].(*BlastPoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlastPoints indicates an expected call of GetBlastPoints.
func (mr *MockPointsServiceServerMockRecorder) GetBlastPoints(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlastPoints", reflect.TypeOf((*MockPointsServiceServer)(nil).GetBlastPoints), ctx, in)
}

// ListAllPendingTransfers mocks base method.
func (m *MockPointsServiceServer) ListAllPendingTransfers(ctx context.Context, in *ListAllPendingTransfersRequest) (*ListAllPendingTransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllPendingTransfers", ctx, in)
	ret0, _ := ret[0].(*ListAllPendingTransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPendingTransfers indicates an expected call of ListAllPendingTransfers.
func (mr *MockPointsServiceServerMockRecorder) ListAllPendingTransfers(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPendingTransfers", reflect.TypeOf((*MockPointsServiceServer)(nil).ListAllPendingTransfers), ctx, in)
}

// ListBlastGoldReservations mocks base method.
func (m *MockPointsServiceServer) ListBlastGoldReservations(ctx context.Context, in *ListBlastGoldReservationsRequest) (*ListBlastGoldReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlastGoldReservations", ctx, in)
	ret0, _ := ret[0].(*ListBlastGoldReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlastGoldReservations indicates an expected call of ListBlastGoldReservations.
func (mr *MockPointsServiceServerMockRecorder) ListBlastGoldReservations(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlastGoldReservations", reflect.TypeOf((*MockPointsServiceServer)(nil).ListBlastGoldReservations), ctx, in)
}

// TransferReservedBlastGolds mocks base method.
func (m *MockPointsServiceServer) TransferReservedBlastGolds(ctx context.Context, in *TransferReservedBlastGoldsRequest) (*TransferReservedBlastGoldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferReservedBlastGolds", ctx, in)
	ret0, _ := ret[0].(*TransferReservedBlastGoldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferReservedBlastGolds indicates an expected call of TransferReservedBlastGolds.
func (mr *MockPointsServiceServerMockRecorder) TransferReservedBlastGolds(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferReservedBlastGolds", reflect.TypeOf((*MockPointsServiceServer)(nil).TransferReservedBlastGolds), ctx, in)
}
