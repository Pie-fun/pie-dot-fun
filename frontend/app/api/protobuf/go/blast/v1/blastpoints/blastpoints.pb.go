// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/blastpoints/blastpoints.proto

package blastpoints

import (
	_ "github.com/ao-labs/spacebar-apis/go/blast/v1/nft"
	_ "github.com/ao-labs/spacebar-apis/go/blast/v1/user"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlastPointsType int32

const (
	// default value. this value is unused.
	BlastPointsType_TYPE_UNSPECIFIED BlastPointsType = 0
	BlastPointsType_LIQUIDITY        BlastPointsType = 1
	BlastPointsType_DEVELOPER        BlastPointsType = 2
)

// Enum value maps for BlastPointsType.
var (
	BlastPointsType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "LIQUIDITY",
		2: "DEVELOPER",
	}
	BlastPointsType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"LIQUIDITY":        1,
		"DEVELOPER":        2,
	}
)

func (x BlastPointsType) Enum() *BlastPointsType {
	p := new(BlastPointsType)
	*p = x
	return p
}

func (x BlastPointsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlastPointsType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_blastpoints_blastpoints_proto_enumTypes[0].Descriptor()
}

func (BlastPointsType) Type() protoreflect.EnumType {
	return &file_blast_v1_blastpoints_blastpoints_proto_enumTypes[0]
}

func (x BlastPointsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlastPointsType.Descriptor instead.
func (BlastPointsType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{0}
}

type BlastPointsTransferType int32

const (
	// default value. this value is unused.
	BlastPointsTransferType_TRANSFER_UNSPECIFIED        BlastPointsTransferType = 0
	BlastPointsTransferType_POINTS_STAKING              BlastPointsTransferType = 1
	BlastPointsTransferType_GOLD_REFERRAL               BlastPointsTransferType = 2
	BlastPointsTransferType_GOLD_RAFFLE                 BlastPointsTransferType = 3
	BlastPointsTransferType_GOLD_WEEKLY_SPACEBAR_POINTS BlastPointsTransferType = 4
	BlastPointsTransferType_GOLD_SCORE_UPLOAD           BlastPointsTransferType = 5
	BlastPointsTransferType_GOLD_SCORE_RANKINGS_WINNER  BlastPointsTransferType = 6
	BlastPointsTransferType_GOLD_COMMUNITY_EVENT        BlastPointsTransferType = 7
	BlastPointsTransferType_GOLD_SS_CHALLENGE_WINNER    BlastPointsTransferType = 100
	BlastPointsTransferType_GOLD_SS_INVITATIONAL        BlastPointsTransferType = 200
)

// Enum value maps for BlastPointsTransferType.
var (
	BlastPointsTransferType_name = map[int32]string{
		0:   "TRANSFER_UNSPECIFIED",
		1:   "POINTS_STAKING",
		2:   "GOLD_REFERRAL",
		3:   "GOLD_RAFFLE",
		4:   "GOLD_WEEKLY_SPACEBAR_POINTS",
		5:   "GOLD_SCORE_UPLOAD",
		6:   "GOLD_SCORE_RANKINGS_WINNER",
		7:   "GOLD_COMMUNITY_EVENT",
		100: "GOLD_SS_CHALLENGE_WINNER",
		200: "GOLD_SS_INVITATIONAL",
	}
	BlastPointsTransferType_value = map[string]int32{
		"TRANSFER_UNSPECIFIED":        0,
		"POINTS_STAKING":              1,
		"GOLD_REFERRAL":               2,
		"GOLD_RAFFLE":                 3,
		"GOLD_WEEKLY_SPACEBAR_POINTS": 4,
		"GOLD_SCORE_UPLOAD":           5,
		"GOLD_SCORE_RANKINGS_WINNER":  6,
		"GOLD_COMMUNITY_EVENT":        7,
		"GOLD_SS_CHALLENGE_WINNER":    100,
		"GOLD_SS_INVITATIONAL":        200,
	}
)

func (x BlastPointsTransferType) Enum() *BlastPointsTransferType {
	p := new(BlastPointsTransferType)
	*p = x
	return p
}

func (x BlastPointsTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlastPointsTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_blastpoints_blastpoints_proto_enumTypes[1].Descriptor()
}

func (BlastPointsTransferType) Type() protoreflect.EnumType {
	return &file_blast_v1_blastpoints_blastpoints_proto_enumTypes[1]
}

func (x BlastPointsTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlastPointsTransferType.Descriptor instead.
func (BlastPointsTransferType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{1}
}

type BlastPointsBatchState int32

const (
	// default value. this value is unused.
	BlastPointsBatchState_STATE_UNSPECIFIED BlastPointsBatchState = 0
	// The batch is pending.
	BlastPointsBatchState_PENDING BlastPointsBatchState = 1
	// The batch is cancelled.
	BlastPointsBatchState_CANCELLED BlastPointsBatchState = 2
	// The batch is finalizing.
	BlastPointsBatchState_FINALIZING BlastPointsBatchState = 3
	// The batch is finalized.
	BlastPointsBatchState_FINALIZED BlastPointsBatchState = 4
)

// Enum value maps for BlastPointsBatchState.
var (
	BlastPointsBatchState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "CANCELLED",
		3: "FINALIZING",
		4: "FINALIZED",
	}
	BlastPointsBatchState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"CANCELLED":         2,
		"FINALIZING":        3,
		"FINALIZED":         4,
	}
)

func (x BlastPointsBatchState) Enum() *BlastPointsBatchState {
	p := new(BlastPointsBatchState)
	*p = x
	return p
}

func (x BlastPointsBatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlastPointsBatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_blastpoints_blastpoints_proto_enumTypes[2].Descriptor()
}

func (BlastPointsBatchState) Type() protoreflect.EnumType {
	return &file_blast_v1_blastpoints_blastpoints_proto_enumTypes[2]
}

func (x BlastPointsBatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlastPointsBatchState.Descriptor instead.
func (BlastPointsBatchState) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{2}
}

type ReservationType int32

const (
	// default value. this value is unused.
	ReservationType_RESERVATION_TYPE_UNSPECIFIED ReservationType = 0
	ReservationType_WEEKLY_SPACEBAR_POINTS       ReservationType = 1
	ReservationType_REFERREE_WITH_STAKING        ReservationType = 2
	ReservationType_SCORE_RANKINGS_WINNER        ReservationType = 3
	ReservationType_SCORE_UPLOAD_BACKFILL        ReservationType = 4
	ReservationType_COMMUNITY_EVENT_WINNER       ReservationType = 5
	ReservationType_SS_CHALLENGE_WINNER          ReservationType = 6
	ReservationType_SS_INVITATIONAL              ReservationType = 7
)

// Enum value maps for ReservationType.
var (
	ReservationType_name = map[int32]string{
		0: "RESERVATION_TYPE_UNSPECIFIED",
		1: "WEEKLY_SPACEBAR_POINTS",
		2: "REFERREE_WITH_STAKING",
		3: "SCORE_RANKINGS_WINNER",
		4: "SCORE_UPLOAD_BACKFILL",
		5: "COMMUNITY_EVENT_WINNER",
		6: "SS_CHALLENGE_WINNER",
		7: "SS_INVITATIONAL",
	}
	ReservationType_value = map[string]int32{
		"RESERVATION_TYPE_UNSPECIFIED": 0,
		"WEEKLY_SPACEBAR_POINTS":       1,
		"REFERREE_WITH_STAKING":        2,
		"SCORE_RANKINGS_WINNER":        3,
		"SCORE_UPLOAD_BACKFILL":        4,
		"COMMUNITY_EVENT_WINNER":       5,
		"SS_CHALLENGE_WINNER":          6,
		"SS_INVITATIONAL":              7,
	}
)

func (x ReservationType) Enum() *ReservationType {
	p := new(ReservationType)
	*p = x
	return p
}

func (x ReservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_blastpoints_blastpoints_proto_enumTypes[3].Descriptor()
}

func (ReservationType) Type() protoreflect.EnumType {
	return &file_blast_v1_blastpoints_blastpoints_proto_enumTypes[3]
}

func (x ReservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationType.Descriptor instead.
func (ReservationType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{3}
}

type ReservationState int32

const (
	// default value. this value is unused.
	ReservationState_RESERVATION_STATE_UNSPECIFIED ReservationState = 0
	ReservationState_RESERVED                      ReservationState = 1
	ReservationState_TRANSFERRED                   ReservationState = 2
)

// Enum value maps for ReservationState.
var (
	ReservationState_name = map[int32]string{
		0: "RESERVATION_STATE_UNSPECIFIED",
		1: "RESERVED",
		2: "TRANSFERRED",
	}
	ReservationState_value = map[string]int32{
		"RESERVATION_STATE_UNSPECIFIED": 0,
		"RESERVED":                      1,
		"TRANSFERRED":                   2,
	}
)

func (x ReservationState) Enum() *ReservationState {
	p := new(ReservationState)
	*p = x
	return p
}

func (x ReservationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationState) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_blastpoints_blastpoints_proto_enumTypes[4].Descriptor()
}

func (ReservationState) Type() protoreflect.EnumType {
	return &file_blast_v1_blastpoints_blastpoints_proto_enumTypes[4]
}

func (x ReservationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationState.Descriptor instead.
func (ReservationState) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{4}
}

type GetBlastPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the points to retrieve.
	// Format: users/{address}/blastPoints
	BlastPoints string `protobuf:"bytes,1,opt,name=blast_points,json=blastPoints,proto3" json:"blast_points,omitempty"`
}

func (x *GetBlastPointsRequest) Reset() {
	*x = GetBlastPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlastPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlastPointsRequest) ProtoMessage() {}

func (x *GetBlastPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlastPointsRequest.ProtoReflect.Descriptor instead.
func (*GetBlastPointsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{0}
}

func (x *GetBlastPointsRequest) GetBlastPoints() string {
	if x != nil {
		return x.BlastPoints
	}
	return ""
}

// GetBlastBalanceRequest this rpc only can be accessed by the admin role
type GetBlastBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlastBalance string `protobuf:"bytes,1,opt,name=blast_balance,json=blastBalance,proto3" json:"blast_balance,omitempty"`
	// The contract address of the token.
	// This field is required if the blast_balance has skipped the blast_points field.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Which phase of blast points API
	Phase int32 `protobuf:"varint,3,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *GetBlastBalanceRequest) Reset() {
	*x = GetBlastBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlastBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlastBalanceRequest) ProtoMessage() {}

func (x *GetBlastBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlastBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBlastBalanceRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlastBalanceRequest) GetBlastBalance() string {
	if x != nil {
		return x.BlastBalance
	}
	return ""
}

func (x *GetBlastBalanceRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetBlastBalanceRequest) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

type ListAllPendingTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the points to retrieve.
	// Format: users/{address}/blastPoints
	BlastPoints string `protobuf:"bytes,1,opt,name=blast_points,json=blastPoints,proto3" json:"blast_points,omitempty"`
	// The type of the points to retrieve.
	// IF not set, it will return LIQUIDITY points.
	PointsType BlastPointsType `protobuf:"varint,2,opt,name=points_type,json=pointsType,proto3,enum=blast.v1.blastpoints.BlastPointsType" json:"points_type,omitempty"`
}

func (x *ListAllPendingTransfersRequest) Reset() {
	*x = ListAllPendingTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllPendingTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllPendingTransfersRequest) ProtoMessage() {}

func (x *ListAllPendingTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllPendingTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListAllPendingTransfersRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{2}
}

func (x *ListAllPendingTransfersRequest) GetBlastPoints() string {
	if x != nil {
		return x.BlastPoints
	}
	return ""
}

func (x *ListAllPendingTransfersRequest) GetPointsType() BlastPointsType {
	if x != nil {
		return x.PointsType
	}
	return BlastPointsType_TYPE_UNSPECIFIED
}

type ListAllPendingTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *ListAllPendingTransfersResponse) Reset() {
	*x = ListAllPendingTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllPendingTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllPendingTransfersResponse) ProtoMessage() {}

func (x *ListAllPendingTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllPendingTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListAllPendingTransfersResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllPendingTransfersResponse) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type BlastPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Points.
	// Format: users/{address}/blastPoints
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserAddress     string  `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	LiquidityPoints float32 `protobuf:"fixed32,3,opt,name=liquidity_points,json=liquidityPoints,proto3" json:"liquidity_points,omitempty"` // DEPRECATED in favor of phase1.liquidity_points
	DeveloperPoints float32 `protobuf:"fixed32,4,opt,name=developer_points,json=developerPoints,proto3" json:"developer_points,omitempty"` // DEPRECATED in favor of phase1.developer_points
	Phase1          *Points `protobuf:"bytes,5,opt,name=phase1,proto3" json:"phase1,omitempty"`
	Phase2          *Points `protobuf:"bytes,6,opt,name=phase2,proto3" json:"phase2,omitempty"`
}

func (x *BlastPoints) Reset() {
	*x = BlastPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlastPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastPoints) ProtoMessage() {}

func (x *BlastPoints) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastPoints.ProtoReflect.Descriptor instead.
func (*BlastPoints) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{4}
}

func (x *BlastPoints) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlastPoints) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *BlastPoints) GetLiquidityPoints() float32 {
	if x != nil {
		return x.LiquidityPoints
	}
	return 0
}

func (x *BlastPoints) GetDeveloperPoints() float32 {
	if x != nil {
		return x.DeveloperPoints
	}
	return 0
}

func (x *BlastPoints) GetPhase1() *Points {
	if x != nil {
		return x.Phase1
	}
	return nil
}

func (x *BlastPoints) GetPhase2() *Points {
	if x != nil {
		return x.Phase2
	}
	return nil
}

type Points struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityPoints float32 `protobuf:"fixed32,1,opt,name=liquidity_points,json=liquidityPoints,proto3" json:"liquidity_points,omitempty"`
	DeveloperPoints float32 `protobuf:"fixed32,2,opt,name=developer_points,json=developerPoints,proto3" json:"developer_points,omitempty"`
}

func (x *Points) Reset() {
	*x = Points{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Points) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Points) ProtoMessage() {}

func (x *Points) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Points.ProtoReflect.Descriptor instead.
func (*Points) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{5}
}

func (x *Points) GetLiquidityPoints() float32 {
	if x != nil {
		return x.LiquidityPoints
	}
	return 0
}

func (x *Points) GetDeveloperPoints() float32 {
	if x != nil {
		return x.DeveloperPoints
	}
	return 0
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAddress  string                  `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	State        BlastPointsBatchState   `protobuf:"varint,2,opt,name=state,proto3,enum=blast.v1.blastpoints.BlastPointsBatchState" json:"state,omitempty"`
	PointsType   BlastPointsType         `protobuf:"varint,3,opt,name=points_type,json=pointsType,proto3,enum=blast.v1.blastpoints.BlastPointsType" json:"points_type,omitempty"`
	Points       float32                 `protobuf:"fixed32,4,opt,name=points,proto3" json:"points,omitempty"`
	CreateTime   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Phase        int32                   `protobuf:"varint,7,opt,name=phase,proto3" json:"phase,omitempty"`
	TransferType BlastPointsTransferType `protobuf:"varint,8,opt,name=transfer_type,json=transferType,proto3,enum=blast.v1.blastpoints.BlastPointsTransferType" json:"transfer_type,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{6}
}

func (x *Transfer) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *Transfer) GetState() BlastPointsBatchState {
	if x != nil {
		return x.State
	}
	return BlastPointsBatchState_STATE_UNSPECIFIED
}

func (x *Transfer) GetPointsType() BlastPointsType {
	if x != nil {
		return x.PointsType
	}
	return BlastPointsType_TYPE_UNSPECIFIED
}

func (x *Transfer) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Transfer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Transfer) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *Transfer) GetTransferType() BlastPointsTransferType {
	if x != nil {
		return x.TransferType
	}
	return BlastPointsTransferType_TRANSFER_UNSPECIFIED
}

type TransferBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId         string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	ContractAddress string                 `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	State           BlastPointsBatchState  `protobuf:"varint,3,opt,name=state,proto3,enum=blast.v1.blastpoints.BlastPointsBatchState" json:"state,omitempty"`
	PointsType      BlastPointsType        `protobuf:"varint,4,opt,name=points_type,json=pointsType,proto3,enum=blast.v1.blastpoints.BlastPointsType" json:"points_type,omitempty"`
	Transfers       []*Transfer            `protobuf:"bytes,5,rep,name=transfers,proto3" json:"transfers,omitempty"`
	TotalPoints     float32                `protobuf:"fixed32,6,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	CreateTime      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Phase           int32                  `protobuf:"varint,8,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *TransferBatch) Reset() {
	*x = TransferBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBatch) ProtoMessage() {}

func (x *TransferBatch) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBatch.ProtoReflect.Descriptor instead.
func (*TransferBatch) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{7}
}

func (x *TransferBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *TransferBatch) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransferBatch) GetState() BlastPointsBatchState {
	if x != nil {
		return x.State
	}
	return BlastPointsBatchState_STATE_UNSPECIFIED
}

func (x *TransferBatch) GetPointsType() BlastPointsType {
	if x != nil {
		return x.PointsType
	}
	return BlastPointsType_TYPE_UNSPECIFIED
}

func (x *TransferBatch) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *TransferBatch) GetTotalPoints() float32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *TransferBatch) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TransferBatch) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

type BlastBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Liquidity *Balance `protobuf:"bytes,2,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Developer *Balance `protobuf:"bytes,3,opt,name=developer,proto3" json:"developer,omitempty"`
}

func (x *BlastBalance) Reset() {
	*x = BlastBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlastBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastBalance) ProtoMessage() {}

func (x *BlastBalance) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastBalance.ProtoReflect.Descriptor instead.
func (*BlastBalance) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{8}
}

func (x *BlastBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BlastBalance) GetLiquidity() *Balance {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

func (x *BlastBalance) GetDeveloper() *Balance {
	if x != nil {
		return x.Developer
	}
	return nil
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available               string `protobuf:"bytes,1,opt,name=available,proto3" json:"available,omitempty"`
	PendingSent             string `protobuf:"bytes,2,opt,name=pending_sent,json=pendingSent,proto3" json:"pending_sent,omitempty"`
	EarnedCumulative        string `protobuf:"bytes,3,opt,name=earned_cumulative,json=earnedCumulative,proto3" json:"earned_cumulative,omitempty"`
	ReceivedCumulative      string `protobuf:"bytes,4,opt,name=received_cumulative,json=receivedCumulative,proto3" json:"received_cumulative,omitempty"`
	FinalizedSentCumulative string `protobuf:"bytes,5,opt,name=finalized_sent_cumulative,json=finalizedSentCumulative,proto3" json:"finalized_sent_cumulative,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{9}
}

func (x *Balance) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *Balance) GetPendingSent() string {
	if x != nil {
		return x.PendingSent
	}
	return ""
}

func (x *Balance) GetEarnedCumulative() string {
	if x != nil {
		return x.EarnedCumulative
	}
	return ""
}

func (x *Balance) GetReceivedCumulative() string {
	if x != nil {
		return x.ReceivedCumulative
	}
	return ""
}

func (x *Balance) GetFinalizedSentCumulative() string {
	if x != nil {
		return x.FinalizedSentCumulative
	}
	return ""
}

// BlastGoldReservation
type BlastGoldReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the BlastGoldReservation.
	// Format: blastGoldReservations/{blast_gold_reservation}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The user address of the user to reserve the points.
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// The amount of points to reserve.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of the reservation.
	ReservationType ReservationType `protobuf:"varint,4,opt,name=reservation_type,json=reservationType,proto3,enum=blast.v1.blastpoints.ReservationType" json:"reservation_type,omitempty"`
	// The state of the reservation.
	State ReservationState `protobuf:"varint,5,opt,name=state,proto3,enum=blast.v1.blastpoints.ReservationState" json:"state,omitempty"`
	// The create time of the reservation.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The transfer time of the reservation.
	TransferTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=transfer_time,json=transferTime,proto3" json:"transfer_time,omitempty"`
}

func (x *BlastGoldReservation) Reset() {
	*x = BlastGoldReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlastGoldReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastGoldReservation) ProtoMessage() {}

func (x *BlastGoldReservation) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastGoldReservation.ProtoReflect.Descriptor instead.
func (*BlastGoldReservation) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{10}
}

func (x *BlastGoldReservation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlastGoldReservation) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *BlastGoldReservation) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BlastGoldReservation) GetReservationType() ReservationType {
	if x != nil {
		return x.ReservationType
	}
	return ReservationType_RESERVATION_TYPE_UNSPECIFIED
}

func (x *BlastGoldReservation) GetState() ReservationState {
	if x != nil {
		return x.State
	}
	return ReservationState_RESERVATION_STATE_UNSPECIFIED
}

func (x *BlastGoldReservation) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BlastGoldReservation) GetTransferTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransferTime
	}
	return nil
}

// BatchCreateBlastGoldReservationsRequest
type BatchCreateBlastGoldReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*CreateBlastGoldReservationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchCreateBlastGoldReservationsRequest) Reset() {
	*x = BatchCreateBlastGoldReservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateBlastGoldReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateBlastGoldReservationsRequest) ProtoMessage() {}

func (x *BatchCreateBlastGoldReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateBlastGoldReservationsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateBlastGoldReservationsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{11}
}

func (x *BatchCreateBlastGoldReservationsRequest) GetRequests() []*CreateBlastGoldReservationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// CreateBlastGoldReservationRequest
type CreateBlastGoldReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservation *BlastGoldReservation `protobuf:"bytes,1,opt,name=reservation,proto3" json:"reservation,omitempty"`
}

func (x *CreateBlastGoldReservationRequest) Reset() {
	*x = CreateBlastGoldReservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlastGoldReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlastGoldReservationRequest) ProtoMessage() {}

func (x *CreateBlastGoldReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlastGoldReservationRequest.ProtoReflect.Descriptor instead.
func (*CreateBlastGoldReservationRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{12}
}

func (x *CreateBlastGoldReservationRequest) GetReservation() *BlastGoldReservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

// BatchCreateBlastGoldReservationsResponse
type BatchCreateBlastGoldReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservations []*BlastGoldReservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *BatchCreateBlastGoldReservationsResponse) Reset() {
	*x = BatchCreateBlastGoldReservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateBlastGoldReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateBlastGoldReservationsResponse) ProtoMessage() {}

func (x *BatchCreateBlastGoldReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateBlastGoldReservationsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateBlastGoldReservationsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{13}
}

func (x *BatchCreateBlastGoldReservationsResponse) GetReservations() []*BlastGoldReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

// ListBlastGoldReservationsRequest
type ListBlastGoldReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of BlastGoldReservations to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 rows will be returned.
	// The maximum value is 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListBlastGoldReservationsRequest` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is ascending by create_time
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "create_time"
	//
	// Examples
	// * order_by=create_time desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListBlastGoldReservationsRequest) Reset() {
	*x = ListBlastGoldReservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlastGoldReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlastGoldReservationsRequest) ProtoMessage() {}

func (x *ListBlastGoldReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlastGoldReservationsRequest.ProtoReflect.Descriptor instead.
func (*ListBlastGoldReservationsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{14}
}

func (x *ListBlastGoldReservationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBlastGoldReservationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBlastGoldReservationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListBlastGoldReservationsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListBlastGoldReservationsResponse
type ListBlastGoldReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Reservations []*BlastGoldReservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	// The token to retrieve the next page of results, or empty if there are no more results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBlastGoldReservationsResponse) Reset() {
	*x = ListBlastGoldReservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlastGoldReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlastGoldReservationsResponse) ProtoMessage() {}

func (x *ListBlastGoldReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlastGoldReservationsResponse.ProtoReflect.Descriptor instead.
func (*ListBlastGoldReservationsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{15}
}

func (x *ListBlastGoldReservationsResponse) GetReservations() []*BlastGoldReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

func (x *ListBlastGoldReservationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// TransferReservedBlastGoldsRequest
type TransferReservedBlastGoldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the reservation to transfer
	ReservationType ReservationType `protobuf:"varint,1,opt,name=reservation_type,json=reservationType,proto3,enum=blast.v1.blastpoints.ReservationType" json:"reservation_type,omitempty"`
}

func (x *TransferReservedBlastGoldsRequest) Reset() {
	*x = TransferReservedBlastGoldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReservedBlastGoldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReservedBlastGoldsRequest) ProtoMessage() {}

func (x *TransferReservedBlastGoldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReservedBlastGoldsRequest.ProtoReflect.Descriptor instead.
func (*TransferReservedBlastGoldsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{16}
}

func (x *TransferReservedBlastGoldsRequest) GetReservationType() ReservationType {
	if x != nil {
		return x.ReservationType
	}
	return ReservationType_RESERVATION_TYPE_UNSPECIFIED
}

// TransferReservedBlastGoldsResponse
type TransferReservedBlastGoldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transfered reservations
	Reservations []*BlastGoldReservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *TransferReservedBlastGoldsResponse) Reset() {
	*x = TransferReservedBlastGoldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReservedBlastGoldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReservedBlastGoldsResponse) ProtoMessage() {}

func (x *TransferReservedBlastGoldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_blastpoints_blastpoints_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReservedBlastGoldsResponse.ProtoReflect.Descriptor instead.
func (*TransferReservedBlastGoldsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP(), []int{17}
}

func (x *TransferReservedBlastGoldsResponse) GetReservations() []*BlastGoldReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

var File_blast_v1_blastpoints_blastpoints_proto protoreflect.FileDescriptor

var file_blast_v1_blastpoints_blastpoints_proto_rawDesc = []byte{
	0x0a, 0x26, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x2f,
	0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x3a,
	0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x3a, 0x46, 0xea, 0x41, 0x43, 0x0a,
	0x24, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x6a, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa1,
	0x03, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0xe4,
	0x01, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x14, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2, 0x41,
	0x01, 0x03, 0xfa, 0x41, 0x2f, 0x0a, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f,
	0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x27, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42,
	0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x22, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x45, 0x0a, 0x0f, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x51,
	0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56, 0x45,
	0x4c, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x96, 0x02, 0x0a, 0x17, 0x42, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x41, 0x46,
	0x46, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x57, 0x45,
	0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x42, 0x41, 0x52, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x4c, 0x44, 0x5f,
	0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x10, 0x64, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0xc8, 0x01,
	0x2a, 0x69, 0x0a, 0x15, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xea, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x42, 0x41, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x53,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0x54, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x32, 0xe2,
	0x09, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x67, 0xda, 0x41, 0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x5a, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3d, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x7d, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x7d, 0x12, 0x91, 0x02, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0xda, 0x41, 0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x5a, 0x40, 0x12, 0x3e,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x41, 0xda, 0x41, 0x0d, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x7d, 0x12, 0xd3, 0x01, 0x0a, 0x20, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0xaf, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x37, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3b,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_blastpoints_blastpoints_proto_rawDescOnce sync.Once
	file_blast_v1_blastpoints_blastpoints_proto_rawDescData = file_blast_v1_blastpoints_blastpoints_proto_rawDesc
)

func file_blast_v1_blastpoints_blastpoints_proto_rawDescGZIP() []byte {
	file_blast_v1_blastpoints_blastpoints_proto_rawDescOnce.Do(func() {
		file_blast_v1_blastpoints_blastpoints_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_blastpoints_blastpoints_proto_rawDescData)
	})
	return file_blast_v1_blastpoints_blastpoints_proto_rawDescData
}

var file_blast_v1_blastpoints_blastpoints_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_blast_v1_blastpoints_blastpoints_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_blast_v1_blastpoints_blastpoints_proto_goTypes = []interface{}{
	(BlastPointsType)(0),                             // 0: blast.v1.blastpoints.BlastPointsType
	(BlastPointsTransferType)(0),                     // 1: blast.v1.blastpoints.BlastPointsTransferType
	(BlastPointsBatchState)(0),                       // 2: blast.v1.blastpoints.BlastPointsBatchState
	(ReservationType)(0),                             // 3: blast.v1.blastpoints.ReservationType
	(ReservationState)(0),                            // 4: blast.v1.blastpoints.ReservationState
	(*GetBlastPointsRequest)(nil),                    // 5: blast.v1.blastpoints.GetBlastPointsRequest
	(*GetBlastBalanceRequest)(nil),                   // 6: blast.v1.blastpoints.GetBlastBalanceRequest
	(*ListAllPendingTransfersRequest)(nil),           // 7: blast.v1.blastpoints.ListAllPendingTransfersRequest
	(*ListAllPendingTransfersResponse)(nil),          // 8: blast.v1.blastpoints.ListAllPendingTransfersResponse
	(*BlastPoints)(nil),                              // 9: blast.v1.blastpoints.BlastPoints
	(*Points)(nil),                                   // 10: blast.v1.blastpoints.Points
	(*Transfer)(nil),                                 // 11: blast.v1.blastpoints.Transfer
	(*TransferBatch)(nil),                            // 12: blast.v1.blastpoints.TransferBatch
	(*BlastBalance)(nil),                             // 13: blast.v1.blastpoints.BlastBalance
	(*Balance)(nil),                                  // 14: blast.v1.blastpoints.Balance
	(*BlastGoldReservation)(nil),                     // 15: blast.v1.blastpoints.BlastGoldReservation
	(*BatchCreateBlastGoldReservationsRequest)(nil),  // 16: blast.v1.blastpoints.BatchCreateBlastGoldReservationsRequest
	(*CreateBlastGoldReservationRequest)(nil),        // 17: blast.v1.blastpoints.CreateBlastGoldReservationRequest
	(*BatchCreateBlastGoldReservationsResponse)(nil), // 18: blast.v1.blastpoints.BatchCreateBlastGoldReservationsResponse
	(*ListBlastGoldReservationsRequest)(nil),         // 19: blast.v1.blastpoints.ListBlastGoldReservationsRequest
	(*ListBlastGoldReservationsResponse)(nil),        // 20: blast.v1.blastpoints.ListBlastGoldReservationsResponse
	(*TransferReservedBlastGoldsRequest)(nil),        // 21: blast.v1.blastpoints.TransferReservedBlastGoldsRequest
	(*TransferReservedBlastGoldsResponse)(nil),       // 22: blast.v1.blastpoints.TransferReservedBlastGoldsResponse
	(*timestamppb.Timestamp)(nil),                    // 23: google.protobuf.Timestamp
}
var file_blast_v1_blastpoints_blastpoints_proto_depIdxs = []int32{
	0,  // 0: blast.v1.blastpoints.ListAllPendingTransfersRequest.points_type:type_name -> blast.v1.blastpoints.BlastPointsType
	11, // 1: blast.v1.blastpoints.ListAllPendingTransfersResponse.transfers:type_name -> blast.v1.blastpoints.Transfer
	10, // 2: blast.v1.blastpoints.BlastPoints.phase1:type_name -> blast.v1.blastpoints.Points
	10, // 3: blast.v1.blastpoints.BlastPoints.phase2:type_name -> blast.v1.blastpoints.Points
	2,  // 4: blast.v1.blastpoints.Transfer.state:type_name -> blast.v1.blastpoints.BlastPointsBatchState
	0,  // 5: blast.v1.blastpoints.Transfer.points_type:type_name -> blast.v1.blastpoints.BlastPointsType
	23, // 6: blast.v1.blastpoints.Transfer.create_time:type_name -> google.protobuf.Timestamp
	1,  // 7: blast.v1.blastpoints.Transfer.transfer_type:type_name -> blast.v1.blastpoints.BlastPointsTransferType
	2,  // 8: blast.v1.blastpoints.TransferBatch.state:type_name -> blast.v1.blastpoints.BlastPointsBatchState
	0,  // 9: blast.v1.blastpoints.TransferBatch.points_type:type_name -> blast.v1.blastpoints.BlastPointsType
	11, // 10: blast.v1.blastpoints.TransferBatch.transfers:type_name -> blast.v1.blastpoints.Transfer
	23, // 11: blast.v1.blastpoints.TransferBatch.create_time:type_name -> google.protobuf.Timestamp
	14, // 12: blast.v1.blastpoints.BlastBalance.liquidity:type_name -> blast.v1.blastpoints.Balance
	14, // 13: blast.v1.blastpoints.BlastBalance.developer:type_name -> blast.v1.blastpoints.Balance
	3,  // 14: blast.v1.blastpoints.BlastGoldReservation.reservation_type:type_name -> blast.v1.blastpoints.ReservationType
	4,  // 15: blast.v1.blastpoints.BlastGoldReservation.state:type_name -> blast.v1.blastpoints.ReservationState
	23, // 16: blast.v1.blastpoints.BlastGoldReservation.create_time:type_name -> google.protobuf.Timestamp
	23, // 17: blast.v1.blastpoints.BlastGoldReservation.transfer_time:type_name -> google.protobuf.Timestamp
	17, // 18: blast.v1.blastpoints.BatchCreateBlastGoldReservationsRequest.requests:type_name -> blast.v1.blastpoints.CreateBlastGoldReservationRequest
	15, // 19: blast.v1.blastpoints.CreateBlastGoldReservationRequest.reservation:type_name -> blast.v1.blastpoints.BlastGoldReservation
	15, // 20: blast.v1.blastpoints.BatchCreateBlastGoldReservationsResponse.reservations:type_name -> blast.v1.blastpoints.BlastGoldReservation
	15, // 21: blast.v1.blastpoints.ListBlastGoldReservationsResponse.reservations:type_name -> blast.v1.blastpoints.BlastGoldReservation
	3,  // 22: blast.v1.blastpoints.TransferReservedBlastGoldsRequest.reservation_type:type_name -> blast.v1.blastpoints.ReservationType
	15, // 23: blast.v1.blastpoints.TransferReservedBlastGoldsResponse.reservations:type_name -> blast.v1.blastpoints.BlastGoldReservation
	5,  // 24: blast.v1.blastpoints.PointsService.GetBlastPoints:input_type -> blast.v1.blastpoints.GetBlastPointsRequest
	7,  // 25: blast.v1.blastpoints.PointsService.ListAllPendingTransfers:input_type -> blast.v1.blastpoints.ListAllPendingTransfersRequest
	6,  // 26: blast.v1.blastpoints.PointsService.GetBlastBalances:input_type -> blast.v1.blastpoints.GetBlastBalanceRequest
	16, // 27: blast.v1.blastpoints.PointsService.BatchCreateBlastGoldReservations:input_type -> blast.v1.blastpoints.BatchCreateBlastGoldReservationsRequest
	19, // 28: blast.v1.blastpoints.PointsService.ListBlastGoldReservations:input_type -> blast.v1.blastpoints.ListBlastGoldReservationsRequest
	21, // 29: blast.v1.blastpoints.PointsService.TransferReservedBlastGolds:input_type -> blast.v1.blastpoints.TransferReservedBlastGoldsRequest
	9,  // 30: blast.v1.blastpoints.PointsService.GetBlastPoints:output_type -> blast.v1.blastpoints.BlastPoints
	8,  // 31: blast.v1.blastpoints.PointsService.ListAllPendingTransfers:output_type -> blast.v1.blastpoints.ListAllPendingTransfersResponse
	13, // 32: blast.v1.blastpoints.PointsService.GetBlastBalances:output_type -> blast.v1.blastpoints.BlastBalance
	18, // 33: blast.v1.blastpoints.PointsService.BatchCreateBlastGoldReservations:output_type -> blast.v1.blastpoints.BatchCreateBlastGoldReservationsResponse
	20, // 34: blast.v1.blastpoints.PointsService.ListBlastGoldReservations:output_type -> blast.v1.blastpoints.ListBlastGoldReservationsResponse
	22, // 35: blast.v1.blastpoints.PointsService.TransferReservedBlastGolds:output_type -> blast.v1.blastpoints.TransferReservedBlastGoldsResponse
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_blast_v1_blastpoints_blastpoints_proto_init() }
func file_blast_v1_blastpoints_blastpoints_proto_init() {
	if File_blast_v1_blastpoints_blastpoints_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlastPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlastBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllPendingTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllPendingTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlastPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Points); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlastBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlastGoldReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateBlastGoldReservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlastGoldReservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateBlastGoldReservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlastGoldReservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlastGoldReservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReservedBlastGoldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_blastpoints_blastpoints_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReservedBlastGoldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_blastpoints_blastpoints_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_blastpoints_blastpoints_proto_goTypes,
		DependencyIndexes: file_blast_v1_blastpoints_blastpoints_proto_depIdxs,
		EnumInfos:         file_blast_v1_blastpoints_blastpoints_proto_enumTypes,
		MessageInfos:      file_blast_v1_blastpoints_blastpoints_proto_msgTypes,
	}.Build()
	File_blast_v1_blastpoints_blastpoints_proto = out.File
	file_blast_v1_blastpoints_blastpoints_proto_rawDesc = nil
	file_blast_v1_blastpoints_blastpoints_proto_goTypes = nil
	file_blast_v1_blastpoints_blastpoints_proto_depIdxs = nil
}
