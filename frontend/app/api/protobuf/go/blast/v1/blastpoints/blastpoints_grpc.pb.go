// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/blastpoints/blastpoints.proto

package blastpoints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointsServiceClient is the client API for PointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsServiceClient interface {
	// GetBlastPoints
	GetBlastPoints(ctx context.Context, in *GetBlastPointsRequest, opts ...grpc.CallOption) (*BlastPoints, error)
	// ListAllPendingTransferBatches
	ListAllPendingTransfers(ctx context.Context, in *ListAllPendingTransfersRequest, opts ...grpc.CallOption) (*ListAllPendingTransfersResponse, error)
	// GetBlastBalances
	GetBlastBalances(ctx context.Context, in *GetBlastBalanceRequest, opts ...grpc.CallOption) (*BlastBalance, error)
	// BatchCreateBlastGoldReservations
	BatchCreateBlastGoldReservations(ctx context.Context, in *BatchCreateBlastGoldReservationsRequest, opts ...grpc.CallOption) (*BatchCreateBlastGoldReservationsResponse, error)
	// ListBlastGoldReservations
	ListBlastGoldReservations(ctx context.Context, in *ListBlastGoldReservationsRequest, opts ...grpc.CallOption) (*ListBlastGoldReservationsResponse, error)
	// TransferReservedBlastGolds
	// Transfer gold by the reservations.
	// admin api, not public
	TransferReservedBlastGolds(ctx context.Context, in *TransferReservedBlastGoldsRequest, opts ...grpc.CallOption) (*TransferReservedBlastGoldsResponse, error)
}

type pointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsServiceClient(cc grpc.ClientConnInterface) PointsServiceClient {
	return &pointsServiceClient{cc}
}

func (c *pointsServiceClient) GetBlastPoints(ctx context.Context, in *GetBlastPointsRequest, opts ...grpc.CallOption) (*BlastPoints, error) {
	out := new(BlastPoints)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/GetBlastPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) ListAllPendingTransfers(ctx context.Context, in *ListAllPendingTransfersRequest, opts ...grpc.CallOption) (*ListAllPendingTransfersResponse, error) {
	out := new(ListAllPendingTransfersResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/ListAllPendingTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) GetBlastBalances(ctx context.Context, in *GetBlastBalanceRequest, opts ...grpc.CallOption) (*BlastBalance, error) {
	out := new(BlastBalance)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/GetBlastBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) BatchCreateBlastGoldReservations(ctx context.Context, in *BatchCreateBlastGoldReservationsRequest, opts ...grpc.CallOption) (*BatchCreateBlastGoldReservationsResponse, error) {
	out := new(BatchCreateBlastGoldReservationsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/BatchCreateBlastGoldReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) ListBlastGoldReservations(ctx context.Context, in *ListBlastGoldReservationsRequest, opts ...grpc.CallOption) (*ListBlastGoldReservationsResponse, error) {
	out := new(ListBlastGoldReservationsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/ListBlastGoldReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsServiceClient) TransferReservedBlastGolds(ctx context.Context, in *TransferReservedBlastGoldsRequest, opts ...grpc.CallOption) (*TransferReservedBlastGoldsResponse, error) {
	out := new(TransferReservedBlastGoldsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.blastpoints.PointsService/TransferReservedBlastGolds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsServiceServer is the server API for PointsService service.
// All implementations must embed UnimplementedPointsServiceServer
// for forward compatibility
type PointsServiceServer interface {
	// GetBlastPoints
	GetBlastPoints(context.Context, *GetBlastPointsRequest) (*BlastPoints, error)
	// ListAllPendingTransferBatches
	ListAllPendingTransfers(context.Context, *ListAllPendingTransfersRequest) (*ListAllPendingTransfersResponse, error)
	// GetBlastBalances
	GetBlastBalances(context.Context, *GetBlastBalanceRequest) (*BlastBalance, error)
	// BatchCreateBlastGoldReservations
	BatchCreateBlastGoldReservations(context.Context, *BatchCreateBlastGoldReservationsRequest) (*BatchCreateBlastGoldReservationsResponse, error)
	// ListBlastGoldReservations
	ListBlastGoldReservations(context.Context, *ListBlastGoldReservationsRequest) (*ListBlastGoldReservationsResponse, error)
	// TransferReservedBlastGolds
	// Transfer gold by the reservations.
	// admin api, not public
	TransferReservedBlastGolds(context.Context, *TransferReservedBlastGoldsRequest) (*TransferReservedBlastGoldsResponse, error)
	mustEmbedUnimplementedPointsServiceServer()
}

// UnimplementedPointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPointsServiceServer struct {
}

func (UnimplementedPointsServiceServer) GetBlastPoints(context.Context, *GetBlastPointsRequest) (*BlastPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlastPoints not implemented")
}
func (UnimplementedPointsServiceServer) ListAllPendingTransfers(context.Context, *ListAllPendingTransfersRequest) (*ListAllPendingTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllPendingTransfers not implemented")
}
func (UnimplementedPointsServiceServer) GetBlastBalances(context.Context, *GetBlastBalanceRequest) (*BlastBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlastBalances not implemented")
}
func (UnimplementedPointsServiceServer) BatchCreateBlastGoldReservations(context.Context, *BatchCreateBlastGoldReservationsRequest) (*BatchCreateBlastGoldReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateBlastGoldReservations not implemented")
}
func (UnimplementedPointsServiceServer) ListBlastGoldReservations(context.Context, *ListBlastGoldReservationsRequest) (*ListBlastGoldReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlastGoldReservations not implemented")
}
func (UnimplementedPointsServiceServer) TransferReservedBlastGolds(context.Context, *TransferReservedBlastGoldsRequest) (*TransferReservedBlastGoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferReservedBlastGolds not implemented")
}
func (UnimplementedPointsServiceServer) mustEmbedUnimplementedPointsServiceServer() {}

// UnsafePointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsServiceServer will
// result in compilation errors.
type UnsafePointsServiceServer interface {
	mustEmbedUnimplementedPointsServiceServer()
}

func RegisterPointsServiceServer(s grpc.ServiceRegistrar, srv PointsServiceServer) {
	s.RegisterService(&PointsService_ServiceDesc, srv)
}

func _PointsService_GetBlastPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlastPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).GetBlastPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/GetBlastPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).GetBlastPoints(ctx, req.(*GetBlastPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_ListAllPendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllPendingTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).ListAllPendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/ListAllPendingTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).ListAllPendingTransfers(ctx, req.(*ListAllPendingTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_GetBlastBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlastBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).GetBlastBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/GetBlastBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).GetBlastBalances(ctx, req.(*GetBlastBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_BatchCreateBlastGoldReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateBlastGoldReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).BatchCreateBlastGoldReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/BatchCreateBlastGoldReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).BatchCreateBlastGoldReservations(ctx, req.(*BatchCreateBlastGoldReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_ListBlastGoldReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlastGoldReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).ListBlastGoldReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/ListBlastGoldReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).ListBlastGoldReservations(ctx, req.(*ListBlastGoldReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointsService_TransferReservedBlastGolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReservedBlastGoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServiceServer).TransferReservedBlastGolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.blastpoints.PointsService/TransferReservedBlastGolds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServiceServer).TransferReservedBlastGolds(ctx, req.(*TransferReservedBlastGoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointsService_ServiceDesc is the grpc.ServiceDesc for PointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.blastpoints.PointsService",
	HandlerType: (*PointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlastPoints",
			Handler:    _PointsService_GetBlastPoints_Handler,
		},
		{
			MethodName: "ListAllPendingTransfers",
			Handler:    _PointsService_ListAllPendingTransfers_Handler,
		},
		{
			MethodName: "GetBlastBalances",
			Handler:    _PointsService_GetBlastBalances_Handler,
		},
		{
			MethodName: "BatchCreateBlastGoldReservations",
			Handler:    _PointsService_BatchCreateBlastGoldReservations_Handler,
		},
		{
			MethodName: "ListBlastGoldReservations",
			Handler:    _PointsService_ListBlastGoldReservations_Handler,
		},
		{
			MethodName: "TransferReservedBlastGolds",
			Handler:    _PointsService_TransferReservedBlastGolds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/blastpoints/blastpoints.proto",
}
