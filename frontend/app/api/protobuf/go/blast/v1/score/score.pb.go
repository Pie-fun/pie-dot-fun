// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/score/score.proto

package score

import (
	chain "github.com/ao-labs/spacebar-apis/go/blast/v1/chain"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameType int32

const (
	// default value. this value is unused.
	GameType_GAME_TYPE_UNSPECIFIED GameType = 0
	GameType_STAR_SWEEPERS         GameType = 1
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "GAME_TYPE_UNSPECIFIED",
		1: "STAR_SWEEPERS",
	}
	GameType_value = map[string]int32{
		"GAME_TYPE_UNSPECIFIED": 0,
		"STAR_SWEEPERS":         1,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[0].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[0]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{0}
}

type PlayMode int32

const (
	// default value. this value is unused.
	PlayMode_PLAY_MODE_UNSPECIFIED PlayMode = 0
	PlayMode_SINGLE_PLAYER PlayMode = 1
)

// Enum value maps for PlayMode.
var (
	PlayMode_name = map[int32]string{
		0: "PLAY_MODE_UNSPECIFIED",
		1: "SINGLE_PLAYER",
	}
	PlayMode_value = map[string]int32{
		"PLAY_MODE_UNSPECIFIED": 0,
		"SINGLE_PLAYER":         1,
	}
)

func (x PlayMode) Enum() *PlayMode {
	p := new(PlayMode)
	*p = x
	return p
}

func (x PlayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[1].Descriptor()
}

func (PlayMode) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[1]
}

func (x PlayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayMode.Descriptor instead.
func (PlayMode) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{1}
}

// The state of score
type ScoreState int32

const (
	// default value. this value is unused.
	ScoreState_SCORE_STATE_UNSPECIFIED ScoreState = 0
	ScoreState_CREATED                 ScoreState = 1
	// The score is uploaded to onchain.
	ScoreState_UPLOADED ScoreState = 2
)

// Enum value maps for ScoreState.
var (
	ScoreState_name = map[int32]string{
		0: "SCORE_STATE_UNSPECIFIED",
		1: "CREATED",
		2: "UPLOADED",
	}
	ScoreState_value = map[string]int32{
		"SCORE_STATE_UNSPECIFIED": 0,
		"CREATED":                 1,
		"UPLOADED":                2,
	}
)

func (x ScoreState) Enum() *ScoreState {
	p := new(ScoreState)
	*p = x
	return p
}

func (x ScoreState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreState) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[2].Descriptor()
}

func (ScoreState) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[2]
}

func (x ScoreState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreState.Descriptor instead.
func (ScoreState) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{2}
}

type ScoreRankUserType int32

const (
	// default value. this value is unused.
	ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED ScoreRankUserType = 0
	// All users in the spacebar.
	// Ranking persists regardless of the square.
	ScoreRankUserType_ALL_USERS ScoreRankUserType = 1
	// All members in the square.
	// Ranking persists only when the user is a member of the snapshot square.
	ScoreRankUserType_ALL_MEMBERS ScoreRankUserType = 2
	// Members in the specific square.
	// Ranking persists only when the user is a member of the snapshot square.
	ScoreRankUserType_SQUARE_MEMBERS ScoreRankUserType = 3
	// All users in the specific square.
	// Ranking persists regardless of the square.
	ScoreRankUserType_SQUARE_USERS ScoreRankUserType = 4
)

// Enum value maps for ScoreRankUserType.
var (
	ScoreRankUserType_name = map[int32]string{
		0: "SCORE_RANK_USER_TYPE_UNSPECIFIED",
		1: "ALL_USERS",
		2: "ALL_MEMBERS",
		3: "SQUARE_MEMBERS",
		4: "SQUARE_USERS",
	}
	ScoreRankUserType_value = map[string]int32{
		"SCORE_RANK_USER_TYPE_UNSPECIFIED": 0,
		"ALL_USERS":                        1,
		"ALL_MEMBERS":                      2,
		"SQUARE_MEMBERS":                   3,
		"SQUARE_USERS":                     4,
	}
)

func (x ScoreRankUserType) Enum() *ScoreRankUserType {
	p := new(ScoreRankUserType)
	*p = x
	return p
}

func (x ScoreRankUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRankUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[3].Descriptor()
}

func (ScoreRankUserType) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[3]
}

func (x ScoreRankUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRankUserType.Descriptor instead.
func (ScoreRankUserType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{3}
}

type ScoreRankTimePeriod int32

const (
	// default value. this value is unused.
	ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED ScoreRankTimePeriod = 0
	ScoreRankTimePeriod_ALL_TIME                           ScoreRankTimePeriod = 1
	ScoreRankTimePeriod_WEEKLY                             ScoreRankTimePeriod = 2
	ScoreRankTimePeriod_WEEKLY_FULL_WEEK_BASED             ScoreRankTimePeriod = 21
	ScoreRankTimePeriod_MONTHLY_FULL_WEEK_BASED            ScoreRankTimePeriod = 31
)

// Enum value maps for ScoreRankTimePeriod.
var (
	ScoreRankTimePeriod_name = map[int32]string{
		0:  "SCORE_RANK_TIME_PERIOD_UNSPECIFIED",
		1:  "ALL_TIME",
		2:  "WEEKLY",
		21: "WEEKLY_FULL_WEEK_BASED",
		31: "MONTHLY_FULL_WEEK_BASED",
	}
	ScoreRankTimePeriod_value = map[string]int32{
		"SCORE_RANK_TIME_PERIOD_UNSPECIFIED": 0,
		"ALL_TIME":                           1,
		"WEEKLY":                             2,
		"WEEKLY_FULL_WEEK_BASED":             21,
		"MONTHLY_FULL_WEEK_BASED":            31,
	}
)

func (x ScoreRankTimePeriod) Enum() *ScoreRankTimePeriod {
	p := new(ScoreRankTimePeriod)
	*p = x
	return p
}

func (x ScoreRankTimePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRankTimePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[4].Descriptor()
}

func (ScoreRankTimePeriod) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[4]
}

func (x ScoreRankTimePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRankTimePeriod.Descriptor instead.
func (ScoreRankTimePeriod) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{4}
}

type ScoreRankScoreType int32

const (
	// default value. this value is unused.
	ScoreRankScoreType_SCORE_RANK_SCORE_TYPE_UNSPECIFIED ScoreRankScoreType = 0
	ScoreRankScoreType_BEST_SCORE                        ScoreRankScoreType = 1
	ScoreRankScoreType_CUMULATIVE_SCORE                  ScoreRankScoreType = 2
)

// Enum value maps for ScoreRankScoreType.
var (
	ScoreRankScoreType_name = map[int32]string{
		0: "SCORE_RANK_SCORE_TYPE_UNSPECIFIED",
		1: "BEST_SCORE",
		2: "CUMULATIVE_SCORE",
	}
	ScoreRankScoreType_value = map[string]int32{
		"SCORE_RANK_SCORE_TYPE_UNSPECIFIED": 0,
		"BEST_SCORE":                        1,
		"CUMULATIVE_SCORE":                  2,
	}
)

func (x ScoreRankScoreType) Enum() *ScoreRankScoreType {
	p := new(ScoreRankScoreType)
	*p = x
	return p
}

func (x ScoreRankScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRankScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[5].Descriptor()
}

func (ScoreRankScoreType) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[5]
}

func (x ScoreRankScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRankScoreType.Descriptor instead.
func (ScoreRankScoreType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{5}
}

type ScoreRankEntitiyType int32

const (
	// default value. this value is unused.
	ScoreRankEntitiyType_SCORE_RANK_ENTITY_TYPE_UNSPECIFIED ScoreRankEntitiyType = 0
	ScoreRankEntitiyType_USER                               ScoreRankEntitiyType = 1
	ScoreRankEntitiyType_SQUARE                             ScoreRankEntitiyType = 2
)

// Enum value maps for ScoreRankEntitiyType.
var (
	ScoreRankEntitiyType_name = map[int32]string{
		0: "SCORE_RANK_ENTITY_TYPE_UNSPECIFIED",
		1: "USER",
		2: "SQUARE",
	}
	ScoreRankEntitiyType_value = map[string]int32{
		"SCORE_RANK_ENTITY_TYPE_UNSPECIFIED": 0,
		"USER":                               1,
		"SQUARE":                             2,
	}
)

func (x ScoreRankEntitiyType) Enum() *ScoreRankEntitiyType {
	p := new(ScoreRankEntitiyType)
	*p = x
	return p
}

func (x ScoreRankEntitiyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRankEntitiyType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[6].Descriptor()
}

func (ScoreRankEntitiyType) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[6]
}

func (x ScoreRankEntitiyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRankEntitiyType.Descriptor instead.
func (ScoreRankEntitiyType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{6}
}

// RewardType
type RewardRequest_RewardType int32

const (
	// default value.
	RewardRequest_REWARD_TYPE_UNSPECIFIED           RewardRequest_RewardType = 0
	RewardRequest_WEEKLY_ALL_USERS_LEADERBOARD      RewardRequest_RewardType = 1
	RewardRequest_WEEKLY_SQUARE_MEMBERS_LEADERBOARD RewardRequest_RewardType = 2
	RewardRequest_WEEKLY_SS_CHALLENGE               RewardRequest_RewardType = 3
	RewardRequest_MONTHLY_SS_CHALLENGE              RewardRequest_RewardType = 4
	RewardRequest_MONTHLY_SQUARE_COMPETITION        RewardRequest_RewardType = 5
)

// Enum value maps for RewardRequest_RewardType.
var (
	RewardRequest_RewardType_name = map[int32]string{
		0: "REWARD_TYPE_UNSPECIFIED",
		1: "WEEKLY_ALL_USERS_LEADERBOARD",
		2: "WEEKLY_SQUARE_MEMBERS_LEADERBOARD",
		3: "WEEKLY_SS_CHALLENGE",
		4: "MONTHLY_SS_CHALLENGE",
		5: "MONTHLY_SQUARE_COMPETITION",
	}
	RewardRequest_RewardType_value = map[string]int32{
		"REWARD_TYPE_UNSPECIFIED":           0,
		"WEEKLY_ALL_USERS_LEADERBOARD":      1,
		"WEEKLY_SQUARE_MEMBERS_LEADERBOARD": 2,
		"WEEKLY_SS_CHALLENGE":               3,
		"MONTHLY_SS_CHALLENGE":              4,
		"MONTHLY_SQUARE_COMPETITION":        5,
	}
)

func (x RewardRequest_RewardType) Enum() *RewardRequest_RewardType {
	p := new(RewardRequest_RewardType)
	*p = x
	return p
}

func (x RewardRequest_RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardRequest_RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_blast_v1_score_score_proto_enumTypes[7].Descriptor()
}

func (RewardRequest_RewardType) Type() protoreflect.EnumType {
	return &file_blast_v1_score_score_proto_enumTypes[7]
}

func (x RewardRequest_RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardRequest_RewardType.Descriptor instead.
func (RewardRequest_RewardType) EnumDescriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{0, 0}
}

// RewardRequest
type RewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type
	Type RewardRequest_RewardType `protobuf:"varint,1,opt,name=type,proto3,enum=blast.v1.score.RewardRequest_RewardType" json:"type,omitempty"`
}

func (x *RewardRequest) Reset() {
	*x = RewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRequest) ProtoMessage() {}

func (x *RewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRequest.ProtoReflect.Descriptor instead.
func (*RewardRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{0}
}

func (x *RewardRequest) GetType() RewardRequest_RewardType {
	if x != nil {
		return x.Type
	}
	return RewardRequest_REWARD_TYPE_UNSPECIFIED
}

// RewardResponse
type RewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user rewards
	UserRewards []*RewardResponse_UserReward `protobuf:"bytes,1,rep,name=user_rewards,json=userRewards,proto3" json:"user_rewards,omitempty"`
}

func (x *RewardResponse) Reset() {
	*x = RewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardResponse) ProtoMessage() {}

func (x *RewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardResponse.ProtoReflect.Descriptor instead.
func (*RewardResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{1}
}

func (x *RewardResponse) GetUserRewards() []*RewardResponse_UserReward {
	if x != nil {
		return x.UserRewards
	}
	return nil
}

type ValidateUploadScoreAndSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score to create.
	// Format: users/{user_address}/scores/{game_id}
	Score string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ValidateUploadScoreAndSignRequest) Reset() {
	*x = ValidateUploadScoreAndSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUploadScoreAndSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUploadScoreAndSignRequest) ProtoMessage() {}

func (x *ValidateUploadScoreAndSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUploadScoreAndSignRequest.ProtoReflect.Descriptor instead.
func (*ValidateUploadScoreAndSignRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateUploadScoreAndSignRequest) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *ValidateUploadScoreAndSignRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ValidateUploadScoreAndSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string                   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Params    *chain.UploadScoreParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ValidateUploadScoreAndSignResponse) Reset() {
	*x = ValidateUploadScoreAndSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUploadScoreAndSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUploadScoreAndSignResponse) ProtoMessage() {}

func (x *ValidateUploadScoreAndSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUploadScoreAndSignResponse.ProtoReflect.Descriptor instead.
func (*ValidateUploadScoreAndSignResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateUploadScoreAndSignResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ValidateUploadScoreAndSignResponse) GetParams() *chain.UploadScoreParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// CreateScoreRequest
type CreateScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score to create.
	// Format: users/{user_address}/scores/{game_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// score to create
	Score *Score `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CreateScoreRequest) Reset() {
	*x = CreateScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScoreRequest) ProtoMessage() {}

func (x *CreateScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScoreRequest.ProtoReflect.Descriptor instead.
func (*CreateScoreRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{4}
}

func (x *CreateScoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateScoreRequest) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type GetScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score to retrieve.
	// Format: users/{user_address}/scores/{game_id}
	Score string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GetScoreRequest) Reset() {
	*x = GetScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScoreRequest) ProtoMessage() {}

func (x *GetScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScoreRequest.ProtoReflect.Descriptor instead.
func (*GetScoreRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{5}
}

func (x *GetScoreRequest) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type GetUserBestScoreRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score ranking to retrieve.
	// Format: rankings/bestScores/users/{user_address}
	UserBestScoreRanking string `protobuf:"bytes,1,opt,name=userBestScoreRanking,proto3" json:"userBestScoreRanking,omitempty"`
	// The user type of the ranking to retrieve.
	UserType ScoreRankUserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,3,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
	// * snapshot_square="squares/{square_token_id}"
	// * snapshot_square_token_id="{square_token_id}"
	//
	// If rank type is ALL_USERS, the context should be empty.
	//
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	Context string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *GetUserBestScoreRankingRequest) Reset() {
	*x = GetUserBestScoreRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBestScoreRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBestScoreRankingRequest) ProtoMessage() {}

func (x *GetUserBestScoreRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBestScoreRankingRequest.ProtoReflect.Descriptor instead.
func (*GetUserBestScoreRankingRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserBestScoreRankingRequest) GetUserBestScoreRanking() string {
	if x != nil {
		return x.UserBestScoreRanking
	}
	return ""
}

func (x *GetUserBestScoreRankingRequest) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *GetUserBestScoreRankingRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *GetUserBestScoreRankingRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ListUserBestScoreRankingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user type of the ranking to retrieve.
	UserType ScoreRankUserType `protobuf:"varint,1,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,2,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
	// * snapshot_square="squares/{square_token_id}"
	// * snapshot_square_token_id="{square_token_id}"
	//
	// If rank type is ALL_USERS, the context should be empty.
	//
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListUserBestScoreRankingsRequest) Reset() {
	*x = ListUserBestScoreRankingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserBestScoreRankingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBestScoreRankingsRequest) ProtoMessage() {}

func (x *ListUserBestScoreRankingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBestScoreRankingsRequest.ProtoReflect.Descriptor instead.
func (*ListUserBestScoreRankingsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{7}
}

func (x *ListUserBestScoreRankingsRequest) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *ListUserBestScoreRankingsRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *ListUserBestScoreRankingsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListUserBestScoreRankingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserBestScoreRankingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUserBestScoreRankingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Rankings []*UserBestScoreRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUserBestScoreRankingsResponse) Reset() {
	*x = ListUserBestScoreRankingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserBestScoreRankingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBestScoreRankingsResponse) ProtoMessage() {}

func (x *ListUserBestScoreRankingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBestScoreRankingsResponse.ProtoReflect.Descriptor instead.
func (*ListUserBestScoreRankingsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserBestScoreRankingsResponse) GetRankings() []*UserBestScoreRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *ListUserBestScoreRankingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserCumulativeScoreRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score ranking to retrieve.
	// Format: rankings/cumulativeScores/users/{user_address}
	UserCumulativeScoreRanking string `protobuf:"bytes,1,opt,name=userCumulativeScoreRanking,proto3" json:"userCumulativeScoreRanking,omitempty"`
	// The type of ranking to retrieve.
	UserType ScoreRankUserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,3,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
	// * snapshot_square="squares/{square_token_id}"
	// * snapshot_square_token_id="{square_token_id}"
	//
	// If rank type is ALL_USERS, the context should be empty.
	//
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	// If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_week="2024-08-W1"
	// If time period is MONTH_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_month="2024-08"
	Context string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *GetUserCumulativeScoreRankingRequest) Reset() {
	*x = GetUserCumulativeScoreRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCumulativeScoreRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCumulativeScoreRankingRequest) ProtoMessage() {}

func (x *GetUserCumulativeScoreRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCumulativeScoreRankingRequest.ProtoReflect.Descriptor instead.
func (*GetUserCumulativeScoreRankingRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserCumulativeScoreRankingRequest) GetUserCumulativeScoreRanking() string {
	if x != nil {
		return x.UserCumulativeScoreRanking
	}
	return ""
}

func (x *GetUserCumulativeScoreRankingRequest) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *GetUserCumulativeScoreRankingRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *GetUserCumulativeScoreRankingRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ListUserCumulativeScoreRankingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of ranking to retrieve.
	UserType ScoreRankUserType `protobuf:"varint,1,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,2,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
	// * snapshot_square="squares/{square_token_id}"
	// * snapshot_square_token_id="{square_token_id}"
	//
	// If rank type is ALL_USERS, the context should be empty.
	//
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	// If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_week="2024-08-W1"
	// If time period is MONTH_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_month="2024-08"
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListUserCumulativeScoreRankingsRequest) Reset() {
	*x = ListUserCumulativeScoreRankingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCumulativeScoreRankingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCumulativeScoreRankingsRequest) ProtoMessage() {}

func (x *ListUserCumulativeScoreRankingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCumulativeScoreRankingsRequest.ProtoReflect.Descriptor instead.
func (*ListUserCumulativeScoreRankingsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{10}
}

func (x *ListUserCumulativeScoreRankingsRequest) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *ListUserCumulativeScoreRankingsRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *ListUserCumulativeScoreRankingsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListUserCumulativeScoreRankingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUserCumulativeScoreRankingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUserCumulativeScoreRankingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Rankings []*UserCumulativeScoreRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUserCumulativeScoreRankingsResponse) Reset() {
	*x = ListUserCumulativeScoreRankingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCumulativeScoreRankingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCumulativeScoreRankingsResponse) ProtoMessage() {}

func (x *ListUserCumulativeScoreRankingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCumulativeScoreRankingsResponse.ProtoReflect.Descriptor instead.
func (*ListUserCumulativeScoreRankingsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{11}
}

func (x *ListUserCumulativeScoreRankingsResponse) GetRankings() []*UserCumulativeScoreRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *ListUserCumulativeScoreRankingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSquareCumulativeScoreRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score ranking to retrieve.
	// Format: rankings/cumulativeScores/squares/{square_address}
	SquareCumulativeScoreRanking string `protobuf:"bytes,1,opt,name=squareCumulativeScoreRanking,proto3" json:"squareCumulativeScoreRanking,omitempty"`
	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,2,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	// If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_week="2024-08-W1"
	// If time period is MONTH_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_month="2024-08"
	Context *string `protobuf:"bytes,3,opt,name=context,proto3,oneof" json:"context,omitempty"`
}

func (x *GetSquareCumulativeScoreRankingRequest) Reset() {
	*x = GetSquareCumulativeScoreRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareCumulativeScoreRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareCumulativeScoreRankingRequest) ProtoMessage() {}

func (x *GetSquareCumulativeScoreRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareCumulativeScoreRankingRequest.ProtoReflect.Descriptor instead.
func (*GetSquareCumulativeScoreRankingRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{12}
}

func (x *GetSquareCumulativeScoreRankingRequest) GetSquareCumulativeScoreRanking() string {
	if x != nil {
		return x.SquareCumulativeScoreRanking
	}
	return ""
}

func (x *GetSquareCumulativeScoreRankingRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *GetSquareCumulativeScoreRankingRequest) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type ListSquareCumulativeScoreRankingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of ranking to retrieve.
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,1,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	// The context needed to get the ranking according to the rank type.
	// If time period is WEEKLY, the week can be set. If not set, the current week will be used.
	// * week=10
	// If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_week="2024-08-W1"
	// If time period is MONTH_FULL_WEEK_BASED, the week can be set.
	// * full_week_based_month="2024-08"
	Context *string `protobuf:"bytes,2,opt,name=context,proto3,oneof" json:"context,omitempty"`
	// The maximum number of points to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListPoints` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSquareCumulativeScoreRankingsRequest) Reset() {
	*x = ListSquareCumulativeScoreRankingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareCumulativeScoreRankingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareCumulativeScoreRankingsRequest) ProtoMessage() {}

func (x *ListSquareCumulativeScoreRankingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareCumulativeScoreRankingsRequest.ProtoReflect.Descriptor instead.
func (*ListSquareCumulativeScoreRankingsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{13}
}

func (x *ListSquareCumulativeScoreRankingsRequest) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *ListSquareCumulativeScoreRankingsRequest) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *ListSquareCumulativeScoreRankingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSquareCumulativeScoreRankingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSquareCumulativeScoreRankingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Rankings []*SquareCumulativeScoreRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSquareCumulativeScoreRankingsResponse) Reset() {
	*x = ListSquareCumulativeScoreRankingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSquareCumulativeScoreRankingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSquareCumulativeScoreRankingsResponse) ProtoMessage() {}

func (x *ListSquareCumulativeScoreRankingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSquareCumulativeScoreRankingsResponse.ProtoReflect.Descriptor instead.
func (*ListSquareCumulativeScoreRankingsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{14}
}

func (x *ListSquareCumulativeScoreRankingsResponse) GetRankings() []*SquareCumulativeScoreRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *ListSquareCumulativeScoreRankingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type InvalidateScoreRankingsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the score ranking to invalidate.
	// Format: users/{user_address}
	Users []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// The context needed to decumulate the ranking according to the rank type.
	// Context for square is always required.
	// * snapshot_square="squares/{square_token_id}"
	// * snapshot_square_token_id="{square_token_id}"
	// Context for week is optional. If not set, the current week will be used.
	// * week=10
	// Context for full week based week is optional. If not set, the current date will be used.
	// * full_week_based_week="2024-08-W1"
	// Context for full week based month is optional. If not set, the current date will be used.
	// * full_week_based_month="2024-08"
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *InvalidateScoreRankingsByUserRequest) Reset() {
	*x = InvalidateScoreRankingsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateScoreRankingsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateScoreRankingsByUserRequest) ProtoMessage() {}

func (x *InvalidateScoreRankingsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateScoreRankingsByUserRequest.ProtoReflect.Descriptor instead.
func (*InvalidateScoreRankingsByUserRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{15}
}

func (x *InvalidateScoreRankingsByUserRequest) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *InvalidateScoreRankingsByUserRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Score.
	// Format: "users/{user_address}/scores/{game_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The user address of the member.
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// The game ID of the Score.
	GameId string `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// created time of score
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	State      ScoreState             `protobuf:"varint,5,opt,name=state,proto3,enum=blast.v1.score.ScoreState" json:"state,omitempty"`
	// points got from game
	Points uint32 `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`
	// Game mode of score.
	GameType GameType `protobuf:"varint,8,opt,name=game_type,json=gameType,proto3,enum=blast.v1.score.GameType" json:"game_type,omitempty"`
	// Play mode of score.
	PlayMode PlayMode `protobuf:"varint,9,opt,name=play_mode,json=playMode,proto3,enum=blast.v1.score.PlayMode" json:"play_mode,omitempty"`
	// week of score
	Week uint32 `protobuf:"varint,10,opt,name=week,proto3" json:"week,omitempty"`
	// The snapshot square token ID of the Score.
	// This field can be null if the score is not related to any square.
	SnapshotSquareTokenId *string `protobuf:"bytes,11,opt,name=snapshot_square_token_id,json=snapshotSquareTokenId,proto3,oneof" json:"snapshot_square_token_id,omitempty"`
	// Thie field is internal use only.
	BlastGold *float32 `protobuf:"fixed32,12,opt,name=blast_gold,json=blastGold,proto3,oneof" json:"blast_gold,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{16}
}

func (x *Score) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Score) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *Score) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Score) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Score) GetState() ScoreState {
	if x != nil {
		return x.State
	}
	return ScoreState_SCORE_STATE_UNSPECIFIED
}

func (x *Score) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Score) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GAME_TYPE_UNSPECIFIED
}

func (x *Score) GetPlayMode() PlayMode {
	if x != nil {
		return x.PlayMode
	}
	return PlayMode_PLAY_MODE_UNSPECIFIED
}

func (x *Score) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *Score) GetSnapshotSquareTokenId() string {
	if x != nil && x.SnapshotSquareTokenId != nil {
		return *x.SnapshotSquareTokenId
	}
	return ""
}

func (x *Score) GetBlastGold() float32 {
	if x != nil && x.BlastGold != nil {
		return *x.BlastGold
	}
	return 0
}

type UserBestScoreRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	UserType   ScoreRankUserType   `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	TimePeriod ScoreRankTimePeriod `protobuf:"varint,3,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	Score      *Score              `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *UserBestScoreRanking) Reset() {
	*x = UserBestScoreRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBestScoreRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBestScoreRanking) ProtoMessage() {}

func (x *UserBestScoreRanking) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBestScoreRanking.ProtoReflect.Descriptor instead.
func (*UserBestScoreRanking) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{17}
}

func (x *UserBestScoreRanking) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserBestScoreRanking) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *UserBestScoreRanking) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *UserBestScoreRanking) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type UserCumulativeScoreRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank        uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	UserType    ScoreRankUserType   `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=blast.v1.score.ScoreRankUserType" json:"user_type,omitempty"`
	TimePeriod  ScoreRankTimePeriod `protobuf:"varint,3,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	UserAddress string              `protobuf:"bytes,5,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	TotalPoints uint64              `protobuf:"varint,6,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
}

func (x *UserCumulativeScoreRanking) Reset() {
	*x = UserCumulativeScoreRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCumulativeScoreRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCumulativeScoreRanking) ProtoMessage() {}

func (x *UserCumulativeScoreRanking) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCumulativeScoreRanking.ProtoReflect.Descriptor instead.
func (*UserCumulativeScoreRanking) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{18}
}

func (x *UserCumulativeScoreRanking) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserCumulativeScoreRanking) GetUserType() ScoreRankUserType {
	if x != nil {
		return x.UserType
	}
	return ScoreRankUserType_SCORE_RANK_USER_TYPE_UNSPECIFIED
}

func (x *UserCumulativeScoreRanking) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *UserCumulativeScoreRanking) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *UserCumulativeScoreRanking) GetTotalPoints() uint64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

type SquareCumulativeScoreRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank              uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	TimePeriod        ScoreRankTimePeriod `protobuf:"varint,2,opt,name=time_period,json=timePeriod,proto3,enum=blast.v1.score.ScoreRankTimePeriod" json:"time_period,omitempty"`
	SquareTokenId     string              `protobuf:"bytes,5,opt,name=square_token_id,json=squareTokenId,proto3" json:"square_token_id,omitempty"`
	TotalPoints       uint64              `protobuf:"varint,6,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsCount       uint32              `protobuf:"varint,7,opt,name=points_count,json=pointsCount,proto3" json:"points_count,omitempty"`
	ParticipantsCount uint32              `protobuf:"varint,8,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
}

func (x *SquareCumulativeScoreRanking) Reset() {
	*x = SquareCumulativeScoreRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareCumulativeScoreRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareCumulativeScoreRanking) ProtoMessage() {}

func (x *SquareCumulativeScoreRanking) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareCumulativeScoreRanking.ProtoReflect.Descriptor instead.
func (*SquareCumulativeScoreRanking) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{19}
}

func (x *SquareCumulativeScoreRanking) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SquareCumulativeScoreRanking) GetTimePeriod() ScoreRankTimePeriod {
	if x != nil {
		return x.TimePeriod
	}
	return ScoreRankTimePeriod_SCORE_RANK_TIME_PERIOD_UNSPECIFIED
}

func (x *SquareCumulativeScoreRanking) GetSquareTokenId() string {
	if x != nil {
		return x.SquareTokenId
	}
	return ""
}

func (x *SquareCumulativeScoreRanking) GetTotalPoints() uint64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *SquareCumulativeScoreRanking) GetPointsCount() uint32 {
	if x != nil {
		return x.PointsCount
	}
	return 0
}

func (x *SquareCumulativeScoreRanking) GetParticipantsCount() uint32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

// user reward
type RewardResponse_UserReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user address
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// spacebar points
	Points *decimal.Decimal `protobuf:"bytes,2,opt,name=points,proto3" json:"points,omitempty"`
	// blast points
	BlastPoints *decimal.Decimal `protobuf:"bytes,3,opt,name=blast_points,json=blastPoints,proto3" json:"blast_points,omitempty"`
	// blast gold
	BlastGold *decimal.Decimal `protobuf:"bytes,4,opt,name=blast_gold,json=blastGold,proto3" json:"blast_gold,omitempty"`
}

func (x *RewardResponse_UserReward) Reset() {
	*x = RewardResponse_UserReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_score_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardResponse_UserReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardResponse_UserReward) ProtoMessage() {}

func (x *RewardResponse_UserReward) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_score_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardResponse_UserReward.ProtoReflect.Descriptor instead.
func (*RewardResponse_UserReward) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_score_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RewardResponse_UserReward) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *RewardResponse_UserReward) GetPoints() *decimal.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *RewardResponse_UserReward) GetBlastPoints() *decimal.Decimal {
	if x != nil {
		return x.BlastPoints
	}
	return nil
}

func (x *RewardResponse_UserReward) GetBlastGold() *decimal.Decimal {
	if x != nil {
		return x.BlastGold
	}
	return nil
}

var File_blast_v1_score_score_proto protoreflect.FileDescriptor

var file_blast_v1_score_score_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x45, 0x4b, 0x4c,
	0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x45, 0x45,
	0x4b, 0x4c, 0x59, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x53, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f,
	0x6c, 0x64, 0x22, 0x7e, 0x0a, 0x21, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x20, 0x0a,
	0x1e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x7d, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x20, 0x0a,
	0x1e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x2f, 0x0a, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xd0, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x82, 0x01, 0x0a, 0x1c, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x37, 0x0a,
	0x35, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x28,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x29,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x24, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xd8, 0x04, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b,
	0x12, 0x3c, 0x0a, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x4a, 0xea, 0x41, 0x47, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x5c, 0xea, 0x41, 0x59, 0x0a,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x22, 0xe6, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x68, 0xea, 0x41, 0x65, 0x0a, 0x33, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x22, 0x86, 0x03, 0x0a, 0x1c, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x6f, 0xea, 0x41, 0x6c, 0x0a, 0x35,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2a, 0x38, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x45,
	0x52, 0x53, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x44,
	0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x53, 0x10, 0x04, 0x2a, 0x90, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x1f, 0x2a, 0x61, 0x0a, 0x12, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x14, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10,
	0x02, 0x32, 0xe4, 0x0e, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x3a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x7c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x32, 0xda, 0x41, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x6b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x27, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x3d, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0xb2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x22, 0x41, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x3d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x3d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x2e, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xda, 0x41, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x36,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x51, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12,
	0x46, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x3d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xca, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x3a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x3a, 0x64, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x3b, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_score_score_proto_rawDescOnce sync.Once
	file_blast_v1_score_score_proto_rawDescData = file_blast_v1_score_score_proto_rawDesc
)

func file_blast_v1_score_score_proto_rawDescGZIP() []byte {
	file_blast_v1_score_score_proto_rawDescOnce.Do(func() {
		file_blast_v1_score_score_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_score_score_proto_rawDescData)
	})
	return file_blast_v1_score_score_proto_rawDescData
}

var file_blast_v1_score_score_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_blast_v1_score_score_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_blast_v1_score_score_proto_goTypes = []interface{}{
	(GameType)(0),                                     // 0: blast.v1.score.GameType
	(PlayMode)(0),                                     // 1: blast.v1.score.PlayMode
	(ScoreState)(0),                                   // 2: blast.v1.score.ScoreState
	(ScoreRankUserType)(0),                            // 3: blast.v1.score.ScoreRankUserType
	(ScoreRankTimePeriod)(0),                          // 4: blast.v1.score.ScoreRankTimePeriod
	(ScoreRankScoreType)(0),                           // 5: blast.v1.score.ScoreRankScoreType
	(ScoreRankEntitiyType)(0),                         // 6: blast.v1.score.ScoreRankEntitiyType
	(RewardRequest_RewardType)(0),                     // 7: blast.v1.score.RewardRequest.RewardType
	(*RewardRequest)(nil),                             // 8: blast.v1.score.RewardRequest
	(*RewardResponse)(nil),                            // 9: blast.v1.score.RewardResponse
	(*ValidateUploadScoreAndSignRequest)(nil),         // 10: blast.v1.score.ValidateUploadScoreAndSignRequest
	(*ValidateUploadScoreAndSignResponse)(nil),        // 11: blast.v1.score.ValidateUploadScoreAndSignResponse
	(*CreateScoreRequest)(nil),                        // 12: blast.v1.score.CreateScoreRequest
	(*GetScoreRequest)(nil),                           // 13: blast.v1.score.GetScoreRequest
	(*GetUserBestScoreRankingRequest)(nil),            // 14: blast.v1.score.GetUserBestScoreRankingRequest
	(*ListUserBestScoreRankingsRequest)(nil),          // 15: blast.v1.score.ListUserBestScoreRankingsRequest
	(*ListUserBestScoreRankingsResponse)(nil),         // 16: blast.v1.score.ListUserBestScoreRankingsResponse
	(*GetUserCumulativeScoreRankingRequest)(nil),      // 17: blast.v1.score.GetUserCumulativeScoreRankingRequest
	(*ListUserCumulativeScoreRankingsRequest)(nil),    // 18: blast.v1.score.ListUserCumulativeScoreRankingsRequest
	(*ListUserCumulativeScoreRankingsResponse)(nil),   // 19: blast.v1.score.ListUserCumulativeScoreRankingsResponse
	(*GetSquareCumulativeScoreRankingRequest)(nil),    // 20: blast.v1.score.GetSquareCumulativeScoreRankingRequest
	(*ListSquareCumulativeScoreRankingsRequest)(nil),  // 21: blast.v1.score.ListSquareCumulativeScoreRankingsRequest
	(*ListSquareCumulativeScoreRankingsResponse)(nil), // 22: blast.v1.score.ListSquareCumulativeScoreRankingsResponse
	(*InvalidateScoreRankingsByUserRequest)(nil),      // 23: blast.v1.score.InvalidateScoreRankingsByUserRequest
	(*Score)(nil),                                     // 24: blast.v1.score.Score
	(*UserBestScoreRanking)(nil),                      // 25: blast.v1.score.UserBestScoreRanking
	(*UserCumulativeScoreRanking)(nil),                // 26: blast.v1.score.UserCumulativeScoreRanking
	(*SquareCumulativeScoreRanking)(nil),              // 27: blast.v1.score.SquareCumulativeScoreRanking
	(*RewardResponse_UserReward)(nil),                 // 28: blast.v1.score.RewardResponse.UserReward
	(*chain.UploadScoreParams)(nil),                   // 29: blast.v1.chain.UploadScoreParams
	(*timestamppb.Timestamp)(nil),                     // 30: google.protobuf.Timestamp
	(*decimal.Decimal)(nil),                           // 31: google.type.Decimal
	(*emptypb.Empty)(nil),                             // 32: google.protobuf.Empty
}
var file_blast_v1_score_score_proto_depIdxs = []int32{
	7,  // 0: blast.v1.score.RewardRequest.type:type_name -> blast.v1.score.RewardRequest.RewardType
	28, // 1: blast.v1.score.RewardResponse.user_rewards:type_name -> blast.v1.score.RewardResponse.UserReward
	29, // 2: blast.v1.score.ValidateUploadScoreAndSignResponse.params:type_name -> blast.v1.chain.UploadScoreParams
	24, // 3: blast.v1.score.CreateScoreRequest.score:type_name -> blast.v1.score.Score
	3,  // 4: blast.v1.score.GetUserBestScoreRankingRequest.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 5: blast.v1.score.GetUserBestScoreRankingRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	3,  // 6: blast.v1.score.ListUserBestScoreRankingsRequest.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 7: blast.v1.score.ListUserBestScoreRankingsRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	25, // 8: blast.v1.score.ListUserBestScoreRankingsResponse.rankings:type_name -> blast.v1.score.UserBestScoreRanking
	3,  // 9: blast.v1.score.GetUserCumulativeScoreRankingRequest.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 10: blast.v1.score.GetUserCumulativeScoreRankingRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	3,  // 11: blast.v1.score.ListUserCumulativeScoreRankingsRequest.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 12: blast.v1.score.ListUserCumulativeScoreRankingsRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	26, // 13: blast.v1.score.ListUserCumulativeScoreRankingsResponse.rankings:type_name -> blast.v1.score.UserCumulativeScoreRanking
	4,  // 14: blast.v1.score.GetSquareCumulativeScoreRankingRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	4,  // 15: blast.v1.score.ListSquareCumulativeScoreRankingsRequest.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	27, // 16: blast.v1.score.ListSquareCumulativeScoreRankingsResponse.rankings:type_name -> blast.v1.score.SquareCumulativeScoreRanking
	30, // 17: blast.v1.score.Score.create_time:type_name -> google.protobuf.Timestamp
	2,  // 18: blast.v1.score.Score.state:type_name -> blast.v1.score.ScoreState
	0,  // 19: blast.v1.score.Score.game_type:type_name -> blast.v1.score.GameType
	1,  // 20: blast.v1.score.Score.play_mode:type_name -> blast.v1.score.PlayMode
	3,  // 21: blast.v1.score.UserBestScoreRanking.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 22: blast.v1.score.UserBestScoreRanking.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	24, // 23: blast.v1.score.UserBestScoreRanking.score:type_name -> blast.v1.score.Score
	3,  // 24: blast.v1.score.UserCumulativeScoreRanking.user_type:type_name -> blast.v1.score.ScoreRankUserType
	4,  // 25: blast.v1.score.UserCumulativeScoreRanking.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	4,  // 26: blast.v1.score.SquareCumulativeScoreRanking.time_period:type_name -> blast.v1.score.ScoreRankTimePeriod
	31, // 27: blast.v1.score.RewardResponse.UserReward.points:type_name -> google.type.Decimal
	31, // 28: blast.v1.score.RewardResponse.UserReward.blast_points:type_name -> google.type.Decimal
	31, // 29: blast.v1.score.RewardResponse.UserReward.blast_gold:type_name -> google.type.Decimal
	10, // 30: blast.v1.score.ScoreService.ValidateUploadScoreAndSign:input_type -> blast.v1.score.ValidateUploadScoreAndSignRequest
	12, // 31: blast.v1.score.ScoreService.CreateScore:input_type -> blast.v1.score.CreateScoreRequest
	13, // 32: blast.v1.score.ScoreService.GetScore:input_type -> blast.v1.score.GetScoreRequest
	14, // 33: blast.v1.score.ScoreService.GetUserBestScoreRanking:input_type -> blast.v1.score.GetUserBestScoreRankingRequest
	15, // 34: blast.v1.score.ScoreService.ListUserBestScoreRankings:input_type -> blast.v1.score.ListUserBestScoreRankingsRequest
	17, // 35: blast.v1.score.ScoreService.GetUserCumulativeScoreRanking:input_type -> blast.v1.score.GetUserCumulativeScoreRankingRequest
	18, // 36: blast.v1.score.ScoreService.ListUserCumulativeScoreRankings:input_type -> blast.v1.score.ListUserCumulativeScoreRankingsRequest
	20, // 37: blast.v1.score.ScoreService.GetSquareCumulativeScoreRanking:input_type -> blast.v1.score.GetSquareCumulativeScoreRankingRequest
	21, // 38: blast.v1.score.ScoreService.ListSquareCumulativeScoreRankings:input_type -> blast.v1.score.ListSquareCumulativeScoreRankingsRequest
	23, // 39: blast.v1.score.ScoreService.InvalidateScoreRankingsByUser:input_type -> blast.v1.score.InvalidateScoreRankingsByUserRequest
	8,  // 40: blast.v1.score.ScoreService.DryRunReward:input_type -> blast.v1.score.RewardRequest
	11, // 41: blast.v1.score.ScoreService.ValidateUploadScoreAndSign:output_type -> blast.v1.score.ValidateUploadScoreAndSignResponse
	24, // 42: blast.v1.score.ScoreService.CreateScore:output_type -> blast.v1.score.Score
	24, // 43: blast.v1.score.ScoreService.GetScore:output_type -> blast.v1.score.Score
	25, // 44: blast.v1.score.ScoreService.GetUserBestScoreRanking:output_type -> blast.v1.score.UserBestScoreRanking
	16, // 45: blast.v1.score.ScoreService.ListUserBestScoreRankings:output_type -> blast.v1.score.ListUserBestScoreRankingsResponse
	26, // 46: blast.v1.score.ScoreService.GetUserCumulativeScoreRanking:output_type -> blast.v1.score.UserCumulativeScoreRanking
	19, // 47: blast.v1.score.ScoreService.ListUserCumulativeScoreRankings:output_type -> blast.v1.score.ListUserCumulativeScoreRankingsResponse
	27, // 48: blast.v1.score.ScoreService.GetSquareCumulativeScoreRanking:output_type -> blast.v1.score.SquareCumulativeScoreRanking
	22, // 49: blast.v1.score.ScoreService.ListSquareCumulativeScoreRankings:output_type -> blast.v1.score.ListSquareCumulativeScoreRankingsResponse
	32, // 50: blast.v1.score.ScoreService.InvalidateScoreRankingsByUser:output_type -> google.protobuf.Empty
	9,  // 51: blast.v1.score.ScoreService.DryRunReward:output_type -> blast.v1.score.RewardResponse
	41, // [41:52] is the sub-list for method output_type
	30, // [30:41] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_blast_v1_score_score_proto_init() }
func file_blast_v1_score_score_proto_init() {
	if File_blast_v1_score_score_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_score_score_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUploadScoreAndSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUploadScoreAndSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBestScoreRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserBestScoreRankingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserBestScoreRankingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCumulativeScoreRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCumulativeScoreRankingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCumulativeScoreRankingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareCumulativeScoreRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareCumulativeScoreRankingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSquareCumulativeScoreRankingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateScoreRankingsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBestScoreRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCumulativeScoreRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareCumulativeScoreRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_score_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardResponse_UserReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blast_v1_score_score_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_blast_v1_score_score_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_blast_v1_score_score_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_score_score_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_score_score_proto_goTypes,
		DependencyIndexes: file_blast_v1_score_score_proto_depIdxs,
		EnumInfos:         file_blast_v1_score_score_proto_enumTypes,
		MessageInfos:      file_blast_v1_score_score_proto_msgTypes,
	}.Build()
	File_blast_v1_score_score_proto = out.File
	file_blast_v1_score_score_proto_rawDesc = nil
	file_blast_v1_score_score_proto_goTypes = nil
	file_blast_v1_score_score_proto_depIdxs = nil
}
