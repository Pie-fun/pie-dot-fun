// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/score/invitational.proto

package score

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInvitationalServiceClient is a mock of InvitationalServiceClient interface.
type MockInvitationalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationalServiceClientMockRecorder
}

// MockInvitationalServiceClientMockRecorder is the mock recorder for MockInvitationalServiceClient.
type MockInvitationalServiceClientMockRecorder struct {
	mock *MockInvitationalServiceClient
}

// NewMockInvitationalServiceClient creates a new mock instance.
func NewMockInvitationalServiceClient(ctrl *gomock.Controller) *MockInvitationalServiceClient {
	mock := &MockInvitationalServiceClient{ctrl: ctrl}
	mock.recorder = &MockInvitationalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationalServiceClient) EXPECT() *MockInvitationalServiceClientMockRecorder {
	return m.recorder
}

// CreateSSIndividualInvitationalEvent mocks base method.
func (m *MockInvitationalServiceClient) CreateSSIndividualInvitationalEvent(ctx context.Context, in *CreateSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalEvent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSSIndividualInvitationalEvent", varargs...)
	ret0, _ := ret[0].(*SSIndividualInvitationalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSIndividualInvitationalEvent indicates an expected call of CreateSSIndividualInvitationalEvent.
func (mr *MockInvitationalServiceClientMockRecorder) CreateSSIndividualInvitationalEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSIndividualInvitationalEvent", reflect.TypeOf((*MockInvitationalServiceClient)(nil).CreateSSIndividualInvitationalEvent), varargs...)
}

// GetSSIndividualInvitationalLetter mocks base method.
func (m *MockInvitationalServiceClient) GetSSIndividualInvitationalLetter(ctx context.Context, in *GetSSIndividualInvitationalLetterRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalLetter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSIndividualInvitationalLetter", varargs...)
	ret0, _ := ret[0].(*SSIndividualInvitationalLetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSIndividualInvitationalLetter indicates an expected call of GetSSIndividualInvitationalLetter.
func (mr *MockInvitationalServiceClientMockRecorder) GetSSIndividualInvitationalLetter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSIndividualInvitationalLetter", reflect.TypeOf((*MockInvitationalServiceClient)(nil).GetSSIndividualInvitationalLetter), varargs...)
}

// InviteSSIndividualInvitationalEvent mocks base method.
func (m *MockInvitationalServiceClient) InviteSSIndividualInvitationalEvent(ctx context.Context, in *InviteSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*InviteSSIndividualInvitationalEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteSSIndividualInvitationalEvent", varargs...)
	ret0, _ := ret[0].(*InviteSSIndividualInvitationalEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteSSIndividualInvitationalEvent indicates an expected call of InviteSSIndividualInvitationalEvent.
func (mr *MockInvitationalServiceClientMockRecorder) InviteSSIndividualInvitationalEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteSSIndividualInvitationalEvent", reflect.TypeOf((*MockInvitationalServiceClient)(nil).InviteSSIndividualInvitationalEvent), varargs...)
}

// ListSSIndividualInvitationalEvents mocks base method.
func (m *MockInvitationalServiceClient) ListSSIndividualInvitationalEvents(ctx context.Context, in *ListSSIndividualInvitationalEventsRequest, opts ...grpc.CallOption) (*ListSSIndividualInvitationalEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSSIndividualInvitationalEvents", varargs...)
	ret0, _ := ret[0].(*ListSSIndividualInvitationalEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSIndividualInvitationalEvents indicates an expected call of ListSSIndividualInvitationalEvents.
func (mr *MockInvitationalServiceClientMockRecorder) ListSSIndividualInvitationalEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSIndividualInvitationalEvents", reflect.TypeOf((*MockInvitationalServiceClient)(nil).ListSSIndividualInvitationalEvents), varargs...)
}

// MockInvitationalServiceServer is a mock of InvitationalServiceServer interface.
type MockInvitationalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationalServiceServerMockRecorder
}

// MockInvitationalServiceServerMockRecorder is the mock recorder for MockInvitationalServiceServer.
type MockInvitationalServiceServerMockRecorder struct {
	mock *MockInvitationalServiceServer
}

// NewMockInvitationalServiceServer creates a new mock instance.
func NewMockInvitationalServiceServer(ctrl *gomock.Controller) *MockInvitationalServiceServer {
	mock := &MockInvitationalServiceServer{ctrl: ctrl}
	mock.recorder = &MockInvitationalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationalServiceServer) EXPECT() *MockInvitationalServiceServerMockRecorder {
	return m.recorder
}

// CreateSSIndividualInvitationalEvent mocks base method.
func (m *MockInvitationalServiceServer) CreateSSIndividualInvitationalEvent(ctx context.Context, in *CreateSSIndividualInvitationalEventRequest) (*SSIndividualInvitationalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSIndividualInvitationalEvent", ctx, in)
	ret0, _ := ret[0].(*SSIndividualInvitationalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSIndividualInvitationalEvent indicates an expected call of CreateSSIndividualInvitationalEvent.
func (mr *MockInvitationalServiceServerMockRecorder) CreateSSIndividualInvitationalEvent(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSIndividualInvitationalEvent", reflect.TypeOf((*MockInvitationalServiceServer)(nil).CreateSSIndividualInvitationalEvent), ctx, in)
}

// GetSSIndividualInvitationalLetter mocks base method.
func (m *MockInvitationalServiceServer) GetSSIndividualInvitationalLetter(ctx context.Context, in *GetSSIndividualInvitationalLetterRequest) (*SSIndividualInvitationalLetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSIndividualInvitationalLetter", ctx, in)
	ret0, _ := ret[0].(*SSIndividualInvitationalLetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSIndividualInvitationalLetter indicates an expected call of GetSSIndividualInvitationalLetter.
func (mr *MockInvitationalServiceServerMockRecorder) GetSSIndividualInvitationalLetter(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSIndividualInvitationalLetter", reflect.TypeOf((*MockInvitationalServiceServer)(nil).GetSSIndividualInvitationalLetter), ctx, in)
}

// InviteSSIndividualInvitationalEvent mocks base method.
func (m *MockInvitationalServiceServer) InviteSSIndividualInvitationalEvent(ctx context.Context, in *InviteSSIndividualInvitationalEventRequest) (*InviteSSIndividualInvitationalEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteSSIndividualInvitationalEvent", ctx, in)
	ret0, _ := ret[0].(*InviteSSIndividualInvitationalEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteSSIndividualInvitationalEvent indicates an expected call of InviteSSIndividualInvitationalEvent.
func (mr *MockInvitationalServiceServerMockRecorder) InviteSSIndividualInvitationalEvent(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteSSIndividualInvitationalEvent", reflect.TypeOf((*MockInvitationalServiceServer)(nil).InviteSSIndividualInvitationalEvent), ctx, in)
}

// ListSSIndividualInvitationalEvents mocks base method.
func (m *MockInvitationalServiceServer) ListSSIndividualInvitationalEvents(ctx context.Context, in *ListSSIndividualInvitationalEventsRequest) (*ListSSIndividualInvitationalEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSIndividualInvitationalEvents", ctx, in)
	ret0, _ := ret[0].(*ListSSIndividualInvitationalEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSIndividualInvitationalEvents indicates an expected call of ListSSIndividualInvitationalEvents.
func (mr *MockInvitationalServiceServerMockRecorder) ListSSIndividualInvitationalEvents(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSIndividualInvitationalEvents", reflect.TypeOf((*MockInvitationalServiceServer)(nil).ListSSIndividualInvitationalEvents), ctx, in)
}
