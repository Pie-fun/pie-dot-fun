// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/score/score.proto

package score

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockScoreServiceClient is a mock of ScoreServiceClient interface.
type MockScoreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoreServiceClientMockRecorder
}

// MockScoreServiceClientMockRecorder is the mock recorder for MockScoreServiceClient.
type MockScoreServiceClientMockRecorder struct {
	mock *MockScoreServiceClient
}

// NewMockScoreServiceClient creates a new mock instance.
func NewMockScoreServiceClient(ctrl *gomock.Controller) *MockScoreServiceClient {
	mock := &MockScoreServiceClient{ctrl: ctrl}
	mock.recorder = &MockScoreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreServiceClient) EXPECT() *MockScoreServiceClientMockRecorder {
	return m.recorder
}

// CreateScore mocks base method.
func (m *MockScoreServiceClient) CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScore", varargs...)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockScoreServiceClientMockRecorder) CreateScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockScoreServiceClient)(nil).CreateScore), varargs...)
}

// DryRunReward mocks base method.
func (m *MockScoreServiceClient) DryRunReward(ctx context.Context, in *RewardRequest, opts ...grpc.CallOption) (*RewardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DryRunReward", varargs...)
	ret0, _ := ret[0].(*RewardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DryRunReward indicates an expected call of DryRunReward.
func (mr *MockScoreServiceClientMockRecorder) DryRunReward(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRunReward", reflect.TypeOf((*MockScoreServiceClient)(nil).DryRunReward), varargs...)
}

// GetScore mocks base method.
func (m *MockScoreServiceClient) GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScore", varargs...)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScoreServiceClientMockRecorder) GetScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScoreServiceClient)(nil).GetScore), varargs...)
}

// GetSquareCumulativeScoreRanking mocks base method.
func (m *MockScoreServiceClient) GetSquareCumulativeScoreRanking(ctx context.Context, in *GetSquareCumulativeScoreRankingRequest, opts ...grpc.CallOption) (*SquareCumulativeScoreRanking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSquareCumulativeScoreRanking", varargs...)
	ret0, _ := ret[0].(*SquareCumulativeScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSquareCumulativeScoreRanking indicates an expected call of GetSquareCumulativeScoreRanking.
func (mr *MockScoreServiceClientMockRecorder) GetSquareCumulativeScoreRanking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSquareCumulativeScoreRanking", reflect.TypeOf((*MockScoreServiceClient)(nil).GetSquareCumulativeScoreRanking), varargs...)
}

// GetUserBestScoreRanking mocks base method.
func (m *MockScoreServiceClient) GetUserBestScoreRanking(ctx context.Context, in *GetUserBestScoreRankingRequest, opts ...grpc.CallOption) (*UserBestScoreRanking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserBestScoreRanking", varargs...)
	ret0, _ := ret[0].(*UserBestScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBestScoreRanking indicates an expected call of GetUserBestScoreRanking.
func (mr *MockScoreServiceClientMockRecorder) GetUserBestScoreRanking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBestScoreRanking", reflect.TypeOf((*MockScoreServiceClient)(nil).GetUserBestScoreRanking), varargs...)
}

// GetUserCumulativeScoreRanking mocks base method.
func (m *MockScoreServiceClient) GetUserCumulativeScoreRanking(ctx context.Context, in *GetUserCumulativeScoreRankingRequest, opts ...grpc.CallOption) (*UserCumulativeScoreRanking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserCumulativeScoreRanking", varargs...)
	ret0, _ := ret[0].(*UserCumulativeScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCumulativeScoreRanking indicates an expected call of GetUserCumulativeScoreRanking.
func (mr *MockScoreServiceClientMockRecorder) GetUserCumulativeScoreRanking(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCumulativeScoreRanking", reflect.TypeOf((*MockScoreServiceClient)(nil).GetUserCumulativeScoreRanking), varargs...)
}

// InvalidateScoreRankingsByUser mocks base method.
func (m *MockScoreServiceClient) InvalidateScoreRankingsByUser(ctx context.Context, in *InvalidateScoreRankingsByUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateScoreRankingsByUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateScoreRankingsByUser indicates an expected call of InvalidateScoreRankingsByUser.
func (mr *MockScoreServiceClientMockRecorder) InvalidateScoreRankingsByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateScoreRankingsByUser", reflect.TypeOf((*MockScoreServiceClient)(nil).InvalidateScoreRankingsByUser), varargs...)
}

// ListSquareCumulativeScoreRankings mocks base method.
func (m *MockScoreServiceClient) ListSquareCumulativeScoreRankings(ctx context.Context, in *ListSquareCumulativeScoreRankingsRequest, opts ...grpc.CallOption) (*ListSquareCumulativeScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSquareCumulativeScoreRankings", varargs...)
	ret0, _ := ret[0].(*ListSquareCumulativeScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSquareCumulativeScoreRankings indicates an expected call of ListSquareCumulativeScoreRankings.
func (mr *MockScoreServiceClientMockRecorder) ListSquareCumulativeScoreRankings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSquareCumulativeScoreRankings", reflect.TypeOf((*MockScoreServiceClient)(nil).ListSquareCumulativeScoreRankings), varargs...)
}

// ListUserBestScoreRankings mocks base method.
func (m *MockScoreServiceClient) ListUserBestScoreRankings(ctx context.Context, in *ListUserBestScoreRankingsRequest, opts ...grpc.CallOption) (*ListUserBestScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserBestScoreRankings", varargs...)
	ret0, _ := ret[0].(*ListUserBestScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserBestScoreRankings indicates an expected call of ListUserBestScoreRankings.
func (mr *MockScoreServiceClientMockRecorder) ListUserBestScoreRankings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserBestScoreRankings", reflect.TypeOf((*MockScoreServiceClient)(nil).ListUserBestScoreRankings), varargs...)
}

// ListUserCumulativeScoreRankings mocks base method.
func (m *MockScoreServiceClient) ListUserCumulativeScoreRankings(ctx context.Context, in *ListUserCumulativeScoreRankingsRequest, opts ...grpc.CallOption) (*ListUserCumulativeScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserCumulativeScoreRankings", varargs...)
	ret0, _ := ret[0].(*ListUserCumulativeScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCumulativeScoreRankings indicates an expected call of ListUserCumulativeScoreRankings.
func (mr *MockScoreServiceClientMockRecorder) ListUserCumulativeScoreRankings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCumulativeScoreRankings", reflect.TypeOf((*MockScoreServiceClient)(nil).ListUserCumulativeScoreRankings), varargs...)
}

// ValidateUploadScoreAndSign mocks base method.
func (m *MockScoreServiceClient) ValidateUploadScoreAndSign(ctx context.Context, in *ValidateUploadScoreAndSignRequest, opts ...grpc.CallOption) (*ValidateUploadScoreAndSignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateUploadScoreAndSign", varargs...)
	ret0, _ := ret[0].(*ValidateUploadScoreAndSignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUploadScoreAndSign indicates an expected call of ValidateUploadScoreAndSign.
func (mr *MockScoreServiceClientMockRecorder) ValidateUploadScoreAndSign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUploadScoreAndSign", reflect.TypeOf((*MockScoreServiceClient)(nil).ValidateUploadScoreAndSign), varargs...)
}

// MockScoreServiceServer is a mock of ScoreServiceServer interface.
type MockScoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockScoreServiceServerMockRecorder
}

// MockScoreServiceServerMockRecorder is the mock recorder for MockScoreServiceServer.
type MockScoreServiceServerMockRecorder struct {
	mock *MockScoreServiceServer
}

// NewMockScoreServiceServer creates a new mock instance.
func NewMockScoreServiceServer(ctrl *gomock.Controller) *MockScoreServiceServer {
	mock := &MockScoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockScoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreServiceServer) EXPECT() *MockScoreServiceServerMockRecorder {
	return m.recorder
}

// CreateScore mocks base method.
func (m *MockScoreServiceServer) CreateScore(ctx context.Context, in *CreateScoreRequest) (*Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScore", ctx, in)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockScoreServiceServerMockRecorder) CreateScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockScoreServiceServer)(nil).CreateScore), ctx, in)
}

// DryRunReward mocks base method.
func (m *MockScoreServiceServer) DryRunReward(ctx context.Context, in *RewardRequest) (*RewardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DryRunReward", ctx, in)
	ret0, _ := ret[0].(*RewardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DryRunReward indicates an expected call of DryRunReward.
func (mr *MockScoreServiceServerMockRecorder) DryRunReward(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRunReward", reflect.TypeOf((*MockScoreServiceServer)(nil).DryRunReward), ctx, in)
}

// GetScore mocks base method.
func (m *MockScoreServiceServer) GetScore(ctx context.Context, in *GetScoreRequest) (*Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", ctx, in)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScoreServiceServerMockRecorder) GetScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScoreServiceServer)(nil).GetScore), ctx, in)
}

// GetSquareCumulativeScoreRanking mocks base method.
func (m *MockScoreServiceServer) GetSquareCumulativeScoreRanking(ctx context.Context, in *GetSquareCumulativeScoreRankingRequest) (*SquareCumulativeScoreRanking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSquareCumulativeScoreRanking", ctx, in)
	ret0, _ := ret[0].(*SquareCumulativeScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSquareCumulativeScoreRanking indicates an expected call of GetSquareCumulativeScoreRanking.
func (mr *MockScoreServiceServerMockRecorder) GetSquareCumulativeScoreRanking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSquareCumulativeScoreRanking", reflect.TypeOf((*MockScoreServiceServer)(nil).GetSquareCumulativeScoreRanking), ctx, in)
}

// GetUserBestScoreRanking mocks base method.
func (m *MockScoreServiceServer) GetUserBestScoreRanking(ctx context.Context, in *GetUserBestScoreRankingRequest) (*UserBestScoreRanking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBestScoreRanking", ctx, in)
	ret0, _ := ret[0].(*UserBestScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBestScoreRanking indicates an expected call of GetUserBestScoreRanking.
func (mr *MockScoreServiceServerMockRecorder) GetUserBestScoreRanking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBestScoreRanking", reflect.TypeOf((*MockScoreServiceServer)(nil).GetUserBestScoreRanking), ctx, in)
}

// GetUserCumulativeScoreRanking mocks base method.
func (m *MockScoreServiceServer) GetUserCumulativeScoreRanking(ctx context.Context, in *GetUserCumulativeScoreRankingRequest) (*UserCumulativeScoreRanking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCumulativeScoreRanking", ctx, in)
	ret0, _ := ret[0].(*UserCumulativeScoreRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCumulativeScoreRanking indicates an expected call of GetUserCumulativeScoreRanking.
func (mr *MockScoreServiceServerMockRecorder) GetUserCumulativeScoreRanking(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCumulativeScoreRanking", reflect.TypeOf((*MockScoreServiceServer)(nil).GetUserCumulativeScoreRanking), ctx, in)
}

// InvalidateScoreRankingsByUser mocks base method.
func (m *MockScoreServiceServer) InvalidateScoreRankingsByUser(ctx context.Context, in *InvalidateScoreRankingsByUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateScoreRankingsByUser", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateScoreRankingsByUser indicates an expected call of InvalidateScoreRankingsByUser.
func (mr *MockScoreServiceServerMockRecorder) InvalidateScoreRankingsByUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateScoreRankingsByUser", reflect.TypeOf((*MockScoreServiceServer)(nil).InvalidateScoreRankingsByUser), ctx, in)
}

// ListSquareCumulativeScoreRankings mocks base method.
func (m *MockScoreServiceServer) ListSquareCumulativeScoreRankings(ctx context.Context, in *ListSquareCumulativeScoreRankingsRequest) (*ListSquareCumulativeScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSquareCumulativeScoreRankings", ctx, in)
	ret0, _ := ret[0].(*ListSquareCumulativeScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSquareCumulativeScoreRankings indicates an expected call of ListSquareCumulativeScoreRankings.
func (mr *MockScoreServiceServerMockRecorder) ListSquareCumulativeScoreRankings(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSquareCumulativeScoreRankings", reflect.TypeOf((*MockScoreServiceServer)(nil).ListSquareCumulativeScoreRankings), ctx, in)
}

// ListUserBestScoreRankings mocks base method.
func (m *MockScoreServiceServer) ListUserBestScoreRankings(ctx context.Context, in *ListUserBestScoreRankingsRequest) (*ListUserBestScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserBestScoreRankings", ctx, in)
	ret0, _ := ret[0].(*ListUserBestScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserBestScoreRankings indicates an expected call of ListUserBestScoreRankings.
func (mr *MockScoreServiceServerMockRecorder) ListUserBestScoreRankings(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserBestScoreRankings", reflect.TypeOf((*MockScoreServiceServer)(nil).ListUserBestScoreRankings), ctx, in)
}

// ListUserCumulativeScoreRankings mocks base method.
func (m *MockScoreServiceServer) ListUserCumulativeScoreRankings(ctx context.Context, in *ListUserCumulativeScoreRankingsRequest) (*ListUserCumulativeScoreRankingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCumulativeScoreRankings", ctx, in)
	ret0, _ := ret[0].(*ListUserCumulativeScoreRankingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCumulativeScoreRankings indicates an expected call of ListUserCumulativeScoreRankings.
func (mr *MockScoreServiceServerMockRecorder) ListUserCumulativeScoreRankings(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCumulativeScoreRankings", reflect.TypeOf((*MockScoreServiceServer)(nil).ListUserCumulativeScoreRankings), ctx, in)
}

// ValidateUploadScoreAndSign mocks base method.
func (m *MockScoreServiceServer) ValidateUploadScoreAndSign(ctx context.Context, in *ValidateUploadScoreAndSignRequest) (*ValidateUploadScoreAndSignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUploadScoreAndSign", ctx, in)
	ret0, _ := ret[0].(*ValidateUploadScoreAndSignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUploadScoreAndSign indicates an expected call of ValidateUploadScoreAndSign.
func (mr *MockScoreServiceServerMockRecorder) ValidateUploadScoreAndSign(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUploadScoreAndSign", reflect.TypeOf((*MockScoreServiceServer)(nil).ValidateUploadScoreAndSign), ctx, in)
}
