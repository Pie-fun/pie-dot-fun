// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/score/invitational.proto

package score

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvitationalServiceClient is the client API for InvitationalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationalServiceClient interface {
	// ListSSIndividualInvitationals
	// admin
	ListSSIndividualInvitationalEvents(ctx context.Context, in *ListSSIndividualInvitationalEventsRequest, opts ...grpc.CallOption) (*ListSSIndividualInvitationalEventsResponse, error)
	// CreateSSIndividualInvitationalEvent
	// admin
	CreateSSIndividualInvitationalEvent(ctx context.Context, in *CreateSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalEvent, error)
	// Deprecated: Do not use.
	// GetSSIndividualInvitationalLetter
	// Get Active Invitational Letter
	// deprecated: use ListInvitationLetters
	GetSSIndividualInvitationalLetter(ctx context.Context, in *GetSSIndividualInvitationalLetterRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalLetter, error)
	// InviteSSIndividualInvitationalEvent
	// Send invitations based on past results.
	// for admin, not public api.
	InviteSSIndividualInvitationalEvent(ctx context.Context, in *InviteSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*InviteSSIndividualInvitationalEventResponse, error)
}

type invitationalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationalServiceClient(cc grpc.ClientConnInterface) InvitationalServiceClient {
	return &invitationalServiceClient{cc}
}

func (c *invitationalServiceClient) ListSSIndividualInvitationalEvents(ctx context.Context, in *ListSSIndividualInvitationalEventsRequest, opts ...grpc.CallOption) (*ListSSIndividualInvitationalEventsResponse, error) {
	out := new(ListSSIndividualInvitationalEventsResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.score.InvitationalService/ListSSIndividualInvitationalEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationalServiceClient) CreateSSIndividualInvitationalEvent(ctx context.Context, in *CreateSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalEvent, error) {
	out := new(SSIndividualInvitationalEvent)
	err := c.cc.Invoke(ctx, "/blast.v1.score.InvitationalService/CreateSSIndividualInvitationalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *invitationalServiceClient) GetSSIndividualInvitationalLetter(ctx context.Context, in *GetSSIndividualInvitationalLetterRequest, opts ...grpc.CallOption) (*SSIndividualInvitationalLetter, error) {
	out := new(SSIndividualInvitationalLetter)
	err := c.cc.Invoke(ctx, "/blast.v1.score.InvitationalService/GetSSIndividualInvitationalLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationalServiceClient) InviteSSIndividualInvitationalEvent(ctx context.Context, in *InviteSSIndividualInvitationalEventRequest, opts ...grpc.CallOption) (*InviteSSIndividualInvitationalEventResponse, error) {
	out := new(InviteSSIndividualInvitationalEventResponse)
	err := c.cc.Invoke(ctx, "/blast.v1.score.InvitationalService/InviteSSIndividualInvitationalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationalServiceServer is the server API for InvitationalService service.
// All implementations must embed UnimplementedInvitationalServiceServer
// for forward compatibility
type InvitationalServiceServer interface {
	// ListSSIndividualInvitationals
	// admin
	ListSSIndividualInvitationalEvents(context.Context, *ListSSIndividualInvitationalEventsRequest) (*ListSSIndividualInvitationalEventsResponse, error)
	// CreateSSIndividualInvitationalEvent
	// admin
	CreateSSIndividualInvitationalEvent(context.Context, *CreateSSIndividualInvitationalEventRequest) (*SSIndividualInvitationalEvent, error)
	// Deprecated: Do not use.
	// GetSSIndividualInvitationalLetter
	// Get Active Invitational Letter
	// deprecated: use ListInvitationLetters
	GetSSIndividualInvitationalLetter(context.Context, *GetSSIndividualInvitationalLetterRequest) (*SSIndividualInvitationalLetter, error)
	// InviteSSIndividualInvitationalEvent
	// Send invitations based on past results.
	// for admin, not public api.
	InviteSSIndividualInvitationalEvent(context.Context, *InviteSSIndividualInvitationalEventRequest) (*InviteSSIndividualInvitationalEventResponse, error)
	mustEmbedUnimplementedInvitationalServiceServer()
}

// UnimplementedInvitationalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationalServiceServer struct {
}

func (UnimplementedInvitationalServiceServer) ListSSIndividualInvitationalEvents(context.Context, *ListSSIndividualInvitationalEventsRequest) (*ListSSIndividualInvitationalEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSIndividualInvitationalEvents not implemented")
}
func (UnimplementedInvitationalServiceServer) CreateSSIndividualInvitationalEvent(context.Context, *CreateSSIndividualInvitationalEventRequest) (*SSIndividualInvitationalEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSIndividualInvitationalEvent not implemented")
}
func (UnimplementedInvitationalServiceServer) GetSSIndividualInvitationalLetter(context.Context, *GetSSIndividualInvitationalLetterRequest) (*SSIndividualInvitationalLetter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSIndividualInvitationalLetter not implemented")
}
func (UnimplementedInvitationalServiceServer) InviteSSIndividualInvitationalEvent(context.Context, *InviteSSIndividualInvitationalEventRequest) (*InviteSSIndividualInvitationalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteSSIndividualInvitationalEvent not implemented")
}
func (UnimplementedInvitationalServiceServer) mustEmbedUnimplementedInvitationalServiceServer() {}

// UnsafeInvitationalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationalServiceServer will
// result in compilation errors.
type UnsafeInvitationalServiceServer interface {
	mustEmbedUnimplementedInvitationalServiceServer()
}

func RegisterInvitationalServiceServer(s grpc.ServiceRegistrar, srv InvitationalServiceServer) {
	s.RegisterService(&InvitationalService_ServiceDesc, srv)
}

func _InvitationalService_ListSSIndividualInvitationalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSIndividualInvitationalEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationalServiceServer).ListSSIndividualInvitationalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.score.InvitationalService/ListSSIndividualInvitationalEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationalServiceServer).ListSSIndividualInvitationalEvents(ctx, req.(*ListSSIndividualInvitationalEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationalService_CreateSSIndividualInvitationalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSSIndividualInvitationalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationalServiceServer).CreateSSIndividualInvitationalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.score.InvitationalService/CreateSSIndividualInvitationalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationalServiceServer).CreateSSIndividualInvitationalEvent(ctx, req.(*CreateSSIndividualInvitationalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationalService_GetSSIndividualInvitationalLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSIndividualInvitationalLetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationalServiceServer).GetSSIndividualInvitationalLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.score.InvitationalService/GetSSIndividualInvitationalLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationalServiceServer).GetSSIndividualInvitationalLetter(ctx, req.(*GetSSIndividualInvitationalLetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationalService_InviteSSIndividualInvitationalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteSSIndividualInvitationalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationalServiceServer).InviteSSIndividualInvitationalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.score.InvitationalService/InviteSSIndividualInvitationalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationalServiceServer).InviteSSIndividualInvitationalEvent(ctx, req.(*InviteSSIndividualInvitationalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationalService_ServiceDesc is the grpc.ServiceDesc for InvitationalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.score.InvitationalService",
	HandlerType: (*InvitationalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSSIndividualInvitationalEvents",
			Handler:    _InvitationalService_ListSSIndividualInvitationalEvents_Handler,
		},
		{
			MethodName: "CreateSSIndividualInvitationalEvent",
			Handler:    _InvitationalService_CreateSSIndividualInvitationalEvent_Handler,
		},
		{
			MethodName: "GetSSIndividualInvitationalLetter",
			Handler:    _InvitationalService_GetSSIndividualInvitationalLetter_Handler,
		},
		{
			MethodName: "InviteSSIndividualInvitationalEvent",
			Handler:    _InvitationalService_InviteSSIndividualInvitationalEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/score/invitational.proto",
}
