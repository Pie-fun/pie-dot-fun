// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/score/invitational.proto

package score

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SSIndividualInvitationalEvent
type SSIndividualInvitationalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of SSIndividualInvitationalEvent.
	// Format: invitationals/SSIndividual/events/{event}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// target year month.
	// This invitational event is held monthly.
	// iso 8601 format. ex) 2024-02
	YearMonth string `protobuf:"bytes,2,opt,name=year_month,json=yearMonth,proto3" json:"year_month,omitempty"`
	// The invitational event start date.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The invitational event end date.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// The user should write username in discord.
	FormLink string `protobuf:"bytes,5,opt,name=form_link,json=formLink,proto3" json:"form_link,omitempty"`
}

func (x *SSIndividualInvitationalEvent) Reset() {
	*x = SSIndividualInvitationalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSIndividualInvitationalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSIndividualInvitationalEvent) ProtoMessage() {}

func (x *SSIndividualInvitationalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSIndividualInvitationalEvent.ProtoReflect.Descriptor instead.
func (*SSIndividualInvitationalEvent) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{0}
}

func (x *SSIndividualInvitationalEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSIndividualInvitationalEvent) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *SSIndividualInvitationalEvent) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *SSIndividualInvitationalEvent) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *SSIndividualInvitationalEvent) GetFormLink() string {
	if x != nil {
		return x.FormLink
	}
	return ""
}

// SSIndividualInvitational
//
// Deprecated: Do not use.
type SSIndividualInvitational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of SSIndividualInvitational.
	// Format: invitationals/SSIndividuals/{invitational}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// target year month.
	// This invitational is held monthly.
	// iso 8601 format. ex) 2024-02
	YearMonth string `protobuf:"bytes,2,opt,name=year_month,json=yearMonth,proto3" json:"year_month,omitempty"`
	// The invitational start date.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The invitational end date.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// The user should write username in discord.
	FormLink string `protobuf:"bytes,5,opt,name=form_link,json=formLink,proto3" json:"form_link,omitempty"`
}

func (x *SSIndividualInvitational) Reset() {
	*x = SSIndividualInvitational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSIndividualInvitational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSIndividualInvitational) ProtoMessage() {}

func (x *SSIndividualInvitational) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSIndividualInvitational.ProtoReflect.Descriptor instead.
func (*SSIndividualInvitational) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{1}
}

func (x *SSIndividualInvitational) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSIndividualInvitational) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *SSIndividualInvitational) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *SSIndividualInvitational) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *SSIndividualInvitational) GetFormLink() string {
	if x != nil {
		return x.FormLink
	}
	return ""
}

// ListSSIndividualInvitationalEventsRequest
type ListSSIndividualInvitationalEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListSSIndividualInvitationalEventsRequest) Reset() {
	*x = ListSSIndividualInvitationalEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSIndividualInvitationalEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSIndividualInvitationalEventsRequest) ProtoMessage() {}

func (x *ListSSIndividualInvitationalEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSIndividualInvitationalEventsRequest.ProtoReflect.Descriptor instead.
func (*ListSSIndividualInvitationalEventsRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{2}
}

func (x *ListSSIndividualInvitationalEventsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// ListSSIndividualInvitationalEventsResponse
type ListSSIndividualInvitationalEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of SSIndividualInvitationalEvents.
	InvitationalEvents []*SSIndividualInvitationalEvent `protobuf:"bytes,1,rep,name=invitational_events,json=invitationalEvents,proto3" json:"invitational_events,omitempty"`
}

func (x *ListSSIndividualInvitationalEventsResponse) Reset() {
	*x = ListSSIndividualInvitationalEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSIndividualInvitationalEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSIndividualInvitationalEventsResponse) ProtoMessage() {}

func (x *ListSSIndividualInvitationalEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSIndividualInvitationalEventsResponse.ProtoReflect.Descriptor instead.
func (*ListSSIndividualInvitationalEventsResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{3}
}

func (x *ListSSIndividualInvitationalEventsResponse) GetInvitationalEvents() []*SSIndividualInvitationalEvent {
	if x != nil {
		return x.InvitationalEvents
	}
	return nil
}

// CreateSSIndividualInvitationalEventRequest
type CreateSSIndividualInvitationalEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SSIndividualInvitationalEvent to create.
	InvitationalEvent *SSIndividualInvitationalEvent `protobuf:"bytes,1,opt,name=invitational_event,json=invitationalEvent,proto3" json:"invitational_event,omitempty"`
}

func (x *CreateSSIndividualInvitationalEventRequest) Reset() {
	*x = CreateSSIndividualInvitationalEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSIndividualInvitationalEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSIndividualInvitationalEventRequest) ProtoMessage() {}

func (x *CreateSSIndividualInvitationalEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSIndividualInvitationalEventRequest.ProtoReflect.Descriptor instead.
func (*CreateSSIndividualInvitationalEventRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSSIndividualInvitationalEventRequest) GetInvitationalEvent() *SSIndividualInvitationalEvent {
	if x != nil {
		return x.InvitationalEvent
	}
	return nil
}

// GetSSIndividualInvitationalLetterRequest
//
// Deprecated: Do not use.
type GetSSIndividualInvitationalLetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSSIndividualInvitationalLetterRequest) Reset() {
	*x = GetSSIndividualInvitationalLetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSSIndividualInvitationalLetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSSIndividualInvitationalLetterRequest) ProtoMessage() {}

func (x *GetSSIndividualInvitationalLetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSSIndividualInvitationalLetterRequest.ProtoReflect.Descriptor instead.
func (*GetSSIndividualInvitationalLetterRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{5}
}

// SSIndividualInvitationalLetter
//
// Deprecated: Do not use.
type SSIndividualInvitationalLetter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// invitational
	Invitational *SSIndividualInvitational `protobuf:"bytes,1,opt,name=invitational,proto3" json:"invitational,omitempty"`
}

func (x *SSIndividualInvitationalLetter) Reset() {
	*x = SSIndividualInvitationalLetter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSIndividualInvitationalLetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSIndividualInvitationalLetter) ProtoMessage() {}

func (x *SSIndividualInvitationalLetter) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSIndividualInvitationalLetter.ProtoReflect.Descriptor instead.
func (*SSIndividualInvitationalLetter) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{6}
}

func (x *SSIndividualInvitationalLetter) GetInvitational() *SSIndividualInvitational {
	if x != nil {
		return x.Invitational
	}
	return nil
}

// InviteSSIndividualInvitationalEventRequest
type InviteSSIndividualInvitationalEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of SSIndividualInvitationalEvent.
	// Format: invitationals/SSIndividual/events/{event}
	InvitationalEvent string `protobuf:"bytes,1,opt,name=invitational_event,json=invitationalEvent,proto3" json:"invitational_event,omitempty"`
	// The list of invitees.
	// Format: users/{user}
	Invitees []string `protobuf:"bytes,2,rep,name=invitees,proto3" json:"invitees,omitempty"`
	// letter viewable start time
	ViewableStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=viewable_start_time,json=viewableStartTime,proto3" json:"viewable_start_time,omitempty"`
	// letter viewable end time
	ViewableEndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=viewable_end_time,json=viewableEndTime,proto3" json:"viewable_end_time,omitempty"`
}

func (x *InviteSSIndividualInvitationalEventRequest) Reset() {
	*x = InviteSSIndividualInvitationalEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteSSIndividualInvitationalEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteSSIndividualInvitationalEventRequest) ProtoMessage() {}

func (x *InviteSSIndividualInvitationalEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteSSIndividualInvitationalEventRequest.ProtoReflect.Descriptor instead.
func (*InviteSSIndividualInvitationalEventRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{7}
}

func (x *InviteSSIndividualInvitationalEventRequest) GetInvitationalEvent() string {
	if x != nil {
		return x.InvitationalEvent
	}
	return ""
}

func (x *InviteSSIndividualInvitationalEventRequest) GetInvitees() []string {
	if x != nil {
		return x.Invitees
	}
	return nil
}

func (x *InviteSSIndividualInvitationalEventRequest) GetViewableStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ViewableStartTime
	}
	return nil
}

func (x *InviteSSIndividualInvitationalEventRequest) GetViewableEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ViewableEndTime
	}
	return nil
}

// InviteSSIndividualInvitationalEventResponse
type InviteSSIndividualInvitationalEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of SSIndividualInvitationalEvent.
	// Format: invitationals/SSIndividual/events/{event}
	InvitationalEvent string `protobuf:"bytes,1,opt,name=invitational_event,json=invitationalEvent,proto3" json:"invitational_event,omitempty"`
	// The list of invitees.
	// Format: users/{user}
	Invitees []string `protobuf:"bytes,2,rep,name=invitees,proto3" json:"invitees,omitempty"`
	// letter viewable start time
	ViewableStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=viewable_start_time,json=viewableStartTime,proto3" json:"viewable_start_time,omitempty"`
	// letter viewable end time
	ViewableEndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=viewable_end_time,json=viewableEndTime,proto3" json:"viewable_end_time,omitempty"`
}

func (x *InviteSSIndividualInvitationalEventResponse) Reset() {
	*x = InviteSSIndividualInvitationalEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_score_invitational_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteSSIndividualInvitationalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteSSIndividualInvitationalEventResponse) ProtoMessage() {}

func (x *InviteSSIndividualInvitationalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_score_invitational_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteSSIndividualInvitationalEventResponse.ProtoReflect.Descriptor instead.
func (*InviteSSIndividualInvitationalEventResponse) Descriptor() ([]byte, []int) {
	return file_blast_v1_score_invitational_proto_rawDescGZIP(), []int{8}
}

func (x *InviteSSIndividualInvitationalEventResponse) GetInvitationalEvent() string {
	if x != nil {
		return x.InvitationalEvent
	}
	return ""
}

func (x *InviteSSIndividualInvitationalEventResponse) GetInvitees() []string {
	if x != nil {
		return x.Invitees
	}
	return nil
}

func (x *InviteSSIndividualInvitationalEventResponse) GetViewableStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ViewableStartTime
	}
	return nil
}

func (x *InviteSSIndividualInvitationalEventResponse) GetViewableEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ViewableEndTime
	}
	return nil
}

var File_blast_v1_score_invitational_proto protoreflect.FileDescriptor

var file_blast_v1_score_invitational_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x1d, 0x53, 0x53, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x66, 0xea, 0x41, 0x63, 0x0a,
	0x36, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x7d, 0x22, 0xc2, 0x02, 0x0a, 0x18, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x3a, 0x64, 0x18, 0x01, 0xea, 0x41, 0x5f, 0x0a, 0x31, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x7d, 0x22, 0x48, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x62, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x53, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x72, 0x0a, 0x1e, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x53, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xec, 0x02, 0x0a, 0x2a, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0xfa, 0x41, 0x38, 0x0a, 0x36, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x76, 0x69, 0x65,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x2b, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0xfa, 0x41, 0x38, 0x0a, 0x36, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0xb8, 0x07, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xed, 0x01, 0x0a, 0x22, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x39, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a,
	0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x73, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x56, 0xda,
	0x41, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x12, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x25,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x53, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x22, 0x30, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x73, 0x2f, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x2f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x83, 0x02, 0x0a, 0x23, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0xda, 0x41, 0x12, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x48, 0x3a, 0x01, 0x2a, 0x22, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x3d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x2f,
	0x53, 0x53, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x3b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_blast_v1_score_invitational_proto_rawDescOnce sync.Once
	file_blast_v1_score_invitational_proto_rawDescData = file_blast_v1_score_invitational_proto_rawDesc
)

func file_blast_v1_score_invitational_proto_rawDescGZIP() []byte {
	file_blast_v1_score_invitational_proto_rawDescOnce.Do(func() {
		file_blast_v1_score_invitational_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_score_invitational_proto_rawDescData)
	})
	return file_blast_v1_score_invitational_proto_rawDescData
}

var file_blast_v1_score_invitational_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_blast_v1_score_invitational_proto_goTypes = []interface{}{
	(*SSIndividualInvitationalEvent)(nil),               // 0: blast.v1.score.SSIndividualInvitationalEvent
	(*SSIndividualInvitational)(nil),                    // 1: blast.v1.score.SSIndividualInvitational
	(*ListSSIndividualInvitationalEventsRequest)(nil),   // 2: blast.v1.score.ListSSIndividualInvitationalEventsRequest
	(*ListSSIndividualInvitationalEventsResponse)(nil),  // 3: blast.v1.score.ListSSIndividualInvitationalEventsResponse
	(*CreateSSIndividualInvitationalEventRequest)(nil),  // 4: blast.v1.score.CreateSSIndividualInvitationalEventRequest
	(*GetSSIndividualInvitationalLetterRequest)(nil),    // 5: blast.v1.score.GetSSIndividualInvitationalLetterRequest
	(*SSIndividualInvitationalLetter)(nil),              // 6: blast.v1.score.SSIndividualInvitationalLetter
	(*InviteSSIndividualInvitationalEventRequest)(nil),  // 7: blast.v1.score.InviteSSIndividualInvitationalEventRequest
	(*InviteSSIndividualInvitationalEventResponse)(nil), // 8: blast.v1.score.InviteSSIndividualInvitationalEventResponse
	(*timestamppb.Timestamp)(nil),                       // 9: google.protobuf.Timestamp
}
var file_blast_v1_score_invitational_proto_depIdxs = []int32{
	9,  // 0: blast.v1.score.SSIndividualInvitationalEvent.start_date:type_name -> google.protobuf.Timestamp
	9,  // 1: blast.v1.score.SSIndividualInvitationalEvent.end_date:type_name -> google.protobuf.Timestamp
	9,  // 2: blast.v1.score.SSIndividualInvitational.start_date:type_name -> google.protobuf.Timestamp
	9,  // 3: blast.v1.score.SSIndividualInvitational.end_date:type_name -> google.protobuf.Timestamp
	0,  // 4: blast.v1.score.ListSSIndividualInvitationalEventsResponse.invitational_events:type_name -> blast.v1.score.SSIndividualInvitationalEvent
	0,  // 5: blast.v1.score.CreateSSIndividualInvitationalEventRequest.invitational_event:type_name -> blast.v1.score.SSIndividualInvitationalEvent
	1,  // 6: blast.v1.score.SSIndividualInvitationalLetter.invitational:type_name -> blast.v1.score.SSIndividualInvitational
	9,  // 7: blast.v1.score.InviteSSIndividualInvitationalEventRequest.viewable_start_time:type_name -> google.protobuf.Timestamp
	9,  // 8: blast.v1.score.InviteSSIndividualInvitationalEventRequest.viewable_end_time:type_name -> google.protobuf.Timestamp
	9,  // 9: blast.v1.score.InviteSSIndividualInvitationalEventResponse.viewable_start_time:type_name -> google.protobuf.Timestamp
	9,  // 10: blast.v1.score.InviteSSIndividualInvitationalEventResponse.viewable_end_time:type_name -> google.protobuf.Timestamp
	2,  // 11: blast.v1.score.InvitationalService.ListSSIndividualInvitationalEvents:input_type -> blast.v1.score.ListSSIndividualInvitationalEventsRequest
	4,  // 12: blast.v1.score.InvitationalService.CreateSSIndividualInvitationalEvent:input_type -> blast.v1.score.CreateSSIndividualInvitationalEventRequest
	5,  // 13: blast.v1.score.InvitationalService.GetSSIndividualInvitationalLetter:input_type -> blast.v1.score.GetSSIndividualInvitationalLetterRequest
	7,  // 14: blast.v1.score.InvitationalService.InviteSSIndividualInvitationalEvent:input_type -> blast.v1.score.InviteSSIndividualInvitationalEventRequest
	3,  // 15: blast.v1.score.InvitationalService.ListSSIndividualInvitationalEvents:output_type -> blast.v1.score.ListSSIndividualInvitationalEventsResponse
	0,  // 16: blast.v1.score.InvitationalService.CreateSSIndividualInvitationalEvent:output_type -> blast.v1.score.SSIndividualInvitationalEvent
	6,  // 17: blast.v1.score.InvitationalService.GetSSIndividualInvitationalLetter:output_type -> blast.v1.score.SSIndividualInvitationalLetter
	8,  // 18: blast.v1.score.InvitationalService.InviteSSIndividualInvitationalEvent:output_type -> blast.v1.score.InviteSSIndividualInvitationalEventResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_blast_v1_score_invitational_proto_init() }
func file_blast_v1_score_invitational_proto_init() {
	if File_blast_v1_score_invitational_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_score_invitational_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSIndividualInvitationalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSIndividualInvitational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSIndividualInvitationalEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSIndividualInvitationalEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSIndividualInvitationalEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSSIndividualInvitationalLetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSIndividualInvitationalLetter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteSSIndividualInvitationalEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_score_invitational_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteSSIndividualInvitationalEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_score_invitational_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_score_invitational_proto_goTypes,
		DependencyIndexes: file_blast_v1_score_invitational_proto_depIdxs,
		MessageInfos:      file_blast_v1_score_invitational_proto_msgTypes,
	}.Build()
	File_blast_v1_score_invitational_proto = out.File
	file_blast_v1_score_invitational_proto_rawDesc = nil
	file_blast_v1_score_invitational_proto_goTypes = nil
	file_blast_v1_score_invitational_proto_depIdxs = nil
}
