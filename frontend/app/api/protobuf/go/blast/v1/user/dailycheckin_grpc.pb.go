// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/user/dailycheckin.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DailyCheckinServiceClient is the client API for DailyCheckinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DailyCheckinServiceClient interface {
	// GetDailyCheckin will return the User's DailyCheckin
	GetDailyCheckin(ctx context.Context, in *GetDailyCheckinRequest, opts ...grpc.CallOption) (*DailyCheckin, error)
}

type dailyCheckinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDailyCheckinServiceClient(cc grpc.ClientConnInterface) DailyCheckinServiceClient {
	return &dailyCheckinServiceClient{cc}
}

func (c *dailyCheckinServiceClient) GetDailyCheckin(ctx context.Context, in *GetDailyCheckinRequest, opts ...grpc.CallOption) (*DailyCheckin, error) {
	out := new(DailyCheckin)
	err := c.cc.Invoke(ctx, "/blast.v1.user.DailyCheckinService/GetDailyCheckin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyCheckinServiceServer is the server API for DailyCheckinService service.
// All implementations must embed UnimplementedDailyCheckinServiceServer
// for forward compatibility
type DailyCheckinServiceServer interface {
	// GetDailyCheckin will return the User's DailyCheckin
	GetDailyCheckin(context.Context, *GetDailyCheckinRequest) (*DailyCheckin, error)
	mustEmbedUnimplementedDailyCheckinServiceServer()
}

// UnimplementedDailyCheckinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDailyCheckinServiceServer struct {
}

func (UnimplementedDailyCheckinServiceServer) GetDailyCheckin(context.Context, *GetDailyCheckinRequest) (*DailyCheckin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyCheckin not implemented")
}
func (UnimplementedDailyCheckinServiceServer) mustEmbedUnimplementedDailyCheckinServiceServer() {}

// UnsafeDailyCheckinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DailyCheckinServiceServer will
// result in compilation errors.
type UnsafeDailyCheckinServiceServer interface {
	mustEmbedUnimplementedDailyCheckinServiceServer()
}

func RegisterDailyCheckinServiceServer(s grpc.ServiceRegistrar, srv DailyCheckinServiceServer) {
	s.RegisterService(&DailyCheckinService_ServiceDesc, srv)
}

func _DailyCheckinService_GetDailyCheckin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyCheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyCheckinServiceServer).GetDailyCheckin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.user.DailyCheckinService/GetDailyCheckin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyCheckinServiceServer).GetDailyCheckin(ctx, req.(*GetDailyCheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DailyCheckinService_ServiceDesc is the grpc.ServiceDesc for DailyCheckinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DailyCheckinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.user.DailyCheckinService",
	HandlerType: (*DailyCheckinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailyCheckin",
			Handler:    _DailyCheckinService_GetDailyCheckin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/user/dailycheckin.proto",
}
