// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/user/dailycheckin.proto

package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDailyCheckinServiceClient is a mock of DailyCheckinServiceClient interface.
type MockDailyCheckinServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDailyCheckinServiceClientMockRecorder
}

// MockDailyCheckinServiceClientMockRecorder is the mock recorder for MockDailyCheckinServiceClient.
type MockDailyCheckinServiceClientMockRecorder struct {
	mock *MockDailyCheckinServiceClient
}

// NewMockDailyCheckinServiceClient creates a new mock instance.
func NewMockDailyCheckinServiceClient(ctrl *gomock.Controller) *MockDailyCheckinServiceClient {
	mock := &MockDailyCheckinServiceClient{ctrl: ctrl}
	mock.recorder = &MockDailyCheckinServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDailyCheckinServiceClient) EXPECT() *MockDailyCheckinServiceClientMockRecorder {
	return m.recorder
}

// GetDailyCheckin mocks base method.
func (m *MockDailyCheckinServiceClient) GetDailyCheckin(ctx context.Context, in *GetDailyCheckinRequest, opts ...grpc.CallOption) (*DailyCheckin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDailyCheckin", varargs...)
	ret0, _ := ret[0].(*DailyCheckin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyCheckin indicates an expected call of GetDailyCheckin.
func (mr *MockDailyCheckinServiceClientMockRecorder) GetDailyCheckin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyCheckin", reflect.TypeOf((*MockDailyCheckinServiceClient)(nil).GetDailyCheckin), varargs...)
}

// MockDailyCheckinServiceServer is a mock of DailyCheckinServiceServer interface.
type MockDailyCheckinServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDailyCheckinServiceServerMockRecorder
}

// MockDailyCheckinServiceServerMockRecorder is the mock recorder for MockDailyCheckinServiceServer.
type MockDailyCheckinServiceServerMockRecorder struct {
	mock *MockDailyCheckinServiceServer
}

// NewMockDailyCheckinServiceServer creates a new mock instance.
func NewMockDailyCheckinServiceServer(ctrl *gomock.Controller) *MockDailyCheckinServiceServer {
	mock := &MockDailyCheckinServiceServer{ctrl: ctrl}
	mock.recorder = &MockDailyCheckinServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDailyCheckinServiceServer) EXPECT() *MockDailyCheckinServiceServerMockRecorder {
	return m.recorder
}

// GetDailyCheckin mocks base method.
func (m *MockDailyCheckinServiceServer) GetDailyCheckin(ctx context.Context, in *GetDailyCheckinRequest) (*DailyCheckin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyCheckin", ctx, in)
	ret0, _ := ret[0].(*DailyCheckin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyCheckin indicates an expected call of GetDailyCheckin.
func (mr *MockDailyCheckinServiceServerMockRecorder) GetDailyCheckin(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyCheckin", reflect.TypeOf((*MockDailyCheckinServiceServer)(nil).GetDailyCheckin), ctx, in)
}
