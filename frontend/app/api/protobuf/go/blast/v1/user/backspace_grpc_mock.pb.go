// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: blast/v1/user/backspace.proto

package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBackspaceServiceClient is a mock of BackspaceServiceClient interface.
type MockBackspaceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackspaceServiceClientMockRecorder
}

// MockBackspaceServiceClientMockRecorder is the mock recorder for MockBackspaceServiceClient.
type MockBackspaceServiceClientMockRecorder struct {
	mock *MockBackspaceServiceClient
}

// NewMockBackspaceServiceClient creates a new mock instance.
func NewMockBackspaceServiceClient(ctrl *gomock.Controller) *MockBackspaceServiceClient {
	mock := &MockBackspaceServiceClient{ctrl: ctrl}
	mock.recorder = &MockBackspaceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackspaceServiceClient) EXPECT() *MockBackspaceServiceClientMockRecorder {
	return m.recorder
}

// GetBackspace mocks base method.
func (m *MockBackspaceServiceClient) GetBackspace(ctx context.Context, in *GetBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackspace", varargs...)
	ret0, _ := ret[0].(*Backspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackspace indicates an expected call of GetBackspace.
func (mr *MockBackspaceServiceClientMockRecorder) GetBackspace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackspace", reflect.TypeOf((*MockBackspaceServiceClient)(nil).GetBackspace), varargs...)
}

// UpdateBackspace mocks base method.
func (m *MockBackspaceServiceClient) UpdateBackspace(ctx context.Context, in *UpdateBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackspace", varargs...)
	ret0, _ := ret[0].(*Backspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackspace indicates an expected call of UpdateBackspace.
func (mr *MockBackspaceServiceClientMockRecorder) UpdateBackspace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackspace", reflect.TypeOf((*MockBackspaceServiceClient)(nil).UpdateBackspace), varargs...)
}

// MockBackspaceServiceServer is a mock of BackspaceServiceServer interface.
type MockBackspaceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackspaceServiceServerMockRecorder
}

// MockBackspaceServiceServerMockRecorder is the mock recorder for MockBackspaceServiceServer.
type MockBackspaceServiceServerMockRecorder struct {
	mock *MockBackspaceServiceServer
}

// NewMockBackspaceServiceServer creates a new mock instance.
func NewMockBackspaceServiceServer(ctrl *gomock.Controller) *MockBackspaceServiceServer {
	mock := &MockBackspaceServiceServer{ctrl: ctrl}
	mock.recorder = &MockBackspaceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackspaceServiceServer) EXPECT() *MockBackspaceServiceServerMockRecorder {
	return m.recorder
}

// GetBackspace mocks base method.
func (m *MockBackspaceServiceServer) GetBackspace(ctx context.Context, in *GetBackspaceRequest) (*Backspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackspace", ctx, in)
	ret0, _ := ret[0].(*Backspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackspace indicates an expected call of GetBackspace.
func (mr *MockBackspaceServiceServerMockRecorder) GetBackspace(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackspace", reflect.TypeOf((*MockBackspaceServiceServer)(nil).GetBackspace), ctx, in)
}

// UpdateBackspace mocks base method.
func (m *MockBackspaceServiceServer) UpdateBackspace(ctx context.Context, in *UpdateBackspaceRequest) (*Backspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackspace", ctx, in)
	ret0, _ := ret[0].(*Backspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackspace indicates an expected call of UpdateBackspace.
func (mr *MockBackspaceServiceServerMockRecorder) UpdateBackspace(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackspace", reflect.TypeOf((*MockBackspaceServiceServer)(nil).UpdateBackspace), ctx, in)
}
