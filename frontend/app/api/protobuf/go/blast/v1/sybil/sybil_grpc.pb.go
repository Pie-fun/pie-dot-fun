// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blast/v1/sybil/sybil.proto

package sybil

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SybilServiceClient is the client API for SybilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SybilServiceClient interface {
	GetSybil(ctx context.Context, in *GetSybilRequest, opts ...grpc.CallOption) (*Sybil, error)
}

type sybilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSybilServiceClient(cc grpc.ClientConnInterface) SybilServiceClient {
	return &sybilServiceClient{cc}
}

func (c *sybilServiceClient) GetSybil(ctx context.Context, in *GetSybilRequest, opts ...grpc.CallOption) (*Sybil, error) {
	out := new(Sybil)
	err := c.cc.Invoke(ctx, "/blast.v1.sybil.SybilService/GetSybil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SybilServiceServer is the server API for SybilService service.
// All implementations must embed UnimplementedSybilServiceServer
// for forward compatibility
type SybilServiceServer interface {
	GetSybil(context.Context, *GetSybilRequest) (*Sybil, error)
	mustEmbedUnimplementedSybilServiceServer()
}

// UnimplementedSybilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSybilServiceServer struct {
}

func (UnimplementedSybilServiceServer) GetSybil(context.Context, *GetSybilRequest) (*Sybil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSybil not implemented")
}
func (UnimplementedSybilServiceServer) mustEmbedUnimplementedSybilServiceServer() {}

// UnsafeSybilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SybilServiceServer will
// result in compilation errors.
type UnsafeSybilServiceServer interface {
	mustEmbedUnimplementedSybilServiceServer()
}

func RegisterSybilServiceServer(s grpc.ServiceRegistrar, srv SybilServiceServer) {
	s.RegisterService(&SybilService_ServiceDesc, srv)
}

func _SybilService_GetSybil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSybilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SybilServiceServer).GetSybil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.v1.sybil.SybilService/GetSybil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SybilServiceServer).GetSybil(ctx, req.(*GetSybilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SybilService_ServiceDesc is the grpc.ServiceDesc for SybilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SybilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blast.v1.sybil.SybilService",
	HandlerType: (*SybilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSybil",
			Handler:    _SybilService_GetSybil_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blast/v1/sybil/sybil.proto",
}
