// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: blast/v1/wallet/wallet.proto

package wallet

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the wallet to retrieve.
	// Format: wallets/{address}
	// Alias "wallets/me" is supported.
	Wallet string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetWalletRequest) Reset() {
	*x = GetWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletRequest) ProtoMessage() {}

func (x *GetWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletRequest.ProtoReflect.Descriptor instead.
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *GetWalletRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TotalPoints uint32       `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	EarlyAccess *EarlyAccess `protobuf:"bytes,3,opt,name=early_access,json=earlyAccess,proto3" json:"early_access,omitempty"`
	BlastBridge *BlastBridge `protobuf:"bytes,4,opt,name=blast_bridge,json=blastBridge,proto3" json:"blast_bridge,omitempty"`
	NftAssets   *NFTAssets   `protobuf:"bytes,5,opt,name=nft_assets,json=nftAssets,proto3" json:"nft_assets,omitempty"`
	CryptoOg    *CryptoOG    `protobuf:"bytes,6,opt,name=crypto_og,json=cryptoOg,proto3" json:"crypto_og,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *Wallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Wallet) GetTotalPoints() uint32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Wallet) GetEarlyAccess() *EarlyAccess {
	if x != nil {
		return x.EarlyAccess
	}
	return nil
}

func (x *Wallet) GetBlastBridge() *BlastBridge {
	if x != nil {
		return x.BlastBridge
	}
	return nil
}

func (x *Wallet) GetNftAssets() *NFTAssets {
	if x != nil {
		return x.NftAssets
	}
	return nil
}

func (x *Wallet) GetCryptoOg() *CryptoOG {
	if x != nil {
		return x.CryptoOg
	}
	return nil
}

type EarlyAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalxePoints uint32 `protobuf:"varint,1,opt,name=galxe_points,json=galxePoints,proto3" json:"galxe_points,omitempty"`
}

func (x *EarlyAccess) Reset() {
	*x = EarlyAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarlyAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlyAccess) ProtoMessage() {}

func (x *EarlyAccess) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlyAccess.ProtoReflect.Descriptor instead.
func (*EarlyAccess) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *EarlyAccess) GetGalxePoints() uint32 {
	if x != nil {
		return x.GalxePoints
	}
	return 0
}

type BlastBridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ETH   float32 `protobuf:"fixed32,1,opt,name=ETH,proto3" json:"ETH,omitempty"`
	StETH float32 `protobuf:"fixed32,2,opt,name=stETH,proto3" json:"stETH,omitempty"`
	DAI   float32 `protobuf:"fixed32,3,opt,name=DAI,proto3" json:"DAI,omitempty"`
	USDT  float32 `protobuf:"fixed32,4,opt,name=USDT,proto3" json:"USDT,omitempty"`
	USDC  float32 `protobuf:"fixed32,5,opt,name=USDC,proto3" json:"USDC,omitempty"`
}

func (x *BlastBridge) Reset() {
	*x = BlastBridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlastBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastBridge) ProtoMessage() {}

func (x *BlastBridge) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastBridge.ProtoReflect.Descriptor instead.
func (*BlastBridge) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *BlastBridge) GetETH() float32 {
	if x != nil {
		return x.ETH
	}
	return 0
}

func (x *BlastBridge) GetStETH() float32 {
	if x != nil {
		return x.StETH
	}
	return 0
}

func (x *BlastBridge) GetDAI() float32 {
	if x != nil {
		return x.DAI
	}
	return 0
}

func (x *BlastBridge) GetUSDT() float32 {
	if x != nil {
		return x.USDT
	}
	return 0
}

func (x *BlastBridge) GetUSDC() float32 {
	if x != nil {
		return x.USDC
	}
	return 0
}

type NFTAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NFTAssets) Reset() {
	*x = NFTAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTAssets) ProtoMessage() {}

func (x *NFTAssets) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTAssets.ProtoReflect.Descriptor instead.
func (*NFTAssets) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *NFTAssets) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CryptoOG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Og bool `protobuf:"varint,1,opt,name=og,proto3" json:"og,omitempty"`
}

func (x *CryptoOG) Reset() {
	*x = CryptoOG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blast_v1_wallet_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoOG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoOG) ProtoMessage() {}

func (x *CryptoOG) ProtoReflect() protoreflect.Message {
	mi := &file_blast_v1_wallet_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoOG.ProtoReflect.Descriptor instead.
func (*CryptoOG) Descriptor() ([]byte, []int) {
	return file_blast_v1_wallet_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *CryptoOG) GetOg() bool {
	if x != nil {
		return x.Og
	}
	return false
}

var File_blast_v1_wallet_wallet_proto protoreflect.FileDescriptor

var file_blast_v1_wallet_wallet_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x21, 0x0a,
	0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x06, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x66, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x09, 0x6e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4f, 0x47, 0x52, 0x08, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x4f, 0x67, 0x3a, 0x37, 0xea, 0x41, 0x34, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x11, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x22, 0x30,
	0x0a, 0x0b, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x6c, 0x78, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x6c, 0x78, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x6f, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x45, 0x54,
	0x48, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x45, 0x54, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x74, 0x45, 0x54, 0x48, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x41, 0x49, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x41, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x53, 0x44,
	0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x55, 0x53, 0x44, 0x54, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x53, 0x44, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x55, 0x53, 0x44,
	0x43, 0x22, 0x21, 0x0a, 0x09, 0x4e, 0x46, 0x54, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4f, 0x47,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x67,
	0x32, 0x81, 0x01, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x21, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x27, 0xda, 0x41, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blast_v1_wallet_wallet_proto_rawDescOnce sync.Once
	file_blast_v1_wallet_wallet_proto_rawDescData = file_blast_v1_wallet_wallet_proto_rawDesc
)

func file_blast_v1_wallet_wallet_proto_rawDescGZIP() []byte {
	file_blast_v1_wallet_wallet_proto_rawDescOnce.Do(func() {
		file_blast_v1_wallet_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_blast_v1_wallet_wallet_proto_rawDescData)
	})
	return file_blast_v1_wallet_wallet_proto_rawDescData
}

var file_blast_v1_wallet_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_blast_v1_wallet_wallet_proto_goTypes = []interface{}{
	(*GetWalletRequest)(nil), // 0: blast.v1.wallet.GetWalletRequest
	(*Wallet)(nil),           // 1: blast.v1.wallet.Wallet
	(*EarlyAccess)(nil),      // 2: blast.v1.wallet.EarlyAccess
	(*BlastBridge)(nil),      // 3: blast.v1.wallet.BlastBridge
	(*NFTAssets)(nil),        // 4: blast.v1.wallet.NFTAssets
	(*CryptoOG)(nil),         // 5: blast.v1.wallet.CryptoOG
}
var file_blast_v1_wallet_wallet_proto_depIdxs = []int32{
	2, // 0: blast.v1.wallet.Wallet.early_access:type_name -> blast.v1.wallet.EarlyAccess
	3, // 1: blast.v1.wallet.Wallet.blast_bridge:type_name -> blast.v1.wallet.BlastBridge
	4, // 2: blast.v1.wallet.Wallet.nft_assets:type_name -> blast.v1.wallet.NFTAssets
	5, // 3: blast.v1.wallet.Wallet.crypto_og:type_name -> blast.v1.wallet.CryptoOG
	0, // 4: blast.v1.wallet.WalletService.GetWallet:input_type -> blast.v1.wallet.GetWalletRequest
	1, // 5: blast.v1.wallet.WalletService.GetWallet:output_type -> blast.v1.wallet.Wallet
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_blast_v1_wallet_wallet_proto_init() }
func file_blast_v1_wallet_wallet_proto_init() {
	if File_blast_v1_wallet_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blast_v1_wallet_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_wallet_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_wallet_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarlyAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_wallet_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlastBridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_wallet_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blast_v1_wallet_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoOG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blast_v1_wallet_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blast_v1_wallet_wallet_proto_goTypes,
		DependencyIndexes: file_blast_v1_wallet_wallet_proto_depIdxs,
		MessageInfos:      file_blast_v1_wallet_wallet_proto_msgTypes,
	}.Build()
	File_blast_v1_wallet_wallet_proto = out.File
	file_blast_v1_wallet_wallet_proto_rawDesc = nil
	file_blast_v1_wallet_wallet_proto_goTypes = nil
	file_blast_v1_wallet_wallet_proto_depIdxs = nil
}
