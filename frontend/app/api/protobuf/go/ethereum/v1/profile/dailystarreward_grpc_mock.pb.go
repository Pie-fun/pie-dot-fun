// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/profile/dailystarreward.proto

package profile

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDailyStarRewardServiceClient is a mock of DailyStarRewardServiceClient interface.
type MockDailyStarRewardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDailyStarRewardServiceClientMockRecorder
}

// MockDailyStarRewardServiceClientMockRecorder is the mock recorder for MockDailyStarRewardServiceClient.
type MockDailyStarRewardServiceClientMockRecorder struct {
	mock *MockDailyStarRewardServiceClient
}

// NewMockDailyStarRewardServiceClient creates a new mock instance.
func NewMockDailyStarRewardServiceClient(ctrl *gomock.Controller) *MockDailyStarRewardServiceClient {
	mock := &MockDailyStarRewardServiceClient{ctrl: ctrl}
	mock.recorder = &MockDailyStarRewardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDailyStarRewardServiceClient) EXPECT() *MockDailyStarRewardServiceClientMockRecorder {
	return m.recorder
}

// ClaimMyDailyStarReward mocks base method.
func (m *MockDailyStarRewardServiceClient) ClaimMyDailyStarReward(ctx context.Context, in *ClaimMyDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimMyDailyStarReward", varargs...)
	ret0, _ := ret[0].(*DailyStarReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimMyDailyStarReward indicates an expected call of ClaimMyDailyStarReward.
func (mr *MockDailyStarRewardServiceClientMockRecorder) ClaimMyDailyStarReward(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimMyDailyStarReward", reflect.TypeOf((*MockDailyStarRewardServiceClient)(nil).ClaimMyDailyStarReward), varargs...)
}

// GetDailyStarReward mocks base method.
func (m *MockDailyStarRewardServiceClient) GetDailyStarReward(ctx context.Context, in *GetDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDailyStarReward", varargs...)
	ret0, _ := ret[0].(*DailyStarReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyStarReward indicates an expected call of GetDailyStarReward.
func (mr *MockDailyStarRewardServiceClientMockRecorder) GetDailyStarReward(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyStarReward", reflect.TypeOf((*MockDailyStarRewardServiceClient)(nil).GetDailyStarReward), varargs...)
}

// MockDailyStarRewardServiceServer is a mock of DailyStarRewardServiceServer interface.
type MockDailyStarRewardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDailyStarRewardServiceServerMockRecorder
}

// MockDailyStarRewardServiceServerMockRecorder is the mock recorder for MockDailyStarRewardServiceServer.
type MockDailyStarRewardServiceServerMockRecorder struct {
	mock *MockDailyStarRewardServiceServer
}

// NewMockDailyStarRewardServiceServer creates a new mock instance.
func NewMockDailyStarRewardServiceServer(ctrl *gomock.Controller) *MockDailyStarRewardServiceServer {
	mock := &MockDailyStarRewardServiceServer{ctrl: ctrl}
	mock.recorder = &MockDailyStarRewardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDailyStarRewardServiceServer) EXPECT() *MockDailyStarRewardServiceServerMockRecorder {
	return m.recorder
}

// ClaimMyDailyStarReward mocks base method.
func (m *MockDailyStarRewardServiceServer) ClaimMyDailyStarReward(ctx context.Context, in *ClaimMyDailyStarRewardRequest) (*DailyStarReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimMyDailyStarReward", ctx, in)
	ret0, _ := ret[0].(*DailyStarReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimMyDailyStarReward indicates an expected call of ClaimMyDailyStarReward.
func (mr *MockDailyStarRewardServiceServerMockRecorder) ClaimMyDailyStarReward(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimMyDailyStarReward", reflect.TypeOf((*MockDailyStarRewardServiceServer)(nil).ClaimMyDailyStarReward), ctx, in)
}

// GetDailyStarReward mocks base method.
func (m *MockDailyStarRewardServiceServer) GetDailyStarReward(ctx context.Context, in *GetDailyStarRewardRequest) (*DailyStarReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyStarReward", ctx, in)
	ret0, _ := ret[0].(*DailyStarReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyStarReward indicates an expected call of GetDailyStarReward.
func (mr *MockDailyStarRewardServiceServerMockRecorder) GetDailyStarReward(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyStarReward", reflect.TypeOf((*MockDailyStarRewardServiceServer)(nil).GetDailyStarReward), ctx, in)
}
