// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/profile/profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// ListProfiles will return Profiles.
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
	// GetProfile will return Profile.
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	// UpdateProfile update Profile.
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	// GetMySpace will return the Profile's MySpace.
	GetMySpace(ctx context.Context, in *GetMySpaceRequest, opts ...grpc.CallOption) (*MySpace, error)
	// UpdateMySpace update Profile's MySpace.
	UpdateMySpace(ctx context.Context, in *UpdateMySpaceRequest, opts ...grpc.CallOption) (*MySpace, error)
	// GetProfileDailyPlayCount will return the Profile's daily play count.
	GetProfileDailyPlayCount(ctx context.Context, in *GetProfileDailyPlayCountRequest, opts ...grpc.CallOption) (*GetProfileDailyPlayCountResponse, error)
	// IncrementProfileDailyPlayCount will return the Profile's daily play count.
	IncrementProfileDailyPlayCount(ctx context.Context, in *IncrementProfileDailyPlayCountRequest, opts ...grpc.CallOption) (*IncrementProfileDailyPlayCountResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetMySpace(ctx context.Context, in *GetMySpaceRequest, opts ...grpc.CallOption) (*MySpace, error) {
	out := new(MySpace)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/GetMySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateMySpace(ctx context.Context, in *UpdateMySpaceRequest, opts ...grpc.CallOption) (*MySpace, error) {
	out := new(MySpace)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/UpdateMySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileDailyPlayCount(ctx context.Context, in *GetProfileDailyPlayCountRequest, opts ...grpc.CallOption) (*GetProfileDailyPlayCountResponse, error) {
	out := new(GetProfileDailyPlayCountResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/GetProfileDailyPlayCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) IncrementProfileDailyPlayCount(ctx context.Context, in *IncrementProfileDailyPlayCountRequest, opts ...grpc.CallOption) (*IncrementProfileDailyPlayCountResponse, error) {
	out := new(IncrementProfileDailyPlayCountResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.ProfileService/IncrementProfileDailyPlayCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	// ListProfiles will return Profiles.
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	// GetProfile will return Profile.
	GetProfile(context.Context, *GetProfileRequest) (*Profile, error)
	// UpdateProfile update Profile.
	UpdateProfile(context.Context, *UpdateProfileRequest) (*Profile, error)
	// GetMySpace will return the Profile's MySpace.
	GetMySpace(context.Context, *GetMySpaceRequest) (*MySpace, error)
	// UpdateMySpace update Profile's MySpace.
	UpdateMySpace(context.Context, *UpdateMySpaceRequest) (*MySpace, error)
	// GetProfileDailyPlayCount will return the Profile's daily play count.
	GetProfileDailyPlayCount(context.Context, *GetProfileDailyPlayCountRequest) (*GetProfileDailyPlayCountResponse, error)
	// IncrementProfileDailyPlayCount will return the Profile's daily play count.
	IncrementProfileDailyPlayCount(context.Context, *IncrementProfileDailyPlayCountRequest) (*IncrementProfileDailyPlayCountResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetMySpace(context.Context, *GetMySpaceRequest) (*MySpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySpace not implemented")
}
func (UnimplementedProfileServiceServer) UpdateMySpace(context.Context, *UpdateMySpaceRequest) (*MySpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMySpace not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileDailyPlayCount(context.Context, *GetProfileDailyPlayCountRequest) (*GetProfileDailyPlayCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileDailyPlayCount not implemented")
}
func (UnimplementedProfileServiceServer) IncrementProfileDailyPlayCount(context.Context, *IncrementProfileDailyPlayCountRequest) (*IncrementProfileDailyPlayCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementProfileDailyPlayCount not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetMySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetMySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/GetMySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetMySpace(ctx, req.(*GetMySpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateMySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMySpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateMySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/UpdateMySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateMySpace(ctx, req.(*UpdateMySpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileDailyPlayCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileDailyPlayCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileDailyPlayCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/GetProfileDailyPlayCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileDailyPlayCount(ctx, req.(*GetProfileDailyPlayCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_IncrementProfileDailyPlayCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementProfileDailyPlayCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).IncrementProfileDailyPlayCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.ProfileService/IncrementProfileDailyPlayCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).IncrementProfileDailyPlayCount(ctx, req.(*IncrementProfileDailyPlayCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProfiles",
			Handler:    _ProfileService_ListProfiles_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetMySpace",
			Handler:    _ProfileService_GetMySpace_Handler,
		},
		{
			MethodName: "UpdateMySpace",
			Handler:    _ProfileService_UpdateMySpace_Handler,
		},
		{
			MethodName: "GetProfileDailyPlayCount",
			Handler:    _ProfileService_GetProfileDailyPlayCount_Handler,
		},
		{
			MethodName: "IncrementProfileDailyPlayCount",
			Handler:    _ProfileService_IncrementProfileDailyPlayCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/profile/profile.proto",
}
