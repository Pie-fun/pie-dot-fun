// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ethereum/v1/profile/profile.proto

package profile

import (
	outpost "github.com/ao-labs/spacebar-apis/go/ethereum/v1/outpost"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of profile
type ProfileState int32

const (
	// default value. this value is unused.
	ProfileState_STATE_UNSPECIFIED ProfileState = 0
	// Profile was firstly created but not started to rent base spaceship.
	// This state is very transitory state because next transaction will change it to PROTOSHIP_MINTED or OWNERSHIP_ACQUIRED state immediately.
	ProfileState_CREATED ProfileState = 1
	// Profile was firstly created with base spaceship rental.
	ProfileState_PROTOSHIP_MINTED ProfileState = 2
	// Profile was created with base spaceship rental but failed to acquire
	ProfileState_PROTOSHIP_BURNED ProfileState = 3
	// Profile has acquired ownership.
	ProfileState_OWNERSHIP_ACQUIRED ProfileState = 4
)

// Enum value maps for ProfileState.
var (
	ProfileState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATED",
		2: "PROTOSHIP_MINTED",
		3: "PROTOSHIP_BURNED",
		4: "OWNERSHIP_ACQUIRED",
	}
	ProfileState_value = map[string]int32{
		"STATE_UNSPECIFIED":  0,
		"CREATED":            1,
		"PROTOSHIP_MINTED":   2,
		"PROTOSHIP_BURNED":   3,
		"OWNERSHIP_ACQUIRED": 4,
	}
)

func (x ProfileState) Enum() *ProfileState {
	p := new(ProfileState)
	*p = x
	return p
}

func (x ProfileState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileState) Descriptor() protoreflect.EnumDescriptor {
	return file_ethereum_v1_profile_profile_proto_enumTypes[0].Descriptor()
}

func (ProfileState) Type() protoreflect.EnumType {
	return &file_ethereum_v1_profile_profile_proto_enumTypes[0]
}

func (x ProfileState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileState.Descriptor instead.
func (ProfileState) EnumDescriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{0}
}

// ProfileView enumeration represents the view of a profile.
// The view controls the amount of information returned.
// The BASIC view omits the following fields:
// star_balance, sns_connections, gm_stats
//
// Reference
// https://cloud.google.com/apis/design/design_patterns#list_flattening and
// https://google.aip.dev/157
type ProfileView int32

const (
	// The default / unset value.
	// The API will default to the FULL view.
	ProfileView_Profile_VIEW_UNSPECIFIED ProfileView = 0
	// Include only basic info.
	// Do not include `nft`, `star_balance`, `sns_connections`, `gm_stats`
	ProfileView_BASIC ProfileView = 1
	// Include everything.
	// This is the default value for both ListProfiles and GetProfile.
	ProfileView_FULL ProfileView = 2
)

// Enum value maps for ProfileView.
var (
	ProfileView_name = map[int32]string{
		0: "Profile_VIEW_UNSPECIFIED",
		1: "BASIC",
		2: "FULL",
	}
	ProfileView_value = map[string]int32{
		"Profile_VIEW_UNSPECIFIED": 0,
		"BASIC":                    1,
		"FULL":                     2,
	}
)

func (x ProfileView) Enum() *ProfileView {
	p := new(ProfileView)
	*p = x
	return p
}

func (x ProfileView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileView) Descriptor() protoreflect.EnumDescriptor {
	return file_ethereum_v1_profile_profile_proto_enumTypes[1].Descriptor()
}

func (ProfileView) Type() protoreflect.EnumType {
	return &file_ethereum_v1_profile_profile_proto_enumTypes[1]
}

func (x ProfileView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileView.Descriptor instead.
func (ProfileView) EnumDescriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{1}
}

// ListProfilesRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type ListProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of profiles to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListProfiles` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `Equal`
	//
	// * create_time
	//   - `>`
	//
	// * identified
	//   - Equal`
	//
	// Examples
	// * name="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * create_time>"2020-04-21T11:30:00Z"
	// * identifed
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. The view to return.
	// Defaults to FULL if not set.
	//
	// ProfileView enumeration represents the view of a profile.
	// The view controls the amount of information returned.
	// The BASIC view omits the following fields:
	// star_balance, sns_connections, gm_stats
	//
	// Reference
	// https://cloud.google.com/apis/design/design_patterns#list_flattening and
	// https://google.aip.dev/157
	View ProfileView `protobuf:"varint,4,opt,name=view,proto3,enum=ethereum.v1.profile.ProfileView" json:"view,omitempty"`
}

func (x *ListProfilesRequest) Reset() {
	*x = ListProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilesRequest) ProtoMessage() {}

func (x *ListProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListProfilesRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{0}
}

func (x *ListProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListProfilesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListProfilesRequest) GetView() ProfileView {
	if x != nil {
		return x.View
	}
	return ProfileView_Profile_VIEW_UNSPECIFIED
}

// ListProfilesResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Profiles []*Profile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListProfilesResponse) Reset() {
	*x = ListProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilesResponse) ProtoMessage() {}

func (x *ListProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListProfilesResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{1}
}

func (x *ListProfilesResponse) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ListProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetProfileRequest.
type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the profile to retrieve.
	// Format: profiles/{address}
	// Alias "profiles/me" is supported.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// Optional. The view to return.
	// Defaults to FULL if not set.
	//
	// ProfileView enumeration represents the view of a profile.
	// The view controls the amount of information returned.
	// The BASIC view omits the following fields:
	// star_balance, sns_connections, gm_stats
	//
	// Reference
	// https://cloud.google.com/apis/design/design_patterns#list_flattening and
	// https://google.aip.dev/157
	View ProfileView `protobuf:"varint,2,opt,name=view,proto3,enum=ethereum.v1.profile.ProfileView" json:"view,omitempty"`
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{2}
}

func (x *GetProfileRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *GetProfileRequest) GetView() ProfileView {
	if x != nil {
		return x.View
	}
	return ProfileView_Profile_VIEW_UNSPECIFIED
}

// UpdateProfileRequest.
type UpdateProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Profile to update
	// Format: profiles/{address}
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// Field mask that specifies the fields to update.
	// If no field mask is set, all fields will be updated.
	// Wildcards are supported.
	// Examples
	// ["*"]
	// ["nickname"]
	// ["nickname", "nft"]
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProfileRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *UpdateProfileRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// CompleteTutorialRequest message represents a request to complete a tutorial.
type CompleteTutorialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile to complete the tutorial for.
	// Format: profiles/{address}
	// Resource name alias "profiles/me" is supported.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *CompleteTutorialRequest) Reset() {
	*x = CompleteTutorialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTutorialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTutorialRequest) ProtoMessage() {}

func (x *CompleteTutorialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTutorialRequest.ProtoReflect.Descriptor instead.
func (*CompleteTutorialRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{4}
}

func (x *CompleteTutorialRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

// CompleteTutorialResponse message represents a response from completing a tutorial.
type CompleteTutorialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the completed tutorial.
	TutorialId string `protobuf:"bytes,1,opt,name=tutorial_id,json=tutorialId,proto3" json:"tutorial_id,omitempty"`
	// The timestamp of when the tutorial was completed.
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
}

func (x *CompleteTutorialResponse) Reset() {
	*x = CompleteTutorialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTutorialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTutorialResponse) ProtoMessage() {}

func (x *CompleteTutorialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTutorialResponse.ProtoReflect.Descriptor instead.
func (*CompleteTutorialResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteTutorialResponse) GetTutorialId() string {
	if x != nil {
		return x.TutorialId
	}
	return ""
}

func (x *CompleteTutorialResponse) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

// GetMySpaceRequest message represents the request to list my space assets.
type GetMySpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile whose my space assets should be listed.
	// Format: profiles/{address}
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetMySpaceRequest) Reset() {
	*x = GetMySpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMySpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMySpaceRequest) ProtoMessage() {}

func (x *GetMySpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMySpaceRequest.ProtoReflect.Descriptor instead.
func (*GetMySpaceRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{6}
}

func (x *GetMySpaceRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

// UpdateMySpaceRequest message represents the request to update my space assets.
// There is no update_mask for this request because always upate all my space assets.
type UpdateMySpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile whose my space assets should be updated.
	// Format: profiles/{address}
	Profile string   `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	MySpace *MySpace `protobuf:"bytes,2,opt,name=my_space,json=mySpace,proto3" json:"my_space,omitempty"`
}

func (x *UpdateMySpaceRequest) Reset() {
	*x = UpdateMySpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMySpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMySpaceRequest) ProtoMessage() {}

func (x *UpdateMySpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMySpaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateMySpaceRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateMySpaceRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *UpdateMySpaceRequest) GetMySpace() *MySpace {
	if x != nil {
		return x.MySpace
	}
	return nil
}

type GetProfileDailyPlayCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: profiles/{address}
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetProfileDailyPlayCountRequest) Reset() {
	*x = GetProfileDailyPlayCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileDailyPlayCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileDailyPlayCountRequest) ProtoMessage() {}

func (x *GetProfileDailyPlayCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileDailyPlayCountRequest.ProtoReflect.Descriptor instead.
func (*GetProfileDailyPlayCountRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{8}
}

func (x *GetProfileDailyPlayCountRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type GetProfileDailyPlayCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The daily play count of the profile.
	DailyPlayCount uint32 `protobuf:"varint,1,opt,name=daily_play_count,json=dailyPlayCount,proto3" json:"daily_play_count,omitempty"`
}

func (x *GetProfileDailyPlayCountResponse) Reset() {
	*x = GetProfileDailyPlayCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileDailyPlayCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileDailyPlayCountResponse) ProtoMessage() {}

func (x *GetProfileDailyPlayCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileDailyPlayCountResponse.ProtoReflect.Descriptor instead.
func (*GetProfileDailyPlayCountResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{9}
}

func (x *GetProfileDailyPlayCountResponse) GetDailyPlayCount() uint32 {
	if x != nil {
		return x.DailyPlayCount
	}
	return 0
}

type IncrementProfileDailyPlayCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: profiles/{address}
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *IncrementProfileDailyPlayCountRequest) Reset() {
	*x = IncrementProfileDailyPlayCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementProfileDailyPlayCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementProfileDailyPlayCountRequest) ProtoMessage() {}

func (x *IncrementProfileDailyPlayCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementProfileDailyPlayCountRequest.ProtoReflect.Descriptor instead.
func (*IncrementProfileDailyPlayCountRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{10}
}

func (x *IncrementProfileDailyPlayCountRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type IncrementProfileDailyPlayCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The daily play count of the profile.
	DailyPlayCount uint32 `protobuf:"varint,1,opt,name=daily_play_count,json=dailyPlayCount,proto3" json:"daily_play_count,omitempty"`
}

func (x *IncrementProfileDailyPlayCountResponse) Reset() {
	*x = IncrementProfileDailyPlayCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementProfileDailyPlayCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementProfileDailyPlayCountResponse) ProtoMessage() {}

func (x *IncrementProfileDailyPlayCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementProfileDailyPlayCountResponse.ProtoReflect.Descriptor instead.
func (*IncrementProfileDailyPlayCountResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{11}
}

func (x *IncrementProfileDailyPlayCountResponse) GetDailyPlayCount() uint32 {
	if x != nil {
		return x.DailyPlayCount
	}
	return 0
}

type ConnectSNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile to connect the SNS.
	// Format: profiles/{address}
	// Resource name alias "profiles/me" is supported.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// The SNS type to connect.
	SnsType SNSType `protobuf:"varint,2,opt,name=sns_type,json=snsType,proto3,enum=ethereum.v1.profile.SNSType" json:"sns_type,omitempty"`
	// The access token for the SNS API.
	// NOTE: This field can be changed depending on the implementation or SNS type.
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// The access token secret for the SNS API.
	AccessTokenSecret string `protobuf:"bytes,4,opt,name=access_token_secret,json=accessTokenSecret,proto3" json:"access_token_secret,omitempty"`
}

func (x *ConnectSNSRequest) Reset() {
	*x = ConnectSNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectSNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectSNSRequest) ProtoMessage() {}

func (x *ConnectSNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectSNSRequest.ProtoReflect.Descriptor instead.
func (*ConnectSNSRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectSNSRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ConnectSNSRequest) GetSnsType() SNSType {
	if x != nil {
		return x.SnsType
	}
	return SNSType_SNS_UNSPECIFIED
}

func (x *ConnectSNSRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ConnectSNSRequest) GetAccessTokenSecret() string {
	if x != nil {
		return x.AccessTokenSecret
	}
	return ""
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Profile.
	// Format: profiles/{address}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EIP-6551 TBA Address of the Profile NFT.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The created time of Profile.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last updated time of Profile.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The number of Profile.
	Number uint64 `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	// The state of Profile
	State ProfileState `protobuf:"varint,6,opt,name=state,proto3,enum=ethereum.v1.profile.ProfileState" json:"state,omitempty"`
	// The current pfp nft of Profile.
	Nft *ProfileNFT `protobuf:"bytes,7,opt,name=nft,proto3" json:"nft,omitempty"`
	// The star account of Profile
	StarAccount *StarAccount `protobuf:"bytes,8,opt,name=star_account,json=starAccount,proto3" json:"star_account,omitempty"`
	// The ens of profile
	// This field is optional
	Ens *string `protobuf:"bytes,9,opt,name=ens,proto3,oneof" json:"ens,omitempty"`
	// The nickname of Profile.
	// This field is optional.
	Nickname *string `protobuf:"bytes,10,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	// Whether Profile finished tutorial or not
	IsTutorialDone bool `protobuf:"varint,11,opt,name=is_tutorial_done,json=isTutorialDone,proto3" json:"is_tutorial_done,omitempty"`
	// Whether Profile is identified or not
	IsIdentified bool `protobuf:"varint,12,opt,name=is_identified,json=isIdentified,proto3" json:"is_identified,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{13}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Profile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Profile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Profile) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Profile) GetState() ProfileState {
	if x != nil {
		return x.State
	}
	return ProfileState_STATE_UNSPECIFIED
}

func (x *Profile) GetNft() *ProfileNFT {
	if x != nil {
		return x.Nft
	}
	return nil
}

func (x *Profile) GetStarAccount() *StarAccount {
	if x != nil {
		return x.StarAccount
	}
	return nil
}

func (x *Profile) GetEns() string {
	if x != nil && x.Ens != nil {
		return *x.Ens
	}
	return ""
}

func (x *Profile) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *Profile) GetIsTutorialDone() bool {
	if x != nil {
		return x.IsTutorialDone
	}
	return false
}

func (x *Profile) GetIsIdentified() bool {
	if x != nil {
		return x.IsIdentified
	}
	return false
}

// 다양한 tutorial 이 생길 예정
type Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// whether tutorial is done or not
	IsDone bool `protobuf:"varint,1,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	// The completed time of tutorial.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
}

func (x *Tutorial) Reset() {
	*x = Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tutorial) ProtoMessage() {}

func (x *Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tutorial.ProtoReflect.Descriptor instead.
func (*Tutorial) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{14}
}

func (x *Tutorial) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *Tutorial) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

// StarAccount message represents a balance of stars for a profile.
type StarAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current balance of stars.
	Balance uint32 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// The cumulative total of stars.
	CumulativeTotal uint32 `protobuf:"varint,2,opt,name=cumulative_total,json=cumulativeTotal,proto3" json:"cumulative_total,omitempty"`
}

func (x *StarAccount) Reset() {
	*x = StarAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarAccount) ProtoMessage() {}

func (x *StarAccount) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarAccount.ProtoReflect.Descriptor instead.
func (*StarAccount) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{15}
}

func (x *StarAccount) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *StarAccount) GetCumulativeTotal() uint32 {
	if x != nil {
		return x.CumulativeTotal
	}
	return 0
}

// GMStatsSlim message represents the statistics for a gm count.
type GMStatsSlim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of messages sent.
	SentCount uint32 `protobuf:"varint,1,opt,name=sent_count,json=sentCount,proto3" json:"sent_count,omitempty"`
	// The number of messages received.
	ReceivedCount uint32 `protobuf:"varint,2,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"`
}

func (x *GMStatsSlim) Reset() {
	*x = GMStatsSlim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMStatsSlim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMStatsSlim) ProtoMessage() {}

func (x *GMStatsSlim) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMStatsSlim.ProtoReflect.Descriptor instead.
func (*GMStatsSlim) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{16}
}

func (x *GMStatsSlim) GetSentCount() uint32 {
	if x != nil {
		return x.SentCount
	}
	return 0
}

func (x *GMStatsSlim) GetReceivedCount() uint32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

// ProfileNFT message represents an Profile's NFT.
type ProfileNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the NFT asset.
	// Format: nfts/{chain_type}/{contract_address}/{token_id}
	// Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Token ID of the NFT asset.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// Token Name of the NFT asset.
	TokenName string `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// The URI of the NFT asset's image.
	// This URI is cached version of image original URI
	// e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
	ImageUri string `protobuf:"bytes,4,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The contract that owns the NFT asset.
	// Output only.
	Contract *ProfileNFTContract `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *ProfileNFT) Reset() {
	*x = ProfileNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileNFT) ProtoMessage() {}

func (x *ProfileNFT) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileNFT.ProtoReflect.Descriptor instead.
func (*ProfileNFT) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{17}
}

func (x *ProfileNFT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileNFT) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *ProfileNFT) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *ProfileNFT) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *ProfileNFT) GetContract() *ProfileNFTContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NFTContract message represents an NFT contract.
type ProfileNFTContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the NFT contract.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The name of the NFT contract schema.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The symbol of the NFT contract.
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The blockchain on which the NFT contract resides.
	Chain outpost.ChainType `protobuf:"varint,4,opt,name=chain,proto3,enum=ethereum.v1.outpost.ChainType" json:"chain,omitempty"`
	// The URI of the contract image
	ImageUri string `protobuf:"bytes,5,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
}

func (x *ProfileNFTContract) Reset() {
	*x = ProfileNFTContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_profile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileNFTContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileNFTContract) ProtoMessage() {}

func (x *ProfileNFTContract) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_profile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileNFTContract.ProtoReflect.Descriptor instead.
func (*ProfileNFTContract) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_profile_proto_rawDescGZIP(), []int{18}
}

func (x *ProfileNFTContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProfileNFTContract) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileNFTContract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ProfileNFTContract) GetChain() outpost.ChainType {
	if x != nil {
		return x.Chain
	}
	return outpost.ChainType(0)
}

func (x *ProfileNFTContract) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

var File_ethereum_v1_profile_profile_proto protoreflect.FileDescriptor

var file_ethereum_v1_profile_profile_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f,
	0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2f, 0x73, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5e, 0x0a, 0x17, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41,
	0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x07, 0x6d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x6c, 0x0a, 0x25, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x52, 0x0a, 0x26, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x73, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x87, 0x05, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x6e, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x46, 0x54, 0x52, 0x03, 0x6e, 0x66, 0x74,
	0x12, 0x49, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x65,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x3a, 0x39, 0xea, 0x41, 0x36, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x0b, 0x47, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x6c, 0x69, 0x6d, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x46, 0x54, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xda,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3a, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x2a, 0x76, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4d, 0x49, 0x4e,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x40, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0x86, 0x09, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0xda,
	0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2a, 0xda, 0x41, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x44, 0xda, 0x41, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x33, 0xda, 0x41,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x46, 0xda, 0x41,
	0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x08, 0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x79, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0xda, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xe0, 0x01, 0x0a, 0x1e,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0xda, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_v1_profile_profile_proto_rawDescOnce sync.Once
	file_ethereum_v1_profile_profile_proto_rawDescData = file_ethereum_v1_profile_profile_proto_rawDesc
)

func file_ethereum_v1_profile_profile_proto_rawDescGZIP() []byte {
	file_ethereum_v1_profile_profile_proto_rawDescOnce.Do(func() {
		file_ethereum_v1_profile_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_v1_profile_profile_proto_rawDescData)
	})
	return file_ethereum_v1_profile_profile_proto_rawDescData
}

var file_ethereum_v1_profile_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ethereum_v1_profile_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ethereum_v1_profile_profile_proto_goTypes = []interface{}{
	(ProfileState)(0),                              // 0: ethereum.v1.profile.ProfileState
	(ProfileView)(0),                               // 1: ethereum.v1.profile.ProfileView
	(*ListProfilesRequest)(nil),                    // 2: ethereum.v1.profile.ListProfilesRequest
	(*ListProfilesResponse)(nil),                   // 3: ethereum.v1.profile.ListProfilesResponse
	(*GetProfileRequest)(nil),                      // 4: ethereum.v1.profile.GetProfileRequest
	(*UpdateProfileRequest)(nil),                   // 5: ethereum.v1.profile.UpdateProfileRequest
	(*CompleteTutorialRequest)(nil),                // 6: ethereum.v1.profile.CompleteTutorialRequest
	(*CompleteTutorialResponse)(nil),               // 7: ethereum.v1.profile.CompleteTutorialResponse
	(*GetMySpaceRequest)(nil),                      // 8: ethereum.v1.profile.GetMySpaceRequest
	(*UpdateMySpaceRequest)(nil),                   // 9: ethereum.v1.profile.UpdateMySpaceRequest
	(*GetProfileDailyPlayCountRequest)(nil),        // 10: ethereum.v1.profile.GetProfileDailyPlayCountRequest
	(*GetProfileDailyPlayCountResponse)(nil),       // 11: ethereum.v1.profile.GetProfileDailyPlayCountResponse
	(*IncrementProfileDailyPlayCountRequest)(nil),  // 12: ethereum.v1.profile.IncrementProfileDailyPlayCountRequest
	(*IncrementProfileDailyPlayCountResponse)(nil), // 13: ethereum.v1.profile.IncrementProfileDailyPlayCountResponse
	(*ConnectSNSRequest)(nil),                      // 14: ethereum.v1.profile.ConnectSNSRequest
	(*Profile)(nil),                                // 15: ethereum.v1.profile.Profile
	(*Tutorial)(nil),                               // 16: ethereum.v1.profile.Tutorial
	(*StarAccount)(nil),                            // 17: ethereum.v1.profile.StarAccount
	(*GMStatsSlim)(nil),                            // 18: ethereum.v1.profile.GMStatsSlim
	(*ProfileNFT)(nil),                             // 19: ethereum.v1.profile.ProfileNFT
	(*ProfileNFTContract)(nil),                     // 20: ethereum.v1.profile.ProfileNFTContract
	(*fieldmaskpb.FieldMask)(nil),                  // 21: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                  // 22: google.protobuf.Timestamp
	(*MySpace)(nil),                                // 23: ethereum.v1.profile.MySpace
	(SNSType)(0),                                   // 24: ethereum.v1.profile.SNSType
	(outpost.ChainType)(0),                         // 25: ethereum.v1.outpost.ChainType
}
var file_ethereum_v1_profile_profile_proto_depIdxs = []int32{
	1,  // 0: ethereum.v1.profile.ListProfilesRequest.view:type_name -> ethereum.v1.profile.ProfileView
	15, // 1: ethereum.v1.profile.ListProfilesResponse.profiles:type_name -> ethereum.v1.profile.Profile
	1,  // 2: ethereum.v1.profile.GetProfileRequest.view:type_name -> ethereum.v1.profile.ProfileView
	15, // 3: ethereum.v1.profile.UpdateProfileRequest.profile:type_name -> ethereum.v1.profile.Profile
	21, // 4: ethereum.v1.profile.UpdateProfileRequest.update_mask:type_name -> google.protobuf.FieldMask
	22, // 5: ethereum.v1.profile.CompleteTutorialResponse.completed_timestamp:type_name -> google.protobuf.Timestamp
	23, // 6: ethereum.v1.profile.UpdateMySpaceRequest.my_space:type_name -> ethereum.v1.profile.MySpace
	24, // 7: ethereum.v1.profile.ConnectSNSRequest.sns_type:type_name -> ethereum.v1.profile.SNSType
	22, // 8: ethereum.v1.profile.Profile.create_time:type_name -> google.protobuf.Timestamp
	22, // 9: ethereum.v1.profile.Profile.update_time:type_name -> google.protobuf.Timestamp
	0,  // 10: ethereum.v1.profile.Profile.state:type_name -> ethereum.v1.profile.ProfileState
	19, // 11: ethereum.v1.profile.Profile.nft:type_name -> ethereum.v1.profile.ProfileNFT
	17, // 12: ethereum.v1.profile.Profile.star_account:type_name -> ethereum.v1.profile.StarAccount
	22, // 13: ethereum.v1.profile.Tutorial.complete_time:type_name -> google.protobuf.Timestamp
	20, // 14: ethereum.v1.profile.ProfileNFT.contract:type_name -> ethereum.v1.profile.ProfileNFTContract
	25, // 15: ethereum.v1.profile.ProfileNFTContract.chain:type_name -> ethereum.v1.outpost.ChainType
	2,  // 16: ethereum.v1.profile.ProfileService.ListProfiles:input_type -> ethereum.v1.profile.ListProfilesRequest
	4,  // 17: ethereum.v1.profile.ProfileService.GetProfile:input_type -> ethereum.v1.profile.GetProfileRequest
	5,  // 18: ethereum.v1.profile.ProfileService.UpdateProfile:input_type -> ethereum.v1.profile.UpdateProfileRequest
	8,  // 19: ethereum.v1.profile.ProfileService.GetMySpace:input_type -> ethereum.v1.profile.GetMySpaceRequest
	9,  // 20: ethereum.v1.profile.ProfileService.UpdateMySpace:input_type -> ethereum.v1.profile.UpdateMySpaceRequest
	10, // 21: ethereum.v1.profile.ProfileService.GetProfileDailyPlayCount:input_type -> ethereum.v1.profile.GetProfileDailyPlayCountRequest
	12, // 22: ethereum.v1.profile.ProfileService.IncrementProfileDailyPlayCount:input_type -> ethereum.v1.profile.IncrementProfileDailyPlayCountRequest
	3,  // 23: ethereum.v1.profile.ProfileService.ListProfiles:output_type -> ethereum.v1.profile.ListProfilesResponse
	15, // 24: ethereum.v1.profile.ProfileService.GetProfile:output_type -> ethereum.v1.profile.Profile
	15, // 25: ethereum.v1.profile.ProfileService.UpdateProfile:output_type -> ethereum.v1.profile.Profile
	23, // 26: ethereum.v1.profile.ProfileService.GetMySpace:output_type -> ethereum.v1.profile.MySpace
	23, // 27: ethereum.v1.profile.ProfileService.UpdateMySpace:output_type -> ethereum.v1.profile.MySpace
	11, // 28: ethereum.v1.profile.ProfileService.GetProfileDailyPlayCount:output_type -> ethereum.v1.profile.GetProfileDailyPlayCountResponse
	13, // 29: ethereum.v1.profile.ProfileService.IncrementProfileDailyPlayCount:output_type -> ethereum.v1.profile.IncrementProfileDailyPlayCountResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ethereum_v1_profile_profile_proto_init() }
func file_ethereum_v1_profile_profile_proto_init() {
	if File_ethereum_v1_profile_profile_proto != nil {
		return
	}
	file_ethereum_v1_profile_my_space_proto_init()
	file_ethereum_v1_profile_sns_connection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ethereum_v1_profile_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteTutorialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteTutorialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMySpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMySpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileDailyPlayCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileDailyPlayCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementProfileDailyPlayCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementProfileDailyPlayCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectSNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GMStatsSlim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_profile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileNFTContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ethereum_v1_profile_profile_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_v1_profile_profile_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ethereum_v1_profile_profile_proto_goTypes,
		DependencyIndexes: file_ethereum_v1_profile_profile_proto_depIdxs,
		EnumInfos:         file_ethereum_v1_profile_profile_proto_enumTypes,
		MessageInfos:      file_ethereum_v1_profile_profile_proto_msgTypes,
	}.Build()
	File_ethereum_v1_profile_profile_proto = out.File
	file_ethereum_v1_profile_profile_proto_rawDesc = nil
	file_ethereum_v1_profile_profile_proto_goTypes = nil
	file_ethereum_v1_profile_profile_proto_depIdxs = nil
}
