// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ethereum/v1/profile/my_space.proto

package profile

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MySpace message represents a profile's MySpace.
type MySpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of Profile of the MySpace
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// The profile's assets.
	Assets *Assets `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets,omitempty"`
	// The profile's StarDoodles.
	StarDoodles *StarDoodles `protobuf:"bytes,3,opt,name=star_doodles,json=starDoodles,proto3" json:"star_doodles,omitempty"`
}

func (x *MySpace) Reset() {
	*x = MySpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySpace) ProtoMessage() {}

func (x *MySpace) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySpace.ProtoReflect.Descriptor instead.
func (*MySpace) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{0}
}

func (x *MySpace) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *MySpace) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MySpace) GetStarDoodles() *StarDoodles {
	if x != nil {
		return x.StarDoodles
	}
	return nil
}

// Assets message represents a profile's assets.
type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile's Spaceships assets.
	Spaceships []*SpaceshipAsset `protobuf:"bytes,1,rep,name=spaceships,proto3" json:"spaceships,omitempty"`
	// The profile's Badges assets.
	Badges []*BadgeAsset `protobuf:"bytes,2,rep,name=badges,proto3" json:"badges,omitempty"`
	// The profile's Scores assets.
	Scores []*ScoreAsset `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	// The profile's Alphabets assets.
	Alphabets []*AlphabetAsset `protobuf:"bytes,4,rep,name=alphabets,proto3" json:"alphabets,omitempty"`
	// The profile's Blocks assets.
	Blocks []*BlockAsset `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{1}
}

func (x *Assets) GetSpaceships() []*SpaceshipAsset {
	if x != nil {
		return x.Spaceships
	}
	return nil
}

func (x *Assets) GetBadges() []*BadgeAsset {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *Assets) GetScores() []*ScoreAsset {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Assets) GetAlphabets() []*AlphabetAsset {
	if x != nil {
		return x.Alphabets
	}
	return nil
}

func (x *Assets) GetBlocks() []*BlockAsset {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// SpaceshipReference message represents a Spaceship.
type SpaceshipReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Spaceship.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The nickname of the Spaceship.
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// The token_id of Spaceship NFT.
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The image uri of Spaceship NFT.
	ImageUri string `protobuf:"bytes,4,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
}

func (x *SpaceshipReference) Reset() {
	*x = SpaceshipReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceshipReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceshipReference) ProtoMessage() {}

func (x *SpaceshipReference) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceshipReference.ProtoReflect.Descriptor instead.
func (*SpaceshipReference) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{2}
}

func (x *SpaceshipReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpaceshipReference) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SpaceshipReference) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *SpaceshipReference) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

// BadgeReference message represents a Badge.
type BadgeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Badge.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BadgeReference) Reset() {
	*x = BadgeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeReference) ProtoMessage() {}

func (x *BadgeReference) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeReference.ProtoReflect.Descriptor instead.
func (*BadgeReference) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{3}
}

func (x *BadgeReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ScoreReference message represents a Score.
type ScoreReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Score.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The token_id of Score NFT.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The image uri of Score NFT.
	ImageUri string `protobuf:"bytes,3,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
}

func (x *ScoreReference) Reset() {
	*x = ScoreReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreReference) ProtoMessage() {}

func (x *ScoreReference) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreReference.ProtoReflect.Descriptor instead.
func (*ScoreReference) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{4}
}

func (x *ScoreReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScoreReference) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *ScoreReference) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

// SpaceshipAsset message represents a Spaceship asset.
type SpaceshipAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Spaceship asset.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URI of the Spaceship asset image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The position of the Spaceship asset.
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The timestamp of the Spaceship asset creation.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of the Spaceship asset update.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The reference to the Spaceship.
	Reference *SpaceshipReference `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *SpaceshipAsset) Reset() {
	*x = SpaceshipAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceshipAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceshipAsset) ProtoMessage() {}

func (x *SpaceshipAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceshipAsset.ProtoReflect.Descriptor instead.
func (*SpaceshipAsset) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{5}
}

func (x *SpaceshipAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpaceshipAsset) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *SpaceshipAsset) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SpaceshipAsset) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SpaceshipAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SpaceshipAsset) GetReference() *SpaceshipReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// BadgeAsset message represents a Badge asset.
type BadgeAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Badge asset.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URI of the Badge asset image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The position of the Badge asset.
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The timestamp of the Badge asset creation.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of the Badge asset update.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The reference to the Badge.
	Reference *BadgeReference `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *BadgeAsset) Reset() {
	*x = BadgeAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeAsset) ProtoMessage() {}

func (x *BadgeAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeAsset.ProtoReflect.Descriptor instead.
func (*BadgeAsset) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{6}
}

func (x *BadgeAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BadgeAsset) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *BadgeAsset) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *BadgeAsset) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BadgeAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *BadgeAsset) GetReference() *BadgeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// ScoreAsset message represents a Score asset.
type ScoreAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Score asset.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URI of the Score asset image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The position of the Score asset.
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The timestamp of the Score asset creation.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of the Score asset update.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The reference to the Score.
	Reference *ScoreReference `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ScoreAsset) Reset() {
	*x = ScoreAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreAsset) ProtoMessage() {}

func (x *ScoreAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreAsset.ProtoReflect.Descriptor instead.
func (*ScoreAsset) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{7}
}

func (x *ScoreAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScoreAsset) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *ScoreAsset) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ScoreAsset) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ScoreAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ScoreAsset) GetReference() *ScoreReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// AlphabetAsset message represents an Alphabet asset.
type AlphabetAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Alphabet asset.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URI of the Alphabet asset image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The position of the Alphabet asset.
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The timestamp of the Alphabet asset creation.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of the Alphabet asset update.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The character of the Alphabet asset.
	Character uint32 `protobuf:"varint,6,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *AlphabetAsset) Reset() {
	*x = AlphabetAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlphabetAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlphabetAsset) ProtoMessage() {}

func (x *AlphabetAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlphabetAsset.ProtoReflect.Descriptor instead.
func (*AlphabetAsset) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{8}
}

func (x *AlphabetAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlphabetAsset) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *AlphabetAsset) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AlphabetAsset) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AlphabetAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *AlphabetAsset) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// BlockAsset message represents a Block asset.
type BlockAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Block asset.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URI of the Block asset image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The position of the Block asset.
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The timestamp of the Alphabet block creation.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp of the Alphabet block update.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BlockAsset) Reset() {
	*x = BlockAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAsset) ProtoMessage() {}

func (x *BlockAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAsset.ProtoReflect.Descriptor instead.
func (*BlockAsset) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{9}
}

func (x *BlockAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlockAsset) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *BlockAsset) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *BlockAsset) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BlockAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// StarDoodles message represents a profile's StarDoodles.
type StarDoodles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the StarDoodles image.
	ImageUri string `protobuf:"bytes,1,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The positions of the StarDoodles.
	Positions []*Position `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *StarDoodles) Reset() {
	*x = StarDoodles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarDoodles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarDoodles) ProtoMessage() {}

func (x *StarDoodles) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarDoodles.ProtoReflect.Descriptor instead.
func (*StarDoodles) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{10}
}

func (x *StarDoodles) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *StarDoodles) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// Position message represents a position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The left position.
	Left int32 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	// The top position.
	Top int32 `protobuf:"varint,2,opt,name=top,proto3" json:"top,omitempty"`
	// The right position.
	Right int32 `protobuf:"varint,3,opt,name=right,proto3" json:"right,omitempty"`
	// The bottom position.
	Bottom int32 `protobuf:"varint,4,opt,name=bottom,proto3" json:"bottom,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_profile_my_space_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_profile_my_space_proto_rawDescGZIP(), []int{11}
}

func (x *Position) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *Position) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *Position) GetRight() int32 {
	if x != nil {
		return x.Right
	}
	return 0
}

func (x *Position) GetBottom() int32 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

var File_ethereum_v1_profile_my_space_proto protoreflect.FileDescriptor

var file_ethereum_v1_profile_my_space_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a,
	0x07, 0x4d, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x03, 0xfa,
	0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x64, 0x6f, 0x6f, 0x64, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x44, 0x6f, 0x6f, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x44, 0x6f, 0x6f, 0x64, 0x6c, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x69, 0x22, 0x24, 0x0a, 0x0e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x68, 0x69, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbd,
	0x02, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbd,
	0x02, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9b,
	0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0xfa, 0x01, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x72, 0x44, 0x6f, 0x6f, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_v1_profile_my_space_proto_rawDescOnce sync.Once
	file_ethereum_v1_profile_my_space_proto_rawDescData = file_ethereum_v1_profile_my_space_proto_rawDesc
)

func file_ethereum_v1_profile_my_space_proto_rawDescGZIP() []byte {
	file_ethereum_v1_profile_my_space_proto_rawDescOnce.Do(func() {
		file_ethereum_v1_profile_my_space_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_v1_profile_my_space_proto_rawDescData)
	})
	return file_ethereum_v1_profile_my_space_proto_rawDescData
}

var file_ethereum_v1_profile_my_space_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ethereum_v1_profile_my_space_proto_goTypes = []interface{}{
	(*MySpace)(nil),               // 0: ethereum.v1.profile.MySpace
	(*Assets)(nil),                // 1: ethereum.v1.profile.Assets
	(*SpaceshipReference)(nil),    // 2: ethereum.v1.profile.SpaceshipReference
	(*BadgeReference)(nil),        // 3: ethereum.v1.profile.BadgeReference
	(*ScoreReference)(nil),        // 4: ethereum.v1.profile.ScoreReference
	(*SpaceshipAsset)(nil),        // 5: ethereum.v1.profile.SpaceshipAsset
	(*BadgeAsset)(nil),            // 6: ethereum.v1.profile.BadgeAsset
	(*ScoreAsset)(nil),            // 7: ethereum.v1.profile.ScoreAsset
	(*AlphabetAsset)(nil),         // 8: ethereum.v1.profile.AlphabetAsset
	(*BlockAsset)(nil),            // 9: ethereum.v1.profile.BlockAsset
	(*StarDoodles)(nil),           // 10: ethereum.v1.profile.StarDoodles
	(*Position)(nil),              // 11: ethereum.v1.profile.Position
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_ethereum_v1_profile_my_space_proto_depIdxs = []int32{
	1,  // 0: ethereum.v1.profile.MySpace.assets:type_name -> ethereum.v1.profile.Assets
	10, // 1: ethereum.v1.profile.MySpace.star_doodles:type_name -> ethereum.v1.profile.StarDoodles
	5,  // 2: ethereum.v1.profile.Assets.spaceships:type_name -> ethereum.v1.profile.SpaceshipAsset
	6,  // 3: ethereum.v1.profile.Assets.badges:type_name -> ethereum.v1.profile.BadgeAsset
	7,  // 4: ethereum.v1.profile.Assets.scores:type_name -> ethereum.v1.profile.ScoreAsset
	8,  // 5: ethereum.v1.profile.Assets.alphabets:type_name -> ethereum.v1.profile.AlphabetAsset
	9,  // 6: ethereum.v1.profile.Assets.blocks:type_name -> ethereum.v1.profile.BlockAsset
	11, // 7: ethereum.v1.profile.SpaceshipAsset.position:type_name -> ethereum.v1.profile.Position
	12, // 8: ethereum.v1.profile.SpaceshipAsset.create_time:type_name -> google.protobuf.Timestamp
	12, // 9: ethereum.v1.profile.SpaceshipAsset.update_time:type_name -> google.protobuf.Timestamp
	2,  // 10: ethereum.v1.profile.SpaceshipAsset.reference:type_name -> ethereum.v1.profile.SpaceshipReference
	11, // 11: ethereum.v1.profile.BadgeAsset.position:type_name -> ethereum.v1.profile.Position
	12, // 12: ethereum.v1.profile.BadgeAsset.create_time:type_name -> google.protobuf.Timestamp
	12, // 13: ethereum.v1.profile.BadgeAsset.update_time:type_name -> google.protobuf.Timestamp
	3,  // 14: ethereum.v1.profile.BadgeAsset.reference:type_name -> ethereum.v1.profile.BadgeReference
	11, // 15: ethereum.v1.profile.ScoreAsset.position:type_name -> ethereum.v1.profile.Position
	12, // 16: ethereum.v1.profile.ScoreAsset.create_time:type_name -> google.protobuf.Timestamp
	12, // 17: ethereum.v1.profile.ScoreAsset.update_time:type_name -> google.protobuf.Timestamp
	4,  // 18: ethereum.v1.profile.ScoreAsset.reference:type_name -> ethereum.v1.profile.ScoreReference
	11, // 19: ethereum.v1.profile.AlphabetAsset.position:type_name -> ethereum.v1.profile.Position
	12, // 20: ethereum.v1.profile.AlphabetAsset.create_time:type_name -> google.protobuf.Timestamp
	12, // 21: ethereum.v1.profile.AlphabetAsset.update_time:type_name -> google.protobuf.Timestamp
	11, // 22: ethereum.v1.profile.BlockAsset.position:type_name -> ethereum.v1.profile.Position
	12, // 23: ethereum.v1.profile.BlockAsset.create_time:type_name -> google.protobuf.Timestamp
	12, // 24: ethereum.v1.profile.BlockAsset.update_time:type_name -> google.protobuf.Timestamp
	11, // 25: ethereum.v1.profile.StarDoodles.positions:type_name -> ethereum.v1.profile.Position
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_ethereum_v1_profile_my_space_proto_init() }
func file_ethereum_v1_profile_my_space_proto_init() {
	if File_ethereum_v1_profile_my_space_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ethereum_v1_profile_my_space_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceshipReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceshipAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlphabetAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarDoodles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_profile_my_space_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_v1_profile_my_space_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ethereum_v1_profile_my_space_proto_goTypes,
		DependencyIndexes: file_ethereum_v1_profile_my_space_proto_depIdxs,
		MessageInfos:      file_ethereum_v1_profile_my_space_proto_msgTypes,
	}.Build()
	File_ethereum_v1_profile_my_space_proto = out.File
	file_ethereum_v1_profile_my_space_proto_rawDesc = nil
	file_ethereum_v1_profile_my_space_proto_goTypes = nil
	file_ethereum_v1_profile_my_space_proto_depIdxs = nil
}
