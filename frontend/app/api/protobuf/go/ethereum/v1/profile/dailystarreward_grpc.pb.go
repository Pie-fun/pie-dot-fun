// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/profile/dailystarreward.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DailyStarRewardServiceClient is the client API for DailyStarRewardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DailyStarRewardServiceClient interface {
	// GetDailyStarReward will return the Profile's DailyStarReward
	GetDailyStarReward(ctx context.Context, in *GetDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error)
	// ClaimMyDailyStarReward will claim the Profile's DailyStarReward
	ClaimMyDailyStarReward(ctx context.Context, in *ClaimMyDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error)
}

type dailyStarRewardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDailyStarRewardServiceClient(cc grpc.ClientConnInterface) DailyStarRewardServiceClient {
	return &dailyStarRewardServiceClient{cc}
}

func (c *dailyStarRewardServiceClient) GetDailyStarReward(ctx context.Context, in *GetDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error) {
	out := new(DailyStarReward)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.DailyStarRewardService/GetDailyStarReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyStarRewardServiceClient) ClaimMyDailyStarReward(ctx context.Context, in *ClaimMyDailyStarRewardRequest, opts ...grpc.CallOption) (*DailyStarReward, error) {
	out := new(DailyStarReward)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.DailyStarRewardService/ClaimMyDailyStarReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyStarRewardServiceServer is the server API for DailyStarRewardService service.
// All implementations must embed UnimplementedDailyStarRewardServiceServer
// for forward compatibility
type DailyStarRewardServiceServer interface {
	// GetDailyStarReward will return the Profile's DailyStarReward
	GetDailyStarReward(context.Context, *GetDailyStarRewardRequest) (*DailyStarReward, error)
	// ClaimMyDailyStarReward will claim the Profile's DailyStarReward
	ClaimMyDailyStarReward(context.Context, *ClaimMyDailyStarRewardRequest) (*DailyStarReward, error)
	mustEmbedUnimplementedDailyStarRewardServiceServer()
}

// UnimplementedDailyStarRewardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDailyStarRewardServiceServer struct {
}

func (UnimplementedDailyStarRewardServiceServer) GetDailyStarReward(context.Context, *GetDailyStarRewardRequest) (*DailyStarReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyStarReward not implemented")
}
func (UnimplementedDailyStarRewardServiceServer) ClaimMyDailyStarReward(context.Context, *ClaimMyDailyStarRewardRequest) (*DailyStarReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMyDailyStarReward not implemented")
}
func (UnimplementedDailyStarRewardServiceServer) mustEmbedUnimplementedDailyStarRewardServiceServer() {
}

// UnsafeDailyStarRewardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DailyStarRewardServiceServer will
// result in compilation errors.
type UnsafeDailyStarRewardServiceServer interface {
	mustEmbedUnimplementedDailyStarRewardServiceServer()
}

func RegisterDailyStarRewardServiceServer(s grpc.ServiceRegistrar, srv DailyStarRewardServiceServer) {
	s.RegisterService(&DailyStarRewardService_ServiceDesc, srv)
}

func _DailyStarRewardService_GetDailyStarReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyStarRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyStarRewardServiceServer).GetDailyStarReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.DailyStarRewardService/GetDailyStarReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyStarRewardServiceServer).GetDailyStarReward(ctx, req.(*GetDailyStarRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyStarRewardService_ClaimMyDailyStarReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimMyDailyStarRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyStarRewardServiceServer).ClaimMyDailyStarReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.DailyStarRewardService/ClaimMyDailyStarReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyStarRewardServiceServer).ClaimMyDailyStarReward(ctx, req.(*ClaimMyDailyStarRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DailyStarRewardService_ServiceDesc is the grpc.ServiceDesc for DailyStarRewardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DailyStarRewardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.profile.DailyStarRewardService",
	HandlerType: (*DailyStarRewardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailyStarReward",
			Handler:    _DailyStarRewardService_GetDailyStarReward_Handler,
		},
		{
			MethodName: "ClaimMyDailyStarReward",
			Handler:    _DailyStarRewardService_ClaimMyDailyStarReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/profile/dailystarreward.proto",
}
