// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/profile/backspace.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackspaceServiceClient is the client API for BackspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackspaceServiceClient interface {
	// GetBackspace will return Backspace.
	GetBackspace(ctx context.Context, in *GetBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error)
	UpdateBackspace(ctx context.Context, in *UpdateBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error)
}

type backspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackspaceServiceClient(cc grpc.ClientConnInterface) BackspaceServiceClient {
	return &backspaceServiceClient{cc}
}

func (c *backspaceServiceClient) GetBackspace(ctx context.Context, in *GetBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error) {
	out := new(Backspace)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.BackspaceService/GetBackspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backspaceServiceClient) UpdateBackspace(ctx context.Context, in *UpdateBackspaceRequest, opts ...grpc.CallOption) (*Backspace, error) {
	out := new(Backspace)
	err := c.cc.Invoke(ctx, "/ethereum.v1.profile.BackspaceService/UpdateBackspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackspaceServiceServer is the server API for BackspaceService service.
// All implementations must embed UnimplementedBackspaceServiceServer
// for forward compatibility
type BackspaceServiceServer interface {
	// GetBackspace will return Backspace.
	GetBackspace(context.Context, *GetBackspaceRequest) (*Backspace, error)
	UpdateBackspace(context.Context, *UpdateBackspaceRequest) (*Backspace, error)
	mustEmbedUnimplementedBackspaceServiceServer()
}

// UnimplementedBackspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackspaceServiceServer struct {
}

func (UnimplementedBackspaceServiceServer) GetBackspace(context.Context, *GetBackspaceRequest) (*Backspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackspace not implemented")
}
func (UnimplementedBackspaceServiceServer) UpdateBackspace(context.Context, *UpdateBackspaceRequest) (*Backspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackspace not implemented")
}
func (UnimplementedBackspaceServiceServer) mustEmbedUnimplementedBackspaceServiceServer() {}

// UnsafeBackspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackspaceServiceServer will
// result in compilation errors.
type UnsafeBackspaceServiceServer interface {
	mustEmbedUnimplementedBackspaceServiceServer()
}

func RegisterBackspaceServiceServer(s grpc.ServiceRegistrar, srv BackspaceServiceServer) {
	s.RegisterService(&BackspaceService_ServiceDesc, srv)
}

func _BackspaceService_GetBackspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackspaceServiceServer).GetBackspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.BackspaceService/GetBackspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackspaceServiceServer).GetBackspace(ctx, req.(*GetBackspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackspaceService_UpdateBackspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackspaceServiceServer).UpdateBackspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.profile.BackspaceService/UpdateBackspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackspaceServiceServer).UpdateBackspace(ctx, req.(*UpdateBackspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackspaceService_ServiceDesc is the grpc.ServiceDesc for BackspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.profile.BackspaceService",
	HandlerType: (*BackspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBackspace",
			Handler:    _BackspaceService_GetBackspace_Handler,
		},
		{
			MethodName: "UpdateBackspace",
			Handler:    _BackspaceService_UpdateBackspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/profile/backspace.proto",
}
