// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ethereum/v1/key/key.proto

package key

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of key
type State int32

const (
	// default value. this value is unused.
	State_STATE_UNSPECIFIED State = 0
	// Key was firstly created but not minted yet.
	State_CREATED State = 1
	// Key was firstly created with base spaceship rental.
	State_MINTED State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATED",
		2: "MINTED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATED":           1,
		"MINTED":            2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_ethereum_v1_key_key_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_ethereum_v1_key_key_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{0}
}

type PrimaryType int32

const (
	// default value. this value is unused.
	PrimaryType_PRIMARY_TYPE_UNSPECIFIED PrimaryType = 0
	// Whitelist.
	PrimaryType_W_KEY PrimaryType = 1
	// Star Gatherer
	PrimaryType_G_KEY PrimaryType = 2
	// Doodle Artist
	PrimaryType_A_KEY PrimaryType = 3
	// Star Hunter
	PrimaryType_H_KEY PrimaryType = 4
	// Top Ranker
	PrimaryType_R_KEY PrimaryType = 5
)

// Enum value maps for PrimaryType.
var (
	PrimaryType_name = map[int32]string{
		0: "PRIMARY_TYPE_UNSPECIFIED",
		1: "W_KEY",
		2: "G_KEY",
		3: "A_KEY",
		4: "H_KEY",
		5: "R_KEY",
	}
	PrimaryType_value = map[string]int32{
		"PRIMARY_TYPE_UNSPECIFIED": 0,
		"W_KEY":                    1,
		"G_KEY":                    2,
		"A_KEY":                    3,
		"H_KEY":                    4,
		"R_KEY":                    5,
	}
)

func (x PrimaryType) Enum() *PrimaryType {
	p := new(PrimaryType)
	*p = x
	return p
}

func (x PrimaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_ethereum_v1_key_key_proto_enumTypes[1].Descriptor()
}

func (PrimaryType) Type() protoreflect.EnumType {
	return &file_ethereum_v1_key_key_proto_enumTypes[1]
}

func (x PrimaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryType.Descriptor instead.
func (PrimaryType) EnumDescriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{1}
}

type SecondaryType int32

const (
	SecondaryType_SECONDARY_TYPE_UNSPECIFIED SecondaryType = 0
	SecondaryType_TIER_1                     SecondaryType = 1
	SecondaryType_TIER_2                     SecondaryType = 2
	SecondaryType_TIER_3                     SecondaryType = 3
	SecondaryType_TIER_4                     SecondaryType = 4
	SecondaryType_TIER_5                     SecondaryType = 5
)

// Enum value maps for SecondaryType.
var (
	SecondaryType_name = map[int32]string{
		0: "SECONDARY_TYPE_UNSPECIFIED",
		1: "TIER_1",
		2: "TIER_2",
		3: "TIER_3",
		4: "TIER_4",
		5: "TIER_5",
	}
	SecondaryType_value = map[string]int32{
		"SECONDARY_TYPE_UNSPECIFIED": 0,
		"TIER_1":                     1,
		"TIER_2":                     2,
		"TIER_3":                     3,
		"TIER_4":                     4,
		"TIER_5":                     5,
	}
)

func (x SecondaryType) Enum() *SecondaryType {
	p := new(SecondaryType)
	*p = x
	return p
}

func (x SecondaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecondaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_ethereum_v1_key_key_proto_enumTypes[2].Descriptor()
}

func (SecondaryType) Type() protoreflect.EnumType {
	return &file_ethereum_v1_key_key_proto_enumTypes[2]
}

func (x SecondaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecondaryType.Descriptor instead.
func (SecondaryType) EnumDescriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{2}
}

// ListKeysRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the profile.
	// Format: profiles/{address}
	// Wildcard "profiles/*" is supported.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// The maximum number of keys to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListKeys` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `Equal`
	//
	// * owner, profile
	//   - `=`
	//
	// * state
	//   - `=`
	//
	// * primary_type
	//   - `=`
	//
	// * secondary_type
	//   - `=`
	//
	// * create_time
	//   - `>`
	//
	// * minted
	//   - Equal`
	//
	// Examples
	// * filter=name="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442/keys/0x79FCDEF22feeD20eDDacbB2587640e45491b757f"
	// * filter=owner="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * filter=profile="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
	// * filter=state=CREATED
	// * filter=primary_tupe=A_KEY
	// * filter=minted
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "owner_address", "primary_type", "secondary_type", "token_id", "create_time", "mint_time"
	//
	// Examples
	// * order_by=mint_time asc
	// * order_by=primary_type asc, secondary_type asc
	// * order_by=token_id asc
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{0}
}

func (x *ListKeysRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ListKeysRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKeysRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListKeysRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListKeysResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
type ListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	Keys []*Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of keys that matched with the filter query.
	TotalSize uint32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{1}
}

func (x *ListKeysResponse) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ListKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListKeysResponse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ListKeyVOsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available Sequence and Operator
	// * primary_type
	//   - `=`
	//
	// * secondary_type
	//   - `=`
	//
	// Examples
	// * primary_tupe="S_KEY"
	// * secondary_type="TIER_1"
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListKeyVOsRequest) Reset() {
	*x = ListKeyVOsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyVOsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyVOsRequest) ProtoMessage() {}

func (x *ListKeyVOsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyVOsRequest.ProtoReflect.Descriptor instead.
func (*ListKeyVOsRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{2}
}

func (x *ListKeyVOsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListKeyVOsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows that matched the query.
	KeyValueObjects []*KeyVO `protobuf:"bytes,1,rep,name=key_value_objects,json=keyValueObjects,proto3" json:"key_value_objects,omitempty"`
}

func (x *ListKeyVOsResponse) Reset() {
	*x = ListKeyVOsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyVOsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyVOsResponse) ProtoMessage() {}

func (x *ListKeyVOsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyVOsResponse.ProtoReflect.Descriptor instead.
func (*ListKeyVOsResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{3}
}

func (x *ListKeyVOsResponse) GetKeyValueObjects() []*KeyVO {
	if x != nil {
		return x.KeyValueObjects
	}
	return nil
}

// CreateKeyVORequest
type CreateKeyVORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// score to create
	KeyVo *KeyVO `protobuf:"bytes,1,opt,name=key_vo,json=keyVo,proto3" json:"key_vo,omitempty"`
}

func (x *CreateKeyVORequest) Reset() {
	*x = CreateKeyVORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyVORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyVORequest) ProtoMessage() {}

func (x *CreateKeyVORequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyVORequest.ProtoReflect.Descriptor instead.
func (*CreateKeyVORequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{4}
}

func (x *CreateKeyVORequest) GetKeyVo() *KeyVO {
	if x != nil {
		return x.KeyVo
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Key.
	// Format: profiles/{profile_address}/keys/{key_address}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EIP-6551 TBA Address of the Key.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The owner of Key.
	// Format: profiles/{address}
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The state of Key
	State State `protobuf:"varint,4,opt,name=state,proto3,enum=ethereum.v1.key.State" json:"state,omitempty"`
	// The created time of Key.
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The minted time of Key.
	// This field is only set when Key is minted. (optional)
	// RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
	MintTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=mint_time,json=mintTime,proto3,oneof" json:"mint_time,omitempty"`
	// The transaction hash for minting key.
	// This field is only set when Key is minted. (optional)
	MintTxHash *string `protobuf:"bytes,7,opt,name=mint_tx_hash,json=mintTxHash,proto3,oneof" json:"mint_tx_hash,omitempty"`
	// The amount of Eth Contribution (nominated as wei)
	// This field is only set when Key is minted. (optional)
	EthContribution *string `protobuf:"bytes,8,opt,name=eth_contribution,json=ethContribution,proto3,oneof" json:"eth_contribution,omitempty"`
	// Whether Key finished tutorial or not
	IsMinted bool `protobuf:"varint,9,opt,name=is_minted,json=isMinted,proto3" json:"is_minted,omitempty"`
	// Key value object
	Vo *KeyVO `protobuf:"bytes,10,opt,name=vo,proto3" json:"vo,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{5}
}

func (x *Key) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Key) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Key) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Key) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Key) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Key) GetMintTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MintTime
	}
	return nil
}

func (x *Key) GetMintTxHash() string {
	if x != nil && x.MintTxHash != nil {
		return *x.MintTxHash
	}
	return ""
}

func (x *Key) GetEthContribution() string {
	if x != nil && x.EthContribution != nil {
		return *x.EthContribution
	}
	return ""
}

func (x *Key) GetIsMinted() bool {
	if x != nil {
		return x.IsMinted
	}
	return false
}

func (x *Key) GetVo() *KeyVO {
	if x != nil {
		return x.Vo
	}
	return nil
}

type KeyVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EIP-6551 TBA Address of the Key VO.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Token ID of the Key VO.
	// Output only.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The primary type of the Key VO.
	// Output only.
	PrimaryType PrimaryType `protobuf:"varint,3,opt,name=primary_type,json=primaryType,proto3,enum=ethereum.v1.key.PrimaryType" json:"primary_type,omitempty"`
	// The secondary type of the Key VO.
	// Output only.
	SecondaryType SecondaryType `protobuf:"varint,4,opt,name=secondary_type,json=secondaryType,proto3,enum=ethereum.v1.key.SecondaryType" json:"secondary_type,omitempty"`
	// The cached URI of the Key VO's image.
	// Output only.
	CachedImageUri string `protobuf:"bytes,5,opt,name=cached_image_uri,json=cachedImageUri,proto3" json:"cached_image_uri,omitempty"`
	// The original URI of the Key VO's image.
	// e.g. ipfs://Qm...
	// Output only.
	OriginalImageUri string `protobuf:"bytes,6,opt,name=original_image_uri,json=originalImageUri,proto3" json:"original_image_uri,omitempty"`
	// The URI of the Key VO's image.
	// Output only.
	MetadataUri string `protobuf:"bytes,7,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	// The contract that owns the Key VO.
	// Output only.
	ContractAddress string `protobuf:"bytes,8,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *KeyVO) Reset() {
	*x = KeyVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_key_key_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVO) ProtoMessage() {}

func (x *KeyVO) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_key_key_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVO.ProtoReflect.Descriptor instead.
func (*KeyVO) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_key_key_proto_rawDescGZIP(), []int{6}
}

func (x *KeyVO) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KeyVO) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *KeyVO) GetPrimaryType() PrimaryType {
	if x != nil {
		return x.PrimaryType
	}
	return PrimaryType_PRIMARY_TYPE_UNSPECIFIED
}

func (x *KeyVO) GetSecondaryType() SecondaryType {
	if x != nil {
		return x.SecondaryType
	}
	return SecondaryType_SECONDARY_TYPE_UNSPECIFIED
}

func (x *KeyVO) GetCachedImageUri() string {
	if x != nil {
		return x.CachedImageUri
	}
	return ""
}

func (x *KeyVO) GetOriginalImageUri() string {
	if x != nil {
		return x.OriginalImageUri
	}
	return ""
}

func (x *KeyVO) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

func (x *KeyVO) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

var File_ethereum_v1_key_key_proto protoreflect.FileDescriptor

var file_ethereum_v1_key_key_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65,
	0x79, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc5, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2b, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x4f, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x4f, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x56, 0x6f, 0x22,
	0xef, 0x04, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x03,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x4f, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x76, 0x6f, 0x3a, 0x50, 0xea, 0x41, 0x4d,
	0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x4b, 0x65, 0x79, 0x12, 0x2d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x87, 0x03, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x56, 0x4f, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72,
	0x69, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x37, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05, 0x2a, 0x6b, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45,
	0x52, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x32, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45,
	0x52, 0x5f, 0x35, 0x10, 0x05, 0x32, 0xfc, 0x01, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x20, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x73, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x56, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x56, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x13, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x3b, 0x6b, 0x65, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_v1_key_key_proto_rawDescOnce sync.Once
	file_ethereum_v1_key_key_proto_rawDescData = file_ethereum_v1_key_key_proto_rawDesc
)

func file_ethereum_v1_key_key_proto_rawDescGZIP() []byte {
	file_ethereum_v1_key_key_proto_rawDescOnce.Do(func() {
		file_ethereum_v1_key_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_v1_key_key_proto_rawDescData)
	})
	return file_ethereum_v1_key_key_proto_rawDescData
}

var file_ethereum_v1_key_key_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ethereum_v1_key_key_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ethereum_v1_key_key_proto_goTypes = []interface{}{
	(State)(0),                    // 0: ethereum.v1.key.State
	(PrimaryType)(0),              // 1: ethereum.v1.key.PrimaryType
	(SecondaryType)(0),            // 2: ethereum.v1.key.SecondaryType
	(*ListKeysRequest)(nil),       // 3: ethereum.v1.key.ListKeysRequest
	(*ListKeysResponse)(nil),      // 4: ethereum.v1.key.ListKeysResponse
	(*ListKeyVOsRequest)(nil),     // 5: ethereum.v1.key.ListKeyVOsRequest
	(*ListKeyVOsResponse)(nil),    // 6: ethereum.v1.key.ListKeyVOsResponse
	(*CreateKeyVORequest)(nil),    // 7: ethereum.v1.key.CreateKeyVORequest
	(*Key)(nil),                   // 8: ethereum.v1.key.Key
	(*KeyVO)(nil),                 // 9: ethereum.v1.key.KeyVO
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_ethereum_v1_key_key_proto_depIdxs = []int32{
	8,  // 0: ethereum.v1.key.ListKeysResponse.keys:type_name -> ethereum.v1.key.Key
	9,  // 1: ethereum.v1.key.ListKeyVOsResponse.key_value_objects:type_name -> ethereum.v1.key.KeyVO
	9,  // 2: ethereum.v1.key.CreateKeyVORequest.key_vo:type_name -> ethereum.v1.key.KeyVO
	0,  // 3: ethereum.v1.key.Key.state:type_name -> ethereum.v1.key.State
	10, // 4: ethereum.v1.key.Key.create_time:type_name -> google.protobuf.Timestamp
	10, // 5: ethereum.v1.key.Key.mint_time:type_name -> google.protobuf.Timestamp
	9,  // 6: ethereum.v1.key.Key.vo:type_name -> ethereum.v1.key.KeyVO
	1,  // 7: ethereum.v1.key.KeyVO.primary_type:type_name -> ethereum.v1.key.PrimaryType
	2,  // 8: ethereum.v1.key.KeyVO.secondary_type:type_name -> ethereum.v1.key.SecondaryType
	3,  // 9: ethereum.v1.key.KeyService.ListKeys:input_type -> ethereum.v1.key.ListKeysRequest
	5,  // 10: ethereum.v1.key.KeyService.ListKeyValueObjects:input_type -> ethereum.v1.key.ListKeyVOsRequest
	4,  // 11: ethereum.v1.key.KeyService.ListKeys:output_type -> ethereum.v1.key.ListKeysResponse
	6,  // 12: ethereum.v1.key.KeyService.ListKeyValueObjects:output_type -> ethereum.v1.key.ListKeyVOsResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_ethereum_v1_key_key_proto_init() }
func file_ethereum_v1_key_key_proto_init() {
	if File_ethereum_v1_key_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ethereum_v1_key_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyVOsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyVOsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyVORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_key_key_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ethereum_v1_key_key_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_v1_key_key_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ethereum_v1_key_key_proto_goTypes,
		DependencyIndexes: file_ethereum_v1_key_key_proto_depIdxs,
		EnumInfos:         file_ethereum_v1_key_key_proto_enumTypes,
		MessageInfos:      file_ethereum_v1_key_key_proto_msgTypes,
	}.Build()
	File_ethereum_v1_key_key_proto = out.File
	file_ethereum_v1_key_key_proto_rawDesc = nil
	file_ethereum_v1_key_key_proto_goTypes = nil
	file_ethereum_v1_key_key_proto_depIdxs = nil
}
