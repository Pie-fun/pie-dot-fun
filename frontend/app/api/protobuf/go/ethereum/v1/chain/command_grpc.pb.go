// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/chain/command.proto

package chain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainCommandServiceClient is the client API for ChainCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainCommandServiceClient interface {
	MintProtoShipUniverse1(ctx context.Context, in *MintProtoShipUniverse1Request, opts ...grpc.CallOption) (*MintProtoShipUniverse1Response, error)
	BurnProtoShipUniverse1(ctx context.Context, in *BurnProtoShipUniverse1Request, opts ...grpc.CallOption) (*Transaction, error)
	UpgradeToOwnerShipUniverse1(ctx context.Context, in *UpgradeToOwnerShipUniverse1Request, opts ...grpc.CallOption) (*Transaction, error)
}

type chainCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainCommandServiceClient(cc grpc.ClientConnInterface) ChainCommandServiceClient {
	return &chainCommandServiceClient{cc}
}

func (c *chainCommandServiceClient) MintProtoShipUniverse1(ctx context.Context, in *MintProtoShipUniverse1Request, opts ...grpc.CallOption) (*MintProtoShipUniverse1Response, error) {
	out := new(MintProtoShipUniverse1Response)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainCommandService/MintProtoShipUniverse1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCommandServiceClient) BurnProtoShipUniverse1(ctx context.Context, in *BurnProtoShipUniverse1Request, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainCommandService/BurnProtoShipUniverse1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCommandServiceClient) UpgradeToOwnerShipUniverse1(ctx context.Context, in *UpgradeToOwnerShipUniverse1Request, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainCommandService/UpgradeToOwnerShipUniverse1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainCommandServiceServer is the server API for ChainCommandService service.
// All implementations must embed UnimplementedChainCommandServiceServer
// for forward compatibility
type ChainCommandServiceServer interface {
	MintProtoShipUniverse1(context.Context, *MintProtoShipUniverse1Request) (*MintProtoShipUniverse1Response, error)
	BurnProtoShipUniverse1(context.Context, *BurnProtoShipUniverse1Request) (*Transaction, error)
	UpgradeToOwnerShipUniverse1(context.Context, *UpgradeToOwnerShipUniverse1Request) (*Transaction, error)
	mustEmbedUnimplementedChainCommandServiceServer()
}

// UnimplementedChainCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainCommandServiceServer struct {
}

func (UnimplementedChainCommandServiceServer) MintProtoShipUniverse1(context.Context, *MintProtoShipUniverse1Request) (*MintProtoShipUniverse1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintProtoShipUniverse1 not implemented")
}
func (UnimplementedChainCommandServiceServer) BurnProtoShipUniverse1(context.Context, *BurnProtoShipUniverse1Request) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnProtoShipUniverse1 not implemented")
}
func (UnimplementedChainCommandServiceServer) UpgradeToOwnerShipUniverse1(context.Context, *UpgradeToOwnerShipUniverse1Request) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToOwnerShipUniverse1 not implemented")
}
func (UnimplementedChainCommandServiceServer) mustEmbedUnimplementedChainCommandServiceServer() {}

// UnsafeChainCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainCommandServiceServer will
// result in compilation errors.
type UnsafeChainCommandServiceServer interface {
	mustEmbedUnimplementedChainCommandServiceServer()
}

func RegisterChainCommandServiceServer(s grpc.ServiceRegistrar, srv ChainCommandServiceServer) {
	s.RegisterService(&ChainCommandService_ServiceDesc, srv)
}

func _ChainCommandService_MintProtoShipUniverse1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintProtoShipUniverse1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCommandServiceServer).MintProtoShipUniverse1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainCommandService/MintProtoShipUniverse1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCommandServiceServer).MintProtoShipUniverse1(ctx, req.(*MintProtoShipUniverse1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCommandService_BurnProtoShipUniverse1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnProtoShipUniverse1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCommandServiceServer).BurnProtoShipUniverse1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainCommandService/BurnProtoShipUniverse1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCommandServiceServer).BurnProtoShipUniverse1(ctx, req.(*BurnProtoShipUniverse1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCommandService_UpgradeToOwnerShipUniverse1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeToOwnerShipUniverse1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCommandServiceServer).UpgradeToOwnerShipUniverse1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainCommandService/UpgradeToOwnerShipUniverse1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCommandServiceServer).UpgradeToOwnerShipUniverse1(ctx, req.(*UpgradeToOwnerShipUniverse1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainCommandService_ServiceDesc is the grpc.ServiceDesc for ChainCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.chain.ChainCommandService",
	HandlerType: (*ChainCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintProtoShipUniverse1",
			Handler:    _ChainCommandService_MintProtoShipUniverse1_Handler,
		},
		{
			MethodName: "BurnProtoShipUniverse1",
			Handler:    _ChainCommandService_BurnProtoShipUniverse1_Handler,
		},
		{
			MethodName: "UpgradeToOwnerShipUniverse1",
			Handler:    _ChainCommandService_UpgradeToOwnerShipUniverse1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/chain/command.proto",
}
