// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/chain/query.proto

package chain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainQueryServiceClient is the client API for ChainQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainQueryServiceClient interface {
	QueryReceipt(ctx context.Context, in *QueryReceiptRequest, opts ...grpc.CallOption) (*Receipt, error)
	QueryTransactionCount(ctx context.Context, in *QueryQueryTransactionCountRequest, opts ...grpc.CallOption) (*QueryQueryTransactionCountResponse, error)
	QueryDelegateCash(ctx context.Context, in *QueryDelegateCashRequest, opts ...grpc.CallOption) (*QueryDelegateCashResponse, error)
}

type chainQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainQueryServiceClient(cc grpc.ClientConnInterface) ChainQueryServiceClient {
	return &chainQueryServiceClient{cc}
}

func (c *chainQueryServiceClient) QueryReceipt(ctx context.Context, in *QueryReceiptRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainQueryService/QueryReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainQueryServiceClient) QueryTransactionCount(ctx context.Context, in *QueryQueryTransactionCountRequest, opts ...grpc.CallOption) (*QueryQueryTransactionCountResponse, error) {
	out := new(QueryQueryTransactionCountResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainQueryService/QueryTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainQueryServiceClient) QueryDelegateCash(ctx context.Context, in *QueryDelegateCashRequest, opts ...grpc.CallOption) (*QueryDelegateCashResponse, error) {
	out := new(QueryDelegateCashResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainQueryService/QueryDelegateCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainQueryServiceServer is the server API for ChainQueryService service.
// All implementations must embed UnimplementedChainQueryServiceServer
// for forward compatibility
type ChainQueryServiceServer interface {
	QueryReceipt(context.Context, *QueryReceiptRequest) (*Receipt, error)
	QueryTransactionCount(context.Context, *QueryQueryTransactionCountRequest) (*QueryQueryTransactionCountResponse, error)
	QueryDelegateCash(context.Context, *QueryDelegateCashRequest) (*QueryDelegateCashResponse, error)
	mustEmbedUnimplementedChainQueryServiceServer()
}

// UnimplementedChainQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainQueryServiceServer struct {
}

func (UnimplementedChainQueryServiceServer) QueryReceipt(context.Context, *QueryReceiptRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReceipt not implemented")
}
func (UnimplementedChainQueryServiceServer) QueryTransactionCount(context.Context, *QueryQueryTransactionCountRequest) (*QueryQueryTransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransactionCount not implemented")
}
func (UnimplementedChainQueryServiceServer) QueryDelegateCash(context.Context, *QueryDelegateCashRequest) (*QueryDelegateCashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegateCash not implemented")
}
func (UnimplementedChainQueryServiceServer) mustEmbedUnimplementedChainQueryServiceServer() {}

// UnsafeChainQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainQueryServiceServer will
// result in compilation errors.
type UnsafeChainQueryServiceServer interface {
	mustEmbedUnimplementedChainQueryServiceServer()
}

func RegisterChainQueryServiceServer(s grpc.ServiceRegistrar, srv ChainQueryServiceServer) {
	s.RegisterService(&ChainQueryService_ServiceDesc, srv)
}

func _ChainQueryService_QueryReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainQueryServiceServer).QueryReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainQueryService/QueryReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainQueryServiceServer).QueryReceipt(ctx, req.(*QueryReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainQueryService_QueryTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainQueryServiceServer).QueryTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainQueryService/QueryTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainQueryServiceServer).QueryTransactionCount(ctx, req.(*QueryQueryTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainQueryService_QueryDelegateCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateCashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainQueryServiceServer).QueryDelegateCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainQueryService/QueryDelegateCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainQueryServiceServer).QueryDelegateCash(ctx, req.(*QueryDelegateCashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainQueryService_ServiceDesc is the grpc.ServiceDesc for ChainQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.chain.ChainQueryService",
	HandlerType: (*ChainQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryReceipt",
			Handler:    _ChainQueryService_QueryReceipt_Handler,
		},
		{
			MethodName: "QueryTransactionCount",
			Handler:    _ChainQueryService_QueryTransactionCount_Handler,
		},
		{
			MethodName: "QueryDelegateCash",
			Handler:    _ChainQueryService_QueryDelegateCash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/chain/query.proto",
}
