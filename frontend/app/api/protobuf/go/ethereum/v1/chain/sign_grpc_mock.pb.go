// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/chain/sign.proto

package chain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChainSignServiceClient is a mock of ChainSignServiceClient interface.
type MockChainSignServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainSignServiceClientMockRecorder
}

// MockChainSignServiceClientMockRecorder is the mock recorder for MockChainSignServiceClient.
type MockChainSignServiceClientMockRecorder struct {
	mock *MockChainSignServiceClient
}

// NewMockChainSignServiceClient creates a new mock instance.
func NewMockChainSignServiceClient(ctrl *gomock.Controller) *MockChainSignServiceClient {
	mock := &MockChainSignServiceClient{ctrl: ctrl}
	mock.recorder = &MockChainSignServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainSignServiceClient) EXPECT() *MockChainSignServiceClientMockRecorder {
	return m.recorder
}

// SignKeyMint mocks base method.
func (m *MockChainSignServiceClient) SignKeyMint(ctx context.Context, in *SignKeyMintRequest, opts ...grpc.CallOption) (*SignatureTypedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignKeyMint", varargs...)
	ret0, _ := ret[0].(*SignatureTypedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignKeyMint indicates an expected call of SignKeyMint.
func (mr *MockChainSignServiceClientMockRecorder) SignKeyMint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignKeyMint", reflect.TypeOf((*MockChainSignServiceClient)(nil).SignKeyMint), varargs...)
}

// SignMessage mocks base method.
func (m *MockChainSignServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignMessage", varargs...)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage.
func (mr *MockChainSignServiceClientMockRecorder) SignMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockChainSignServiceClient)(nil).SignMessage), varargs...)
}

// SignScoreMint mocks base method.
func (m *MockChainSignServiceClient) SignScoreMint(ctx context.Context, in *SignScoreMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignScoreMint", varargs...)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignScoreMint indicates an expected call of SignScoreMint.
func (mr *MockChainSignServiceClientMockRecorder) SignScoreMint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignScoreMint", reflect.TypeOf((*MockChainSignServiceClient)(nil).SignScoreMint), varargs...)
}

// SignWkeyMint mocks base method.
func (m *MockChainSignServiceClient) SignWkeyMint(ctx context.Context, in *SignWKeyMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignWkeyMint", varargs...)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignWkeyMint indicates an expected call of SignWkeyMint.
func (mr *MockChainSignServiceClientMockRecorder) SignWkeyMint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWkeyMint", reflect.TypeOf((*MockChainSignServiceClient)(nil).SignWkeyMint), varargs...)
}

// MockChainSignServiceServer is a mock of ChainSignServiceServer interface.
type MockChainSignServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChainSignServiceServerMockRecorder
}

// MockChainSignServiceServerMockRecorder is the mock recorder for MockChainSignServiceServer.
type MockChainSignServiceServerMockRecorder struct {
	mock *MockChainSignServiceServer
}

// NewMockChainSignServiceServer creates a new mock instance.
func NewMockChainSignServiceServer(ctrl *gomock.Controller) *MockChainSignServiceServer {
	mock := &MockChainSignServiceServer{ctrl: ctrl}
	mock.recorder = &MockChainSignServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainSignServiceServer) EXPECT() *MockChainSignServiceServerMockRecorder {
	return m.recorder
}

// SignKeyMint mocks base method.
func (m *MockChainSignServiceServer) SignKeyMint(ctx context.Context, in *SignKeyMintRequest) (*SignatureTypedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignKeyMint", ctx, in)
	ret0, _ := ret[0].(*SignatureTypedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignKeyMint indicates an expected call of SignKeyMint.
func (mr *MockChainSignServiceServerMockRecorder) SignKeyMint(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignKeyMint", reflect.TypeOf((*MockChainSignServiceServer)(nil).SignKeyMint), ctx, in)
}

// SignMessage mocks base method.
func (m *MockChainSignServiceServer) SignMessage(ctx context.Context, in *SignMessageRequest) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMessage", ctx, in)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage.
func (mr *MockChainSignServiceServerMockRecorder) SignMessage(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockChainSignServiceServer)(nil).SignMessage), ctx, in)
}

// SignScoreMint mocks base method.
func (m *MockChainSignServiceServer) SignScoreMint(ctx context.Context, in *SignScoreMintRequest) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignScoreMint", ctx, in)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignScoreMint indicates an expected call of SignScoreMint.
func (mr *MockChainSignServiceServerMockRecorder) SignScoreMint(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignScoreMint", reflect.TypeOf((*MockChainSignServiceServer)(nil).SignScoreMint), ctx, in)
}

// SignWkeyMint mocks base method.
func (m *MockChainSignServiceServer) SignWkeyMint(ctx context.Context, in *SignWKeyMintRequest) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWkeyMint", ctx, in)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignWkeyMint indicates an expected call of SignWkeyMint.
func (mr *MockChainSignServiceServerMockRecorder) SignWkeyMint(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWkeyMint", reflect.TypeOf((*MockChainSignServiceServer)(nil).SignWkeyMint), ctx, in)
}
