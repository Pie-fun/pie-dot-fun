// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/chain/sign.proto

package chain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainSignServiceClient is the client API for ChainSignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainSignServiceClient interface {
	// SignBadgeClaim signs a w key mint with the given EOA address.
	//
	// 403 error will be returned if the given EOA address is on the whitelist.
	SignWkeyMint(ctx context.Context, in *SignWKeyMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
	// SignKeyMint signs a key mint with the given token id.
	//
	// 403 error will be returned if the given profile address not not eligible to mint the badge.
	// 400 error will be returned if the given token id is invalid
	SignKeyMint(ctx context.Context, in *SignKeyMintRequest, opts ...grpc.CallOption) (*SignatureTypedResponse, error)
	// SignScoreMint signs a score mint with the given profile address and score ID.
	//
	// Not implemented yet.
	SignScoreMint(ctx context.Context, in *SignScoreMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
	// SignMessage signs a message with arbitrary message.
	//
	// This rpc is not open to the public request and only used by the internal service.
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
}

type chainSignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainSignServiceClient(cc grpc.ClientConnInterface) ChainSignServiceClient {
	return &chainSignServiceClient{cc}
}

func (c *chainSignServiceClient) SignWkeyMint(ctx context.Context, in *SignWKeyMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainSignService/SignWkeyMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignKeyMint(ctx context.Context, in *SignKeyMintRequest, opts ...grpc.CallOption) (*SignatureTypedResponse, error) {
	out := new(SignatureTypedResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainSignService/SignKeyMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignScoreMint(ctx context.Context, in *SignScoreMintRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainSignService/SignScoreMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSignServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.chain.ChainSignService/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainSignServiceServer is the server API for ChainSignService service.
// All implementations must embed UnimplementedChainSignServiceServer
// for forward compatibility
type ChainSignServiceServer interface {
	// SignBadgeClaim signs a w key mint with the given EOA address.
	//
	// 403 error will be returned if the given EOA address is on the whitelist.
	SignWkeyMint(context.Context, *SignWKeyMintRequest) (*SignatureResponse, error)
	// SignKeyMint signs a key mint with the given token id.
	//
	// 403 error will be returned if the given profile address not not eligible to mint the badge.
	// 400 error will be returned if the given token id is invalid
	SignKeyMint(context.Context, *SignKeyMintRequest) (*SignatureTypedResponse, error)
	// SignScoreMint signs a score mint with the given profile address and score ID.
	//
	// Not implemented yet.
	SignScoreMint(context.Context, *SignScoreMintRequest) (*SignatureResponse, error)
	// SignMessage signs a message with arbitrary message.
	//
	// This rpc is not open to the public request and only used by the internal service.
	SignMessage(context.Context, *SignMessageRequest) (*SignatureResponse, error)
	mustEmbedUnimplementedChainSignServiceServer()
}

// UnimplementedChainSignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainSignServiceServer struct {
}

func (UnimplementedChainSignServiceServer) SignWkeyMint(context.Context, *SignWKeyMintRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignWkeyMint not implemented")
}
func (UnimplementedChainSignServiceServer) SignKeyMint(context.Context, *SignKeyMintRequest) (*SignatureTypedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignKeyMint not implemented")
}
func (UnimplementedChainSignServiceServer) SignScoreMint(context.Context, *SignScoreMintRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignScoreMint not implemented")
}
func (UnimplementedChainSignServiceServer) SignMessage(context.Context, *SignMessageRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedChainSignServiceServer) mustEmbedUnimplementedChainSignServiceServer() {}

// UnsafeChainSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainSignServiceServer will
// result in compilation errors.
type UnsafeChainSignServiceServer interface {
	mustEmbedUnimplementedChainSignServiceServer()
}

func RegisterChainSignServiceServer(s grpc.ServiceRegistrar, srv ChainSignServiceServer) {
	s.RegisterService(&ChainSignService_ServiceDesc, srv)
}

func _ChainSignService_SignWkeyMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignWKeyMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignWkeyMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainSignService/SignWkeyMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignWkeyMint(ctx, req.(*SignWKeyMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignKeyMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignKeyMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignKeyMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainSignService/SignKeyMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignKeyMint(ctx, req.(*SignKeyMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignScoreMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignScoreMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignScoreMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainSignService/SignScoreMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignScoreMint(ctx, req.(*SignScoreMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSignService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSignServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.chain.ChainSignService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSignServiceServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainSignService_ServiceDesc is the grpc.ServiceDesc for ChainSignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainSignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.chain.ChainSignService",
	HandlerType: (*ChainSignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignWkeyMint",
			Handler:    _ChainSignService_SignWkeyMint_Handler,
		},
		{
			MethodName: "SignKeyMint",
			Handler:    _ChainSignService_SignKeyMint_Handler,
		},
		{
			MethodName: "SignScoreMint",
			Handler:    _ChainSignService_SignScoreMint_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _ChainSignService_SignMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/chain/sign.proto",
}
