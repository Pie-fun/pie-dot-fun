// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/auth/auth.proto

package auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockAuthServiceClient) AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptTermsOfService", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockAuthServiceClientMockRecorder) AcceptTermsOfService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockAuthServiceClient)(nil).AcceptTermsOfService), varargs...)
}

// Authenticate mocks base method.
func (m *MockAuthServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceClientMockRecorder) Authenticate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServiceClient)(nil).Authenticate), varargs...)
}

// Download mocks base method.
func (m *MockAuthServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(*DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockAuthServiceClientMockRecorder) Download(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockAuthServiceClient)(nil).Download), varargs...)
}

// GetTempToken mocks base method.
func (m *MockAuthServiceClient) GetTempToken(ctx context.Context, in *GetTempTokenRequest, opts ...grpc.CallOption) (*GetTempTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTempToken", varargs...)
	ret0, _ := ret[0].(*GetTempTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempToken indicates an expected call of GetTempToken.
func (mr *MockAuthServiceClientMockRecorder) GetTempToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempToken", reflect.TypeOf((*MockAuthServiceClient)(nil).GetTempToken), varargs...)
}

// Refresh mocks base method.
func (m *MockAuthServiceClient) Refresh(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refresh", varargs...)
	ret0, _ := ret[0].(*RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceClientMockRecorder) Refresh(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthServiceClient)(nil).Refresh), varargs...)
}

// SelectAccount mocks base method.
func (m *MockAuthServiceClient) SelectAccount(ctx context.Context, in *SelectAccountRequest, opts ...grpc.CallOption) (*SelectAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectAccount", varargs...)
	ret0, _ := ret[0].(*SelectAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccount indicates an expected call of SelectAccount.
func (mr *MockAuthServiceClientMockRecorder) SelectAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccount", reflect.TypeOf((*MockAuthServiceClient)(nil).SelectAccount), varargs...)
}

// SignIn mocks base method.
func (m *MockAuthServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceClientMockRecorder) SignIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthServiceClient)(nil).SignIn), varargs...)
}

// SignOut mocks base method.
func (m *MockAuthServiceClient) SignOut(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOut", varargs...)
	ret0, _ := ret[0].(*SignoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthServiceClientMockRecorder) SignOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuthServiceClient)(nil).SignOut), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// AcceptTermsOfService mocks base method.
func (m *MockAuthServiceServer) AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsOfService", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockAuthServiceServerMockRecorder) AcceptTermsOfService(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockAuthServiceServer)(nil).AcceptTermsOfService), ctx, in)
}

// Authenticate mocks base method.
func (m *MockAuthServiceServer) Authenticate(ctx context.Context, in *AuthenticateRequest) (*AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, in)
	ret0, _ := ret[0].(*AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceServerMockRecorder) Authenticate(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServiceServer)(nil).Authenticate), ctx, in)
}

// Download mocks base method.
func (m *MockAuthServiceServer) Download(ctx context.Context, in *DownloadRequest) (*DownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, in)
	ret0, _ := ret[0].(*DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockAuthServiceServerMockRecorder) Download(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockAuthServiceServer)(nil).Download), ctx, in)
}

// GetTempToken mocks base method.
func (m *MockAuthServiceServer) GetTempToken(ctx context.Context, in *GetTempTokenRequest) (*GetTempTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempToken", ctx, in)
	ret0, _ := ret[0].(*GetTempTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempToken indicates an expected call of GetTempToken.
func (mr *MockAuthServiceServerMockRecorder) GetTempToken(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempToken", reflect.TypeOf((*MockAuthServiceServer)(nil).GetTempToken), ctx, in)
}

// Refresh mocks base method.
func (m *MockAuthServiceServer) Refresh(ctx context.Context, in *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, in)
	ret0, _ := ret[0].(*RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceServerMockRecorder) Refresh(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthServiceServer)(nil).Refresh), ctx, in)
}

// SelectAccount mocks base method.
func (m *MockAuthServiceServer) SelectAccount(ctx context.Context, in *SelectAccountRequest) (*SelectAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccount", ctx, in)
	ret0, _ := ret[0].(*SelectAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccount indicates an expected call of SelectAccount.
func (mr *MockAuthServiceServerMockRecorder) SelectAccount(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccount", reflect.TypeOf((*MockAuthServiceServer)(nil).SelectAccount), ctx, in)
}

// SignIn mocks base method.
func (m *MockAuthServiceServer) SignIn(ctx context.Context, in *SignInRequest) (*SignInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, in)
	ret0, _ := ret[0].(*SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceServerMockRecorder) SignIn(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthServiceServer)(nil).SignIn), ctx, in)
}

// SignOut mocks base method.
func (m *MockAuthServiceServer) SignOut(ctx context.Context, in *SignoutRequest) (*SignoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", ctx, in)
	ret0, _ := ret[0].(*SignoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthServiceServerMockRecorder) SignOut(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuthServiceServer)(nil).SignOut), ctx, in)
}
