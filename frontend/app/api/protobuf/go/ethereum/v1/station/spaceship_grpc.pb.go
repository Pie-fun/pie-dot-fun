// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/station/spaceship.proto

package station

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpaceshipServiceClient is the client API for SpaceshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceshipServiceClient interface {
	// ListSpaceships will return spaceships.
	ListSpaceships(ctx context.Context, in *ListSpaceshipsRequest, opts ...grpc.CallOption) (*ListSpaceshipsResponse, error)
	// GetSpaceship
	GetSpaceship(ctx context.Context, in *GetSpaceshipRequest, opts ...grpc.CallOption) (*Spaceship, error)
	// UpdateSpaceship update Spaceship
	UpdateSpaceship(ctx context.Context, in *UpdateSpaceshipRequest, opts ...grpc.CallOption) (*Spaceship, error)
}

type spaceshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceshipServiceClient(cc grpc.ClientConnInterface) SpaceshipServiceClient {
	return &spaceshipServiceClient{cc}
}

func (c *spaceshipServiceClient) ListSpaceships(ctx context.Context, in *ListSpaceshipsRequest, opts ...grpc.CallOption) (*ListSpaceshipsResponse, error) {
	out := new(ListSpaceshipsResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.station.SpaceshipService/ListSpaceships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceshipServiceClient) GetSpaceship(ctx context.Context, in *GetSpaceshipRequest, opts ...grpc.CallOption) (*Spaceship, error) {
	out := new(Spaceship)
	err := c.cc.Invoke(ctx, "/ethereum.v1.station.SpaceshipService/GetSpaceship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceshipServiceClient) UpdateSpaceship(ctx context.Context, in *UpdateSpaceshipRequest, opts ...grpc.CallOption) (*Spaceship, error) {
	out := new(Spaceship)
	err := c.cc.Invoke(ctx, "/ethereum.v1.station.SpaceshipService/UpdateSpaceship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceshipServiceServer is the server API for SpaceshipService service.
// All implementations must embed UnimplementedSpaceshipServiceServer
// for forward compatibility
type SpaceshipServiceServer interface {
	// ListSpaceships will return spaceships.
	ListSpaceships(context.Context, *ListSpaceshipsRequest) (*ListSpaceshipsResponse, error)
	// GetSpaceship
	GetSpaceship(context.Context, *GetSpaceshipRequest) (*Spaceship, error)
	// UpdateSpaceship update Spaceship
	UpdateSpaceship(context.Context, *UpdateSpaceshipRequest) (*Spaceship, error)
	mustEmbedUnimplementedSpaceshipServiceServer()
}

// UnimplementedSpaceshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceshipServiceServer struct {
}

func (UnimplementedSpaceshipServiceServer) ListSpaceships(context.Context, *ListSpaceshipsRequest) (*ListSpaceshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaceships not implemented")
}
func (UnimplementedSpaceshipServiceServer) GetSpaceship(context.Context, *GetSpaceshipRequest) (*Spaceship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceship not implemented")
}
func (UnimplementedSpaceshipServiceServer) UpdateSpaceship(context.Context, *UpdateSpaceshipRequest) (*Spaceship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceship not implemented")
}
func (UnimplementedSpaceshipServiceServer) mustEmbedUnimplementedSpaceshipServiceServer() {}

// UnsafeSpaceshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceshipServiceServer will
// result in compilation errors.
type UnsafeSpaceshipServiceServer interface {
	mustEmbedUnimplementedSpaceshipServiceServer()
}

func RegisterSpaceshipServiceServer(s grpc.ServiceRegistrar, srv SpaceshipServiceServer) {
	s.RegisterService(&SpaceshipService_ServiceDesc, srv)
}

func _SpaceshipService_ListSpaceships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpaceshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceshipServiceServer).ListSpaceships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.station.SpaceshipService/ListSpaceships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceshipServiceServer).ListSpaceships(ctx, req.(*ListSpaceshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceshipService_GetSpaceship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceshipServiceServer).GetSpaceship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.station.SpaceshipService/GetSpaceship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceshipServiceServer).GetSpaceship(ctx, req.(*GetSpaceshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceshipService_UpdateSpaceship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceshipServiceServer).UpdateSpaceship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.station.SpaceshipService/UpdateSpaceship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceshipServiceServer).UpdateSpaceship(ctx, req.(*UpdateSpaceshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceshipService_ServiceDesc is the grpc.ServiceDesc for SpaceshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.station.SpaceshipService",
	HandlerType: (*SpaceshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSpaceships",
			Handler:    _SpaceshipService_ListSpaceships_Handler,
		},
		{
			MethodName: "GetSpaceship",
			Handler:    _SpaceshipService_GetSpaceship_Handler,
		},
		{
			MethodName: "UpdateSpaceship",
			Handler:    _SpaceshipService_UpdateSpaceship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/station/spaceship.proto",
}
