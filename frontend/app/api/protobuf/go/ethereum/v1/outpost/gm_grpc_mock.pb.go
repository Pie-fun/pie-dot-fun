// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/outpost/gm.proto

package outpost

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGMServiceClient is a mock of GMServiceClient interface.
type MockGMServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGMServiceClientMockRecorder
}

// MockGMServiceClientMockRecorder is the mock recorder for MockGMServiceClient.
type MockGMServiceClientMockRecorder struct {
	mock *MockGMServiceClient
}

// NewMockGMServiceClient creates a new mock instance.
func NewMockGMServiceClient(ctrl *gomock.Controller) *MockGMServiceClient {
	mock := &MockGMServiceClient{ctrl: ctrl}
	mock.recorder = &MockGMServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGMServiceClient) EXPECT() *MockGMServiceClientMockRecorder {
	return m.recorder
}

// ListGMs mocks base method.
func (m *MockGMServiceClient) ListGMs(ctx context.Context, in *ListGMsRequest, opts ...grpc.CallOption) (*ListGMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGMs", varargs...)
	ret0, _ := ret[0].(*ListGMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGMs indicates an expected call of ListGMs.
func (mr *MockGMServiceClientMockRecorder) ListGMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGMs", reflect.TypeOf((*MockGMServiceClient)(nil).ListGMs), varargs...)
}

// SendGM mocks base method.
func (m *MockGMServiceClient) SendGM(ctx context.Context, in *SendGMRequest, opts ...grpc.CallOption) (*GM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendGM", varargs...)
	ret0, _ := ret[0].(*GM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGM indicates an expected call of SendGM.
func (mr *MockGMServiceClientMockRecorder) SendGM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGM", reflect.TypeOf((*MockGMServiceClient)(nil).SendGM), varargs...)
}

// MockGMServiceServer is a mock of GMServiceServer interface.
type MockGMServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGMServiceServerMockRecorder
}

// MockGMServiceServerMockRecorder is the mock recorder for MockGMServiceServer.
type MockGMServiceServerMockRecorder struct {
	mock *MockGMServiceServer
}

// NewMockGMServiceServer creates a new mock instance.
func NewMockGMServiceServer(ctrl *gomock.Controller) *MockGMServiceServer {
	mock := &MockGMServiceServer{ctrl: ctrl}
	mock.recorder = &MockGMServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGMServiceServer) EXPECT() *MockGMServiceServerMockRecorder {
	return m.recorder
}

// ListGMs mocks base method.
func (m *MockGMServiceServer) ListGMs(ctx context.Context, in *ListGMsRequest) (*ListGMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGMs", ctx, in)
	ret0, _ := ret[0].(*ListGMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGMs indicates an expected call of ListGMs.
func (mr *MockGMServiceServerMockRecorder) ListGMs(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGMs", reflect.TypeOf((*MockGMServiceServer)(nil).ListGMs), ctx, in)
}

// SendGM mocks base method.
func (m *MockGMServiceServer) SendGM(ctx context.Context, in *SendGMRequest) (*GM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGM", ctx, in)
	ret0, _ := ret[0].(*GM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGM indicates an expected call of SendGM.
func (mr *MockGMServiceServerMockRecorder) SendGM(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGM", reflect.TypeOf((*MockGMServiceServer)(nil).SendGM), ctx, in)
}
