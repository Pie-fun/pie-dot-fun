// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/outpost/bank.proto

package outpost

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBankServiceClient is a mock of BankServiceClient interface.
type MockBankServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBankServiceClientMockRecorder
}

// MockBankServiceClientMockRecorder is the mock recorder for MockBankServiceClient.
type MockBankServiceClientMockRecorder struct {
	mock *MockBankServiceClient
}

// NewMockBankServiceClient creates a new mock instance.
func NewMockBankServiceClient(ctrl *gomock.Controller) *MockBankServiceClient {
	mock := &MockBankServiceClient{ctrl: ctrl}
	mock.recorder = &MockBankServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankServiceClient) EXPECT() *MockBankServiceClientMockRecorder {
	return m.recorder
}

// DepositStarTokenOptimistic mocks base method.
func (m *MockBankServiceClient) DepositStarTokenOptimistic(ctx context.Context, in *DepositOptimisticRequest, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DepositStarTokenOptimistic", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositStarTokenOptimistic indicates an expected call of DepositStarTokenOptimistic.
func (mr *MockBankServiceClientMockRecorder) DepositStarTokenOptimistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositStarTokenOptimistic", reflect.TypeOf((*MockBankServiceClient)(nil).DepositStarTokenOptimistic), varargs...)
}

// GetAccount mocks base method.
func (m *MockBankServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBankServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBankServiceClient)(nil).GetAccount), varargs...)
}

// ListAccounts mocks base method.
func (m *MockBankServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccounts", varargs...)
	ret0, _ := ret[0].(*ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockBankServiceClientMockRecorder) ListAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockBankServiceClient)(nil).ListAccounts), varargs...)
}

// WithdrawStarTokenOptimistic mocks base method.
func (m *MockBankServiceClient) WithdrawStarTokenOptimistic(ctx context.Context, in *WithdrawOptimisticRequest, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithdrawStarTokenOptimistic", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawStarTokenOptimistic indicates an expected call of WithdrawStarTokenOptimistic.
func (mr *MockBankServiceClientMockRecorder) WithdrawStarTokenOptimistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawStarTokenOptimistic", reflect.TypeOf((*MockBankServiceClient)(nil).WithdrawStarTokenOptimistic), varargs...)
}

// MockBankServiceServer is a mock of BankServiceServer interface.
type MockBankServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBankServiceServerMockRecorder
}

// MockBankServiceServerMockRecorder is the mock recorder for MockBankServiceServer.
type MockBankServiceServerMockRecorder struct {
	mock *MockBankServiceServer
}

// NewMockBankServiceServer creates a new mock instance.
func NewMockBankServiceServer(ctrl *gomock.Controller) *MockBankServiceServer {
	mock := &MockBankServiceServer{ctrl: ctrl}
	mock.recorder = &MockBankServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankServiceServer) EXPECT() *MockBankServiceServerMockRecorder {
	return m.recorder
}

// DepositStarTokenOptimistic mocks base method.
func (m *MockBankServiceServer) DepositStarTokenOptimistic(ctx context.Context, in *DepositOptimisticRequest) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositStarTokenOptimistic", ctx, in)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositStarTokenOptimistic indicates an expected call of DepositStarTokenOptimistic.
func (mr *MockBankServiceServerMockRecorder) DepositStarTokenOptimistic(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositStarTokenOptimistic", reflect.TypeOf((*MockBankServiceServer)(nil).DepositStarTokenOptimistic), ctx, in)
}

// GetAccount mocks base method.
func (m *MockBankServiceServer) GetAccount(ctx context.Context, in *GetAccountRequest) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, in)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBankServiceServerMockRecorder) GetAccount(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBankServiceServer)(nil).GetAccount), ctx, in)
}

// ListAccounts mocks base method.
func (m *MockBankServiceServer) ListAccounts(ctx context.Context, in *ListAccountsRequest) (*ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, in)
	ret0, _ := ret[0].(*ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockBankServiceServerMockRecorder) ListAccounts(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockBankServiceServer)(nil).ListAccounts), ctx, in)
}

// WithdrawStarTokenOptimistic mocks base method.
func (m *MockBankServiceServer) WithdrawStarTokenOptimistic(ctx context.Context, in *WithdrawOptimisticRequest) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawStarTokenOptimistic", ctx, in)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawStarTokenOptimistic indicates an expected call of WithdrawStarTokenOptimistic.
func (mr *MockBankServiceServerMockRecorder) WithdrawStarTokenOptimistic(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawStarTokenOptimistic", reflect.TypeOf((*MockBankServiceServer)(nil).WithdrawStarTokenOptimistic), ctx, in)
}
