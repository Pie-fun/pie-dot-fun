// Code generated by protoc-gen-fake. DO NOT EDIT.

package outpost

import (
	"github.com/ao-labs/protoc-gen-fake/pkg/fake"
)

// Default responses for NFTService
var DefaultNFTServiceResponses = map[string]fake.Response{
	"/ethereum.v1.outpost.NFTService/GetNFT": {
		Method: "/ethereum.v1.outpost.NFTService/GetNFT",
		Response: &NFT{
			Name:             "fake_Name",
			Address:          "fake_Address",
			TokenId:          "fake_TokenId",
			TokenName:        "fake_TokenName",
			ImageUri:         "fake_ImageUri",
			ImageOriginalUri: "fake_ImageOriginalUri",
			MetadataUri:      "fake_MetadataUri",
			Contract:         nil,
		},
	},
	"/ethereum.v1.outpost.NFTService/ListNFTs": {
		Method: "/ethereum.v1.outpost.NFTService/ListNFTs",
		Response: &ListNFTsResponse{
			Nfts:          nil,
			NextPageToken: "fake_NextPageToken",
		},
	},
	"/ethereum.v1.outpost.NFTService/ListOwners": {
		Method: "/ethereum.v1.outpost.NFTService/ListOwners",
		Response: &ListOwnersResponse{
			Owners: nil,
		},
	},
	"/ethereum.v1.outpost.NFTService/ValidateNFTAccess": {
		Method: "/ethereum.v1.outpost.NFTService/ValidateNFTAccess",
		Response: &ValidateNFTAccessResponse{
			Nft:    nil,
			Access: true,
		},
	},
	"/ethereum.v1.outpost.NFTService/ListNFTsDelegate": {
		Method: "/ethereum.v1.outpost.NFTService/ListNFTsDelegate",
		Response: &ListNFTsResponse{
			Nfts:          nil,
			NextPageToken: "fake_NextPageToken",
		},
	},
	"/ethereum.v1.outpost.NFTService/ValidateNFT": {
		Method: "/ethereum.v1.outpost.NFTService/ValidateNFT",
		Response: &ValidateNFTResponse{
			Valid: true,
		},
	},
	"/ethereum.v1.outpost.NFTService/GetContract": {
		Method: "/ethereum.v1.outpost.NFTService/GetContract",
		Response: &NFTContract{
			Name:        "fake_Name",
			Address:     "fake_Address",
			DisplayName: "fake_DisplayName",
			Symbol:      "fake_Symbol",
			Chain:       0,
			Type:        0,
			ImageUri:    "fake_ImageUri",
		},
	},
	"/ethereum.v1.outpost.NFTService/CheckHolderOfContract": {
		Method: "/ethereum.v1.outpost.NFTService/CheckHolderOfContract",
		Response: &CheckHolderOfContractResponse{
			IsHolder: true,
		},
	},
}
