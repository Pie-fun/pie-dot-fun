// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/outpost/gm.proto

package outpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GMServiceClient is the client API for GMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GMServiceClient interface {
	// SendGM send GM to another Profile.
	SendGM(ctx context.Context, in *SendGMRequest, opts ...grpc.CallOption) (*GM, error)
	// Lists GM messages based on "from" and/or "to" filters.
	ListGMs(ctx context.Context, in *ListGMsRequest, opts ...grpc.CallOption) (*ListGMsResponse, error)
}

type gMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGMServiceClient(cc grpc.ClientConnInterface) GMServiceClient {
	return &gMServiceClient{cc}
}

func (c *gMServiceClient) SendGM(ctx context.Context, in *SendGMRequest, opts ...grpc.CallOption) (*GM, error) {
	out := new(GM)
	err := c.cc.Invoke(ctx, "/ethereum.v1.outpost.GMService/SendGM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) ListGMs(ctx context.Context, in *ListGMsRequest, opts ...grpc.CallOption) (*ListGMsResponse, error) {
	out := new(ListGMsResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.outpost.GMService/ListGMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GMServiceServer is the server API for GMService service.
// All implementations must embed UnimplementedGMServiceServer
// for forward compatibility
type GMServiceServer interface {
	// SendGM send GM to another Profile.
	SendGM(context.Context, *SendGMRequest) (*GM, error)
	// Lists GM messages based on "from" and/or "to" filters.
	ListGMs(context.Context, *ListGMsRequest) (*ListGMsResponse, error)
	mustEmbedUnimplementedGMServiceServer()
}

// UnimplementedGMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGMServiceServer struct {
}

func (UnimplementedGMServiceServer) SendGM(context.Context, *SendGMRequest) (*GM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGM not implemented")
}
func (UnimplementedGMServiceServer) ListGMs(context.Context, *ListGMsRequest) (*ListGMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGMs not implemented")
}
func (UnimplementedGMServiceServer) mustEmbedUnimplementedGMServiceServer() {}

// UnsafeGMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GMServiceServer will
// result in compilation errors.
type UnsafeGMServiceServer interface {
	mustEmbedUnimplementedGMServiceServer()
}

func RegisterGMServiceServer(s grpc.ServiceRegistrar, srv GMServiceServer) {
	s.RegisterService(&GMService_ServiceDesc, srv)
}

func _GMService_SendGM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).SendGM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.outpost.GMService/SendGM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).SendGM(ctx, req.(*SendGMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_ListGMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).ListGMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.outpost.GMService/ListGMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).ListGMs(ctx, req.(*ListGMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GMService_ServiceDesc is the grpc.ServiceDesc for GMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.outpost.GMService",
	HandlerType: (*GMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGM",
			Handler:    _GMService_SendGM_Handler,
		},
		{
			MethodName: "ListGMs",
			Handler:    _GMService_ListGMs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/outpost/gm.proto",
}
