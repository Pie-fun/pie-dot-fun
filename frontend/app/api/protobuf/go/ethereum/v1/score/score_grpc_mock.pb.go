// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/score/score.proto

package score

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockScoreServiceClient is a mock of ScoreServiceClient interface.
type MockScoreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoreServiceClientMockRecorder
}

// MockScoreServiceClientMockRecorder is the mock recorder for MockScoreServiceClient.
type MockScoreServiceClientMockRecorder struct {
	mock *MockScoreServiceClient
}

// NewMockScoreServiceClient creates a new mock instance.
func NewMockScoreServiceClient(ctrl *gomock.Controller) *MockScoreServiceClient {
	mock := &MockScoreServiceClient{ctrl: ctrl}
	mock.recorder = &MockScoreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreServiceClient) EXPECT() *MockScoreServiceClientMockRecorder {
	return m.recorder
}

// CreateScore mocks base method.
func (m *MockScoreServiceClient) CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScore", varargs...)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockScoreServiceClientMockRecorder) CreateScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockScoreServiceClient)(nil).CreateScore), varargs...)
}

// GetScore mocks base method.
func (m *MockScoreServiceClient) GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScore", varargs...)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScoreServiceClientMockRecorder) GetScore(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScoreServiceClient)(nil).GetScore), varargs...)
}

// ListScores mocks base method.
func (m *MockScoreServiceClient) ListScores(ctx context.Context, in *ListScoresRequest, opts ...grpc.CallOption) (*ListScoresResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScores", varargs...)
	ret0, _ := ret[0].(*ListScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScores indicates an expected call of ListScores.
func (mr *MockScoreServiceClientMockRecorder) ListScores(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockScoreServiceClient)(nil).ListScores), varargs...)
}

// MockScoreServiceServer is a mock of ScoreServiceServer interface.
type MockScoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockScoreServiceServerMockRecorder
}

// MockScoreServiceServerMockRecorder is the mock recorder for MockScoreServiceServer.
type MockScoreServiceServerMockRecorder struct {
	mock *MockScoreServiceServer
}

// NewMockScoreServiceServer creates a new mock instance.
func NewMockScoreServiceServer(ctrl *gomock.Controller) *MockScoreServiceServer {
	mock := &MockScoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockScoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreServiceServer) EXPECT() *MockScoreServiceServerMockRecorder {
	return m.recorder
}

// CreateScore mocks base method.
func (m *MockScoreServiceServer) CreateScore(ctx context.Context, in *CreateScoreRequest) (*Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScore", ctx, in)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockScoreServiceServerMockRecorder) CreateScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockScoreServiceServer)(nil).CreateScore), ctx, in)
}

// GetScore mocks base method.
func (m *MockScoreServiceServer) GetScore(ctx context.Context, in *GetScoreRequest) (*Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", ctx, in)
	ret0, _ := ret[0].(*Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScoreServiceServerMockRecorder) GetScore(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScoreServiceServer)(nil).GetScore), ctx, in)
}

// ListScores mocks base method.
func (m *MockScoreServiceServer) ListScores(ctx context.Context, in *ListScoresRequest) (*ListScoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScores", ctx, in)
	ret0, _ := ret[0].(*ListScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScores indicates an expected call of ListScores.
func (mr *MockScoreServiceServerMockRecorder) ListScores(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockScoreServiceServer)(nil).ListScores), ctx, in)
}
