// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ethereum/v1/leaderboard/leaderboard.proto

package leaderboard

import (
	_ "github.com/ao-labs/spacebar-apis/go/ethereum/v1/outpost"
	profile "github.com/ao-labs/spacebar-apis/go/ethereum/v1/profile"
	score "github.com/ao-labs/spacebar-apis/go/ethereum/v1/score"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTopRankerLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of scores to return. The service may return fewer than
	// this value.
	// If unspecified, at most 5 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `GetLeaderbaord` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,3,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding season of leaderboard.
	// The default value is 1
	Season uint32 `protobuf:"varint,4,opt,name=season,proto3" json:"season,omitempty"`
	// The corresponding play_mode of leaderboard.
	// The default value is "TIME_ATTACK"
	PlayMode score.PlayMode `protobuf:"varint,5,opt,name=play_mode,json=playMode,proto3,enum=ethereum.v1.score.PlayMode" json:"play_mode,omitempty"`
	// The corresponding game_mode of leaderboard.
	// The default value is "SINGLE_PLAYER"
	GameMode score.GameMode `protobuf:"varint,6,opt,name=game_mode,json=gameMode,proto3,enum=ethereum.v1.score.GameMode" json:"game_mode,omitempty"`
}

func (x *GetTopRankerLeaderboardRequest) Reset() {
	*x = GetTopRankerLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopRankerLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopRankerLeaderboardRequest) ProtoMessage() {}

func (x *GetTopRankerLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopRankerLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetTopRankerLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{0}
}

func (x *GetTopRankerLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTopRankerLeaderboardRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetTopRankerLeaderboardRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetTopRankerLeaderboardRequest) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *GetTopRankerLeaderboardRequest) GetPlayMode() score.PlayMode {
	if x != nil {
		return x.PlayMode
	}
	return score.PlayMode(0)
}

func (x *GetTopRankerLeaderboardRequest) GetGameMode() score.GameMode {
	if x != nil {
		return x.GameMode
	}
	return score.GameMode(0)
}

type GetTopRankerLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopRankers []*TopRanker `protobuf:"bytes,1,rep,name=top_rankers,json=topRankers,proto3" json:"top_rankers,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *GetTopRankerLeaderboardResponse) Reset() {
	*x = GetTopRankerLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopRankerLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopRankerLeaderboardResponse) ProtoMessage() {}

func (x *GetTopRankerLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopRankerLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetTopRankerLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{1}
}

func (x *GetTopRankerLeaderboardResponse) GetTopRankers() []*TopRanker {
	if x != nil {
		return x.TopRankers
	}
	return nil
}

func (x *GetTopRankerLeaderboardResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetTopRankerLeaderboardResponse) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type GetTopRankerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileAddress string `protobuf:"bytes,1,opt,name=profile_address,json=profileAddress,proto3" json:"profile_address,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding play_mode of leaderboard.
	// The default value is "TIME_ATTACK"
	PlayMode score.PlayMode `protobuf:"varint,3,opt,name=play_mode,json=playMode,proto3,enum=ethereum.v1.score.PlayMode" json:"play_mode,omitempty"`
	// The corresponding game_mode of leaderboard.
	// The default value is "SINGLE_PLAYER"
	GameMode score.GameMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,proto3,enum=ethereum.v1.score.GameMode" json:"game_mode,omitempty"`
}

func (x *GetTopRankerRequest) Reset() {
	*x = GetTopRankerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopRankerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopRankerRequest) ProtoMessage() {}

func (x *GetTopRankerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopRankerRequest.ProtoReflect.Descriptor instead.
func (*GetTopRankerRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{2}
}

func (x *GetTopRankerRequest) GetProfileAddress() string {
	if x != nil {
		return x.ProfileAddress
	}
	return ""
}

func (x *GetTopRankerRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetTopRankerRequest) GetPlayMode() score.PlayMode {
	if x != nil {
		return x.PlayMode
	}
	return score.PlayMode(0)
}

func (x *GetTopRankerRequest) GetGameMode() score.GameMode {
	if x != nil {
		return x.GameMode
	}
	return score.GameMode(0)
}

type RenderTopRankerLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,1,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding season of leaderboard.
	// The default value is 1
	Season uint32 `protobuf:"varint,2,opt,name=season,proto3" json:"season,omitempty"`
	// The corresponding play_mode of leaderboard.
	// The default value is "TIME_ATTACK"
	PlayMode score.PlayMode `protobuf:"varint,3,opt,name=play_mode,json=playMode,proto3,enum=ethereum.v1.score.PlayMode" json:"play_mode,omitempty"`
	// The corresponding game_mode of leaderboard.
	// The default value is "SINGLE_PLAYER"
	GameMode score.GameMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,proto3,enum=ethereum.v1.score.GameMode" json:"game_mode,omitempty"`
	Me       string         `protobuf:"bytes,5,opt,name=me,proto3" json:"me,omitempty"`
}

func (x *RenderTopRankerLeaderboardRequest) Reset() {
	*x = RenderTopRankerLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderTopRankerLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTopRankerLeaderboardRequest) ProtoMessage() {}

func (x *RenderTopRankerLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTopRankerLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*RenderTopRankerLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{3}
}

func (x *RenderTopRankerLeaderboardRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *RenderTopRankerLeaderboardRequest) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *RenderTopRankerLeaderboardRequest) GetPlayMode() score.PlayMode {
	if x != nil {
		return x.PlayMode
	}
	return score.PlayMode(0)
}

func (x *RenderTopRankerLeaderboardRequest) GetGameMode() score.GameMode {
	if x != nil {
		return x.GameMode
	}
	return score.GameMode(0)
}

func (x *RenderTopRankerLeaderboardRequest) GetMe() string {
	if x != nil {
		return x.Me
	}
	return ""
}

// GetWeeklyTopCollectorLeaderboardRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type GetWeeklyTopCollectorLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of scores to return. The service may return fewer than
	// this value.
	// If unspecified, at most 5 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListWeeklytimeTopCollectors` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,3,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding season of leaderboard.
	// The default value is 1
	Season uint32 `protobuf:"varint,4,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) Reset() {
	*x = GetWeeklyTopCollectorLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyTopCollectorLeaderboardRequest) ProtoMessage() {}

func (x *GetWeeklyTopCollectorLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyTopCollectorLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyTopCollectorLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{4}
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetWeeklyTopCollectorLeaderboardRequest) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

type GetWeeklyTopCollectorLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopCollectors []*StarHunter `protobuf:"bytes,1,rep,name=top_collectors,json=topCollectors,proto3" json:"top_collectors,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *GetWeeklyTopCollectorLeaderboardResponse) Reset() {
	*x = GetWeeklyTopCollectorLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyTopCollectorLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyTopCollectorLeaderboardResponse) ProtoMessage() {}

func (x *GetWeeklyTopCollectorLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyTopCollectorLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetWeeklyTopCollectorLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{5}
}

func (x *GetWeeklyTopCollectorLeaderboardResponse) GetTopCollectors() []*StarHunter {
	if x != nil {
		return x.TopCollectors
	}
	return nil
}

func (x *GetWeeklyTopCollectorLeaderboardResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetWeeklyTopCollectorLeaderboardResponse) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type GetWeeklyTopCollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileAddress string `protobuf:"bytes,1,opt,name=profile_address,json=profileAddress,proto3" json:"profile_address,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetWeeklyTopCollectorRequest) Reset() {
	*x = GetWeeklyTopCollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyTopCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyTopCollectorRequest) ProtoMessage() {}

func (x *GetWeeklyTopCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyTopCollectorRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyTopCollectorRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{6}
}

func (x *GetWeeklyTopCollectorRequest) GetProfileAddress() string {
	if x != nil {
		return x.ProfileAddress
	}
	return ""
}

func (x *GetWeeklyTopCollectorRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

// GetAllTimeTopCollectorsLeaderboardRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type GetAllTimeTopCollectorLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of scores to return. The service may return fewer than
	// this value.
	// If unspecified, at most 5 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `GetAllTimeTopCollectorLeaderboard` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *GetAllTimeTopCollectorLeaderboardRequest) Reset() {
	*x = GetAllTimeTopCollectorLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTimeTopCollectorLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTimeTopCollectorLeaderboardRequest) ProtoMessage() {}

func (x *GetAllTimeTopCollectorLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTimeTopCollectorLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetAllTimeTopCollectorLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllTimeTopCollectorLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAllTimeTopCollectorLeaderboardRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetAllTimeTopCollectorLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopCollectors []*StarHunter `protobuf:"bytes,1,rep,name=top_collectors,json=topCollectors,proto3" json:"top_collectors,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetAllTimeTopCollectorLeaderboardResponse) Reset() {
	*x = GetAllTimeTopCollectorLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTimeTopCollectorLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTimeTopCollectorLeaderboardResponse) ProtoMessage() {}

func (x *GetAllTimeTopCollectorLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTimeTopCollectorLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetAllTimeTopCollectorLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllTimeTopCollectorLeaderboardResponse) GetTopCollectors() []*StarHunter {
	if x != nil {
		return x.TopCollectors
	}
	return nil
}

func (x *GetAllTimeTopCollectorLeaderboardResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RenderWeeklyStarHunterLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,1,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding season of leaderboard.
	// The default value is 1
	Season uint32 `protobuf:"varint,2,opt,name=season,proto3" json:"season,omitempty"`
	Me     string `protobuf:"bytes,3,opt,name=me,proto3" json:"me,omitempty"`
}

func (x *RenderWeeklyStarHunterLeaderboardRequest) Reset() {
	*x = RenderWeeklyStarHunterLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderWeeklyStarHunterLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderWeeklyStarHunterLeaderboardRequest) ProtoMessage() {}

func (x *RenderWeeklyStarHunterLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderWeeklyStarHunterLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*RenderWeeklyStarHunterLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{9}
}

func (x *RenderWeeklyStarHunterLeaderboardRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *RenderWeeklyStarHunterLeaderboardRequest) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *RenderWeeklyStarHunterLeaderboardRequest) GetMe() string {
	if x != nil {
		return x.Me
	}
	return ""
}

// GetWeeklyStarHunterLeaderboardRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type GetWeeklyStarHunterLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of scores to return. The service may return fewer than
	// this value.
	// If unspecified, at most 5 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListWeeklytimeTopCollectors` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,3,opt,name=week,proto3" json:"week,omitempty"`
	// The corresponding season of leaderboard.
	// The default value is 1
	Season uint32 `protobuf:"varint,4,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *GetWeeklyStarHunterLeaderboardRequest) Reset() {
	*x = GetWeeklyStarHunterLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyStarHunterLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyStarHunterLeaderboardRequest) ProtoMessage() {}

func (x *GetWeeklyStarHunterLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyStarHunterLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyStarHunterLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{10}
}

func (x *GetWeeklyStarHunterLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWeeklyStarHunterLeaderboardRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetWeeklyStarHunterLeaderboardRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetWeeklyStarHunterLeaderboardRequest) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

type GetWeeklyStarHunterLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarHunters []*StarHunter `protobuf:"bytes,1,rep,name=star_hunters,json=starHunters,proto3" json:"star_hunters,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *GetWeeklyStarHunterLeaderboardResponse) Reset() {
	*x = GetWeeklyStarHunterLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyStarHunterLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyStarHunterLeaderboardResponse) ProtoMessage() {}

func (x *GetWeeklyStarHunterLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyStarHunterLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetWeeklyStarHunterLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{11}
}

func (x *GetWeeklyStarHunterLeaderboardResponse) GetStarHunters() []*StarHunter {
	if x != nil {
		return x.StarHunters
	}
	return nil
}

func (x *GetWeeklyStarHunterLeaderboardResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetWeeklyStarHunterLeaderboardResponse) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type GetWeeklyStarHunterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileAddress string `protobuf:"bytes,1,opt,name=profile_address,json=profileAddress,proto3" json:"profile_address,omitempty"`
	// The corresponding week of leaderboard.
	// If unspecified, the current week will be used.
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *GetWeeklyStarHunterRequest) Reset() {
	*x = GetWeeklyStarHunterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyStarHunterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyStarHunterRequest) ProtoMessage() {}

func (x *GetWeeklyStarHunterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyStarHunterRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyStarHunterRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{12}
}

func (x *GetWeeklyStarHunterRequest) GetProfileAddress() string {
	if x != nil {
		return x.ProfileAddress
	}
	return ""
}

func (x *GetWeeklyStarHunterRequest) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

// GetAllTimeStarHuntersLeaderboardRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type GetAllTimeStarHunterLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of scores to return. The service may return fewer than
	// this value.
	// If unspecified, at most 5 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `GetAllTimeStarHunterLeaderboard` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *GetAllTimeStarHunterLeaderboardRequest) Reset() {
	*x = GetAllTimeStarHunterLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTimeStarHunterLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTimeStarHunterLeaderboardRequest) ProtoMessage() {}

func (x *GetAllTimeStarHunterLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTimeStarHunterLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetAllTimeStarHunterLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllTimeStarHunterLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAllTimeStarHunterLeaderboardRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetAllTimeStarHunterLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarHunters []*StarHunter `protobuf:"bytes,1,rep,name=star_hunters,json=starHunters,proto3" json:"star_hunters,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetAllTimeStarHunterLeaderboardResponse) Reset() {
	*x = GetAllTimeStarHunterLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTimeStarHunterLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTimeStarHunterLeaderboardResponse) ProtoMessage() {}

func (x *GetAllTimeStarHunterLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTimeStarHunterLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetAllTimeStarHunterLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllTimeStarHunterLeaderboardResponse) GetStarHunters() []*StarHunter {
	if x != nil {
		return x.StarHunters
	}
	return nil
}

func (x *GetAllTimeStarHunterLeaderboardResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{15}
}

func (x *ImageResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type TopRanker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    uint32           `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Profile *profile.Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Score   *score.Score     `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TopRanker) Reset() {
	*x = TopRanker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopRanker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopRanker) ProtoMessage() {}

func (x *TopRanker) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopRanker.ProtoReflect.Descriptor instead.
func (*TopRanker) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{16}
}

func (x *TopRanker) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TopRanker) GetProfile() *profile.Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *TopRanker) GetScore() *score.Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type StarHunter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       uint32           `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Profile    *profile.Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	TotalStars uint32           `protobuf:"varint,3,opt,name=total_stars,json=totalStars,proto3" json:"total_stars,omitempty"`
}

func (x *StarHunter) Reset() {
	*x = StarHunter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarHunter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarHunter) ProtoMessage() {}

func (x *StarHunter) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarHunter.ProtoReflect.Descriptor instead.
func (*StarHunter) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{17}
}

func (x *StarHunter) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *StarHunter) GetProfile() *profile.Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *StarHunter) GetTotalStars() uint32 {
	if x != nil {
		return x.TotalStars
	}
	return 0
}

type RenderStarHuntersLeaderboardImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarHunters []*StarHunterSlim `protobuf:"bytes,1,rep,name=star_hunters,json=starHunters,proto3" json:"star_hunters,omitempty"`
	Me          *StarHunterSlim   `protobuf:"bytes,2,opt,name=me,proto3" json:"me,omitempty"`
}

func (x *RenderStarHuntersLeaderboardImageRequest) Reset() {
	*x = RenderStarHuntersLeaderboardImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderStarHuntersLeaderboardImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderStarHuntersLeaderboardImageRequest) ProtoMessage() {}

func (x *RenderStarHuntersLeaderboardImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderStarHuntersLeaderboardImageRequest.ProtoReflect.Descriptor instead.
func (*RenderStarHuntersLeaderboardImageRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{18}
}

func (x *RenderStarHuntersLeaderboardImageRequest) GetStarHunters() []*StarHunterSlim {
	if x != nil {
		return x.StarHunters
	}
	return nil
}

func (x *RenderStarHuntersLeaderboardImageRequest) GetMe() *StarHunterSlim {
	if x != nil {
		return x.Me
	}
	return nil
}

type RenderTopRankerLeaderboardImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopRankers []*TopRankerSlim `protobuf:"bytes,1,rep,name=top_rankers,json=topRankers,proto3" json:"top_rankers,omitempty"`
	Me         *TopRankerSlim   `protobuf:"bytes,2,opt,name=me,proto3" json:"me,omitempty"`
}

func (x *RenderTopRankerLeaderboardImageRequest) Reset() {
	*x = RenderTopRankerLeaderboardImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderTopRankerLeaderboardImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTopRankerLeaderboardImageRequest) ProtoMessage() {}

func (x *RenderTopRankerLeaderboardImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTopRankerLeaderboardImageRequest.ProtoReflect.Descriptor instead.
func (*RenderTopRankerLeaderboardImageRequest) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{19}
}

func (x *RenderTopRankerLeaderboardImageRequest) GetTopRankers() []*TopRankerSlim {
	if x != nil {
		return x.TopRankers
	}
	return nil
}

func (x *RenderTopRankerLeaderboardImageRequest) GetMe() *TopRankerSlim {
	if x != nil {
		return x.Me
	}
	return nil
}

type StarHunterSlim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       uint32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Profile    string `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	TotalStars uint32 `protobuf:"varint,3,opt,name=total_stars,json=totalStars,proto3" json:"total_stars,omitempty"`
}

func (x *StarHunterSlim) Reset() {
	*x = StarHunterSlim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarHunterSlim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarHunterSlim) ProtoMessage() {}

func (x *StarHunterSlim) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarHunterSlim.ProtoReflect.Descriptor instead.
func (*StarHunterSlim) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{20}
}

func (x *StarHunterSlim) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *StarHunterSlim) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *StarHunterSlim) GetTotalStars() uint32 {
	if x != nil {
		return x.TotalStars
	}
	return 0
}

type TopRankerSlim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       uint32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Profile    string `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	ScorePoint uint32 `protobuf:"varint,3,opt,name=score_point,json=scorePoint,proto3" json:"score_point,omitempty"`
}

func (x *TopRankerSlim) Reset() {
	*x = TopRankerSlim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopRankerSlim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopRankerSlim) ProtoMessage() {}

func (x *TopRankerSlim) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopRankerSlim.ProtoReflect.Descriptor instead.
func (*TopRankerSlim) Descriptor() ([]byte, []int) {
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP(), []int{21}
}

func (x *TopRankerSlim) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TopRankerSlim) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *TopRankerSlim) GetScorePoint() uint32 {
	if x != nil {
		return x.ScorePoint
	}
	return 0
}

var File_ethereum_v1_leaderboard_leaderboard_proto protoreflect.FileDescriptor

var file_ethereum_v1_leaderboard_leaderboard_proto_rawDesc = []byte{
	0x0a, 0x29, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x6e, 0x66, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x02,
	0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x0d, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x22, 0x66, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a,
	0x28, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x02, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd0,
	0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x5f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x22, 0x64, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x68, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x09,
	0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x69,
	0x6d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x02, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x6c, 0x69, 0x6d, 0x52, 0x02, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x6d, 0x52,
	0x0a, 0x74, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x02, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x6d, 0x52,
	0x02, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x6c, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x22,
	0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x85, 0x01, 0x0a,
	0x0d, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78,
	0x79, 0x7a, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x32, 0xfe, 0x0f, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x37, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0xda, 0x41, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x73, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x22, 0x50, 0xda, 0x41,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x73, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3d, 0x2a, 0x7d, 0x12, 0xb9,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x3a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0xd9, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x40, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0xc8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x35, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x53, 0xda, 0x41,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3d, 0x2a,
	0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x41, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a,
	0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x3a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0xde, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x41, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xda,
	0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x51, 0xda, 0x41, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3d, 0x2a, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x21, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x41, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x48, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0xda, 0x41, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x3a, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x3b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_v1_leaderboard_leaderboard_proto_rawDescOnce sync.Once
	file_ethereum_v1_leaderboard_leaderboard_proto_rawDescData = file_ethereum_v1_leaderboard_leaderboard_proto_rawDesc
)

func file_ethereum_v1_leaderboard_leaderboard_proto_rawDescGZIP() []byte {
	file_ethereum_v1_leaderboard_leaderboard_proto_rawDescOnce.Do(func() {
		file_ethereum_v1_leaderboard_leaderboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_v1_leaderboard_leaderboard_proto_rawDescData)
	})
	return file_ethereum_v1_leaderboard_leaderboard_proto_rawDescData
}

var file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_ethereum_v1_leaderboard_leaderboard_proto_goTypes = []interface{}{
	(*GetTopRankerLeaderboardRequest)(nil),            // 0: ethereum.v1.leaderboard.GetTopRankerLeaderboardRequest
	(*GetTopRankerLeaderboardResponse)(nil),           // 1: ethereum.v1.leaderboard.GetTopRankerLeaderboardResponse
	(*GetTopRankerRequest)(nil),                       // 2: ethereum.v1.leaderboard.GetTopRankerRequest
	(*RenderTopRankerLeaderboardRequest)(nil),         // 3: ethereum.v1.leaderboard.RenderTopRankerLeaderboardRequest
	(*GetWeeklyTopCollectorLeaderboardRequest)(nil),   // 4: ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardRequest
	(*GetWeeklyTopCollectorLeaderboardResponse)(nil),  // 5: ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardResponse
	(*GetWeeklyTopCollectorRequest)(nil),              // 6: ethereum.v1.leaderboard.GetWeeklyTopCollectorRequest
	(*GetAllTimeTopCollectorLeaderboardRequest)(nil),  // 7: ethereum.v1.leaderboard.GetAllTimeTopCollectorLeaderboardRequest
	(*GetAllTimeTopCollectorLeaderboardResponse)(nil), // 8: ethereum.v1.leaderboard.GetAllTimeTopCollectorLeaderboardResponse
	(*RenderWeeklyStarHunterLeaderboardRequest)(nil),  // 9: ethereum.v1.leaderboard.RenderWeeklyStarHunterLeaderboardRequest
	(*GetWeeklyStarHunterLeaderboardRequest)(nil),     // 10: ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardRequest
	(*GetWeeklyStarHunterLeaderboardResponse)(nil),    // 11: ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardResponse
	(*GetWeeklyStarHunterRequest)(nil),                // 12: ethereum.v1.leaderboard.GetWeeklyStarHunterRequest
	(*GetAllTimeStarHunterLeaderboardRequest)(nil),    // 13: ethereum.v1.leaderboard.GetAllTimeStarHunterLeaderboardRequest
	(*GetAllTimeStarHunterLeaderboardResponse)(nil),   // 14: ethereum.v1.leaderboard.GetAllTimeStarHunterLeaderboardResponse
	(*ImageResponse)(nil),                             // 15: ethereum.v1.leaderboard.ImageResponse
	(*TopRanker)(nil),                                 // 16: ethereum.v1.leaderboard.TopRanker
	(*StarHunter)(nil),                                // 17: ethereum.v1.leaderboard.StarHunter
	(*RenderStarHuntersLeaderboardImageRequest)(nil),  // 18: ethereum.v1.leaderboard.RenderStarHuntersLeaderboardImageRequest
	(*RenderTopRankerLeaderboardImageRequest)(nil),    // 19: ethereum.v1.leaderboard.RenderTopRankerLeaderboardImageRequest
	(*StarHunterSlim)(nil),                            // 20: ethereum.v1.leaderboard.StarHunterSlim
	(*TopRankerSlim)(nil),                             // 21: ethereum.v1.leaderboard.TopRankerSlim
	(score.PlayMode)(0),                               // 22: ethereum.v1.score.PlayMode
	(score.GameMode)(0),                               // 23: ethereum.v1.score.GameMode
	(*timestamppb.Timestamp)(nil),                     // 24: google.protobuf.Timestamp
	(*profile.Profile)(nil),                           // 25: ethereum.v1.profile.Profile
	(*score.Score)(nil),                               // 26: ethereum.v1.score.Score
}
var file_ethereum_v1_leaderboard_leaderboard_proto_depIdxs = []int32{
	22, // 0: ethereum.v1.leaderboard.GetTopRankerLeaderboardRequest.play_mode:type_name -> ethereum.v1.score.PlayMode
	23, // 1: ethereum.v1.leaderboard.GetTopRankerLeaderboardRequest.game_mode:type_name -> ethereum.v1.score.GameMode
	16, // 2: ethereum.v1.leaderboard.GetTopRankerLeaderboardResponse.top_rankers:type_name -> ethereum.v1.leaderboard.TopRanker
	24, // 3: ethereum.v1.leaderboard.GetTopRankerLeaderboardResponse.deadline:type_name -> google.protobuf.Timestamp
	22, // 4: ethereum.v1.leaderboard.GetTopRankerRequest.play_mode:type_name -> ethereum.v1.score.PlayMode
	23, // 5: ethereum.v1.leaderboard.GetTopRankerRequest.game_mode:type_name -> ethereum.v1.score.GameMode
	22, // 6: ethereum.v1.leaderboard.RenderTopRankerLeaderboardRequest.play_mode:type_name -> ethereum.v1.score.PlayMode
	23, // 7: ethereum.v1.leaderboard.RenderTopRankerLeaderboardRequest.game_mode:type_name -> ethereum.v1.score.GameMode
	17, // 8: ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardResponse.top_collectors:type_name -> ethereum.v1.leaderboard.StarHunter
	24, // 9: ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardResponse.deadline:type_name -> google.protobuf.Timestamp
	17, // 10: ethereum.v1.leaderboard.GetAllTimeTopCollectorLeaderboardResponse.top_collectors:type_name -> ethereum.v1.leaderboard.StarHunter
	17, // 11: ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardResponse.star_hunters:type_name -> ethereum.v1.leaderboard.StarHunter
	24, // 12: ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardResponse.deadline:type_name -> google.protobuf.Timestamp
	17, // 13: ethereum.v1.leaderboard.GetAllTimeStarHunterLeaderboardResponse.star_hunters:type_name -> ethereum.v1.leaderboard.StarHunter
	25, // 14: ethereum.v1.leaderboard.TopRanker.profile:type_name -> ethereum.v1.profile.Profile
	26, // 15: ethereum.v1.leaderboard.TopRanker.score:type_name -> ethereum.v1.score.Score
	25, // 16: ethereum.v1.leaderboard.StarHunter.profile:type_name -> ethereum.v1.profile.Profile
	20, // 17: ethereum.v1.leaderboard.RenderStarHuntersLeaderboardImageRequest.star_hunters:type_name -> ethereum.v1.leaderboard.StarHunterSlim
	20, // 18: ethereum.v1.leaderboard.RenderStarHuntersLeaderboardImageRequest.me:type_name -> ethereum.v1.leaderboard.StarHunterSlim
	21, // 19: ethereum.v1.leaderboard.RenderTopRankerLeaderboardImageRequest.top_rankers:type_name -> ethereum.v1.leaderboard.TopRankerSlim
	21, // 20: ethereum.v1.leaderboard.RenderTopRankerLeaderboardImageRequest.me:type_name -> ethereum.v1.leaderboard.TopRankerSlim
	0,  // 21: ethereum.v1.leaderboard.LeaderboardService.GetTopRankerLeaderboard:input_type -> ethereum.v1.leaderboard.GetTopRankerLeaderboardRequest
	2,  // 22: ethereum.v1.leaderboard.LeaderboardService.GetTopRanker:input_type -> ethereum.v1.leaderboard.GetTopRankerRequest
	3,  // 23: ethereum.v1.leaderboard.LeaderboardService.RenderTopRankerLeaderboard:input_type -> ethereum.v1.leaderboard.RenderTopRankerLeaderboardRequest
	4,  // 24: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyTopCollectorLeaderboard:input_type -> ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardRequest
	6,  // 25: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyTopCollector:input_type -> ethereum.v1.leaderboard.GetWeeklyTopCollectorRequest
	9,  // 26: ethereum.v1.leaderboard.LeaderboardService.RenderWeeklyTopCollectorLeaderboard:input_type -> ethereum.v1.leaderboard.RenderWeeklyStarHunterLeaderboardRequest
	7,  // 27: ethereum.v1.leaderboard.LeaderboardService.GetAllTimeTopCollectorLeaderboard:input_type -> ethereum.v1.leaderboard.GetAllTimeTopCollectorLeaderboardRequest
	10, // 28: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyStarHunterLeaderboard:input_type -> ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardRequest
	12, // 29: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyStarHunter:input_type -> ethereum.v1.leaderboard.GetWeeklyStarHunterRequest
	9,  // 30: ethereum.v1.leaderboard.LeaderboardService.RenderWeeklyStarHunterLeaderboard:input_type -> ethereum.v1.leaderboard.RenderWeeklyStarHunterLeaderboardRequest
	1,  // 31: ethereum.v1.leaderboard.LeaderboardService.GetTopRankerLeaderboard:output_type -> ethereum.v1.leaderboard.GetTopRankerLeaderboardResponse
	16, // 32: ethereum.v1.leaderboard.LeaderboardService.GetTopRanker:output_type -> ethereum.v1.leaderboard.TopRanker
	15, // 33: ethereum.v1.leaderboard.LeaderboardService.RenderTopRankerLeaderboard:output_type -> ethereum.v1.leaderboard.ImageResponse
	5,  // 34: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyTopCollectorLeaderboard:output_type -> ethereum.v1.leaderboard.GetWeeklyTopCollectorLeaderboardResponse
	17, // 35: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyTopCollector:output_type -> ethereum.v1.leaderboard.StarHunter
	15, // 36: ethereum.v1.leaderboard.LeaderboardService.RenderWeeklyTopCollectorLeaderboard:output_type -> ethereum.v1.leaderboard.ImageResponse
	8,  // 37: ethereum.v1.leaderboard.LeaderboardService.GetAllTimeTopCollectorLeaderboard:output_type -> ethereum.v1.leaderboard.GetAllTimeTopCollectorLeaderboardResponse
	11, // 38: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyStarHunterLeaderboard:output_type -> ethereum.v1.leaderboard.GetWeeklyStarHunterLeaderboardResponse
	17, // 39: ethereum.v1.leaderboard.LeaderboardService.GetWeeklyStarHunter:output_type -> ethereum.v1.leaderboard.StarHunter
	15, // 40: ethereum.v1.leaderboard.LeaderboardService.RenderWeeklyStarHunterLeaderboard:output_type -> ethereum.v1.leaderboard.ImageResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ethereum_v1_leaderboard_leaderboard_proto_init() }
func file_ethereum_v1_leaderboard_leaderboard_proto_init() {
	if File_ethereum_v1_leaderboard_leaderboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopRankerLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopRankerLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopRankerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderTopRankerLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyTopCollectorLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyTopCollectorLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyTopCollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTimeTopCollectorLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTimeTopCollectorLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderWeeklyStarHunterLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyStarHunterLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyStarHunterLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyStarHunterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTimeStarHunterLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTimeStarHunterLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopRanker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarHunter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderStarHuntersLeaderboardImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderTopRankerLeaderboardImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarHunterSlim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopRankerSlim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_v1_leaderboard_leaderboard_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ethereum_v1_leaderboard_leaderboard_proto_goTypes,
		DependencyIndexes: file_ethereum_v1_leaderboard_leaderboard_proto_depIdxs,
		MessageInfos:      file_ethereum_v1_leaderboard_leaderboard_proto_msgTypes,
	}.Build()
	File_ethereum_v1_leaderboard_leaderboard_proto = out.File
	file_ethereum_v1_leaderboard_leaderboard_proto_rawDesc = nil
	file_ethereum_v1_leaderboard_leaderboard_proto_goTypes = nil
	file_ethereum_v1_leaderboard_leaderboard_proto_depIdxs = nil
}
