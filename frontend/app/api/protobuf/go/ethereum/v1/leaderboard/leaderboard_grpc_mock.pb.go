// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: ethereum/v1/leaderboard/leaderboard.proto

package leaderboard

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLeaderboardServiceClient is a mock of LeaderboardServiceClient interface.
type MockLeaderboardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardServiceClientMockRecorder
}

// MockLeaderboardServiceClientMockRecorder is the mock recorder for MockLeaderboardServiceClient.
type MockLeaderboardServiceClientMockRecorder struct {
	mock *MockLeaderboardServiceClient
}

// NewMockLeaderboardServiceClient creates a new mock instance.
func NewMockLeaderboardServiceClient(ctrl *gomock.Controller) *MockLeaderboardServiceClient {
	mock := &MockLeaderboardServiceClient{ctrl: ctrl}
	mock.recorder = &MockLeaderboardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardServiceClient) EXPECT() *MockLeaderboardServiceClientMockRecorder {
	return m.recorder
}

// GetAllTimeTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) GetAllTimeTopCollectorLeaderboard(ctx context.Context, in *GetAllTimeTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetAllTimeTopCollectorLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTimeTopCollectorLeaderboard", varargs...)
	ret0, _ := ret[0].(*GetAllTimeTopCollectorLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTimeTopCollectorLeaderboard indicates an expected call of GetAllTimeTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) GetAllTimeTopCollectorLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTimeTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetAllTimeTopCollectorLeaderboard), varargs...)
}

// GetTopRanker mocks base method.
func (m *MockLeaderboardServiceClient) GetTopRanker(ctx context.Context, in *GetTopRankerRequest, opts ...grpc.CallOption) (*TopRanker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopRanker", varargs...)
	ret0, _ := ret[0].(*TopRanker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRanker indicates an expected call of GetTopRanker.
func (mr *MockLeaderboardServiceClientMockRecorder) GetTopRanker(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRanker", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetTopRanker), varargs...)
}

// GetTopRankerLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) GetTopRankerLeaderboard(ctx context.Context, in *GetTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*GetTopRankerLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopRankerLeaderboard", varargs...)
	ret0, _ := ret[0].(*GetTopRankerLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRankerLeaderboard indicates an expected call of GetTopRankerLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) GetTopRankerLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRankerLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetTopRankerLeaderboard), varargs...)
}

// GetWeeklyStarHunter mocks base method.
func (m *MockLeaderboardServiceClient) GetWeeklyStarHunter(ctx context.Context, in *GetWeeklyStarHunterRequest, opts ...grpc.CallOption) (*StarHunter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeeklyStarHunter", varargs...)
	ret0, _ := ret[0].(*StarHunter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyStarHunter indicates an expected call of GetWeeklyStarHunter.
func (mr *MockLeaderboardServiceClientMockRecorder) GetWeeklyStarHunter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyStarHunter", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetWeeklyStarHunter), varargs...)
}

// GetWeeklyStarHunterLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) GetWeeklyStarHunterLeaderboard(ctx context.Context, in *GetWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyStarHunterLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeeklyStarHunterLeaderboard", varargs...)
	ret0, _ := ret[0].(*GetWeeklyStarHunterLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyStarHunterLeaderboard indicates an expected call of GetWeeklyStarHunterLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) GetWeeklyStarHunterLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyStarHunterLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetWeeklyStarHunterLeaderboard), varargs...)
}

// GetWeeklyTopCollector mocks base method.
func (m *MockLeaderboardServiceClient) GetWeeklyTopCollector(ctx context.Context, in *GetWeeklyTopCollectorRequest, opts ...grpc.CallOption) (*StarHunter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeeklyTopCollector", varargs...)
	ret0, _ := ret[0].(*StarHunter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyTopCollector indicates an expected call of GetWeeklyTopCollector.
func (mr *MockLeaderboardServiceClientMockRecorder) GetWeeklyTopCollector(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyTopCollector", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetWeeklyTopCollector), varargs...)
}

// GetWeeklyTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) GetWeeklyTopCollectorLeaderboard(ctx context.Context, in *GetWeeklyTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyTopCollectorLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeeklyTopCollectorLeaderboard", varargs...)
	ret0, _ := ret[0].(*GetWeeklyTopCollectorLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyTopCollectorLeaderboard indicates an expected call of GetWeeklyTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) GetWeeklyTopCollectorLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).GetWeeklyTopCollectorLeaderboard), varargs...)
}

// RenderTopRankerLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) RenderTopRankerLeaderboard(ctx context.Context, in *RenderTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenderTopRankerLeaderboard", varargs...)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderTopRankerLeaderboard indicates an expected call of RenderTopRankerLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) RenderTopRankerLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTopRankerLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).RenderTopRankerLeaderboard), varargs...)
}

// RenderWeeklyStarHunterLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) RenderWeeklyStarHunterLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenderWeeklyStarHunterLeaderboard", varargs...)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderWeeklyStarHunterLeaderboard indicates an expected call of RenderWeeklyStarHunterLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) RenderWeeklyStarHunterLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWeeklyStarHunterLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).RenderWeeklyStarHunterLeaderboard), varargs...)
}

// RenderWeeklyTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceClient) RenderWeeklyTopCollectorLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenderWeeklyTopCollectorLeaderboard", varargs...)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderWeeklyTopCollectorLeaderboard indicates an expected call of RenderWeeklyTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceClientMockRecorder) RenderWeeklyTopCollectorLeaderboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWeeklyTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceClient)(nil).RenderWeeklyTopCollectorLeaderboard), varargs...)
}

// MockLeaderboardServiceServer is a mock of LeaderboardServiceServer interface.
type MockLeaderboardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardServiceServerMockRecorder
}

// MockLeaderboardServiceServerMockRecorder is the mock recorder for MockLeaderboardServiceServer.
type MockLeaderboardServiceServerMockRecorder struct {
	mock *MockLeaderboardServiceServer
}

// NewMockLeaderboardServiceServer creates a new mock instance.
func NewMockLeaderboardServiceServer(ctrl *gomock.Controller) *MockLeaderboardServiceServer {
	mock := &MockLeaderboardServiceServer{ctrl: ctrl}
	mock.recorder = &MockLeaderboardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardServiceServer) EXPECT() *MockLeaderboardServiceServerMockRecorder {
	return m.recorder
}

// GetAllTimeTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) GetAllTimeTopCollectorLeaderboard(ctx context.Context, in *GetAllTimeTopCollectorLeaderboardRequest) (*GetAllTimeTopCollectorLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTimeTopCollectorLeaderboard", ctx, in)
	ret0, _ := ret[0].(*GetAllTimeTopCollectorLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTimeTopCollectorLeaderboard indicates an expected call of GetAllTimeTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) GetAllTimeTopCollectorLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTimeTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetAllTimeTopCollectorLeaderboard), ctx, in)
}

// GetTopRanker mocks base method.
func (m *MockLeaderboardServiceServer) GetTopRanker(ctx context.Context, in *GetTopRankerRequest) (*TopRanker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRanker", ctx, in)
	ret0, _ := ret[0].(*TopRanker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRanker indicates an expected call of GetTopRanker.
func (mr *MockLeaderboardServiceServerMockRecorder) GetTopRanker(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRanker", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetTopRanker), ctx, in)
}

// GetTopRankerLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) GetTopRankerLeaderboard(ctx context.Context, in *GetTopRankerLeaderboardRequest) (*GetTopRankerLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRankerLeaderboard", ctx, in)
	ret0, _ := ret[0].(*GetTopRankerLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRankerLeaderboard indicates an expected call of GetTopRankerLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) GetTopRankerLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRankerLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetTopRankerLeaderboard), ctx, in)
}

// GetWeeklyStarHunter mocks base method.
func (m *MockLeaderboardServiceServer) GetWeeklyStarHunter(ctx context.Context, in *GetWeeklyStarHunterRequest) (*StarHunter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyStarHunter", ctx, in)
	ret0, _ := ret[0].(*StarHunter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyStarHunter indicates an expected call of GetWeeklyStarHunter.
func (mr *MockLeaderboardServiceServerMockRecorder) GetWeeklyStarHunter(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyStarHunter", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetWeeklyStarHunter), ctx, in)
}

// GetWeeklyStarHunterLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) GetWeeklyStarHunterLeaderboard(ctx context.Context, in *GetWeeklyStarHunterLeaderboardRequest) (*GetWeeklyStarHunterLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyStarHunterLeaderboard", ctx, in)
	ret0, _ := ret[0].(*GetWeeklyStarHunterLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyStarHunterLeaderboard indicates an expected call of GetWeeklyStarHunterLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) GetWeeklyStarHunterLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyStarHunterLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetWeeklyStarHunterLeaderboard), ctx, in)
}

// GetWeeklyTopCollector mocks base method.
func (m *MockLeaderboardServiceServer) GetWeeklyTopCollector(ctx context.Context, in *GetWeeklyTopCollectorRequest) (*StarHunter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyTopCollector", ctx, in)
	ret0, _ := ret[0].(*StarHunter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyTopCollector indicates an expected call of GetWeeklyTopCollector.
func (mr *MockLeaderboardServiceServerMockRecorder) GetWeeklyTopCollector(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyTopCollector", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetWeeklyTopCollector), ctx, in)
}

// GetWeeklyTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) GetWeeklyTopCollectorLeaderboard(ctx context.Context, in *GetWeeklyTopCollectorLeaderboardRequest) (*GetWeeklyTopCollectorLeaderboardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyTopCollectorLeaderboard", ctx, in)
	ret0, _ := ret[0].(*GetWeeklyTopCollectorLeaderboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyTopCollectorLeaderboard indicates an expected call of GetWeeklyTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) GetWeeklyTopCollectorLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).GetWeeklyTopCollectorLeaderboard), ctx, in)
}

// RenderTopRankerLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) RenderTopRankerLeaderboard(ctx context.Context, in *RenderTopRankerLeaderboardRequest) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderTopRankerLeaderboard", ctx, in)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderTopRankerLeaderboard indicates an expected call of RenderTopRankerLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) RenderTopRankerLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTopRankerLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).RenderTopRankerLeaderboard), ctx, in)
}

// RenderWeeklyStarHunterLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) RenderWeeklyStarHunterLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderWeeklyStarHunterLeaderboard", ctx, in)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderWeeklyStarHunterLeaderboard indicates an expected call of RenderWeeklyStarHunterLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) RenderWeeklyStarHunterLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWeeklyStarHunterLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).RenderWeeklyStarHunterLeaderboard), ctx, in)
}

// RenderWeeklyTopCollectorLeaderboard mocks base method.
func (m *MockLeaderboardServiceServer) RenderWeeklyTopCollectorLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderWeeklyTopCollectorLeaderboard", ctx, in)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderWeeklyTopCollectorLeaderboard indicates an expected call of RenderWeeklyTopCollectorLeaderboard.
func (mr *MockLeaderboardServiceServerMockRecorder) RenderWeeklyTopCollectorLeaderboard(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWeeklyTopCollectorLeaderboard", reflect.TypeOf((*MockLeaderboardServiceServer)(nil).RenderWeeklyTopCollectorLeaderboard), ctx, in)
}
