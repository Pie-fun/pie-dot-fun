// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ethereum/v1/leaderboard/leaderboard.proto

package leaderboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardServiceClient is the client API for LeaderboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardServiceClient interface {
	// GetTopRankerLeaderboard will return best score leaderboard
	GetTopRankerLeaderboard(ctx context.Context, in *GetTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*GetTopRankerLeaderboardResponse, error)
	// GetTopRanker will return weekly top collector.
	GetTopRanker(ctx context.Context, in *GetTopRankerRequest, opts ...grpc.CallOption) (*TopRanker, error)
	// RenderTopRankerLeaderboard will render weekly top collectors image.
	RenderTopRankerLeaderboard(ctx context.Context, in *RenderTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	// GetWeeklyTopCollectorLeaderboard will return weekly top collectors.
	GetWeeklyTopCollectorLeaderboard(ctx context.Context, in *GetWeeklyTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyTopCollectorLeaderboardResponse, error)
	// GetWeeklyTopCollector will return weekly top collector.
	GetWeeklyTopCollector(ctx context.Context, in *GetWeeklyTopCollectorRequest, opts ...grpc.CallOption) (*StarHunter, error)
	// RenderWeeklyTopCollectorLeaderboard will render weekly top collectors image.
	RenderWeeklyTopCollectorLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	// GetAllTimeTopCollectorLeaderboard will return all time top collectors.
	GetAllTimeTopCollectorLeaderboard(ctx context.Context, in *GetAllTimeTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetAllTimeTopCollectorLeaderboardResponse, error)
	// GetWeeklyStarHunterLeaderboard will return weekly top collectors.
	GetWeeklyStarHunterLeaderboard(ctx context.Context, in *GetWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyStarHunterLeaderboardResponse, error)
	// GetWeeklyStarHunter will return weekly top collector.
	GetWeeklyStarHunter(ctx context.Context, in *GetWeeklyStarHunterRequest, opts ...grpc.CallOption) (*StarHunter, error)
	// RenderWeeklyStarHunterLeaderboard will render weekly top collectors image.
	RenderWeeklyStarHunterLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type leaderboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardServiceClient(cc grpc.ClientConnInterface) LeaderboardServiceClient {
	return &leaderboardServiceClient{cc}
}

func (c *leaderboardServiceClient) GetTopRankerLeaderboard(ctx context.Context, in *GetTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*GetTopRankerLeaderboardResponse, error) {
	out := new(GetTopRankerLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetTopRankerLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetTopRanker(ctx context.Context, in *GetTopRankerRequest, opts ...grpc.CallOption) (*TopRanker, error) {
	out := new(TopRanker)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetTopRanker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) RenderTopRankerLeaderboard(ctx context.Context, in *RenderTopRankerLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/RenderTopRankerLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetWeeklyTopCollectorLeaderboard(ctx context.Context, in *GetWeeklyTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyTopCollectorLeaderboardResponse, error) {
	out := new(GetWeeklyTopCollectorLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyTopCollectorLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetWeeklyTopCollector(ctx context.Context, in *GetWeeklyTopCollectorRequest, opts ...grpc.CallOption) (*StarHunter, error) {
	out := new(StarHunter)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyTopCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) RenderWeeklyTopCollectorLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/RenderWeeklyTopCollectorLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetAllTimeTopCollectorLeaderboard(ctx context.Context, in *GetAllTimeTopCollectorLeaderboardRequest, opts ...grpc.CallOption) (*GetAllTimeTopCollectorLeaderboardResponse, error) {
	out := new(GetAllTimeTopCollectorLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetAllTimeTopCollectorLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetWeeklyStarHunterLeaderboard(ctx context.Context, in *GetWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*GetWeeklyStarHunterLeaderboardResponse, error) {
	out := new(GetWeeklyStarHunterLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyStarHunterLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetWeeklyStarHunter(ctx context.Context, in *GetWeeklyStarHunterRequest, opts ...grpc.CallOption) (*StarHunter, error) {
	out := new(StarHunter)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyStarHunter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) RenderWeeklyStarHunterLeaderboard(ctx context.Context, in *RenderWeeklyStarHunterLeaderboardRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/ethereum.v1.leaderboard.LeaderboardService/RenderWeeklyStarHunterLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardServiceServer is the server API for LeaderboardService service.
// All implementations must embed UnimplementedLeaderboardServiceServer
// for forward compatibility
type LeaderboardServiceServer interface {
	// GetTopRankerLeaderboard will return best score leaderboard
	GetTopRankerLeaderboard(context.Context, *GetTopRankerLeaderboardRequest) (*GetTopRankerLeaderboardResponse, error)
	// GetTopRanker will return weekly top collector.
	GetTopRanker(context.Context, *GetTopRankerRequest) (*TopRanker, error)
	// RenderTopRankerLeaderboard will render weekly top collectors image.
	RenderTopRankerLeaderboard(context.Context, *RenderTopRankerLeaderboardRequest) (*ImageResponse, error)
	// GetWeeklyTopCollectorLeaderboard will return weekly top collectors.
	GetWeeklyTopCollectorLeaderboard(context.Context, *GetWeeklyTopCollectorLeaderboardRequest) (*GetWeeklyTopCollectorLeaderboardResponse, error)
	// GetWeeklyTopCollector will return weekly top collector.
	GetWeeklyTopCollector(context.Context, *GetWeeklyTopCollectorRequest) (*StarHunter, error)
	// RenderWeeklyTopCollectorLeaderboard will render weekly top collectors image.
	RenderWeeklyTopCollectorLeaderboard(context.Context, *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error)
	// GetAllTimeTopCollectorLeaderboard will return all time top collectors.
	GetAllTimeTopCollectorLeaderboard(context.Context, *GetAllTimeTopCollectorLeaderboardRequest) (*GetAllTimeTopCollectorLeaderboardResponse, error)
	// GetWeeklyStarHunterLeaderboard will return weekly top collectors.
	GetWeeklyStarHunterLeaderboard(context.Context, *GetWeeklyStarHunterLeaderboardRequest) (*GetWeeklyStarHunterLeaderboardResponse, error)
	// GetWeeklyStarHunter will return weekly top collector.
	GetWeeklyStarHunter(context.Context, *GetWeeklyStarHunterRequest) (*StarHunter, error)
	// RenderWeeklyStarHunterLeaderboard will render weekly top collectors image.
	RenderWeeklyStarHunterLeaderboard(context.Context, *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error)
	mustEmbedUnimplementedLeaderboardServiceServer()
}

// UnimplementedLeaderboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardServiceServer struct {
}

func (UnimplementedLeaderboardServiceServer) GetTopRankerLeaderboard(context.Context, *GetTopRankerLeaderboardRequest) (*GetTopRankerLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopRankerLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetTopRanker(context.Context, *GetTopRankerRequest) (*TopRanker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopRanker not implemented")
}
func (UnimplementedLeaderboardServiceServer) RenderTopRankerLeaderboard(context.Context, *RenderTopRankerLeaderboardRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTopRankerLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetWeeklyTopCollectorLeaderboard(context.Context, *GetWeeklyTopCollectorLeaderboardRequest) (*GetWeeklyTopCollectorLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyTopCollectorLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetWeeklyTopCollector(context.Context, *GetWeeklyTopCollectorRequest) (*StarHunter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyTopCollector not implemented")
}
func (UnimplementedLeaderboardServiceServer) RenderWeeklyTopCollectorLeaderboard(context.Context, *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderWeeklyTopCollectorLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetAllTimeTopCollectorLeaderboard(context.Context, *GetAllTimeTopCollectorLeaderboardRequest) (*GetAllTimeTopCollectorLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTimeTopCollectorLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetWeeklyStarHunterLeaderboard(context.Context, *GetWeeklyStarHunterLeaderboardRequest) (*GetWeeklyStarHunterLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyStarHunterLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetWeeklyStarHunter(context.Context, *GetWeeklyStarHunterRequest) (*StarHunter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyStarHunter not implemented")
}
func (UnimplementedLeaderboardServiceServer) RenderWeeklyStarHunterLeaderboard(context.Context, *RenderWeeklyStarHunterLeaderboardRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderWeeklyStarHunterLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) mustEmbedUnimplementedLeaderboardServiceServer() {}

// UnsafeLeaderboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardServiceServer will
// result in compilation errors.
type UnsafeLeaderboardServiceServer interface {
	mustEmbedUnimplementedLeaderboardServiceServer()
}

func RegisterLeaderboardServiceServer(s grpc.ServiceRegistrar, srv LeaderboardServiceServer) {
	s.RegisterService(&LeaderboardService_ServiceDesc, srv)
}

func _LeaderboardService_GetTopRankerLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRankerLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetTopRankerLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetTopRankerLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetTopRankerLeaderboard(ctx, req.(*GetTopRankerLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetTopRanker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRankerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetTopRanker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetTopRanker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetTopRanker(ctx, req.(*GetTopRankerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_RenderTopRankerLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTopRankerLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).RenderTopRankerLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/RenderTopRankerLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).RenderTopRankerLeaderboard(ctx, req.(*RenderTopRankerLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetWeeklyTopCollectorLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyTopCollectorLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetWeeklyTopCollectorLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyTopCollectorLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetWeeklyTopCollectorLeaderboard(ctx, req.(*GetWeeklyTopCollectorLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetWeeklyTopCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyTopCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetWeeklyTopCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyTopCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetWeeklyTopCollector(ctx, req.(*GetWeeklyTopCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_RenderWeeklyTopCollectorLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderWeeklyStarHunterLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).RenderWeeklyTopCollectorLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/RenderWeeklyTopCollectorLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).RenderWeeklyTopCollectorLeaderboard(ctx, req.(*RenderWeeklyStarHunterLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetAllTimeTopCollectorLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTimeTopCollectorLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetAllTimeTopCollectorLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetAllTimeTopCollectorLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetAllTimeTopCollectorLeaderboard(ctx, req.(*GetAllTimeTopCollectorLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetWeeklyStarHunterLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyStarHunterLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetWeeklyStarHunterLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyStarHunterLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetWeeklyStarHunterLeaderboard(ctx, req.(*GetWeeklyStarHunterLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetWeeklyStarHunter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyStarHunterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetWeeklyStarHunter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/GetWeeklyStarHunter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetWeeklyStarHunter(ctx, req.(*GetWeeklyStarHunterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_RenderWeeklyStarHunterLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderWeeklyStarHunterLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).RenderWeeklyStarHunterLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.v1.leaderboard.LeaderboardService/RenderWeeklyStarHunterLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).RenderWeeklyStarHunterLeaderboard(ctx, req.(*RenderWeeklyStarHunterLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardService_ServiceDesc is the grpc.ServiceDesc for LeaderboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.v1.leaderboard.LeaderboardService",
	HandlerType: (*LeaderboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopRankerLeaderboard",
			Handler:    _LeaderboardService_GetTopRankerLeaderboard_Handler,
		},
		{
			MethodName: "GetTopRanker",
			Handler:    _LeaderboardService_GetTopRanker_Handler,
		},
		{
			MethodName: "RenderTopRankerLeaderboard",
			Handler:    _LeaderboardService_RenderTopRankerLeaderboard_Handler,
		},
		{
			MethodName: "GetWeeklyTopCollectorLeaderboard",
			Handler:    _LeaderboardService_GetWeeklyTopCollectorLeaderboard_Handler,
		},
		{
			MethodName: "GetWeeklyTopCollector",
			Handler:    _LeaderboardService_GetWeeklyTopCollector_Handler,
		},
		{
			MethodName: "RenderWeeklyTopCollectorLeaderboard",
			Handler:    _LeaderboardService_RenderWeeklyTopCollectorLeaderboard_Handler,
		},
		{
			MethodName: "GetAllTimeTopCollectorLeaderboard",
			Handler:    _LeaderboardService_GetAllTimeTopCollectorLeaderboard_Handler,
		},
		{
			MethodName: "GetWeeklyStarHunterLeaderboard",
			Handler:    _LeaderboardService_GetWeeklyStarHunterLeaderboard_Handler,
		},
		{
			MethodName: "GetWeeklyStarHunter",
			Handler:    _LeaderboardService_GetWeeklyStarHunter_Handler,
		},
		{
			MethodName: "RenderWeeklyStarHunterLeaderboard",
			Handler:    _LeaderboardService_RenderWeeklyStarHunterLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum/v1/leaderboard/leaderboard.proto",
}
