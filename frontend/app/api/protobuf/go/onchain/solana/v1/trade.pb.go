// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: onchain/solana/v1/trade.proto

package solana

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Trade
// Reference: https://github.com/Topledger/solana-programs/blob/b6532ee5b9c0608903d6b8b9270cce7b161adf55/dex-trades/proto/output.proto
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 블록 날짜
	BlockDate string `protobuf:"bytes,1,opt,name=block_date,json=blockDate,proto3" json:"block_date,omitempty"`
	// 블록 생성 시간 (Unix timestamp)
	BlockTime int64 `protobuf:"varint,2,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// 블록 슬롯 번호
	BlockSlot uint64 `protobuf:"varint,3,opt,name=block_slot,json=blockSlot,proto3" json:"block_slot,omitempty"`
	// 트랜잭션 ID (시그니처)
	TxId string `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// 트랜잭션 서명자의 주소
	Signer string `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
	// 유동성 풀의 주소
	PoolAddress string `protobuf:"bytes,6,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	// 기준 토큰(base token)의 민트 주소
	BaseMint string `protobuf:"bytes,7,opt,name=base_mint,json=baseMint,proto3" json:"base_mint,omitempty"`
	// 상대 토큰(quote token)의 민트 주소
	QuoteMint string `protobuf:"bytes,8,opt,name=quote_mint,json=quoteMint,proto3" json:"quote_mint,omitempty"`
	// 기준 토큰의 보관 계정 주소
	BaseVault string `protobuf:"bytes,9,opt,name=base_vault,json=baseVault,proto3" json:"base_vault,omitempty"`
	// 상대 토큰의 보관 계정 주소
	QuoteVault string `protobuf:"bytes,10,opt,name=quote_vault,json=quoteVault,proto3" json:"quote_vault,omitempty"`
	// 기준 토큰의 거래량
	BaseAmount float64 `protobuf:"fixed64,11,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	// 상대 토큰의 거래량
	QuoteAmount float64 `protobuf:"fixed64,12,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	// 내부 인스트럭션 여부
	IsInnerInstruction bool `protobuf:"varint,13,opt,name=is_inner_instruction,json=isInnerInstruction,proto3" json:"is_inner_instruction,omitempty"`
	// 인스트럭션 인덱스
	InstructionIndex uint32 `protobuf:"varint,14,opt,name=instruction_index,json=instructionIndex,proto3" json:"instruction_index,omitempty"`
	// 인스트럭션 타입 (예: swap, deposit 등)
	InstructionType string `protobuf:"bytes,15,opt,name=instruction_type,json=instructionType,proto3" json:"instruction_type,omitempty"`
	// 내부 인스트럭션의 인덱스
	InnerInstruxtionIndex uint32 `protobuf:"varint,16,opt,name=inner_instruxtion_index,json=innerInstruxtionIndex,proto3" json:"inner_instruxtion_index,omitempty"`
	// 외부 프로그램 ID (호출한 프로그램)
	OuterProgram string `protobuf:"bytes,17,opt,name=outer_program,json=outerProgram,proto3" json:"outer_program,omitempty"`
	// 내부 프로그램 ID (실제 실행된 프로그램)
	InnerProgram string `protobuf:"bytes,18,opt,name=inner_program,json=innerProgram,proto3" json:"inner_program,omitempty"`
	// 트랜잭션 수수료 (lamports 단위)
	TxnFeeLamports uint64 `protobuf:"varint,19,opt,name=txn_fee_lamports,json=txnFeeLamports,proto3" json:"txn_fee_lamports,omitempty"`
	// 서명자의 SOL 잔액 변화량 (lamports 단위)
	SignerLamportsChange int64 `protobuf:"varint,20,opt,name=signer_lamports_change,json=signerLamportsChange,proto3" json:"signer_lamports_change,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onchain_solana_v1_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_onchain_solana_v1_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_onchain_solana_v1_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetBlockDate() string {
	if x != nil {
		return x.BlockDate
	}
	return ""
}

func (x *Trade) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *Trade) GetBlockSlot() uint64 {
	if x != nil {
		return x.BlockSlot
	}
	return 0
}

func (x *Trade) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Trade) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *Trade) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *Trade) GetBaseMint() string {
	if x != nil {
		return x.BaseMint
	}
	return ""
}

func (x *Trade) GetQuoteMint() string {
	if x != nil {
		return x.QuoteMint
	}
	return ""
}

func (x *Trade) GetBaseVault() string {
	if x != nil {
		return x.BaseVault
	}
	return ""
}

func (x *Trade) GetQuoteVault() string {
	if x != nil {
		return x.QuoteVault
	}
	return ""
}

func (x *Trade) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *Trade) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *Trade) GetIsInnerInstruction() bool {
	if x != nil {
		return x.IsInnerInstruction
	}
	return false
}

func (x *Trade) GetInstructionIndex() uint32 {
	if x != nil {
		return x.InstructionIndex
	}
	return 0
}

func (x *Trade) GetInstructionType() string {
	if x != nil {
		return x.InstructionType
	}
	return ""
}

func (x *Trade) GetInnerInstruxtionIndex() uint32 {
	if x != nil {
		return x.InnerInstruxtionIndex
	}
	return 0
}

func (x *Trade) GetOuterProgram() string {
	if x != nil {
		return x.OuterProgram
	}
	return ""
}

func (x *Trade) GetInnerProgram() string {
	if x != nil {
		return x.InnerProgram
	}
	return ""
}

func (x *Trade) GetTxnFeeLamports() uint64 {
	if x != nil {
		return x.TxnFeeLamports
	}
	return 0
}

func (x *Trade) GetSignerLamportsChange() int64 {
	if x != nil {
		return x.SignerLamportsChange
	}
	return 0
}

var File_onchain_solana_v1_trade_proto protoreflect.FileDescriptor

var file_onchain_solana_v1_trade_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x76, 0x31, 0x22, 0xe0, 0x05, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x78, 0x6e, 0x46, 0x65, 0x65, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_onchain_solana_v1_trade_proto_rawDescOnce sync.Once
	file_onchain_solana_v1_trade_proto_rawDescData = file_onchain_solana_v1_trade_proto_rawDesc
)

func file_onchain_solana_v1_trade_proto_rawDescGZIP() []byte {
	file_onchain_solana_v1_trade_proto_rawDescOnce.Do(func() {
		file_onchain_solana_v1_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_onchain_solana_v1_trade_proto_rawDescData)
	})
	return file_onchain_solana_v1_trade_proto_rawDescData
}

var file_onchain_solana_v1_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_onchain_solana_v1_trade_proto_goTypes = []interface{}{
	(*Trade)(nil), // 0: onchain.solana.v1.Trade
}
var file_onchain_solana_v1_trade_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_onchain_solana_v1_trade_proto_init() }
func file_onchain_solana_v1_trade_proto_init() {
	if File_onchain_solana_v1_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_onchain_solana_v1_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onchain_solana_v1_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_onchain_solana_v1_trade_proto_goTypes,
		DependencyIndexes: file_onchain_solana_v1_trade_proto_depIdxs,
		MessageInfos:      file_onchain_solana_v1_trade_proto_msgTypes,
	}.Build()
	File_onchain_solana_v1_trade_proto = out.File
	file_onchain_solana_v1_trade_proto_rawDesc = nil
	file_onchain_solana_v1_trade_proto_goTypes = nil
	file_onchain_solana_v1_trade_proto_depIdxs = nil
}
