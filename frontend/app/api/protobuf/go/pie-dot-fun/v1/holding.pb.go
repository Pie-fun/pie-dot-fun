// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/holding.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHoldingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the holding to retrieve.
	// Format : "holdings/{chain}/basketTokens/{token_address}/holdingWallets/{holding_wallet_address}"
	Holding string `protobuf:"bytes,1,opt,name=holding,proto3" json:"holding,omitempty"`
	// Display the value in this currency. Default is USD.
	//
	// Deprecated: Do not use.
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *GetHoldingRequest) Reset() {
	*x = GetHoldingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldingRequest) ProtoMessage() {}

func (x *GetHoldingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldingRequest.ProtoReflect.Descriptor instead.
func (*GetHoldingRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{0}
}

func (x *GetHoldingRequest) GetHolding() string {
	if x != nil {
		return x.Holding
	}
	return ""
}

// Deprecated: Do not use.
func (x *GetHoldingRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListHoldingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of holdings to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListHoldings` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * basket_token
	//   - `=`
	//
	// * holding_wallet
	//   - `=`
	//
	// * formatted_quantity, quantity (alias of formatted_quantity)
	//   - `>=`, `<=`, `>`, `<`
	//
	// * raw_quantity
	//   - `>=`, `<=`, `>`, `<`
	//
	// * market_value_sol
	//   - `>=`, `<=`, `>`, `<`
	//
	// * market_value_usdc
	//   - `>=`, `<=`, `>`, `<`
	//
	// At least one filter is required. If none is provided, the service will return an error.
	// Examples
	// * basket_token="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
	// * holding_wallet="holdingWallets/SVM/9b3b4b4b-1b1b-4b4b-9b9b-1b1b4b4b4b4b"
	// * quantity>"0"
	// * market_value_sol>="100"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "market_value"
	//
	// Examples
	// * order_by=market_value desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Display the value in this currency. Default is USD.
	//
	// Deprecated: Do not use.
	Currency Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *ListHoldingsRequest) Reset() {
	*x = ListHoldingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldingsRequest) ProtoMessage() {}

func (x *ListHoldingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldingsRequest.ProtoReflect.Descriptor instead.
func (*ListHoldingsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{1}
}

func (x *ListHoldingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHoldingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHoldingsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListHoldingsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListHoldingsRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListHoldingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holdings []*Holding `protobuf:"bytes,1,rep,name=holdings,proto3" json:"holdings,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHoldingsResponse) Reset() {
	*x = ListHoldingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldingsResponse) ProtoMessage() {}

func (x *ListHoldingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldingsResponse.ProtoReflect.Descriptor instead.
func (*ListHoldingsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{2}
}

func (x *ListHoldingsResponse) GetHoldings() []*Holding {
	if x != nil {
		return x.Holdings
	}
	return nil
}

func (x *ListHoldingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetHoldingsStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available Sequence and Operator
	// * basket_token
	//   - `=`
	//
	// * holding_wallet
	//   - `=`
	//
	// * user
	//   - `=`
	//
	// * symbol
	//   - `=`
	//
	// * market_value_sol
	//   - `>=`, `<=`, `>`, `<`
	//
	// * market_value_usdc
	//   - `>=`, `<=`, `>`, `<`
	//
	// At least one filter is required. If none is provided, the service will return an error.
	// Examples
	// * basket_token="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
	// * holding_wallet="holdingWallets/SOLANA/9b3b4b4b-1b1b-4b4b-9b9b-1b1b4b4b4b4b"
	// * user="users/1"
	// * symbol="MURAD"
	// * market_value_sol>=10
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetHoldingsStatisticsRequest) Reset() {
	*x = GetHoldingsStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldingsStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldingsStatisticsRequest) ProtoMessage() {}

func (x *GetHoldingsStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldingsStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetHoldingsStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{3}
}

func (x *GetHoldingsStatisticsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type GetHoldingsStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count             int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TotalMarketValues []*Money `protobuf:"bytes,2,rep,name=total_market_values,json=totalMarketValues,proto3" json:"total_market_values,omitempty"`
	TotalPnls         []*PnL   `protobuf:"bytes,3,rep,name=total_pnls,json=totalPnls,proto3" json:"total_pnls,omitempty"`
}

func (x *GetHoldingsStatisticsResponse) Reset() {
	*x = GetHoldingsStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldingsStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldingsStatisticsResponse) ProtoMessage() {}

func (x *GetHoldingsStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldingsStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetHoldingsStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{4}
}

func (x *GetHoldingsStatisticsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetHoldingsStatisticsResponse) GetTotalMarketValues() []*Money {
	if x != nil {
		return x.TotalMarketValues
	}
	return nil
}

func (x *GetHoldingsStatisticsResponse) GetTotalPnls() []*PnL {
	if x != nil {
		return x.TotalPnls
	}
	return nil
}

type Holding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format : "holdings/{chain}/basketTokens/{token_address}/holdingWallets/{holding_wallet_address}"
	Name          string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chain         ChainType `protobuf:"varint,2,opt,name=chain,proto3,enum=piedotfun.v1.ChainType" json:"chain,omitempty"`
	BasketToken   string    `protobuf:"bytes,3,opt,name=basket_token,json=basketToken,proto3" json:"basket_token,omitempty"`
	HoldingWallet string    `protobuf:"bytes,4,opt,name=holding_wallet,json=holdingWallet,proto3" json:"holding_wallet,omitempty"`
	Quantity      *Quantity `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// map from currency to average buy price
	AverageBuyPrices map[string]*Money `protobuf:"bytes,6,rep,name=average_buy_prices,json=averageBuyPrices,proto3" json:"average_buy_prices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map from currency to market value
	MarketValues map[string]*Money `protobuf:"bytes,7,rep,name=market_values,json=marketValues,proto3" json:"market_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map from currency to PnLsByPeriod
	Pnls map[string]*PnLsByPeriod `protobuf:"bytes,8,rep,name=pnls,proto3" json:"pnls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Percentage of holding value in the basket token
	OwnershipPercentage *Percentage            `protobuf:"bytes,9,opt,name=ownership_percentage,json=ownershipPercentage,proto3" json:"ownership_percentage,omitempty"`
	CreateTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Deprecated: Do not use.
	AverageBuyPrice *Money `protobuf:"bytes,13,opt,name=average_buy_price,json=averageBuyPrice,proto3" json:"average_buy_price,omitempty"`
	// Deprecated: Do not use.
	MarketValue *Money `protobuf:"bytes,14,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`
	// Deprecated: Do not use.
	Pnl *PnLsByPeriod `protobuf:"bytes,15,opt,name=pnl,proto3" json:"pnl,omitempty"`
}

func (x *Holding) Reset() {
	*x = Holding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holding) ProtoMessage() {}

func (x *Holding) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holding.ProtoReflect.Descriptor instead.
func (*Holding) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_proto_rawDescGZIP(), []int{5}
}

func (x *Holding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Holding) GetChain() ChainType {
	if x != nil {
		return x.Chain
	}
	return ChainType_CHAIN_UNSPECIFIED
}

func (x *Holding) GetBasketToken() string {
	if x != nil {
		return x.BasketToken
	}
	return ""
}

func (x *Holding) GetHoldingWallet() string {
	if x != nil {
		return x.HoldingWallet
	}
	return ""
}

func (x *Holding) GetQuantity() *Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Holding) GetAverageBuyPrices() map[string]*Money {
	if x != nil {
		return x.AverageBuyPrices
	}
	return nil
}

func (x *Holding) GetMarketValues() map[string]*Money {
	if x != nil {
		return x.MarketValues
	}
	return nil
}

func (x *Holding) GetPnls() map[string]*PnLsByPeriod {
	if x != nil {
		return x.Pnls
	}
	return nil
}

func (x *Holding) GetOwnershipPercentage() *Percentage {
	if x != nil {
		return x.OwnershipPercentage
	}
	return nil
}

func (x *Holding) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Holding) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *Holding) GetAverageBuyPrice() *Money {
	if x != nil {
		return x.AverageBuyPrice
	}
	return nil
}

// Deprecated: Do not use.
func (x *Holding) GetMarketValue() *Money {
	if x != nil {
		return x.MarketValue
	}
	return nil
}

// Deprecated: Do not use.
func (x *Holding) GetPnl() *PnLsByPeriod {
	if x != nil {
		return x.Pnl
	}
	return nil
}

var File_pie_dot_fun_v1_holding_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_holding_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x69, 0x65, 0x2d,
	0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xc2, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x71, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6e, 0x4c, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c,
	0x73, 0x22, 0xc1, 0x0a, 0x0a, 0x07, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x52, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41, 0x28, 0x0a,
	0x26, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x58, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe2, 0x41,
	0x01, 0x03, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x38,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x04, 0x70, 0x6e, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x6e, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x04, 0x70, 0x6e, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x70, 0x6e,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e, 0x4c, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x03, 0x70, 0x6e, 0x6c,
	0x1a, 0x58, 0x0a, 0x15, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x53, 0x0a, 0x09, 0x50, 0x6e, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e,
	0x4c, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x7e, 0xea, 0x41, 0x7b, 0x0a, 0x22, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x55,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d,
	0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x32, 0xc8, 0x03, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x56, 0xda, 0x41, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x77, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x9d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d,
	0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_holding_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_holding_proto_rawDescData = file_pie_dot_fun_v1_holding_proto_rawDesc
)

func file_pie_dot_fun_v1_holding_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_holding_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_holding_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_holding_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_holding_proto_rawDescData
}

var file_pie_dot_fun_v1_holding_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pie_dot_fun_v1_holding_proto_goTypes = []interface{}{
	(*GetHoldingRequest)(nil),             // 0: piedotfun.v1.GetHoldingRequest
	(*ListHoldingsRequest)(nil),           // 1: piedotfun.v1.ListHoldingsRequest
	(*ListHoldingsResponse)(nil),          // 2: piedotfun.v1.ListHoldingsResponse
	(*GetHoldingsStatisticsRequest)(nil),  // 3: piedotfun.v1.GetHoldingsStatisticsRequest
	(*GetHoldingsStatisticsResponse)(nil), // 4: piedotfun.v1.GetHoldingsStatisticsResponse
	(*Holding)(nil),                       // 5: piedotfun.v1.Holding
	nil,                                   // 6: piedotfun.v1.Holding.AverageBuyPricesEntry
	nil,                                   // 7: piedotfun.v1.Holding.MarketValuesEntry
	nil,                                   // 8: piedotfun.v1.Holding.PnlsEntry
	(Currency)(0),                         // 9: piedotfun.v1.Currency
	(*Money)(nil),                         // 10: piedotfun.v1.Money
	(*PnL)(nil),                           // 11: piedotfun.v1.PnL
	(ChainType)(0),                        // 12: piedotfun.v1.ChainType
	(*Quantity)(nil),                      // 13: piedotfun.v1.Quantity
	(*Percentage)(nil),                    // 14: piedotfun.v1.Percentage
	(*timestamppb.Timestamp)(nil),         // 15: google.protobuf.Timestamp
	(*PnLsByPeriod)(nil),                  // 16: piedotfun.v1.PnLsByPeriod
}
var file_pie_dot_fun_v1_holding_proto_depIdxs = []int32{
	9,  // 0: piedotfun.v1.GetHoldingRequest.currency:type_name -> piedotfun.v1.Currency
	9,  // 1: piedotfun.v1.ListHoldingsRequest.currency:type_name -> piedotfun.v1.Currency
	5,  // 2: piedotfun.v1.ListHoldingsResponse.holdings:type_name -> piedotfun.v1.Holding
	10, // 3: piedotfun.v1.GetHoldingsStatisticsResponse.total_market_values:type_name -> piedotfun.v1.Money
	11, // 4: piedotfun.v1.GetHoldingsStatisticsResponse.total_pnls:type_name -> piedotfun.v1.PnL
	12, // 5: piedotfun.v1.Holding.chain:type_name -> piedotfun.v1.ChainType
	13, // 6: piedotfun.v1.Holding.quantity:type_name -> piedotfun.v1.Quantity
	6,  // 7: piedotfun.v1.Holding.average_buy_prices:type_name -> piedotfun.v1.Holding.AverageBuyPricesEntry
	7,  // 8: piedotfun.v1.Holding.market_values:type_name -> piedotfun.v1.Holding.MarketValuesEntry
	8,  // 9: piedotfun.v1.Holding.pnls:type_name -> piedotfun.v1.Holding.PnlsEntry
	14, // 10: piedotfun.v1.Holding.ownership_percentage:type_name -> piedotfun.v1.Percentage
	15, // 11: piedotfun.v1.Holding.create_time:type_name -> google.protobuf.Timestamp
	15, // 12: piedotfun.v1.Holding.update_time:type_name -> google.protobuf.Timestamp
	10, // 13: piedotfun.v1.Holding.average_buy_price:type_name -> piedotfun.v1.Money
	10, // 14: piedotfun.v1.Holding.market_value:type_name -> piedotfun.v1.Money
	16, // 15: piedotfun.v1.Holding.pnl:type_name -> piedotfun.v1.PnLsByPeriod
	10, // 16: piedotfun.v1.Holding.AverageBuyPricesEntry.value:type_name -> piedotfun.v1.Money
	10, // 17: piedotfun.v1.Holding.MarketValuesEntry.value:type_name -> piedotfun.v1.Money
	16, // 18: piedotfun.v1.Holding.PnlsEntry.value:type_name -> piedotfun.v1.PnLsByPeriod
	0,  // 19: piedotfun.v1.HoldingService.GetHolding:input_type -> piedotfun.v1.GetHoldingRequest
	1,  // 20: piedotfun.v1.HoldingService.ListHoldings:input_type -> piedotfun.v1.ListHoldingsRequest
	3,  // 21: piedotfun.v1.HoldingService.GetHoldingsStatistics:input_type -> piedotfun.v1.GetHoldingsStatisticsRequest
	5,  // 22: piedotfun.v1.HoldingService.GetHolding:output_type -> piedotfun.v1.Holding
	2,  // 23: piedotfun.v1.HoldingService.ListHoldings:output_type -> piedotfun.v1.ListHoldingsResponse
	4,  // 24: piedotfun.v1.HoldingService.GetHoldingsStatistics:output_type -> piedotfun.v1.GetHoldingsStatisticsResponse
	22, // [22:25] is the sub-list for method output_type
	19, // [19:22] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_holding_proto_init() }
func file_pie_dot_fun_v1_holding_proto_init() {
	if File_pie_dot_fun_v1_holding_proto != nil {
		return
	}
	file_pie_dot_fun_v1_auth_proto_init()
	file_pie_dot_fun_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_holding_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldingsStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldingsStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_holding_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_holding_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_holding_proto_depIdxs,
		MessageInfos:      file_pie_dot_fun_v1_holding_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_holding_proto = out.File
	file_pie_dot_fun_v1_holding_proto_rawDesc = nil
	file_pie_dot_fun_v1_holding_proto_goTypes = nil
	file_pie_dot_fun_v1_holding_proto_depIdxs = nil
}
