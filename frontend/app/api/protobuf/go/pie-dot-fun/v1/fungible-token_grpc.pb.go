// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/fungible-token.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FungibleTokenServiceClient is the client API for FungibleTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FungibleTokenServiceClient interface {
	GetFungibleToken(ctx context.Context, in *GetFungibleTokenRequest, opts ...grpc.CallOption) (*FungibleToken, error)
	ListFungibleTokens(ctx context.Context, in *ListFungibleTokensRequest, opts ...grpc.CallOption) (*ListFungibleTokensResponse, error)
}

type fungibleTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFungibleTokenServiceClient(cc grpc.ClientConnInterface) FungibleTokenServiceClient {
	return &fungibleTokenServiceClient{cc}
}

func (c *fungibleTokenServiceClient) GetFungibleToken(ctx context.Context, in *GetFungibleTokenRequest, opts ...grpc.CallOption) (*FungibleToken, error) {
	out := new(FungibleToken)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.FungibleTokenService/GetFungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fungibleTokenServiceClient) ListFungibleTokens(ctx context.Context, in *ListFungibleTokensRequest, opts ...grpc.CallOption) (*ListFungibleTokensResponse, error) {
	out := new(ListFungibleTokensResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.FungibleTokenService/ListFungibleTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FungibleTokenServiceServer is the server API for FungibleTokenService service.
// All implementations must embed UnimplementedFungibleTokenServiceServer
// for forward compatibility
type FungibleTokenServiceServer interface {
	GetFungibleToken(context.Context, *GetFungibleTokenRequest) (*FungibleToken, error)
	ListFungibleTokens(context.Context, *ListFungibleTokensRequest) (*ListFungibleTokensResponse, error)
	mustEmbedUnimplementedFungibleTokenServiceServer()
}

// UnimplementedFungibleTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFungibleTokenServiceServer struct {
}

func (UnimplementedFungibleTokenServiceServer) GetFungibleToken(context.Context, *GetFungibleTokenRequest) (*FungibleToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFungibleToken not implemented")
}
func (UnimplementedFungibleTokenServiceServer) ListFungibleTokens(context.Context, *ListFungibleTokensRequest) (*ListFungibleTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFungibleTokens not implemented")
}
func (UnimplementedFungibleTokenServiceServer) mustEmbedUnimplementedFungibleTokenServiceServer() {}

// UnsafeFungibleTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FungibleTokenServiceServer will
// result in compilation errors.
type UnsafeFungibleTokenServiceServer interface {
	mustEmbedUnimplementedFungibleTokenServiceServer()
}

func RegisterFungibleTokenServiceServer(s grpc.ServiceRegistrar, srv FungibleTokenServiceServer) {
	s.RegisterService(&FungibleTokenService_ServiceDesc, srv)
}

func _FungibleTokenService_GetFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFungibleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FungibleTokenServiceServer).GetFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.FungibleTokenService/GetFungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FungibleTokenServiceServer).GetFungibleToken(ctx, req.(*GetFungibleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FungibleTokenService_ListFungibleTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFungibleTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FungibleTokenServiceServer).ListFungibleTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.FungibleTokenService/ListFungibleTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FungibleTokenServiceServer).ListFungibleTokens(ctx, req.(*ListFungibleTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FungibleTokenService_ServiceDesc is the grpc.ServiceDesc for FungibleTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FungibleTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.FungibleTokenService",
	HandlerType: (*FungibleTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFungibleToken",
			Handler:    _FungibleTokenService_GetFungibleToken_Handler,
		},
		{
			MethodName: "ListFungibleTokens",
			Handler:    _FungibleTokenService_ListFungibleTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/fungible-token.proto",
}
