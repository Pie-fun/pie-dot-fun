// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/fungible-token-market.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FungibleTokenMarket contains the market data for a fungible token.
type FungibleTokenMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FungibleToken string `protobuf:"bytes,2,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	DisplayName   string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Symbol        string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Native token symbol of the chain the fungible-token belongs to.
	// Not dollar(USDT, USDC),
	// and the prices and market cap fields will display dollar values together.
	NativeCurrency Currency `protobuf:"varint,5,opt,name=native_currency,json=nativeCurrency,proto3,enum=piedotfun.v1.Currency" json:"native_currency,omitempty"`
	// Key is the `Currency` enum string,
	// value is the price with the `Currency`.
	//
	// Deprecated: Do not use.
	Prices map[string]*Money `protobuf:"bytes,7,rep,name=prices,proto3" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key is the `Currency` enum string,
	// value is the market cap with the `Currency`.
	//
	// Deprecated: Do not use.
	MarketCaps map[string]*Money `protobuf:"bytes,8,rep,name=market_caps,json=marketCaps,proto3" json:"market_caps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key is the `Currency` enum string,
	// value is the price changes with the `Currency`.
	//
	//	{
	//	  "CURRENCY_USDC": {
	//	    "PRICE_CHANGE_PERIOD_1_HOUR": {
	//	      "nominal_value": {
	//	        "currency": "CURRENCY_USDC",
	//	        "amount": 0.0001
	//	      },
	//	      "percentage_change": {
	//	        "value": 0.0001
	//	      },
	//	      "period": "PRICE_CHANGE_PERIOD_1_HOUR"
	//	    },
	//	    "CURRENCY_SOL": { ... }
	//	}
	//
	// Support Periods
	// * PRICE_CHANGE_PERIOD_7_DAY
	//
	// Deprecated: Do not use.
	PriceChanges map[string]*PriceChangesByPeriod `protobuf:"bytes,9,rep,name=price_changes,json=priceChanges,proto3" json:"price_changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// current price
	Price *Money `protobuf:"bytes,10,opt,name=price,proto3" json:"price,omitempty"`
	// market cap
	//
	// Deprecated: Do not use.
	MarketCap *Money `protobuf:"bytes,11,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	// Example
	//
	//	{
	//	  "PRICE_CHANGE_PERIOD_7_DAY": {
	//	      "nominal_value": {
	//	          "currency": "CURRENCY_USDC",
	//	          "amount": 0.0001
	//	      },
	//	      "percentage_change": {
	//	          "value": 0.0001
	//	      },
	//	      "period": "PRICE_CHANGE_PERIOD_7_DAY"
	//	  }
	//	  ...
	//	}
	//
	// Support Periods
	// * PRICE_CHANGE_PERIOD_7_DAY
	PriceChange *PriceChangesByPeriod `protobuf:"bytes,12,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`
	// Fully Diluted Valuations
	// Key is the `Currency` enum string,
	// value is the market cap with the `Currency`.
	Fdvs map[string]*Money `protobuf:"bytes,13,rep,name=fdvs,proto3" json:"fdvs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FungibleTokenMarket) Reset() {
	*x = FungibleTokenMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungibleTokenMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungibleTokenMarket) ProtoMessage() {}

func (x *FungibleTokenMarket) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungibleTokenMarket.ProtoReflect.Descriptor instead.
func (*FungibleTokenMarket) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_fungible_token_market_proto_rawDescGZIP(), []int{0}
}

func (x *FungibleTokenMarket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FungibleTokenMarket) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *FungibleTokenMarket) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *FungibleTokenMarket) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FungibleTokenMarket) GetNativeCurrency() Currency {
	if x != nil {
		return x.NativeCurrency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *FungibleTokenMarket) GetPrices() map[string]*Money {
	if x != nil {
		return x.Prices
	}
	return nil
}

// Deprecated: Do not use.
func (x *FungibleTokenMarket) GetMarketCaps() map[string]*Money {
	if x != nil {
		return x.MarketCaps
	}
	return nil
}

// Deprecated: Do not use.
func (x *FungibleTokenMarket) GetPriceChanges() map[string]*PriceChangesByPeriod {
	if x != nil {
		return x.PriceChanges
	}
	return nil
}

func (x *FungibleTokenMarket) GetPrice() *Money {
	if x != nil {
		return x.Price
	}
	return nil
}

// Deprecated: Do not use.
func (x *FungibleTokenMarket) GetMarketCap() *Money {
	if x != nil {
		return x.MarketCap
	}
	return nil
}

func (x *FungibleTokenMarket) GetPriceChange() *PriceChangesByPeriod {
	if x != nil {
		return x.PriceChange
	}
	return nil
}

func (x *FungibleTokenMarket) GetFdvs() map[string]*Money {
	if x != nil {
		return x.Fdvs
	}
	return nil
}

type GetFungibleTokenMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the market  to retrieve.
	// Format : "fungibleTokens/{chain}/{token_address}/market"
	FungibleTokenMarket string `protobuf:"bytes,1,opt,name=fungible_token_market,json=fungibleTokenMarket,proto3" json:"fungible_token_market,omitempty"`
	// Display the price in this currency. Default is USD.
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *GetFungibleTokenMarketRequest) Reset() {
	*x = GetFungibleTokenMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFungibleTokenMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFungibleTokenMarketRequest) ProtoMessage() {}

func (x *GetFungibleTokenMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFungibleTokenMarketRequest.ProtoReflect.Descriptor instead.
func (*GetFungibleTokenMarketRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_fungible_token_market_proto_rawDescGZIP(), []int{1}
}

func (x *GetFungibleTokenMarketRequest) GetFungibleTokenMarket() string {
	if x != nil {
		return x.FungibleTokenMarket
	}
	return ""
}

func (x *GetFungibleTokenMarketRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListFungibleTokensMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If unspecified, at most 50 books will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// Examples
	// * name="fungibleTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9/market"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output.
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// *
	//
	// Examples
	// *
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Display the price in this currency. Default is USD.
	Currency Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *ListFungibleTokensMarketsRequest) Reset() {
	*x = ListFungibleTokensMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFungibleTokensMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFungibleTokensMarketsRequest) ProtoMessage() {}

func (x *ListFungibleTokensMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFungibleTokensMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListFungibleTokensMarketsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_fungible_token_market_proto_rawDescGZIP(), []int{2}
}

func (x *ListFungibleTokensMarketsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFungibleTokensMarketsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFungibleTokensMarketsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListFungibleTokensMarketsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListFungibleTokensMarketsRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListFungibleTokensMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungibleTokenMarkets []*FungibleTokenMarket `protobuf:"bytes,1,rep,name=fungible_token_markets,json=fungibleTokenMarkets,proto3" json:"fungible_token_markets,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFungibleTokensMarketsResponse) Reset() {
	*x = ListFungibleTokensMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFungibleTokensMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFungibleTokensMarketsResponse) ProtoMessage() {}

func (x *ListFungibleTokensMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFungibleTokensMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListFungibleTokensMarketsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_fungible_token_market_proto_rawDescGZIP(), []int{3}
}

func (x *ListFungibleTokensMarketsResponse) GetFungibleTokenMarkets() []*FungibleTokenMarket {
	if x != nil {
		return x.FungibleTokenMarkets
	}
	return nil
}

func (x *ListFungibleTokensMarketsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_pie_dot_fun_v1_fungible_token_market_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_fungible_token_market_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70,
	0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f,
	0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x09, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x4d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06,
	0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x66, 0x64, 0x76, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x46, 0x64, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x66, 0x64, 0x76, 0x73, 0x1a, 0x4e, 0x0a,
	0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x63, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x09, 0x46, 0x64, 0x76, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5c, 0xea, 0x41, 0x59, 0x0a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x66, 0x75, 0x6e, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x7d, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x41, 0x30, 0x0a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x13, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x66, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x66, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xf2, 0x04, 0x0a, 0x1a, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x22, 0x61, 0xda, 0x41, 0x15, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x3d, 0x66, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x7d, 0x12, 0xd3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x61, 0xda, 0x41, 0x15, 0x66,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x3d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x7d, 0x3a, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x2d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x42,
	0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f,
	0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66,
	0x75, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_fungible_token_market_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_fungible_token_market_proto_rawDescData = file_pie_dot_fun_v1_fungible_token_market_proto_rawDesc
)

func file_pie_dot_fun_v1_fungible_token_market_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_fungible_token_market_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_fungible_token_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_fungible_token_market_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_fungible_token_market_proto_rawDescData
}

var file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pie_dot_fun_v1_fungible_token_market_proto_goTypes = []interface{}{
	(*FungibleTokenMarket)(nil),               // 0: piedotfun.v1.FungibleTokenMarket
	(*GetFungibleTokenMarketRequest)(nil),     // 1: piedotfun.v1.GetFungibleTokenMarketRequest
	(*ListFungibleTokensMarketsRequest)(nil),  // 2: piedotfun.v1.ListFungibleTokensMarketsRequest
	(*ListFungibleTokensMarketsResponse)(nil), // 3: piedotfun.v1.ListFungibleTokensMarketsResponse
	nil,                          // 4: piedotfun.v1.FungibleTokenMarket.PricesEntry
	nil,                          // 5: piedotfun.v1.FungibleTokenMarket.MarketCapsEntry
	nil,                          // 6: piedotfun.v1.FungibleTokenMarket.PriceChangesEntry
	nil,                          // 7: piedotfun.v1.FungibleTokenMarket.FdvsEntry
	(Currency)(0),                // 8: piedotfun.v1.Currency
	(*Money)(nil),                // 9: piedotfun.v1.Money
	(*PriceChangesByPeriod)(nil), // 10: piedotfun.v1.PriceChangesByPeriod
}
var file_pie_dot_fun_v1_fungible_token_market_proto_depIdxs = []int32{
	8,  // 0: piedotfun.v1.FungibleTokenMarket.native_currency:type_name -> piedotfun.v1.Currency
	4,  // 1: piedotfun.v1.FungibleTokenMarket.prices:type_name -> piedotfun.v1.FungibleTokenMarket.PricesEntry
	5,  // 2: piedotfun.v1.FungibleTokenMarket.market_caps:type_name -> piedotfun.v1.FungibleTokenMarket.MarketCapsEntry
	6,  // 3: piedotfun.v1.FungibleTokenMarket.price_changes:type_name -> piedotfun.v1.FungibleTokenMarket.PriceChangesEntry
	9,  // 4: piedotfun.v1.FungibleTokenMarket.price:type_name -> piedotfun.v1.Money
	9,  // 5: piedotfun.v1.FungibleTokenMarket.market_cap:type_name -> piedotfun.v1.Money
	10, // 6: piedotfun.v1.FungibleTokenMarket.price_change:type_name -> piedotfun.v1.PriceChangesByPeriod
	7,  // 7: piedotfun.v1.FungibleTokenMarket.fdvs:type_name -> piedotfun.v1.FungibleTokenMarket.FdvsEntry
	8,  // 8: piedotfun.v1.GetFungibleTokenMarketRequest.currency:type_name -> piedotfun.v1.Currency
	8,  // 9: piedotfun.v1.ListFungibleTokensMarketsRequest.currency:type_name -> piedotfun.v1.Currency
	0,  // 10: piedotfun.v1.ListFungibleTokensMarketsResponse.fungible_token_markets:type_name -> piedotfun.v1.FungibleTokenMarket
	9,  // 11: piedotfun.v1.FungibleTokenMarket.PricesEntry.value:type_name -> piedotfun.v1.Money
	9,  // 12: piedotfun.v1.FungibleTokenMarket.MarketCapsEntry.value:type_name -> piedotfun.v1.Money
	10, // 13: piedotfun.v1.FungibleTokenMarket.PriceChangesEntry.value:type_name -> piedotfun.v1.PriceChangesByPeriod
	9,  // 14: piedotfun.v1.FungibleTokenMarket.FdvsEntry.value:type_name -> piedotfun.v1.Money
	1,  // 15: piedotfun.v1.FungibleTokenMarketService.GetFungibleTokenMarket:input_type -> piedotfun.v1.GetFungibleTokenMarketRequest
	1,  // 16: piedotfun.v1.FungibleTokenMarketService.GetOrCreateFungibleTokenMarket:input_type -> piedotfun.v1.GetFungibleTokenMarketRequest
	2,  // 17: piedotfun.v1.FungibleTokenMarketService.ListFungibleTokenMarkets:input_type -> piedotfun.v1.ListFungibleTokensMarketsRequest
	0,  // 18: piedotfun.v1.FungibleTokenMarketService.GetFungibleTokenMarket:output_type -> piedotfun.v1.FungibleTokenMarket
	0,  // 19: piedotfun.v1.FungibleTokenMarketService.GetOrCreateFungibleTokenMarket:output_type -> piedotfun.v1.FungibleTokenMarket
	3,  // 20: piedotfun.v1.FungibleTokenMarketService.ListFungibleTokenMarkets:output_type -> piedotfun.v1.ListFungibleTokensMarketsResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_fungible_token_market_proto_init() }
func file_pie_dot_fun_v1_fungible_token_market_proto_init() {
	if File_pie_dot_fun_v1_fungible_token_market_proto != nil {
		return
	}
	file_pie_dot_fun_v1_auth_proto_init()
	file_pie_dot_fun_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungibleTokenMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFungibleTokenMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFungibleTokensMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFungibleTokensMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_fungible_token_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_fungible_token_market_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_fungible_token_market_proto_depIdxs,
		MessageInfos:      file_pie_dot_fun_v1_fungible_token_market_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_fungible_token_market_proto = out.File
	file_pie_dot_fun_v1_fungible_token_market_proto_rawDesc = nil
	file_pie_dot_fun_v1_fungible_token_market_proto_goTypes = nil
	file_pie_dot_fun_v1_fungible_token_market_proto_depIdxs = nil
}
