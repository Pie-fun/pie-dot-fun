// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/chain/command.proto

package chain

import (
	_ "github.com/ao-labs/spacebar-apis/go/pie-dot-fun/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RebalanceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*RebalanceCommand_EqualWeight
	//	*RebalanceCommand_ManualWeight
	//	*RebalanceCommand_Trade_
	Strategy isRebalanceCommand_Strategy `protobuf_oneof:"strategy"`
}

func (x *RebalanceCommand) Reset() {
	*x = RebalanceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand) ProtoMessage() {}

func (x *RebalanceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand.ProtoReflect.Descriptor instead.
func (*RebalanceCommand) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0}
}

func (m *RebalanceCommand) GetStrategy() isRebalanceCommand_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *RebalanceCommand) GetEqualWeight() *RebalanceCommand_EqualMarketCapWeight {
	if x, ok := x.GetStrategy().(*RebalanceCommand_EqualWeight); ok {
		return x.EqualWeight
	}
	return nil
}

func (x *RebalanceCommand) GetManualWeight() *RebalanceCommand_ManualMarketCapWeight {
	if x, ok := x.GetStrategy().(*RebalanceCommand_ManualWeight); ok {
		return x.ManualWeight
	}
	return nil
}

func (x *RebalanceCommand) GetTrade() *RebalanceCommand_Trade {
	if x, ok := x.GetStrategy().(*RebalanceCommand_Trade_); ok {
		return x.Trade
	}
	return nil
}

type isRebalanceCommand_Strategy interface {
	isRebalanceCommand_Strategy()
}

type RebalanceCommand_EqualWeight struct {
	EqualWeight *RebalanceCommand_EqualMarketCapWeight `protobuf:"bytes,1,opt,name=equal_weight,json=equalWeight,proto3,oneof"`
}

type RebalanceCommand_ManualWeight struct {
	ManualWeight *RebalanceCommand_ManualMarketCapWeight `protobuf:"bytes,2,opt,name=manual_weight,json=manualWeight,proto3,oneof"`
}

type RebalanceCommand_Trade_ struct {
	Trade *RebalanceCommand_Trade `protobuf:"bytes,3,opt,name=trade,proto3,oneof"`
}

func (*RebalanceCommand_EqualWeight) isRebalanceCommand_Strategy() {}

func (*RebalanceCommand_ManualWeight) isRebalanceCommand_Strategy() {}

func (*RebalanceCommand_Trade_) isRebalanceCommand_Strategy() {}

type RebalanceBasketTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasketToken     string            `protobuf:"bytes,1,opt,name=basket_token,json=basketToken,proto3" json:"basket_token,omitempty"`
	Execute         bool              `protobuf:"varint,2,opt,name=execute,proto3" json:"execute,omitempty"` // if false, it will perform a dry run.
	Command         *RebalanceCommand `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	ExecutionOption *ExecutionOption  `protobuf:"bytes,4,opt,name=execution_option,json=executionOption,proto3" json:"execution_option,omitempty"`
}

func (x *RebalanceBasketTokenRequest) Reset() {
	*x = RebalanceBasketTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceBasketTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceBasketTokenRequest) ProtoMessage() {}

func (x *RebalanceBasketTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceBasketTokenRequest.ProtoReflect.Descriptor instead.
func (*RebalanceBasketTokenRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{1}
}

func (x *RebalanceBasketTokenRequest) GetBasketToken() string {
	if x != nil {
		return x.BasketToken
	}
	return ""
}

func (x *RebalanceBasketTokenRequest) GetExecute() bool {
	if x != nil {
		return x.Execute
	}
	return false
}

func (x *RebalanceBasketTokenRequest) GetCommand() *RebalanceCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RebalanceBasketTokenRequest) GetExecutionOption() *ExecutionOption {
	if x != nil {
		return x.ExecutionOption
	}
	return nil
}

type RebalanceBasketTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultHtml string `protobuf:"bytes,1,opt,name=result_html,json=resultHtml,proto3" json:"result_html,omitempty"`
}

func (x *RebalanceBasketTokenResponse) Reset() {
	*x = RebalanceBasketTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceBasketTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceBasketTokenResponse) ProtoMessage() {}

func (x *RebalanceBasketTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceBasketTokenResponse.ProtoReflect.Descriptor instead.
func (*RebalanceBasketTokenResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{2}
}

func (x *RebalanceBasketTokenResponse) GetResultHtml() string {
	if x != nil {
		return x.ResultHtml
	}
	return ""
}

type ExecutionOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellRatioPerIteration float64 `protobuf:"fixed64,1,opt,name=sell_ratio_per_iteration,json=sellRatioPerIteration,proto3" json:"sell_ratio_per_iteration,omitempty"`
	Slippage              float64 `protobuf:"fixed64,2,opt,name=slippage,proto3" json:"slippage,omitempty"`
	// Exit condition
	MaxIterationCount                int32   `protobuf:"varint,3,opt,name=max_iteration_count,json=maxIterationCount,proto3" json:"max_iteration_count,omitempty"`
	ExitRemainingExecutionValue      float64 `protobuf:"fixed64,4,opt,name=exit_remaining_execution_value,json=exitRemainingExecutionValue,proto3" json:"exit_remaining_execution_value,omitempty"`
	ExitRemainingExecutionValueRatio float64 `protobuf:"fixed64,5,opt,name=exit_remaining_execution_value_ratio,json=exitRemainingExecutionValueRatio,proto3" json:"exit_remaining_execution_value_ratio,omitempty"`
}

func (x *ExecutionOption) Reset() {
	*x = ExecutionOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOption) ProtoMessage() {}

func (x *ExecutionOption) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOption.ProtoReflect.Descriptor instead.
func (*ExecutionOption) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionOption) GetSellRatioPerIteration() float64 {
	if x != nil {
		return x.SellRatioPerIteration
	}
	return 0
}

func (x *ExecutionOption) GetSlippage() float64 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

func (x *ExecutionOption) GetMaxIterationCount() int32 {
	if x != nil {
		return x.MaxIterationCount
	}
	return 0
}

func (x *ExecutionOption) GetExitRemainingExecutionValue() float64 {
	if x != nil {
		return x.ExitRemainingExecutionValue
	}
	return 0
}

func (x *ExecutionOption) GetExitRemainingExecutionValueRatio() float64 {
	if x != nil {
		return x.ExitRemainingExecutionValueRatio
	}
	return 0
}

// Equal Market Cap Weight Strategy
type RebalanceCommand_EqualMarketCapWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebalanceCommand_EqualMarketCapWeight) Reset() {
	*x = RebalanceCommand_EqualMarketCapWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand_EqualMarketCapWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand_EqualMarketCapWeight) ProtoMessage() {}

func (x *RebalanceCommand_EqualMarketCapWeight) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand_EqualMarketCapWeight.ProtoReflect.Descriptor instead.
func (*RebalanceCommand_EqualMarketCapWeight) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0, 0}
}

// Manual Market Cap Weight Strategy
type RebalanceCommand_ManualMarketCapWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*RebalanceCommand_ManualMarketCapWeight_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"` // sum of weights should be 1
}

func (x *RebalanceCommand_ManualMarketCapWeight) Reset() {
	*x = RebalanceCommand_ManualMarketCapWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand_ManualMarketCapWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand_ManualMarketCapWeight) ProtoMessage() {}

func (x *RebalanceCommand_ManualMarketCapWeight) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand_ManualMarketCapWeight.ProtoReflect.Descriptor instead.
func (*RebalanceCommand_ManualMarketCapWeight) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RebalanceCommand_ManualMarketCapWeight) GetRequests() []*RebalanceCommand_ManualMarketCapWeight_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Trade Strategy
type RebalanceCommand_Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*RebalanceCommand_Trade_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *RebalanceCommand_Trade) Reset() {
	*x = RebalanceCommand_Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand_Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand_Trade) ProtoMessage() {}

func (x *RebalanceCommand_Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand_Trade.ProtoReflect.Descriptor instead.
func (*RebalanceCommand_Trade) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RebalanceCommand_Trade) GetRequests() []*RebalanceCommand_Trade_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type RebalanceCommand_ManualMarketCapWeight_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungibleToken string  `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	Weight        float64 `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"` // Weigh limits: 0 - 1.0
}

func (x *RebalanceCommand_ManualMarketCapWeight_Request) Reset() {
	*x = RebalanceCommand_ManualMarketCapWeight_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand_ManualMarketCapWeight_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand_ManualMarketCapWeight_Request) ProtoMessage() {}

func (x *RebalanceCommand_ManualMarketCapWeight_Request) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand_ManualMarketCapWeight_Request.ProtoReflect.Descriptor instead.
func (*RebalanceCommand_ManualMarketCapWeight_Request) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *RebalanceCommand_ManualMarketCapWeight_Request) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *RebalanceCommand_ManualMarketCapWeight_Request) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type RebalanceCommand_Trade_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungibleToken   string `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	IsBuy           bool   `protobuf:"varint,2,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`
	FormattedAmount string `protobuf:"bytes,3,opt,name=formatted_amount,json=formattedAmount,proto3" json:"formatted_amount,omitempty"`
}

func (x *RebalanceCommand_Trade_Request) Reset() {
	*x = RebalanceCommand_Trade_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceCommand_Trade_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceCommand_Trade_Request) ProtoMessage() {}

func (x *RebalanceCommand_Trade_Request) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_chain_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceCommand_Trade_Request.ProtoReflect.Descriptor instead.
func (*RebalanceCommand_Trade_Request) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *RebalanceCommand_Trade_Request) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *RebalanceCommand_Trade_Request) GetIsBuy() bool {
	if x != nil {
		return x.IsBuy
	}
	return false
}

func (x *RebalanceCommand_Trade_Request) GetFormattedAmount() string {
	if x != nil {
		return x.FormattedAmount
	}
	return ""
}

var File_pie_dot_fun_v1_chain_command_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_chain_command_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x69, 0x65,
	0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x06, 0x0a, 0x10, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x0c, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x61, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x1a, 0x16, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xf4, 0x01, 0x0a, 0x15, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x1a, 0x7b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x58, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x2a,
	0x0a, 0x28, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0xff, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x75, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0xa1, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x1c, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x74, 0x6d, 0x6c, 0x22, 0xab, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x1e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x65, 0x78, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x20, 0x65, 0x78, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x32, 0xdf, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0xda, 0x41, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x00, 0x98,
	0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d,
	0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x3b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_chain_command_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_chain_command_proto_rawDescData = file_pie_dot_fun_v1_chain_command_proto_rawDesc
)

func file_pie_dot_fun_v1_chain_command_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_chain_command_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_chain_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_chain_command_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_chain_command_proto_rawDescData
}

var file_pie_dot_fun_v1_chain_command_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pie_dot_fun_v1_chain_command_proto_goTypes = []interface{}{
	(*RebalanceCommand)(nil),                               // 0: piedotfun.v1.chain.RebalanceCommand
	(*RebalanceBasketTokenRequest)(nil),                    // 1: piedotfun.v1.chain.RebalanceBasketTokenRequest
	(*RebalanceBasketTokenResponse)(nil),                   // 2: piedotfun.v1.chain.RebalanceBasketTokenResponse
	(*ExecutionOption)(nil),                                // 3: piedotfun.v1.chain.ExecutionOption
	(*RebalanceCommand_EqualMarketCapWeight)(nil),          // 4: piedotfun.v1.chain.RebalanceCommand.EqualMarketCapWeight
	(*RebalanceCommand_ManualMarketCapWeight)(nil),         // 5: piedotfun.v1.chain.RebalanceCommand.ManualMarketCapWeight
	(*RebalanceCommand_Trade)(nil),                         // 6: piedotfun.v1.chain.RebalanceCommand.Trade
	(*RebalanceCommand_ManualMarketCapWeight_Request)(nil), // 7: piedotfun.v1.chain.RebalanceCommand.ManualMarketCapWeight.Request
	(*RebalanceCommand_Trade_Request)(nil),                 // 8: piedotfun.v1.chain.RebalanceCommand.Trade.Request
}
var file_pie_dot_fun_v1_chain_command_proto_depIdxs = []int32{
	4, // 0: piedotfun.v1.chain.RebalanceCommand.equal_weight:type_name -> piedotfun.v1.chain.RebalanceCommand.EqualMarketCapWeight
	5, // 1: piedotfun.v1.chain.RebalanceCommand.manual_weight:type_name -> piedotfun.v1.chain.RebalanceCommand.ManualMarketCapWeight
	6, // 2: piedotfun.v1.chain.RebalanceCommand.trade:type_name -> piedotfun.v1.chain.RebalanceCommand.Trade
	0, // 3: piedotfun.v1.chain.RebalanceBasketTokenRequest.command:type_name -> piedotfun.v1.chain.RebalanceCommand
	3, // 4: piedotfun.v1.chain.RebalanceBasketTokenRequest.execution_option:type_name -> piedotfun.v1.chain.ExecutionOption
	7, // 5: piedotfun.v1.chain.RebalanceCommand.ManualMarketCapWeight.requests:type_name -> piedotfun.v1.chain.RebalanceCommand.ManualMarketCapWeight.Request
	8, // 6: piedotfun.v1.chain.RebalanceCommand.Trade.requests:type_name -> piedotfun.v1.chain.RebalanceCommand.Trade.Request
	1, // 7: piedotfun.v1.chain.ChainCommandService.RebalanceBasketToken:input_type -> piedotfun.v1.chain.RebalanceBasketTokenRequest
	2, // 8: piedotfun.v1.chain.ChainCommandService.RebalanceBasketToken:output_type -> piedotfun.v1.chain.RebalanceBasketTokenResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_chain_command_proto_init() }
func file_pie_dot_fun_v1_chain_command_proto_init() {
	if File_pie_dot_fun_v1_chain_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceBasketTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceBasketTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand_EqualMarketCapWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand_ManualMarketCapWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand_Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand_ManualMarketCapWeight_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_chain_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceCommand_Trade_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pie_dot_fun_v1_chain_command_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RebalanceCommand_EqualWeight)(nil),
		(*RebalanceCommand_ManualWeight)(nil),
		(*RebalanceCommand_Trade_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_chain_command_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_chain_command_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_chain_command_proto_depIdxs,
		MessageInfos:      file_pie_dot_fun_v1_chain_command_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_chain_command_proto = out.File
	file_pie_dot_fun_v1_chain_command_proto_rawDesc = nil
	file_pie_dot_fun_v1_chain_command_proto_goTypes = nil
	file_pie_dot_fun_v1_chain_command_proto_depIdxs = nil
}
