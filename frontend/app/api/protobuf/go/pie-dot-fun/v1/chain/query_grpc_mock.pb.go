// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pie-dot-fun/v1/chain/query.proto

package chain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChainQueryServiceClient is a mock of ChainQueryServiceClient interface.
type MockChainQueryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainQueryServiceClientMockRecorder
}

// MockChainQueryServiceClientMockRecorder is the mock recorder for MockChainQueryServiceClient.
type MockChainQueryServiceClientMockRecorder struct {
	mock *MockChainQueryServiceClient
}

// NewMockChainQueryServiceClient creates a new mock instance.
func NewMockChainQueryServiceClient(ctrl *gomock.Controller) *MockChainQueryServiceClient {
	mock := &MockChainQueryServiceClient{ctrl: ctrl}
	mock.recorder = &MockChainQueryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainQueryServiceClient) EXPECT() *MockChainQueryServiceClientMockRecorder {
	return m.recorder
}

// QueryFungibleTokenDecimals mocks base method.
func (m *MockChainQueryServiceClient) QueryFungibleTokenDecimals(ctx context.Context, in *QueryFungibleTokenDecimalsRequest, opts ...grpc.CallOption) (*QueryFungibleTokenDecimalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryFungibleTokenDecimals", varargs...)
	ret0, _ := ret[0].(*QueryFungibleTokenDecimalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFungibleTokenDecimals indicates an expected call of QueryFungibleTokenDecimals.
func (mr *MockChainQueryServiceClientMockRecorder) QueryFungibleTokenDecimals(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFungibleTokenDecimals", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryFungibleTokenDecimals), varargs...)
}

// QueryFungibleTokenMetadata mocks base method.
func (m *MockChainQueryServiceClient) QueryFungibleTokenMetadata(ctx context.Context, in *QueryFungibleTokenMetadataRequest, opts ...grpc.CallOption) (*QueryFungibleTokenMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryFungibleTokenMetadata", varargs...)
	ret0, _ := ret[0].(*QueryFungibleTokenMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFungibleTokenMetadata indicates an expected call of QueryFungibleTokenMetadata.
func (mr *MockChainQueryServiceClientMockRecorder) QueryFungibleTokenMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFungibleTokenMetadata", reflect.TypeOf((*MockChainQueryServiceClient)(nil).QueryFungibleTokenMetadata), varargs...)
}

// MockChainQueryServiceServer is a mock of ChainQueryServiceServer interface.
type MockChainQueryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChainQueryServiceServerMockRecorder
}

// MockChainQueryServiceServerMockRecorder is the mock recorder for MockChainQueryServiceServer.
type MockChainQueryServiceServerMockRecorder struct {
	mock *MockChainQueryServiceServer
}

// NewMockChainQueryServiceServer creates a new mock instance.
func NewMockChainQueryServiceServer(ctrl *gomock.Controller) *MockChainQueryServiceServer {
	mock := &MockChainQueryServiceServer{ctrl: ctrl}
	mock.recorder = &MockChainQueryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainQueryServiceServer) EXPECT() *MockChainQueryServiceServerMockRecorder {
	return m.recorder
}

// QueryFungibleTokenDecimals mocks base method.
func (m *MockChainQueryServiceServer) QueryFungibleTokenDecimals(ctx context.Context, in *QueryFungibleTokenDecimalsRequest) (*QueryFungibleTokenDecimalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFungibleTokenDecimals", ctx, in)
	ret0, _ := ret[0].(*QueryFungibleTokenDecimalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFungibleTokenDecimals indicates an expected call of QueryFungibleTokenDecimals.
func (mr *MockChainQueryServiceServerMockRecorder) QueryFungibleTokenDecimals(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFungibleTokenDecimals", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryFungibleTokenDecimals), ctx, in)
}

// QueryFungibleTokenMetadata mocks base method.
func (m *MockChainQueryServiceServer) QueryFungibleTokenMetadata(ctx context.Context, in *QueryFungibleTokenMetadataRequest) (*QueryFungibleTokenMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFungibleTokenMetadata", ctx, in)
	ret0, _ := ret[0].(*QueryFungibleTokenMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFungibleTokenMetadata indicates an expected call of QueryFungibleTokenMetadata.
func (mr *MockChainQueryServiceServerMockRecorder) QueryFungibleTokenMetadata(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFungibleTokenMetadata", reflect.TypeOf((*MockChainQueryServiceServer)(nil).QueryFungibleTokenMetadata), ctx, in)
}
