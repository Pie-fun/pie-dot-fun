// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pie-dot-fun/v1/fungible-token.proto

package piedotfun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFungibleTokenServiceClient is a mock of FungibleTokenServiceClient interface.
type MockFungibleTokenServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFungibleTokenServiceClientMockRecorder
}

// MockFungibleTokenServiceClientMockRecorder is the mock recorder for MockFungibleTokenServiceClient.
type MockFungibleTokenServiceClientMockRecorder struct {
	mock *MockFungibleTokenServiceClient
}

// NewMockFungibleTokenServiceClient creates a new mock instance.
func NewMockFungibleTokenServiceClient(ctrl *gomock.Controller) *MockFungibleTokenServiceClient {
	mock := &MockFungibleTokenServiceClient{ctrl: ctrl}
	mock.recorder = &MockFungibleTokenServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFungibleTokenServiceClient) EXPECT() *MockFungibleTokenServiceClientMockRecorder {
	return m.recorder
}

// GetFungibleToken mocks base method.
func (m *MockFungibleTokenServiceClient) GetFungibleToken(ctx context.Context, in *GetFungibleTokenRequest, opts ...grpc.CallOption) (*FungibleToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFungibleToken", varargs...)
	ret0, _ := ret[0].(*FungibleToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFungibleToken indicates an expected call of GetFungibleToken.
func (mr *MockFungibleTokenServiceClientMockRecorder) GetFungibleToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFungibleToken", reflect.TypeOf((*MockFungibleTokenServiceClient)(nil).GetFungibleToken), varargs...)
}

// ListFungibleTokens mocks base method.
func (m *MockFungibleTokenServiceClient) ListFungibleTokens(ctx context.Context, in *ListFungibleTokensRequest, opts ...grpc.CallOption) (*ListFungibleTokensResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFungibleTokens", varargs...)
	ret0, _ := ret[0].(*ListFungibleTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFungibleTokens indicates an expected call of ListFungibleTokens.
func (mr *MockFungibleTokenServiceClientMockRecorder) ListFungibleTokens(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFungibleTokens", reflect.TypeOf((*MockFungibleTokenServiceClient)(nil).ListFungibleTokens), varargs...)
}

// MockFungibleTokenServiceServer is a mock of FungibleTokenServiceServer interface.
type MockFungibleTokenServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFungibleTokenServiceServerMockRecorder
}

// MockFungibleTokenServiceServerMockRecorder is the mock recorder for MockFungibleTokenServiceServer.
type MockFungibleTokenServiceServerMockRecorder struct {
	mock *MockFungibleTokenServiceServer
}

// NewMockFungibleTokenServiceServer creates a new mock instance.
func NewMockFungibleTokenServiceServer(ctrl *gomock.Controller) *MockFungibleTokenServiceServer {
	mock := &MockFungibleTokenServiceServer{ctrl: ctrl}
	mock.recorder = &MockFungibleTokenServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFungibleTokenServiceServer) EXPECT() *MockFungibleTokenServiceServerMockRecorder {
	return m.recorder
}

// GetFungibleToken mocks base method.
func (m *MockFungibleTokenServiceServer) GetFungibleToken(ctx context.Context, in *GetFungibleTokenRequest) (*FungibleToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFungibleToken", ctx, in)
	ret0, _ := ret[0].(*FungibleToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFungibleToken indicates an expected call of GetFungibleToken.
func (mr *MockFungibleTokenServiceServerMockRecorder) GetFungibleToken(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFungibleToken", reflect.TypeOf((*MockFungibleTokenServiceServer)(nil).GetFungibleToken), ctx, in)
}

// ListFungibleTokens mocks base method.
func (m *MockFungibleTokenServiceServer) ListFungibleTokens(ctx context.Context, in *ListFungibleTokensRequest) (*ListFungibleTokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFungibleTokens", ctx, in)
	ret0, _ := ret[0].(*ListFungibleTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFungibleTokens indicates an expected call of ListFungibleTokens.
func (mr *MockFungibleTokenServiceServerMockRecorder) ListFungibleTokens(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFungibleTokens", reflect.TypeOf((*MockFungibleTokenServiceServer)(nil).ListFungibleTokens), ctx, in)
}
