// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/basket-token-market.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasketTokenMarketServiceClient is the client API for BasketTokenMarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketTokenMarketServiceClient interface {
	// CreateBasketTokenMarket
	// private
	CreateBasketTokenMarket(ctx context.Context, in *CreateBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error)
	// CustomCreateBasketTokenMarket
	// Create with components.
	// private
	CustomCreateBasketTokenMarket(ctx context.Context, in *CustomCreateBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error)
	// GetBasketTokenMarket returns the market for the given basket token.
	GetBasketTokenMarket(ctx context.Context, in *GetBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error)
	// ListBasketTokenMarkets returns the list of markets for the given basket tokens.
	ListBasketTokenMarkets(ctx context.Context, in *ListBasketTokensMarketsRequest, opts ...grpc.CallOption) (*ListBasketTokensMarketsResponse, error)
	// UpdateBasketTokenMarketComponents
	// private
	UpdateBasketTokenMarketComponents(ctx context.Context, in *UpdateBasketTokenMarketComponentsRequest, opts ...grpc.CallOption) (*UpdateBasketTokenMarketComponentsResponse, error)
	// ListBasketTokenTicks returns the list of Ticks for the given basket tokens.
	ListBasketTokenTicks(ctx context.Context, in *ListBasketTokenTicksRequest, opts ...grpc.CallOption) (*ListBasketTokenTicksResponse, error)
}

type basketTokenMarketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketTokenMarketServiceClient(cc grpc.ClientConnInterface) BasketTokenMarketServiceClient {
	return &basketTokenMarketServiceClient{cc}
}

func (c *basketTokenMarketServiceClient) CreateBasketTokenMarket(ctx context.Context, in *CreateBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error) {
	out := new(BasketTokenMarket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/CreateBasketTokenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenMarketServiceClient) CustomCreateBasketTokenMarket(ctx context.Context, in *CustomCreateBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error) {
	out := new(BasketTokenMarket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/CustomCreateBasketTokenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenMarketServiceClient) GetBasketTokenMarket(ctx context.Context, in *GetBasketTokenMarketRequest, opts ...grpc.CallOption) (*BasketTokenMarket, error) {
	out := new(BasketTokenMarket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/GetBasketTokenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenMarketServiceClient) ListBasketTokenMarkets(ctx context.Context, in *ListBasketTokensMarketsRequest, opts ...grpc.CallOption) (*ListBasketTokensMarketsResponse, error) {
	out := new(ListBasketTokensMarketsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/ListBasketTokenMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenMarketServiceClient) UpdateBasketTokenMarketComponents(ctx context.Context, in *UpdateBasketTokenMarketComponentsRequest, opts ...grpc.CallOption) (*UpdateBasketTokenMarketComponentsResponse, error) {
	out := new(UpdateBasketTokenMarketComponentsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/UpdateBasketTokenMarketComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenMarketServiceClient) ListBasketTokenTicks(ctx context.Context, in *ListBasketTokenTicksRequest, opts ...grpc.CallOption) (*ListBasketTokenTicksResponse, error) {
	out := new(ListBasketTokenTicksResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenMarketService/ListBasketTokenTicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketTokenMarketServiceServer is the server API for BasketTokenMarketService service.
// All implementations must embed UnimplementedBasketTokenMarketServiceServer
// for forward compatibility
type BasketTokenMarketServiceServer interface {
	// CreateBasketTokenMarket
	// private
	CreateBasketTokenMarket(context.Context, *CreateBasketTokenMarketRequest) (*BasketTokenMarket, error)
	// CustomCreateBasketTokenMarket
	// Create with components.
	// private
	CustomCreateBasketTokenMarket(context.Context, *CustomCreateBasketTokenMarketRequest) (*BasketTokenMarket, error)
	// GetBasketTokenMarket returns the market for the given basket token.
	GetBasketTokenMarket(context.Context, *GetBasketTokenMarketRequest) (*BasketTokenMarket, error)
	// ListBasketTokenMarkets returns the list of markets for the given basket tokens.
	ListBasketTokenMarkets(context.Context, *ListBasketTokensMarketsRequest) (*ListBasketTokensMarketsResponse, error)
	// UpdateBasketTokenMarketComponents
	// private
	UpdateBasketTokenMarketComponents(context.Context, *UpdateBasketTokenMarketComponentsRequest) (*UpdateBasketTokenMarketComponentsResponse, error)
	// ListBasketTokenTicks returns the list of Ticks for the given basket tokens.
	ListBasketTokenTicks(context.Context, *ListBasketTokenTicksRequest) (*ListBasketTokenTicksResponse, error)
	mustEmbedUnimplementedBasketTokenMarketServiceServer()
}

// UnimplementedBasketTokenMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasketTokenMarketServiceServer struct {
}

func (UnimplementedBasketTokenMarketServiceServer) CreateBasketTokenMarket(context.Context, *CreateBasketTokenMarketRequest) (*BasketTokenMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasketTokenMarket not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) CustomCreateBasketTokenMarket(context.Context, *CustomCreateBasketTokenMarketRequest) (*BasketTokenMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomCreateBasketTokenMarket not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) GetBasketTokenMarket(context.Context, *GetBasketTokenMarketRequest) (*BasketTokenMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketTokenMarket not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) ListBasketTokenMarkets(context.Context, *ListBasketTokensMarketsRequest) (*ListBasketTokensMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasketTokenMarkets not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) UpdateBasketTokenMarketComponents(context.Context, *UpdateBasketTokenMarketComponentsRequest) (*UpdateBasketTokenMarketComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasketTokenMarketComponents not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) ListBasketTokenTicks(context.Context, *ListBasketTokenTicksRequest) (*ListBasketTokenTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasketTokenTicks not implemented")
}
func (UnimplementedBasketTokenMarketServiceServer) mustEmbedUnimplementedBasketTokenMarketServiceServer() {
}

// UnsafeBasketTokenMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketTokenMarketServiceServer will
// result in compilation errors.
type UnsafeBasketTokenMarketServiceServer interface {
	mustEmbedUnimplementedBasketTokenMarketServiceServer()
}

func RegisterBasketTokenMarketServiceServer(s grpc.ServiceRegistrar, srv BasketTokenMarketServiceServer) {
	s.RegisterService(&BasketTokenMarketService_ServiceDesc, srv)
}

func _BasketTokenMarketService_CreateBasketTokenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketTokenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).CreateBasketTokenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/CreateBasketTokenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).CreateBasketTokenMarket(ctx, req.(*CreateBasketTokenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenMarketService_CustomCreateBasketTokenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomCreateBasketTokenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).CustomCreateBasketTokenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/CustomCreateBasketTokenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).CustomCreateBasketTokenMarket(ctx, req.(*CustomCreateBasketTokenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenMarketService_GetBasketTokenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketTokenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).GetBasketTokenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/GetBasketTokenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).GetBasketTokenMarket(ctx, req.(*GetBasketTokenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenMarketService_ListBasketTokenMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasketTokensMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).ListBasketTokenMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/ListBasketTokenMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).ListBasketTokenMarkets(ctx, req.(*ListBasketTokensMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenMarketService_UpdateBasketTokenMarketComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketTokenMarketComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).UpdateBasketTokenMarketComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/UpdateBasketTokenMarketComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).UpdateBasketTokenMarketComponents(ctx, req.(*UpdateBasketTokenMarketComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenMarketService_ListBasketTokenTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasketTokenTicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenMarketServiceServer).ListBasketTokenTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenMarketService/ListBasketTokenTicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenMarketServiceServer).ListBasketTokenTicks(ctx, req.(*ListBasketTokenTicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketTokenMarketService_ServiceDesc is the grpc.ServiceDesc for BasketTokenMarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketTokenMarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.BasketTokenMarketService",
	HandlerType: (*BasketTokenMarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBasketTokenMarket",
			Handler:    _BasketTokenMarketService_CreateBasketTokenMarket_Handler,
		},
		{
			MethodName: "CustomCreateBasketTokenMarket",
			Handler:    _BasketTokenMarketService_CustomCreateBasketTokenMarket_Handler,
		},
		{
			MethodName: "GetBasketTokenMarket",
			Handler:    _BasketTokenMarketService_GetBasketTokenMarket_Handler,
		},
		{
			MethodName: "ListBasketTokenMarkets",
			Handler:    _BasketTokenMarketService_ListBasketTokenMarkets_Handler,
		},
		{
			MethodName: "UpdateBasketTokenMarketComponents",
			Handler:    _BasketTokenMarketService_UpdateBasketTokenMarketComponents_Handler,
		},
		{
			MethodName: "ListBasketTokenTicks",
			Handler:    _BasketTokenMarketService_ListBasketTokenTicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/basket-token-market.proto",
}
