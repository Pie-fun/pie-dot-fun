// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/pie-program.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PieProgramServiceClient is the client API for PieProgramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PieProgramServiceClient interface {
	GetProgramState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProgramState, error)
	GetBasketConfigByID(ctx context.Context, in *GetBasketConfigByIDRequest, opts ...grpc.CallOption) (*BasketConfig, error)
	GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*Basket, error)
	// Get Basket Vault
	GetBasketVault(ctx context.Context, in *GetBasketVaultRequest, opts ...grpc.CallOption) (*GetBasketVaultResponse, error)
	// Batch Create Token Pools
	BatchCreateTokenPools(ctx context.Context, in *BatchCreateTokenPoolsRequest, opts ...grpc.CallOption) (*BatchCreateTokenPoolsResponse, error)
	// Build Rebalance Trasaction
	BuildRebalanceTx(ctx context.Context, in *BuildRebalanceTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error)
	// Build Mint Transaction
	BuildMintTx(ctx context.Context, in *BuildMintTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error)
	// Build Redeem Transaction
	BuildRedeemTx(ctx context.Context, in *BuildRedeemTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error)
	// Send Create Basket Transaction to Solana
	CommandCreateBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*Basket, error)
	CommandStartRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error)
	CommandStopRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error)
}

type pieProgramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPieProgramServiceClient(cc grpc.ClientConnInterface) PieProgramServiceClient {
	return &pieProgramServiceClient{cc}
}

func (c *pieProgramServiceClient) GetProgramState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProgramState, error) {
	out := new(ProgramState)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/GetProgramState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) GetBasketConfigByID(ctx context.Context, in *GetBasketConfigByIDRequest, opts ...grpc.CallOption) (*BasketConfig, error) {
	out := new(BasketConfig)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/GetBasketConfigByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	out := new(Basket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/GetBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) GetBasketVault(ctx context.Context, in *GetBasketVaultRequest, opts ...grpc.CallOption) (*GetBasketVaultResponse, error) {
	out := new(GetBasketVaultResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/GetBasketVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) BatchCreateTokenPools(ctx context.Context, in *BatchCreateTokenPoolsRequest, opts ...grpc.CallOption) (*BatchCreateTokenPoolsResponse, error) {
	out := new(BatchCreateTokenPoolsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/BatchCreateTokenPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) BuildRebalanceTx(ctx context.Context, in *BuildRebalanceTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	out := new(SerializedTxBundle)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/BuildRebalanceTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) BuildMintTx(ctx context.Context, in *BuildMintTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	out := new(SerializedTxBundle)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/BuildMintTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) BuildRedeemTx(ctx context.Context, in *BuildRedeemTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	out := new(SerializedTxBundle)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/BuildRedeemTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) CommandCreateBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*Basket, error) {
	out := new(Basket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/CommandCreateBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) CommandStartRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error) {
	out := new(TxResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/CommandStartRebalanceBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pieProgramServiceClient) CommandStopRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error) {
	out := new(TxResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.PieProgramService/CommandStopRebalanceBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PieProgramServiceServer is the server API for PieProgramService service.
// All implementations must embed UnimplementedPieProgramServiceServer
// for forward compatibility
type PieProgramServiceServer interface {
	GetProgramState(context.Context, *emptypb.Empty) (*ProgramState, error)
	GetBasketConfigByID(context.Context, *GetBasketConfigByIDRequest) (*BasketConfig, error)
	GetBasket(context.Context, *GetBasketRequest) (*Basket, error)
	// Get Basket Vault
	GetBasketVault(context.Context, *GetBasketVaultRequest) (*GetBasketVaultResponse, error)
	// Batch Create Token Pools
	BatchCreateTokenPools(context.Context, *BatchCreateTokenPoolsRequest) (*BatchCreateTokenPoolsResponse, error)
	// Build Rebalance Trasaction
	BuildRebalanceTx(context.Context, *BuildRebalanceTxRequest) (*SerializedTxBundle, error)
	// Build Mint Transaction
	BuildMintTx(context.Context, *BuildMintTxRequest) (*SerializedTxBundle, error)
	// Build Redeem Transaction
	BuildRedeemTx(context.Context, *BuildRedeemTxRequest) (*SerializedTxBundle, error)
	// Send Create Basket Transaction to Solana
	CommandCreateBasket(context.Context, *Basket) (*Basket, error)
	CommandStartRebalanceBasket(context.Context, *Basket) (*TxResponse, error)
	CommandStopRebalanceBasket(context.Context, *Basket) (*TxResponse, error)
	mustEmbedUnimplementedPieProgramServiceServer()
}

// UnimplementedPieProgramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPieProgramServiceServer struct {
}

func (UnimplementedPieProgramServiceServer) GetProgramState(context.Context, *emptypb.Empty) (*ProgramState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramState not implemented")
}
func (UnimplementedPieProgramServiceServer) GetBasketConfigByID(context.Context, *GetBasketConfigByIDRequest) (*BasketConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketConfigByID not implemented")
}
func (UnimplementedPieProgramServiceServer) GetBasket(context.Context, *GetBasketRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedPieProgramServiceServer) GetBasketVault(context.Context, *GetBasketVaultRequest) (*GetBasketVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketVault not implemented")
}
func (UnimplementedPieProgramServiceServer) BatchCreateTokenPools(context.Context, *BatchCreateTokenPoolsRequest) (*BatchCreateTokenPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTokenPools not implemented")
}
func (UnimplementedPieProgramServiceServer) BuildRebalanceTx(context.Context, *BuildRebalanceTxRequest) (*SerializedTxBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRebalanceTx not implemented")
}
func (UnimplementedPieProgramServiceServer) BuildMintTx(context.Context, *BuildMintTxRequest) (*SerializedTxBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildMintTx not implemented")
}
func (UnimplementedPieProgramServiceServer) BuildRedeemTx(context.Context, *BuildRedeemTxRequest) (*SerializedTxBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRedeemTx not implemented")
}
func (UnimplementedPieProgramServiceServer) CommandCreateBasket(context.Context, *Basket) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandCreateBasket not implemented")
}
func (UnimplementedPieProgramServiceServer) CommandStartRebalanceBasket(context.Context, *Basket) (*TxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandStartRebalanceBasket not implemented")
}
func (UnimplementedPieProgramServiceServer) CommandStopRebalanceBasket(context.Context, *Basket) (*TxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandStopRebalanceBasket not implemented")
}
func (UnimplementedPieProgramServiceServer) mustEmbedUnimplementedPieProgramServiceServer() {}

// UnsafePieProgramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PieProgramServiceServer will
// result in compilation errors.
type UnsafePieProgramServiceServer interface {
	mustEmbedUnimplementedPieProgramServiceServer()
}

func RegisterPieProgramServiceServer(s grpc.ServiceRegistrar, srv PieProgramServiceServer) {
	s.RegisterService(&PieProgramService_ServiceDesc, srv)
}

func _PieProgramService_GetProgramState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).GetProgramState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/GetProgramState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).GetProgramState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_GetBasketConfigByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketConfigByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).GetBasketConfigByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/GetBasketConfigByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).GetBasketConfigByID(ctx, req.(*GetBasketConfigByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/GetBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).GetBasket(ctx, req.(*GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_GetBasketVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).GetBasketVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/GetBasketVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).GetBasketVault(ctx, req.(*GetBasketVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_BatchCreateTokenPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTokenPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).BatchCreateTokenPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/BatchCreateTokenPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).BatchCreateTokenPools(ctx, req.(*BatchCreateTokenPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_BuildRebalanceTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRebalanceTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).BuildRebalanceTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/BuildRebalanceTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).BuildRebalanceTx(ctx, req.(*BuildRebalanceTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_BuildMintTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildMintTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).BuildMintTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/BuildMintTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).BuildMintTx(ctx, req.(*BuildMintTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_BuildRedeemTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRedeemTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).BuildRedeemTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/BuildRedeemTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).BuildRedeemTx(ctx, req.(*BuildRedeemTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_CommandCreateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Basket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).CommandCreateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/CommandCreateBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).CommandCreateBasket(ctx, req.(*Basket))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_CommandStartRebalanceBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Basket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).CommandStartRebalanceBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/CommandStartRebalanceBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).CommandStartRebalanceBasket(ctx, req.(*Basket))
	}
	return interceptor(ctx, in, info, handler)
}

func _PieProgramService_CommandStopRebalanceBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Basket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieProgramServiceServer).CommandStopRebalanceBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.PieProgramService/CommandStopRebalanceBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieProgramServiceServer).CommandStopRebalanceBasket(ctx, req.(*Basket))
	}
	return interceptor(ctx, in, info, handler)
}

// PieProgramService_ServiceDesc is the grpc.ServiceDesc for PieProgramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PieProgramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.PieProgramService",
	HandlerType: (*PieProgramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgramState",
			Handler:    _PieProgramService_GetProgramState_Handler,
		},
		{
			MethodName: "GetBasketConfigByID",
			Handler:    _PieProgramService_GetBasketConfigByID_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _PieProgramService_GetBasket_Handler,
		},
		{
			MethodName: "GetBasketVault",
			Handler:    _PieProgramService_GetBasketVault_Handler,
		},
		{
			MethodName: "BatchCreateTokenPools",
			Handler:    _PieProgramService_BatchCreateTokenPools_Handler,
		},
		{
			MethodName: "BuildRebalanceTx",
			Handler:    _PieProgramService_BuildRebalanceTx_Handler,
		},
		{
			MethodName: "BuildMintTx",
			Handler:    _PieProgramService_BuildMintTx_Handler,
		},
		{
			MethodName: "BuildRedeemTx",
			Handler:    _PieProgramService_BuildRedeemTx_Handler,
		},
		{
			MethodName: "CommandCreateBasket",
			Handler:    _PieProgramService_CommandCreateBasket_Handler,
		},
		{
			MethodName: "CommandStartRebalanceBasket",
			Handler:    _PieProgramService_CommandStartRebalanceBasket_Handler,
		},
		{
			MethodName: "CommandStopRebalanceBasket",
			Handler:    _PieProgramService_CommandStopRebalanceBasket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/pie-program.proto",
}
