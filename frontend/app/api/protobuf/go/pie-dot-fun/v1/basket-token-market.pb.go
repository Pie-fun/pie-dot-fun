// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/basket-token-market.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TickInterval int32

const (
	TickInterval_INTERVAL_UNSPECIFIED TickInterval = 0
	// Deprecated: Do not use.
	TickInterval_INTERVAL_1_SECOND   TickInterval = 1
	TickInterval_INTERVAL_1_MINUTE   TickInterval = 2
	TickInterval_INTERVAL_15_MINUTES TickInterval = 3
	TickInterval_INTERVAL_1_HOUR     TickInterval = 4
	TickInterval_INTERVAL_4_HOUR     TickInterval = 5
	TickInterval_INTERVAL_1_DAY      TickInterval = 6
)

// Enum value maps for TickInterval.
var (
	TickInterval_name = map[int32]string{
		0: "INTERVAL_UNSPECIFIED",
		1: "INTERVAL_1_SECOND",
		2: "INTERVAL_1_MINUTE",
		3: "INTERVAL_15_MINUTES",
		4: "INTERVAL_1_HOUR",
		5: "INTERVAL_4_HOUR",
		6: "INTERVAL_1_DAY",
	}
	TickInterval_value = map[string]int32{
		"INTERVAL_UNSPECIFIED": 0,
		"INTERVAL_1_SECOND":    1,
		"INTERVAL_1_MINUTE":    2,
		"INTERVAL_15_MINUTES":  3,
		"INTERVAL_1_HOUR":      4,
		"INTERVAL_4_HOUR":      5,
		"INTERVAL_1_DAY":       6,
	}
)

func (x TickInterval) Enum() *TickInterval {
	p := new(TickInterval)
	*p = x
	return p
}

func (x TickInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_basket_token_market_proto_enumTypes[0].Descriptor()
}

func (TickInterval) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_basket_token_market_proto_enumTypes[0]
}

func (x TickInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickInterval.Descriptor instead.
func (TickInterval) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{0}
}

// BasketTokenMarket contains the market data for a basket token.
type BasketTokenMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BasketToken string `protobuf:"bytes,2,opt,name=basket_token,json=basketToken,proto3" json:"basket_token,omitempty"`
	// Native token symbol of the chain the basket-token belongs to.
	// Not dollar(USDT, USDC),
	// and the prices and market cap fields will display dollar values together.
	NativeCurrency Currency `protobuf:"varint,3,opt,name=native_currency,json=nativeCurrency,proto3,enum=piedotfun.v1.Currency" json:"native_currency,omitempty"`
	// Deprecated: Do not use.
	Values map[string]*Money `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key is the currency enum string,
	// value is the market cap with the currency.
	//
	// Deprecated: Do not use.
	MarketCaps map[string]*Money `protobuf:"bytes,6,rep,name=market_caps,json=marketCaps,proto3" json:"market_caps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key is the currency enum string,
	// value is the INAV changes with the currency.
	//
	//	{
	//	  "CURRENCY_USDC": {
	//	    "PRICE_CHANGE_PERIOD_1_HOUR": {
	//	      "nominal_value": {
	//	        "currency": "CURRENCY_USDC",
	//	        "amount": 0.0001
	//	      },
	//	      "percentage_change": {
	//	        "value": 0.0001
	//	      },
	//	      "period": "PRICE_CHANGE_PERIOD_1_HOUR"
	//	    },
	//	    "CURRENTCY_SOL": { ... }
	//	}
	//
	// Support Periods
	// * PRICE_CHANGE_PERIOD_1_HOUR
	// * PRICE_CHANGE_PERIOD_24_HOUR
	// * PRICE_CHANGE_PERIOD_7_DAY
	// * PRICE_CHANGE_PERIOD_30_DAY
	// * PRICE_CHANGE_PERIOD_ALL_TIME
	//
	// Deprecated: Do not use.
	ValueChanges map[string]*PriceChangesByPeriod `protobuf:"bytes,7,rep,name=value_changes,json=valueChanges,proto3" json:"value_changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Percentage of lowest after the previous highest.
	// {(`previous highest` - `lowest` after `previous highest`) / `previous highest`} * 100
	MaximumDrawDown *Percentage `protobuf:"bytes,8,opt,name=maximum_draw_down,json=maximumDrawDown,proto3" json:"maximum_draw_down,omitempty"`
	// Current NAV(Net Asset Value) per BasketToken.
	Value *Money `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	// Market cap is based on the current NAV(Net Asset Value) per BasketToken.
	MarketCap *Money `protobuf:"bytes,10,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	// Example
	//
	//	{
	//	  "PRICE_CHANGE_PERIOD_1_HOUR": {
	//	      "nominal_value": {
	//	          "currency": "CURRENCY_USDC",
	//	          "amount": 0.0001
	//	      },
	//	      "percentage_change": {
	//	          "value": 0.0001
	//	      },
	//	      "period": "PRICE_CHANGE_PERIOD_1_HOUR"
	//	  },
	//	  "PRICE_CHANGE_PERIOD_24_HOUR": {...},
	//	  ...
	//	}
	//
	// Support Periods
	// * PRICE_CHANGE_PERIOD_1_HOUR
	// * PRICE_CHANGE_PERIOD_24_HOUR
	// * PRICE_CHANGE_PERIOD_7_DAY
	// * PRICE_CHANGE_PERIOD_30_DAY
	// * PRICE_CHANGE_PERIOD_ALL_TIME
	ValueChange *PriceChangesByPeriod `protobuf:"bytes,11,opt,name=value_change,json=valueChange,proto3" json:"value_change,omitempty"`
}

func (x *BasketTokenMarket) Reset() {
	*x = BasketTokenMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketTokenMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketTokenMarket) ProtoMessage() {}

func (x *BasketTokenMarket) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketTokenMarket.ProtoReflect.Descriptor instead.
func (*BasketTokenMarket) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{0}
}

func (x *BasketTokenMarket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasketTokenMarket) GetBasketToken() string {
	if x != nil {
		return x.BasketToken
	}
	return ""
}

func (x *BasketTokenMarket) GetNativeCurrency() Currency {
	if x != nil {
		return x.NativeCurrency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *BasketTokenMarket) GetValues() map[string]*Money {
	if x != nil {
		return x.Values
	}
	return nil
}

// Deprecated: Do not use.
func (x *BasketTokenMarket) GetMarketCaps() map[string]*Money {
	if x != nil {
		return x.MarketCaps
	}
	return nil
}

// Deprecated: Do not use.
func (x *BasketTokenMarket) GetValueChanges() map[string]*PriceChangesByPeriod {
	if x != nil {
		return x.ValueChanges
	}
	return nil
}

func (x *BasketTokenMarket) GetMaximumDrawDown() *Percentage {
	if x != nil {
		return x.MaximumDrawDown
	}
	return nil
}

func (x *BasketTokenMarket) GetValue() *Money {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BasketTokenMarket) GetMarketCap() *Money {
	if x != nil {
		return x.MarketCap
	}
	return nil
}

func (x *BasketTokenMarket) GetValueChange() *PriceChangesByPeriod {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

type CreateBasketTokenMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The basket token market to create.
	BasketTokenMarket *BasketTokenMarket `protobuf:"bytes,1,opt,name=basket_token_market,json=basketTokenMarket,proto3" json:"basket_token_market,omitempty"`
	// display_name
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Symbol
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *CreateBasketTokenMarketRequest) Reset() {
	*x = CreateBasketTokenMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBasketTokenMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBasketTokenMarketRequest) ProtoMessage() {}

func (x *CreateBasketTokenMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBasketTokenMarketRequest.ProtoReflect.Descriptor instead.
func (*CreateBasketTokenMarketRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBasketTokenMarketRequest) GetBasketTokenMarket() *BasketTokenMarket {
	if x != nil {
		return x.BasketTokenMarket
	}
	return nil
}

func (x *CreateBasketTokenMarketRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateBasketTokenMarketRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type CustomCreateBasketTokenMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The basket token market to create.
	BasketTokenMarket *BasketTokenMarket                                `protobuf:"bytes,1,opt,name=basket_token_market,json=basketTokenMarket,proto3" json:"basket_token_market,omitempty"`
	Components        []*CustomCreateBasketTokenMarketRequest_Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	// display_name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Symbol
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *CustomCreateBasketTokenMarketRequest) Reset() {
	*x = CustomCreateBasketTokenMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCreateBasketTokenMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCreateBasketTokenMarketRequest) ProtoMessage() {}

func (x *CustomCreateBasketTokenMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCreateBasketTokenMarketRequest.ProtoReflect.Descriptor instead.
func (*CustomCreateBasketTokenMarketRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{2}
}

func (x *CustomCreateBasketTokenMarketRequest) GetBasketTokenMarket() *BasketTokenMarket {
	if x != nil {
		return x.BasketTokenMarket
	}
	return nil
}

func (x *CustomCreateBasketTokenMarketRequest) GetComponents() []*CustomCreateBasketTokenMarketRequest_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *CustomCreateBasketTokenMarketRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CustomCreateBasketTokenMarketRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetBasketTokenMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the market  to retrieve.
	// Format : "basketTokens/{chain}/{token_address}/market"
	BasketTokenMarket string `protobuf:"bytes,1,opt,name=basket_token_market,json=basketTokenMarket,proto3" json:"basket_token_market,omitempty"`
	// Display the price in this currency. Default is USD.
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *GetBasketTokenMarketRequest) Reset() {
	*x = GetBasketTokenMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBasketTokenMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasketTokenMarketRequest) ProtoMessage() {}

func (x *GetBasketTokenMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasketTokenMarketRequest.ProtoReflect.Descriptor instead.
func (*GetBasketTokenMarketRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{3}
}

func (x *GetBasketTokenMarketRequest) GetBasketTokenMarket() string {
	if x != nil {
		return x.BasketTokenMarket
	}
	return ""
}

func (x *GetBasketTokenMarketRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListBasketTokensMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If unspecified, at most 50 books will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// Examples
	// * name="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9/market"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output.
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// *
	//
	// Examples
	// *
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Display the price in this currency. Default is USD.
	Currency Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *ListBasketTokensMarketsRequest) Reset() {
	*x = ListBasketTokensMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokensMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokensMarketsRequest) ProtoMessage() {}

func (x *ListBasketTokensMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokensMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListBasketTokensMarketsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{4}
}

func (x *ListBasketTokensMarketsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBasketTokensMarketsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBasketTokensMarketsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListBasketTokensMarketsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListBasketTokensMarketsRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type ListBasketTokensMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasketTokenMarkets []*BasketTokenMarket `protobuf:"bytes,1,rep,name=basket_token_markets,json=basketTokenMarkets,proto3" json:"basket_token_markets,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBasketTokensMarketsResponse) Reset() {
	*x = ListBasketTokensMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokensMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokensMarketsResponse) ProtoMessage() {}

func (x *ListBasketTokensMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokensMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListBasketTokensMarketsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{5}
}

func (x *ListBasketTokensMarketsResponse) GetBasketTokenMarkets() []*BasketTokenMarket {
	if x != nil {
		return x.BasketTokenMarkets
	}
	return nil
}

func (x *ListBasketTokensMarketsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateBasketTokenMarketComponentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the market to update.
	// Format : "basketTokens/{chain}/{token_address}/market"
	BasketTokenMarket string                                                `protobuf:"bytes,1,opt,name=basket_token_market,json=basketTokenMarket,proto3" json:"basket_token_market,omitempty"`
	Components        []*UpdateBasketTokenMarketComponentsRequest_Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	// The block number to update the components.
	UpdateBlockNumber uint64 `protobuf:"varint,3,opt,name=updateBlockNumber,proto3" json:"updateBlockNumber,omitempty"`
}

func (x *UpdateBasketTokenMarketComponentsRequest) Reset() {
	*x = UpdateBasketTokenMarketComponentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasketTokenMarketComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasketTokenMarketComponentsRequest) ProtoMessage() {}

func (x *UpdateBasketTokenMarketComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasketTokenMarketComponentsRequest.ProtoReflect.Descriptor instead.
func (*UpdateBasketTokenMarketComponentsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBasketTokenMarketComponentsRequest) GetBasketTokenMarket() string {
	if x != nil {
		return x.BasketTokenMarket
	}
	return ""
}

func (x *UpdateBasketTokenMarketComponentsRequest) GetComponents() []*UpdateBasketTokenMarketComponentsRequest_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *UpdateBasketTokenMarketComponentsRequest) GetUpdateBlockNumber() uint64 {
	if x != nil {
		return x.UpdateBlockNumber
	}
	return 0
}

type UpdateBasketTokenMarketComponentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBasketTokenMarketComponentsResponse) Reset() {
	*x = UpdateBasketTokenMarketComponentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasketTokenMarketComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasketTokenMarketComponentsResponse) ProtoMessage() {}

func (x *UpdateBasketTokenMarketComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasketTokenMarketComponentsResponse.ProtoReflect.Descriptor instead.
func (*UpdateBasketTokenMarketComponentsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{7}
}

type ListBasketTokenTicksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format : "basketTokens/{chain}/{token_address}"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// If not set time, the current time will be used.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// default size: 200. Max size: 1000
	Size *int32 `protobuf:"varint,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// Default is USD.
	Currency Currency     `protobuf:"varint,5,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
	Interval TickInterval `protobuf:"varint,6,opt,name=interval,proto3,enum=piedotfun.v1.TickInterval" json:"interval,omitempty"`
}

func (x *ListBasketTokenTicksRequest) Reset() {
	*x = ListBasketTokenTicksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokenTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokenTicksRequest) ProtoMessage() {}

func (x *ListBasketTokenTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokenTicksRequest.ProtoReflect.Descriptor instead.
func (*ListBasketTokenTicksRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{8}
}

func (x *ListBasketTokenTicksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBasketTokenTicksRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListBasketTokenTicksRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListBasketTokenTicksRequest) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ListBasketTokenTicksRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

func (x *ListBasketTokenTicksRequest) GetInterval() TickInterval {
	if x != nil {
		return x.Interval
	}
	return TickInterval_INTERVAL_UNSPECIFIED
}

type ListBasketTokenTicksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticks    []*Tick  `protobuf:"bytes,1,rep,name=ticks,proto3" json:"ticks,omitempty"`
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
}

func (x *ListBasketTokenTicksResponse) Reset() {
	*x = ListBasketTokenTicksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokenTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokenTicksResponse) ProtoMessage() {}

func (x *ListBasketTokenTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokenTicksResponse.ProtoReflect.Descriptor instead.
func (*ListBasketTokenTicksResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{9}
}

func (x *ListBasketTokenTicksResponse) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

func (x *ListBasketTokenTicksResponse) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	Open     float64                `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High     float64                `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64                `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close    float64                `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *Tick) Reset() {
	*x = Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{10}
}

func (x *Tick) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *Tick) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Tick) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Tick) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Tick) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

type CustomCreateBasketTokenMarketRequest_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the fungible token.
	// Format : "fungibleTokens/{chain}/{token_address}"
	FungibleToken string `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	// Number of component token per one BasketToken.
	Quantity *Quantity `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *CustomCreateBasketTokenMarketRequest_Component) Reset() {
	*x = CustomCreateBasketTokenMarketRequest_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCreateBasketTokenMarketRequest_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCreateBasketTokenMarketRequest_Component) ProtoMessage() {}

func (x *CustomCreateBasketTokenMarketRequest_Component) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCreateBasketTokenMarketRequest_Component.ProtoReflect.Descriptor instead.
func (*CustomCreateBasketTokenMarketRequest_Component) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CustomCreateBasketTokenMarketRequest_Component) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *CustomCreateBasketTokenMarketRequest_Component) GetQuantity() *Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type UpdateBasketTokenMarketComponentsRequest_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the fungible token.
	// Format : "fungibleTokens/{chain}/{token_address}"
	FungibleToken string `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	// Number of component token per one BasketToken.
	Quantity *Quantity `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *UpdateBasketTokenMarketComponentsRequest_Component) Reset() {
	*x = UpdateBasketTokenMarketComponentsRequest_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasketTokenMarketComponentsRequest_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasketTokenMarketComponentsRequest_Component) ProtoMessage() {}

func (x *UpdateBasketTokenMarketComponentsRequest_Component) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasketTokenMarketComponentsRequest_Component.ProtoReflect.Descriptor instead.
func (*UpdateBasketTokenMarketComponentsRequest_Component) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateBasketTokenMarketComponentsRequest_Component) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *UpdateBasketTokenMarketComponentsRequest_Component) GetQuantity() *Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

var File_pie_dot_fun_v1_basket_token_market_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_basket_token_market_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x69, 0x65,
	0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d,
	0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x08, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01, 0x03, 0xfa,
	0x41, 0x28, 0x0a, 0x26, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0e,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x18, 0x01, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x06, 0x18, 0x01, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x4e, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x58, 0xea, 0x41, 0x55, 0x0a, 0x2c, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x22, 0xb2, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x11, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x24, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x55, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x11, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x1a, 0x66, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x14, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x03, 0x0a, 0x28, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x70, 0x69, 0x65,
	0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x11, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x66, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x32, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8c, 0x03, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x7c, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8f,
	0x01, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x2a, 0xb1, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x35, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x44,
	0x41, 0x59, 0x10, 0x06, 0x32, 0xab, 0x09, 0x0a, 0x18, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x2e,
	0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x48, 0xda, 0x41,
	0x00, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x00, 0x98, 0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x3a, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x2d, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x3d, 0xda,
	0x41, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x00, 0x98, 0xb5, 0x18, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x2d, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x22, 0x5b, 0xda, 0x41, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x3d, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x7d, 0x12, 0xa7,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x2d,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x85, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6f, 0xda, 0x41, 0x13, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x00, 0x98,
	0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x3d, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x7d, 0x3a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xaf, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f,
	0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_basket_token_market_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_basket_token_market_proto_rawDescData = file_pie_dot_fun_v1_basket_token_market_proto_rawDesc
)

func file_pie_dot_fun_v1_basket_token_market_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_basket_token_market_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_basket_token_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_basket_token_market_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_basket_token_market_proto_rawDescData
}

var file_pie_dot_fun_v1_basket_token_market_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pie_dot_fun_v1_basket_token_market_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pie_dot_fun_v1_basket_token_market_proto_goTypes = []interface{}{
	(TickInterval)(0),                                 // 0: piedotfun.v1.TickInterval
	(*BasketTokenMarket)(nil),                         // 1: piedotfun.v1.BasketTokenMarket
	(*CreateBasketTokenMarketRequest)(nil),            // 2: piedotfun.v1.CreateBasketTokenMarketRequest
	(*CustomCreateBasketTokenMarketRequest)(nil),      // 3: piedotfun.v1.CustomCreateBasketTokenMarketRequest
	(*GetBasketTokenMarketRequest)(nil),               // 4: piedotfun.v1.GetBasketTokenMarketRequest
	(*ListBasketTokensMarketsRequest)(nil),            // 5: piedotfun.v1.ListBasketTokensMarketsRequest
	(*ListBasketTokensMarketsResponse)(nil),           // 6: piedotfun.v1.ListBasketTokensMarketsResponse
	(*UpdateBasketTokenMarketComponentsRequest)(nil),  // 7: piedotfun.v1.UpdateBasketTokenMarketComponentsRequest
	(*UpdateBasketTokenMarketComponentsResponse)(nil), // 8: piedotfun.v1.UpdateBasketTokenMarketComponentsResponse
	(*ListBasketTokenTicksRequest)(nil),               // 9: piedotfun.v1.ListBasketTokenTicksRequest
	(*ListBasketTokenTicksResponse)(nil),              // 10: piedotfun.v1.ListBasketTokenTicksResponse
	(*Tick)(nil),                                      // 11: piedotfun.v1.Tick
	nil,                                               // 12: piedotfun.v1.BasketTokenMarket.ValuesEntry
	nil,                                               // 13: piedotfun.v1.BasketTokenMarket.MarketCapsEntry
	nil,                                               // 14: piedotfun.v1.BasketTokenMarket.ValueChangesEntry
	(*CustomCreateBasketTokenMarketRequest_Component)(nil),     // 15: piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component
	(*UpdateBasketTokenMarketComponentsRequest_Component)(nil), // 16: piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component
	(Currency)(0),                 // 17: piedotfun.v1.Currency
	(*Percentage)(nil),            // 18: piedotfun.v1.Percentage
	(*Money)(nil),                 // 19: piedotfun.v1.Money
	(*PriceChangesByPeriod)(nil),  // 20: piedotfun.v1.PriceChangesByPeriod
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*Quantity)(nil),              // 22: piedotfun.v1.Quantity
}
var file_pie_dot_fun_v1_basket_token_market_proto_depIdxs = []int32{
	17, // 0: piedotfun.v1.BasketTokenMarket.native_currency:type_name -> piedotfun.v1.Currency
	12, // 1: piedotfun.v1.BasketTokenMarket.values:type_name -> piedotfun.v1.BasketTokenMarket.ValuesEntry
	13, // 2: piedotfun.v1.BasketTokenMarket.market_caps:type_name -> piedotfun.v1.BasketTokenMarket.MarketCapsEntry
	14, // 3: piedotfun.v1.BasketTokenMarket.value_changes:type_name -> piedotfun.v1.BasketTokenMarket.ValueChangesEntry
	18, // 4: piedotfun.v1.BasketTokenMarket.maximum_draw_down:type_name -> piedotfun.v1.Percentage
	19, // 5: piedotfun.v1.BasketTokenMarket.value:type_name -> piedotfun.v1.Money
	19, // 6: piedotfun.v1.BasketTokenMarket.market_cap:type_name -> piedotfun.v1.Money
	20, // 7: piedotfun.v1.BasketTokenMarket.value_change:type_name -> piedotfun.v1.PriceChangesByPeriod
	1,  // 8: piedotfun.v1.CreateBasketTokenMarketRequest.basket_token_market:type_name -> piedotfun.v1.BasketTokenMarket
	1,  // 9: piedotfun.v1.CustomCreateBasketTokenMarketRequest.basket_token_market:type_name -> piedotfun.v1.BasketTokenMarket
	15, // 10: piedotfun.v1.CustomCreateBasketTokenMarketRequest.components:type_name -> piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component
	17, // 11: piedotfun.v1.GetBasketTokenMarketRequest.currency:type_name -> piedotfun.v1.Currency
	17, // 12: piedotfun.v1.ListBasketTokensMarketsRequest.currency:type_name -> piedotfun.v1.Currency
	1,  // 13: piedotfun.v1.ListBasketTokensMarketsResponse.basket_token_markets:type_name -> piedotfun.v1.BasketTokenMarket
	16, // 14: piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.components:type_name -> piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component
	21, // 15: piedotfun.v1.ListBasketTokenTicksRequest.start_time:type_name -> google.protobuf.Timestamp
	21, // 16: piedotfun.v1.ListBasketTokenTicksRequest.end_time:type_name -> google.protobuf.Timestamp
	17, // 17: piedotfun.v1.ListBasketTokenTicksRequest.currency:type_name -> piedotfun.v1.Currency
	0,  // 18: piedotfun.v1.ListBasketTokenTicksRequest.interval:type_name -> piedotfun.v1.TickInterval
	11, // 19: piedotfun.v1.ListBasketTokenTicksResponse.ticks:type_name -> piedotfun.v1.Tick
	17, // 20: piedotfun.v1.ListBasketTokenTicksResponse.currency:type_name -> piedotfun.v1.Currency
	21, // 21: piedotfun.v1.Tick.open_time:type_name -> google.protobuf.Timestamp
	19, // 22: piedotfun.v1.BasketTokenMarket.ValuesEntry.value:type_name -> piedotfun.v1.Money
	19, // 23: piedotfun.v1.BasketTokenMarket.MarketCapsEntry.value:type_name -> piedotfun.v1.Money
	20, // 24: piedotfun.v1.BasketTokenMarket.ValueChangesEntry.value:type_name -> piedotfun.v1.PriceChangesByPeriod
	22, // 25: piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component.quantity:type_name -> piedotfun.v1.Quantity
	22, // 26: piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component.quantity:type_name -> piedotfun.v1.Quantity
	2,  // 27: piedotfun.v1.BasketTokenMarketService.CreateBasketTokenMarket:input_type -> piedotfun.v1.CreateBasketTokenMarketRequest
	3,  // 28: piedotfun.v1.BasketTokenMarketService.CustomCreateBasketTokenMarket:input_type -> piedotfun.v1.CustomCreateBasketTokenMarketRequest
	4,  // 29: piedotfun.v1.BasketTokenMarketService.GetBasketTokenMarket:input_type -> piedotfun.v1.GetBasketTokenMarketRequest
	5,  // 30: piedotfun.v1.BasketTokenMarketService.ListBasketTokenMarkets:input_type -> piedotfun.v1.ListBasketTokensMarketsRequest
	7,  // 31: piedotfun.v1.BasketTokenMarketService.UpdateBasketTokenMarketComponents:input_type -> piedotfun.v1.UpdateBasketTokenMarketComponentsRequest
	9,  // 32: piedotfun.v1.BasketTokenMarketService.ListBasketTokenTicks:input_type -> piedotfun.v1.ListBasketTokenTicksRequest
	1,  // 33: piedotfun.v1.BasketTokenMarketService.CreateBasketTokenMarket:output_type -> piedotfun.v1.BasketTokenMarket
	1,  // 34: piedotfun.v1.BasketTokenMarketService.CustomCreateBasketTokenMarket:output_type -> piedotfun.v1.BasketTokenMarket
	1,  // 35: piedotfun.v1.BasketTokenMarketService.GetBasketTokenMarket:output_type -> piedotfun.v1.BasketTokenMarket
	6,  // 36: piedotfun.v1.BasketTokenMarketService.ListBasketTokenMarkets:output_type -> piedotfun.v1.ListBasketTokensMarketsResponse
	8,  // 37: piedotfun.v1.BasketTokenMarketService.UpdateBasketTokenMarketComponents:output_type -> piedotfun.v1.UpdateBasketTokenMarketComponentsResponse
	10, // 38: piedotfun.v1.BasketTokenMarketService.ListBasketTokenTicks:output_type -> piedotfun.v1.ListBasketTokenTicksResponse
	33, // [33:39] is the sub-list for method output_type
	27, // [27:33] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_basket_token_market_proto_init() }
func file_pie_dot_fun_v1_basket_token_market_proto_init() {
	if File_pie_dot_fun_v1_basket_token_market_proto != nil {
		return
	}
	file_pie_dot_fun_v1_auth_proto_init()
	file_pie_dot_fun_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketTokenMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBasketTokenMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCreateBasketTokenMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBasketTokenMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokensMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokensMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasketTokenMarketComponentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasketTokenMarketComponentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokenTicksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokenTicksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCreateBasketTokenMarketRequest_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasketTokenMarketComponentsRequest_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pie_dot_fun_v1_basket_token_market_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_basket_token_market_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_basket_token_market_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_basket_token_market_proto_depIdxs,
		EnumInfos:         file_pie_dot_fun_v1_basket_token_market_proto_enumTypes,
		MessageInfos:      file_pie_dot_fun_v1_basket_token_market_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_basket_token_market_proto = out.File
	file_pie_dot_fun_v1_basket_token_market_proto_rawDesc = nil
	file_pie_dot_fun_v1_basket_token_market_proto_goTypes = nil
	file_pie_dot_fun_v1_basket_token_market_proto_depIdxs = nil
}
