// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/common.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChainType int32

const (
	// Unspecified blockchain type.
	ChainType_CHAIN_UNSPECIFIED ChainType = 0
	// Solana Mainnet blockchain.
	ChainType_SOLANA ChainType = 1
	// Solana Testnet blockchain.
	ChainType_SOLANA_TESTNET ChainType = 1001
	// Solana Devnet blockchain.
	ChainType_SOLANA_DEVNET    ChainType = 2001
	ChainType_ETHEREUM         ChainType = 2
	ChainType_ETHEREUM_SEPOLIA ChainType = 1002
	ChainType_BASE             ChainType = 3
	ChainType_BASE_SEPOLIA     ChainType = 1003
)

// Enum value maps for ChainType.
var (
	ChainType_name = map[int32]string{
		0:    "CHAIN_UNSPECIFIED",
		1:    "SOLANA",
		1001: "SOLANA_TESTNET",
		2001: "SOLANA_DEVNET",
		2:    "ETHEREUM",
		1002: "ETHEREUM_SEPOLIA",
		3:    "BASE",
		1003: "BASE_SEPOLIA",
	}
	ChainType_value = map[string]int32{
		"CHAIN_UNSPECIFIED": 0,
		"SOLANA":            1,
		"SOLANA_TESTNET":    1001,
		"SOLANA_DEVNET":     2001,
		"ETHEREUM":          2,
		"ETHEREUM_SEPOLIA":  1002,
		"BASE":              3,
		"BASE_SEPOLIA":      1003,
	}
)

func (x ChainType) Enum() *ChainType {
	p := new(ChainType)
	*p = x
	return p
}

func (x ChainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainType) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[0].Descriptor()
}

func (ChainType) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[0]
}

func (x ChainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainType.Descriptor instead.
func (ChainType) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{0}
}

type VMType int32

const (
	// Unspecified VM type.
	VMType_VM_UNSPECIFIED VMType = 0
	// Solana Virtual Machine.
	VMType_SVM VMType = 1
	// Ethereum Virtual Machine.
	VMType_EVM VMType = 2
)

// Enum value maps for VMType.
var (
	VMType_name = map[int32]string{
		0: "VM_UNSPECIFIED",
		1: "SVM",
		2: "EVM",
	}
	VMType_value = map[string]int32{
		"VM_UNSPECIFIED": 0,
		"SVM":            1,
		"EVM":            2,
	}
)

func (x VMType) Enum() *VMType {
	p := new(VMType)
	*p = x
	return p
}

func (x VMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VMType) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[1].Descriptor()
}

func (VMType) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[1]
}

func (x VMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VMType.Descriptor instead.
func (VMType) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{1}
}

type Currency int32

const (
	Currency_CURRENCY_UNSPECIFIED Currency = 0
	Currency_CURRENCY_SOL         Currency = 1
	Currency_CURRENCY_USDC        Currency = 2
	Currency_CURRENCY_ETH         Currency = 3
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "CURRENCY_UNSPECIFIED",
		1: "CURRENCY_SOL",
		2: "CURRENCY_USDC",
		3: "CURRENCY_ETH",
	}
	Currency_value = map[string]int32{
		"CURRENCY_UNSPECIFIED": 0,
		"CURRENCY_SOL":         1,
		"CURRENCY_USDC":        2,
		"CURRENCY_ETH":         3,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[2].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[2]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{2}
}

type PnLPeriod int32

const (
	PnLPeriod_PNL_PERIOD_UNSPECIFIED PnLPeriod = 0
	PnLPeriod_PNL_PERIOD_1_HOUR      PnLPeriod = 1
	PnLPeriod_PNL_PERIOD_24_HOUR     PnLPeriod = 2
	PnLPeriod_PNL_PERIOD_ALL_TIME    PnLPeriod = 5
)

// Enum value maps for PnLPeriod.
var (
	PnLPeriod_name = map[int32]string{
		0: "PNL_PERIOD_UNSPECIFIED",
		1: "PNL_PERIOD_1_HOUR",
		2: "PNL_PERIOD_24_HOUR",
		5: "PNL_PERIOD_ALL_TIME",
	}
	PnLPeriod_value = map[string]int32{
		"PNL_PERIOD_UNSPECIFIED": 0,
		"PNL_PERIOD_1_HOUR":      1,
		"PNL_PERIOD_24_HOUR":     2,
		"PNL_PERIOD_ALL_TIME":    5,
	}
)

func (x PnLPeriod) Enum() *PnLPeriod {
	p := new(PnLPeriod)
	*p = x
	return p
}

func (x PnLPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PnLPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[3].Descriptor()
}

func (PnLPeriod) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[3]
}

func (x PnLPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PnLPeriod.Descriptor instead.
func (PnLPeriod) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{3}
}

type PriceChangePeriod int32

const (
	PriceChangePeriod_PRICE_CHANGE_PERIOD_UNSPECIFIED PriceChangePeriod = 0
	PriceChangePeriod_PRICE_CHANGE_PERIOD_1_HOUR      PriceChangePeriod = 1
	PriceChangePeriod_PRICE_CHANGE_PERIOD_24_HOUR     PriceChangePeriod = 2
	PriceChangePeriod_PRICE_CHANGE_PERIOD_7_DAY       PriceChangePeriod = 3
	PriceChangePeriod_PRICE_CHANGE_PERIOD_30_DAY      PriceChangePeriod = 4
	PriceChangePeriod_PRICE_CHANGE_PERIOD_ALL_TIME    PriceChangePeriod = 5
)

// Enum value maps for PriceChangePeriod.
var (
	PriceChangePeriod_name = map[int32]string{
		0: "PRICE_CHANGE_PERIOD_UNSPECIFIED",
		1: "PRICE_CHANGE_PERIOD_1_HOUR",
		2: "PRICE_CHANGE_PERIOD_24_HOUR",
		3: "PRICE_CHANGE_PERIOD_7_DAY",
		4: "PRICE_CHANGE_PERIOD_30_DAY",
		5: "PRICE_CHANGE_PERIOD_ALL_TIME",
	}
	PriceChangePeriod_value = map[string]int32{
		"PRICE_CHANGE_PERIOD_UNSPECIFIED": 0,
		"PRICE_CHANGE_PERIOD_1_HOUR":      1,
		"PRICE_CHANGE_PERIOD_24_HOUR":     2,
		"PRICE_CHANGE_PERIOD_7_DAY":       3,
		"PRICE_CHANGE_PERIOD_30_DAY":      4,
		"PRICE_CHANGE_PERIOD_ALL_TIME":    5,
	}
)

func (x PriceChangePeriod) Enum() *PriceChangePeriod {
	p := new(PriceChangePeriod)
	*p = x
	return p
}

func (x PriceChangePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceChangePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[4].Descriptor()
}

func (PriceChangePeriod) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[4]
}

func (x PriceChangePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceChangePeriod.Descriptor instead.
func (PriceChangePeriod) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{4}
}

type SNS_SNSType int32

const (
	SNS_SNS_TYPE_UNSPECIFIED SNS_SNSType = 0
	SNS_EMAIL                SNS_SNSType = 1
	SNS_GOOGLE               SNS_SNSType = 2
	SNS_TWITTER              SNS_SNSType = 3
)

// Enum value maps for SNS_SNSType.
var (
	SNS_SNSType_name = map[int32]string{
		0: "SNS_TYPE_UNSPECIFIED",
		1: "EMAIL",
		2: "GOOGLE",
		3: "TWITTER",
	}
	SNS_SNSType_value = map[string]int32{
		"SNS_TYPE_UNSPECIFIED": 0,
		"EMAIL":                1,
		"GOOGLE":               2,
		"TWITTER":              3,
	}
)

func (x SNS_SNSType) Enum() *SNS_SNSType {
	p := new(SNS_SNSType)
	*p = x
	return p
}

func (x SNS_SNSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNS_SNSType) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_common_proto_enumTypes[5].Descriptor()
}

func (SNS_SNSType) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_common_proto_enumTypes[5]
}

func (x SNS_SNSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNS_SNSType.Descriptor instead.
func (SNS_SNSType) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{7, 0}
}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormattedAmount string `protobuf:"bytes,1,opt,name=formatted_amount,json=formattedAmount,proto3" json:"formatted_amount,omitempty"`
	RawAmount       string `protobuf:"bytes,2,opt,name=raw_amount,json=rawAmount,proto3" json:"raw_amount,omitempty"`
	Decimals        uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Quantity) GetFormattedAmount() string {
	if x != nil {
		return x.FormattedAmount
	}
	return ""
}

func (x *Quantity) GetRawAmount() string {
	if x != nil {
		return x.RawAmount
	}
	return ""
}

func (x *Quantity) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency        Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=piedotfun.v1.Currency" json:"currency,omitempty"`
	FormattedAmount string   `protobuf:"bytes,2,opt,name=formatted_amount,json=formattedAmount,proto3" json:"formatted_amount,omitempty"`
	RawAmount       string   `protobuf:"bytes,3,opt,name=raw_amount,json=rawAmount,proto3" json:"raw_amount,omitempty"`
	Decimals        uint32   `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Money) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

func (x *Money) GetFormattedAmount() string {
	if x != nil {
		return x.FormattedAmount
	}
	return ""
}

func (x *Money) GetRawAmount() string {
	if x != nil {
		return x.RawAmount
	}
	return ""
}

func (x *Money) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type Percentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Percentage) Reset() {
	*x = Percentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentage) ProtoMessage() {}

func (x *Percentage) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentage.ProtoReflect.Descriptor instead.
func (*Percentage) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *Percentage) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PnLsByPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map from period to PnL
	Pnls map[string]*PnL `protobuf:"bytes,1,rep,name=pnls,proto3" json:"pnls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PnLsByPeriod) Reset() {
	*x = PnLsByPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnLsByPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnLsByPeriod) ProtoMessage() {}

func (x *PnLsByPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnLsByPeriod.ProtoReflect.Descriptor instead.
func (*PnLsByPeriod) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *PnLsByPeriod) GetPnls() map[string]*PnL {
	if x != nil {
		return x.Pnls
	}
	return nil
}

type PnL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NominalValue     *Money      `protobuf:"bytes,1,opt,name=nominal_value,json=nominalValue,proto3" json:"nominal_value,omitempty"`
	PercentageChange *Percentage `protobuf:"bytes,2,opt,name=percentage_change,json=percentageChange,proto3" json:"percentage_change,omitempty"`
	Period           PnLPeriod   `protobuf:"varint,3,opt,name=period,proto3,enum=piedotfun.v1.PnLPeriod" json:"period,omitempty"`
}

func (x *PnL) Reset() {
	*x = PnL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnL) ProtoMessage() {}

func (x *PnL) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnL.ProtoReflect.Descriptor instead.
func (*PnL) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *PnL) GetNominalValue() *Money {
	if x != nil {
		return x.NominalValue
	}
	return nil
}

func (x *PnL) GetPercentageChange() *Percentage {
	if x != nil {
		return x.PercentageChange
	}
	return nil
}

func (x *PnL) GetPeriod() PnLPeriod {
	if x != nil {
		return x.Period
	}
	return PnLPeriod_PNL_PERIOD_UNSPECIFIED
}

type PriceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NominalValue     *Money            `protobuf:"bytes,1,opt,name=nominal_value,json=nominalValue,proto3" json:"nominal_value,omitempty"`
	PercentageChange *Percentage       `protobuf:"bytes,2,opt,name=percentage_change,json=percentageChange,proto3" json:"percentage_change,omitempty"`
	Period           PriceChangePeriod `protobuf:"varint,3,opt,name=period,proto3,enum=piedotfun.v1.PriceChangePeriod" json:"period,omitempty"`
}

func (x *PriceChange) Reset() {
	*x = PriceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceChange) ProtoMessage() {}

func (x *PriceChange) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceChange.ProtoReflect.Descriptor instead.
func (*PriceChange) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *PriceChange) GetNominalValue() *Money {
	if x != nil {
		return x.NominalValue
	}
	return nil
}

func (x *PriceChange) GetPercentageChange() *Percentage {
	if x != nil {
		return x.PercentageChange
	}
	return nil
}

func (x *PriceChange) GetPeriod() PriceChangePeriod {
	if x != nil {
		return x.Period
	}
	return PriceChangePeriod_PRICE_CHANGE_PERIOD_UNSPECIFIED
}

type PriceChangesByPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PriceChangePeriod enum sring to PriceChange
	PriceChanges map[string]*PriceChange `protobuf:"bytes,1,rep,name=price_changes,json=priceChanges,proto3" json:"price_changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PriceChangesByPeriod) Reset() {
	*x = PriceChangesByPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceChangesByPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceChangesByPeriod) ProtoMessage() {}

func (x *PriceChangesByPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceChangesByPeriod.ProtoReflect.Descriptor instead.
func (*PriceChangesByPeriod) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *PriceChangesByPeriod) GetPriceChanges() map[string]*PriceChange {
	if x != nil {
		return x.PriceChanges
	}
	return nil
}

type SNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       SNS_SNSType `protobuf:"varint,1,opt,name=type,proto3,enum=piedotfun.v1.SNS_SNSType" json:"type,omitempty"`
	Name       string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProfileUrl string      `protobuf:"bytes,4,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`
}

func (x *SNS) Reset() {
	*x = SNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNS) ProtoMessage() {}

func (x *SNS) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNS.ProtoReflect.Descriptor instead.
func (*SNS) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *SNS) GetType() SNS_SNSType {
	if x != nil {
		return x.Type
	}
	return SNS_SNS_TYPE_UNSPECIFIED
}

func (x *SNS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SNS) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

var File_pie_dot_fun_v1_common_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_common_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22,
	0x22, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x6e, 0x4c, 0x73, 0x42, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6e, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6e, 0x4c, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x50,
	0x6e, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x6e, 0x6c, 0x73, 0x1a, 0x4a,
	0x0a, 0x09, 0x50, 0x6e, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e, 0x4c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x03, 0x50,
	0x6e, 0x4c, 0x12, 0x38, 0x0a, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6e, 0x4c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2,
	0x01, 0x0a, 0x03, 0x53, 0x4e, 0x53, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x53, 0x2e, 0x53, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x47, 0x0a, 0x07, 0x53, 0x4e,
	0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4e, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x4c, 0x41,
	0x4e, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0xe9, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x4f, 0x4c,
	0x41, 0x4e, 0x41, 0x5f, 0x44, 0x45, 0x56, 0x4e, 0x45, 0x54, 0x10, 0xd1, 0x0f, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10,
	0xea, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0c,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10, 0xeb, 0x07, 0x2a,
	0x2e, 0x0a, 0x06, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4d, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x56, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x56, 0x4d, 0x10, 0x02, 0x2a,
	0x5b, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x53, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x55, 0x53, 0x44, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x09,
	0x50, 0x6e, 0x4c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4e, 0x4c,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4e, 0x4c, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4e, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32, 0x34, 0x5f, 0x48, 0x4f,
	0x55, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4e, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x2a, 0xda, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x32, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_common_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_common_proto_rawDescData = file_pie_dot_fun_v1_common_proto_rawDesc
)

func file_pie_dot_fun_v1_common_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_common_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_common_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_common_proto_rawDescData
}

var file_pie_dot_fun_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pie_dot_fun_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pie_dot_fun_v1_common_proto_goTypes = []interface{}{
	(ChainType)(0),               // 0: piedotfun.v1.ChainType
	(VMType)(0),                  // 1: piedotfun.v1.VMType
	(Currency)(0),                // 2: piedotfun.v1.Currency
	(PnLPeriod)(0),               // 3: piedotfun.v1.PnLPeriod
	(PriceChangePeriod)(0),       // 4: piedotfun.v1.PriceChangePeriod
	(SNS_SNSType)(0),             // 5: piedotfun.v1.SNS.SNSType
	(*Quantity)(nil),             // 6: piedotfun.v1.Quantity
	(*Money)(nil),                // 7: piedotfun.v1.Money
	(*Percentage)(nil),           // 8: piedotfun.v1.Percentage
	(*PnLsByPeriod)(nil),         // 9: piedotfun.v1.PnLsByPeriod
	(*PnL)(nil),                  // 10: piedotfun.v1.PnL
	(*PriceChange)(nil),          // 11: piedotfun.v1.PriceChange
	(*PriceChangesByPeriod)(nil), // 12: piedotfun.v1.PriceChangesByPeriod
	(*SNS)(nil),                  // 13: piedotfun.v1.SNS
	nil,                          // 14: piedotfun.v1.PnLsByPeriod.PnlsEntry
	nil,                          // 15: piedotfun.v1.PriceChangesByPeriod.PriceChangesEntry
}
var file_pie_dot_fun_v1_common_proto_depIdxs = []int32{
	2,  // 0: piedotfun.v1.Money.currency:type_name -> piedotfun.v1.Currency
	14, // 1: piedotfun.v1.PnLsByPeriod.pnls:type_name -> piedotfun.v1.PnLsByPeriod.PnlsEntry
	7,  // 2: piedotfun.v1.PnL.nominal_value:type_name -> piedotfun.v1.Money
	8,  // 3: piedotfun.v1.PnL.percentage_change:type_name -> piedotfun.v1.Percentage
	3,  // 4: piedotfun.v1.PnL.period:type_name -> piedotfun.v1.PnLPeriod
	7,  // 5: piedotfun.v1.PriceChange.nominal_value:type_name -> piedotfun.v1.Money
	8,  // 6: piedotfun.v1.PriceChange.percentage_change:type_name -> piedotfun.v1.Percentage
	4,  // 7: piedotfun.v1.PriceChange.period:type_name -> piedotfun.v1.PriceChangePeriod
	15, // 8: piedotfun.v1.PriceChangesByPeriod.price_changes:type_name -> piedotfun.v1.PriceChangesByPeriod.PriceChangesEntry
	5,  // 9: piedotfun.v1.SNS.type:type_name -> piedotfun.v1.SNS.SNSType
	10, // 10: piedotfun.v1.PnLsByPeriod.PnlsEntry.value:type_name -> piedotfun.v1.PnL
	11, // 11: piedotfun.v1.PriceChangesByPeriod.PriceChangesEntry.value:type_name -> piedotfun.v1.PriceChange
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_common_proto_init() }
func file_pie_dot_fun_v1_common_proto_init() {
	if File_pie_dot_fun_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnLsByPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceChangesByPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pie_dot_fun_v1_common_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_common_proto_depIdxs,
		EnumInfos:         file_pie_dot_fun_v1_common_proto_enumTypes,
		MessageInfos:      file_pie_dot_fun_v1_common_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_common_proto = out.File
	file_pie_dot_fun_v1_common_proto_rawDesc = nil
	file_pie_dot_fun_v1_common_proto_goTypes = nil
	file_pie_dot_fun_v1_common_proto_depIdxs = nil
}
