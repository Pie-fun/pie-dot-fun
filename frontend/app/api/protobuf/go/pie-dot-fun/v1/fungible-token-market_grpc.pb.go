// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/fungible-token-market.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FungibleTokenMarketServiceClient is the client API for FungibleTokenMarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FungibleTokenMarketServiceClient interface {
	// GetFungibleTokenMarket returns the market for the given fungible token.
	GetFungibleTokenMarket(ctx context.Context, in *GetFungibleTokenMarketRequest, opts ...grpc.CallOption) (*FungibleTokenMarket, error)
	GetOrCreateFungibleTokenMarket(ctx context.Context, in *GetFungibleTokenMarketRequest, opts ...grpc.CallOption) (*FungibleTokenMarket, error)
	// ListFungibleTokenMarkets returns the list of markets for the given fungible tokens.
	ListFungibleTokenMarkets(ctx context.Context, in *ListFungibleTokensMarketsRequest, opts ...grpc.CallOption) (*ListFungibleTokensMarketsResponse, error)
}

type fungibleTokenMarketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFungibleTokenMarketServiceClient(cc grpc.ClientConnInterface) FungibleTokenMarketServiceClient {
	return &fungibleTokenMarketServiceClient{cc}
}

func (c *fungibleTokenMarketServiceClient) GetFungibleTokenMarket(ctx context.Context, in *GetFungibleTokenMarketRequest, opts ...grpc.CallOption) (*FungibleTokenMarket, error) {
	out := new(FungibleTokenMarket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.FungibleTokenMarketService/GetFungibleTokenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fungibleTokenMarketServiceClient) GetOrCreateFungibleTokenMarket(ctx context.Context, in *GetFungibleTokenMarketRequest, opts ...grpc.CallOption) (*FungibleTokenMarket, error) {
	out := new(FungibleTokenMarket)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.FungibleTokenMarketService/GetOrCreateFungibleTokenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fungibleTokenMarketServiceClient) ListFungibleTokenMarkets(ctx context.Context, in *ListFungibleTokensMarketsRequest, opts ...grpc.CallOption) (*ListFungibleTokensMarketsResponse, error) {
	out := new(ListFungibleTokensMarketsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.FungibleTokenMarketService/ListFungibleTokenMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FungibleTokenMarketServiceServer is the server API for FungibleTokenMarketService service.
// All implementations must embed UnimplementedFungibleTokenMarketServiceServer
// for forward compatibility
type FungibleTokenMarketServiceServer interface {
	// GetFungibleTokenMarket returns the market for the given fungible token.
	GetFungibleTokenMarket(context.Context, *GetFungibleTokenMarketRequest) (*FungibleTokenMarket, error)
	GetOrCreateFungibleTokenMarket(context.Context, *GetFungibleTokenMarketRequest) (*FungibleTokenMarket, error)
	// ListFungibleTokenMarkets returns the list of markets for the given fungible tokens.
	ListFungibleTokenMarkets(context.Context, *ListFungibleTokensMarketsRequest) (*ListFungibleTokensMarketsResponse, error)
	mustEmbedUnimplementedFungibleTokenMarketServiceServer()
}

// UnimplementedFungibleTokenMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFungibleTokenMarketServiceServer struct {
}

func (UnimplementedFungibleTokenMarketServiceServer) GetFungibleTokenMarket(context.Context, *GetFungibleTokenMarketRequest) (*FungibleTokenMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFungibleTokenMarket not implemented")
}
func (UnimplementedFungibleTokenMarketServiceServer) GetOrCreateFungibleTokenMarket(context.Context, *GetFungibleTokenMarketRequest) (*FungibleTokenMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateFungibleTokenMarket not implemented")
}
func (UnimplementedFungibleTokenMarketServiceServer) ListFungibleTokenMarkets(context.Context, *ListFungibleTokensMarketsRequest) (*ListFungibleTokensMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFungibleTokenMarkets not implemented")
}
func (UnimplementedFungibleTokenMarketServiceServer) mustEmbedUnimplementedFungibleTokenMarketServiceServer() {
}

// UnsafeFungibleTokenMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FungibleTokenMarketServiceServer will
// result in compilation errors.
type UnsafeFungibleTokenMarketServiceServer interface {
	mustEmbedUnimplementedFungibleTokenMarketServiceServer()
}

func RegisterFungibleTokenMarketServiceServer(s grpc.ServiceRegistrar, srv FungibleTokenMarketServiceServer) {
	s.RegisterService(&FungibleTokenMarketService_ServiceDesc, srv)
}

func _FungibleTokenMarketService_GetFungibleTokenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFungibleTokenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FungibleTokenMarketServiceServer).GetFungibleTokenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.FungibleTokenMarketService/GetFungibleTokenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FungibleTokenMarketServiceServer).GetFungibleTokenMarket(ctx, req.(*GetFungibleTokenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FungibleTokenMarketService_GetOrCreateFungibleTokenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFungibleTokenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FungibleTokenMarketServiceServer).GetOrCreateFungibleTokenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.FungibleTokenMarketService/GetOrCreateFungibleTokenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FungibleTokenMarketServiceServer).GetOrCreateFungibleTokenMarket(ctx, req.(*GetFungibleTokenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FungibleTokenMarketService_ListFungibleTokenMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFungibleTokensMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FungibleTokenMarketServiceServer).ListFungibleTokenMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.FungibleTokenMarketService/ListFungibleTokenMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FungibleTokenMarketServiceServer).ListFungibleTokenMarkets(ctx, req.(*ListFungibleTokensMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FungibleTokenMarketService_ServiceDesc is the grpc.ServiceDesc for FungibleTokenMarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FungibleTokenMarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.FungibleTokenMarketService",
	HandlerType: (*FungibleTokenMarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFungibleTokenMarket",
			Handler:    _FungibleTokenMarketService_GetFungibleTokenMarket_Handler,
		},
		{
			MethodName: "GetOrCreateFungibleTokenMarket",
			Handler:    _FungibleTokenMarketService_GetOrCreateFungibleTokenMarket_Handler,
		},
		{
			MethodName: "ListFungibleTokenMarkets",
			Handler:    _FungibleTokenMarketService_ListFungibleTokenMarkets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/fungible-token-market.proto",
}
