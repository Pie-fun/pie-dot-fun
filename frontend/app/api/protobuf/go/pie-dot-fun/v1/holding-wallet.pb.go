// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/holding-wallet.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHoldingWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the holding_wallet to retrieve.
	// Format: holdingWallets/{vm_type}/{address}
	HoldingWallet string `protobuf:"bytes,1,opt,name=holding_wallet,json=holdingWallet,proto3" json:"holding_wallet,omitempty"`
}

func (x *GetHoldingWalletRequest) Reset() {
	*x = GetHoldingWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldingWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldingWalletRequest) ProtoMessage() {}

func (x *GetHoldingWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldingWalletRequest.ProtoReflect.Descriptor instead.
func (*GetHoldingWalletRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *GetHoldingWalletRequest) GetHoldingWallet() string {
	if x != nil {
		return x.HoldingWallet
	}
	return ""
}

type ListHoldingWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of holdings to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListHoldingWallets` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * user
	//   - `=`
	//
	// * user="users/1"
	// * market_value_sol>=10
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListHoldingWalletsRequest) Reset() {
	*x = ListHoldingWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldingWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldingWalletsRequest) ProtoMessage() {}

func (x *ListHoldingWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldingWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListHoldingWalletsRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *ListHoldingWalletsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHoldingWalletsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHoldingWalletsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListHoldingWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldingWallets []*HoldingWallet `protobuf:"bytes,1,rep,name=holding_wallets,json=holdingWallets,proto3" json:"holding_wallets,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHoldingWalletsResponse) Reset() {
	*x = ListHoldingWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldingWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldingWalletsResponse) ProtoMessage() {}

func (x *ListHoldingWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldingWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListHoldingWalletsResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *ListHoldingWalletsResponse) GetHoldingWallets() []*HoldingWallet {
	if x != nil {
		return x.HoldingWallets
	}
	return nil
}

func (x *ListHoldingWalletsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type HoldingWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the holding_wallet.
	// Format: holdingWallets/{vm_type}/{address}
	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VmType  VMType  `protobuf:"varint,2,opt,name=vm_type,json=vmType,proto3,enum=piedotfun.v1.VMType" json:"vm_type,omitempty"`
	Address string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	User    *string `protobuf:"bytes,4,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *HoldingWallet) Reset() {
	*x = HoldingWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldingWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingWallet) ProtoMessage() {}

func (x *HoldingWallet) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingWallet.ProtoReflect.Descriptor instead.
func (*HoldingWallet) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_holding_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *HoldingWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HoldingWallet) GetVmType() VMType {
	if x != nil {
		return x.VmType
	}
	return VMType_VM_UNSPECIFIED
}

func (x *HoldingWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HoldingWallet) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

var File_pie_dot_fun_v1_holding_wallet_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_holding_wallet_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d,
	0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x76, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x3a,
	0x51, 0xea, 0x41, 0x4e, 0x0a, 0x28, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x22,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x7d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x32, 0xcf, 0x02, 0x0a, 0x14,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x4c, 0xda,
	0x41, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98,
	0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_holding_wallet_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_holding_wallet_proto_rawDescData = file_pie_dot_fun_v1_holding_wallet_proto_rawDesc
)

func file_pie_dot_fun_v1_holding_wallet_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_holding_wallet_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_holding_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_holding_wallet_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_holding_wallet_proto_rawDescData
}

var file_pie_dot_fun_v1_holding_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pie_dot_fun_v1_holding_wallet_proto_goTypes = []interface{}{
	(*GetHoldingWalletRequest)(nil),    // 0: piedotfun.v1.GetHoldingWalletRequest
	(*ListHoldingWalletsRequest)(nil),  // 1: piedotfun.v1.ListHoldingWalletsRequest
	(*ListHoldingWalletsResponse)(nil), // 2: piedotfun.v1.ListHoldingWalletsResponse
	(*HoldingWallet)(nil),              // 3: piedotfun.v1.HoldingWallet
	(VMType)(0),                        // 4: piedotfun.v1.VMType
}
var file_pie_dot_fun_v1_holding_wallet_proto_depIdxs = []int32{
	3, // 0: piedotfun.v1.ListHoldingWalletsResponse.holding_wallets:type_name -> piedotfun.v1.HoldingWallet
	4, // 1: piedotfun.v1.HoldingWallet.vm_type:type_name -> piedotfun.v1.VMType
	0, // 2: piedotfun.v1.HoldingWalletService.GetHoldingWallet:input_type -> piedotfun.v1.GetHoldingWalletRequest
	1, // 3: piedotfun.v1.HoldingWalletService.ListHoldingWallets:input_type -> piedotfun.v1.ListHoldingWalletsRequest
	3, // 4: piedotfun.v1.HoldingWalletService.GetHoldingWallet:output_type -> piedotfun.v1.HoldingWallet
	2, // 5: piedotfun.v1.HoldingWalletService.ListHoldingWallets:output_type -> piedotfun.v1.ListHoldingWalletsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_holding_wallet_proto_init() }
func file_pie_dot_fun_v1_holding_wallet_proto_init() {
	if File_pie_dot_fun_v1_holding_wallet_proto != nil {
		return
	}
	file_pie_dot_fun_v1_auth_proto_init()
	file_pie_dot_fun_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldingWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldingWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldingWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldingWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pie_dot_fun_v1_holding_wallet_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_holding_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_holding_wallet_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_holding_wallet_proto_depIdxs,
		MessageInfos:      file_pie_dot_fun_v1_holding_wallet_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_holding_wallet_proto = out.File
	file_pie_dot_fun_v1_holding_wallet_proto_rawDesc = nil
	file_pie_dot_fun_v1_holding_wallet_proto_goTypes = nil
	file_pie_dot_fun_v1_holding_wallet_proto_depIdxs = nil
}
