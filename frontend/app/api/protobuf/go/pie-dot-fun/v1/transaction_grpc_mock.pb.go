// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pie-dot-fun/v1/transaction.proto

package piedotfun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTransactionServiceClient is a mock of TransactionServiceClient interface.
type MockTransactionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceClientMockRecorder
}

// MockTransactionServiceClientMockRecorder is the mock recorder for MockTransactionServiceClient.
type MockTransactionServiceClientMockRecorder struct {
	mock *MockTransactionServiceClient
}

// NewMockTransactionServiceClient creates a new mock instance.
func NewMockTransactionServiceClient(ctrl *gomock.Controller) *MockTransactionServiceClient {
	mock := &MockTransactionServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceClient) EXPECT() *MockTransactionServiceClientMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionServiceClientMockRecorder) GetTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).GetTransaction), varargs...)
}

// ListTransactions mocks base method.
func (m *MockTransactionServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactions", varargs...)
	ret0, _ := ret[0].(*ListTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockTransactionServiceClientMockRecorder) ListTransactions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockTransactionServiceClient)(nil).ListTransactions), varargs...)
}

// MockTransactionServiceServer is a mock of TransactionServiceServer interface.
type MockTransactionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceServerMockRecorder
}

// MockTransactionServiceServerMockRecorder is the mock recorder for MockTransactionServiceServer.
type MockTransactionServiceServerMockRecorder struct {
	mock *MockTransactionServiceServer
}

// NewMockTransactionServiceServer creates a new mock instance.
func NewMockTransactionServiceServer(ctrl *gomock.Controller) *MockTransactionServiceServer {
	mock := &MockTransactionServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceServer) EXPECT() *MockTransactionServiceServerMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionServiceServer) GetTransaction(ctx context.Context, in *GetTransactionRequest) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, in)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionServiceServerMockRecorder) GetTransaction(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).GetTransaction), ctx, in)
}

// ListTransactions mocks base method.
func (m *MockTransactionServiceServer) ListTransactions(ctx context.Context, in *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, in)
	ret0, _ := ret[0].(*ListTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockTransactionServiceServerMockRecorder) ListTransactions(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockTransactionServiceServer)(nil).ListTransactions), ctx, in)
}
