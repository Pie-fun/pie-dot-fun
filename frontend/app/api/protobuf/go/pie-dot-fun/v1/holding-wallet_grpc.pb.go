// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/holding-wallet.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoldingWalletServiceClient is the client API for HoldingWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoldingWalletServiceClient interface {
	GetHoldingWallet(ctx context.Context, in *GetHoldingWalletRequest, opts ...grpc.CallOption) (*HoldingWallet, error)
	ListHoldingWallets(ctx context.Context, in *ListHoldingWalletsRequest, opts ...grpc.CallOption) (*ListHoldingWalletsResponse, error)
}

type holdingWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHoldingWalletServiceClient(cc grpc.ClientConnInterface) HoldingWalletServiceClient {
	return &holdingWalletServiceClient{cc}
}

func (c *holdingWalletServiceClient) GetHoldingWallet(ctx context.Context, in *GetHoldingWalletRequest, opts ...grpc.CallOption) (*HoldingWallet, error) {
	out := new(HoldingWallet)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.HoldingWalletService/GetHoldingWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdingWalletServiceClient) ListHoldingWallets(ctx context.Context, in *ListHoldingWalletsRequest, opts ...grpc.CallOption) (*ListHoldingWalletsResponse, error) {
	out := new(ListHoldingWalletsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.HoldingWalletService/ListHoldingWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoldingWalletServiceServer is the server API for HoldingWalletService service.
// All implementations must embed UnimplementedHoldingWalletServiceServer
// for forward compatibility
type HoldingWalletServiceServer interface {
	GetHoldingWallet(context.Context, *GetHoldingWalletRequest) (*HoldingWallet, error)
	ListHoldingWallets(context.Context, *ListHoldingWalletsRequest) (*ListHoldingWalletsResponse, error)
	mustEmbedUnimplementedHoldingWalletServiceServer()
}

// UnimplementedHoldingWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHoldingWalletServiceServer struct {
}

func (UnimplementedHoldingWalletServiceServer) GetHoldingWallet(context.Context, *GetHoldingWalletRequest) (*HoldingWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldingWallet not implemented")
}
func (UnimplementedHoldingWalletServiceServer) ListHoldingWallets(context.Context, *ListHoldingWalletsRequest) (*ListHoldingWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHoldingWallets not implemented")
}
func (UnimplementedHoldingWalletServiceServer) mustEmbedUnimplementedHoldingWalletServiceServer() {}

// UnsafeHoldingWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoldingWalletServiceServer will
// result in compilation errors.
type UnsafeHoldingWalletServiceServer interface {
	mustEmbedUnimplementedHoldingWalletServiceServer()
}

func RegisterHoldingWalletServiceServer(s grpc.ServiceRegistrar, srv HoldingWalletServiceServer) {
	s.RegisterService(&HoldingWalletService_ServiceDesc, srv)
}

func _HoldingWalletService_GetHoldingWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldingWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldingWalletServiceServer).GetHoldingWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.HoldingWalletService/GetHoldingWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldingWalletServiceServer).GetHoldingWallet(ctx, req.(*GetHoldingWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldingWalletService_ListHoldingWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHoldingWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldingWalletServiceServer).ListHoldingWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.HoldingWalletService/ListHoldingWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldingWalletServiceServer).ListHoldingWallets(ctx, req.(*ListHoldingWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HoldingWalletService_ServiceDesc is the grpc.ServiceDesc for HoldingWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HoldingWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.HoldingWalletService",
	HandlerType: (*HoldingWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHoldingWallet",
			Handler:    _HoldingWalletService_GetHoldingWallet_Handler,
		},
		{
			MethodName: "ListHoldingWallets",
			Handler:    _HoldingWalletService_ListHoldingWallets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/holding-wallet.proto",
}
