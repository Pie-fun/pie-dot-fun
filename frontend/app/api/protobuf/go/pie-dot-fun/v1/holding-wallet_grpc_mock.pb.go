// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pie-dot-fun/v1/holding-wallet.proto

package piedotfun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockHoldingWalletServiceClient is a mock of HoldingWalletServiceClient interface.
type MockHoldingWalletServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHoldingWalletServiceClientMockRecorder
}

// MockHoldingWalletServiceClientMockRecorder is the mock recorder for MockHoldingWalletServiceClient.
type MockHoldingWalletServiceClientMockRecorder struct {
	mock *MockHoldingWalletServiceClient
}

// NewMockHoldingWalletServiceClient creates a new mock instance.
func NewMockHoldingWalletServiceClient(ctrl *gomock.Controller) *MockHoldingWalletServiceClient {
	mock := &MockHoldingWalletServiceClient{ctrl: ctrl}
	mock.recorder = &MockHoldingWalletServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHoldingWalletServiceClient) EXPECT() *MockHoldingWalletServiceClientMockRecorder {
	return m.recorder
}

// GetHoldingWallet mocks base method.
func (m *MockHoldingWalletServiceClient) GetHoldingWallet(ctx context.Context, in *GetHoldingWalletRequest, opts ...grpc.CallOption) (*HoldingWallet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHoldingWallet", varargs...)
	ret0, _ := ret[0].(*HoldingWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHoldingWallet indicates an expected call of GetHoldingWallet.
func (mr *MockHoldingWalletServiceClientMockRecorder) GetHoldingWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHoldingWallet", reflect.TypeOf((*MockHoldingWalletServiceClient)(nil).GetHoldingWallet), varargs...)
}

// ListHoldingWallets mocks base method.
func (m *MockHoldingWalletServiceClient) ListHoldingWallets(ctx context.Context, in *ListHoldingWalletsRequest, opts ...grpc.CallOption) (*ListHoldingWalletsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHoldingWallets", varargs...)
	ret0, _ := ret[0].(*ListHoldingWalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoldingWallets indicates an expected call of ListHoldingWallets.
func (mr *MockHoldingWalletServiceClientMockRecorder) ListHoldingWallets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoldingWallets", reflect.TypeOf((*MockHoldingWalletServiceClient)(nil).ListHoldingWallets), varargs...)
}

// MockHoldingWalletServiceServer is a mock of HoldingWalletServiceServer interface.
type MockHoldingWalletServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHoldingWalletServiceServerMockRecorder
}

// MockHoldingWalletServiceServerMockRecorder is the mock recorder for MockHoldingWalletServiceServer.
type MockHoldingWalletServiceServerMockRecorder struct {
	mock *MockHoldingWalletServiceServer
}

// NewMockHoldingWalletServiceServer creates a new mock instance.
func NewMockHoldingWalletServiceServer(ctrl *gomock.Controller) *MockHoldingWalletServiceServer {
	mock := &MockHoldingWalletServiceServer{ctrl: ctrl}
	mock.recorder = &MockHoldingWalletServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHoldingWalletServiceServer) EXPECT() *MockHoldingWalletServiceServerMockRecorder {
	return m.recorder
}

// GetHoldingWallet mocks base method.
func (m *MockHoldingWalletServiceServer) GetHoldingWallet(ctx context.Context, in *GetHoldingWalletRequest) (*HoldingWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHoldingWallet", ctx, in)
	ret0, _ := ret[0].(*HoldingWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHoldingWallet indicates an expected call of GetHoldingWallet.
func (mr *MockHoldingWalletServiceServerMockRecorder) GetHoldingWallet(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHoldingWallet", reflect.TypeOf((*MockHoldingWalletServiceServer)(nil).GetHoldingWallet), ctx, in)
}

// ListHoldingWallets mocks base method.
func (m *MockHoldingWalletServiceServer) ListHoldingWallets(ctx context.Context, in *ListHoldingWalletsRequest) (*ListHoldingWalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoldingWallets", ctx, in)
	ret0, _ := ret[0].(*ListHoldingWalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoldingWallets indicates an expected call of ListHoldingWallets.
func (mr *MockHoldingWalletServiceServerMockRecorder) ListHoldingWallets(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoldingWallets", reflect.TypeOf((*MockHoldingWalletServiceServer)(nil).ListHoldingWallets), ctx, in)
}
