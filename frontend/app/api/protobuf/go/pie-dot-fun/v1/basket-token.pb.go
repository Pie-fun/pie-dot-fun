// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pie-dot-fun/v1/basket-token.proto

package piedotfun

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BasketTokenState int32

const (
	BasketTokenState_BASKET_TOKEN_STATE_UNSPECIFIED BasketTokenState = 0
	BasketTokenState_CREATED                        BasketTokenState = 1 // 온체인 상에서만 생성되고, 아직 우리 서비스에서 리스팅은 되지 않은 상태
	BasketTokenState_LISTED                         BasketTokenState = 2 // 우리 서비스에서 리스팅된 상태
)

// Enum value maps for BasketTokenState.
var (
	BasketTokenState_name = map[int32]string{
		0: "BASKET_TOKEN_STATE_UNSPECIFIED",
		1: "CREATED",
		2: "LISTED",
	}
	BasketTokenState_value = map[string]int32{
		"BASKET_TOKEN_STATE_UNSPECIFIED": 0,
		"CREATED":                        1,
		"LISTED":                         2,
	}
)

func (x BasketTokenState) Enum() *BasketTokenState {
	p := new(BasketTokenState)
	*p = x
	return p
}

func (x BasketTokenState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BasketTokenState) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_basket_token_proto_enumTypes[0].Descriptor()
}

func (BasketTokenState) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_basket_token_proto_enumTypes[0]
}

func (x BasketTokenState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BasketTokenState.Descriptor instead.
func (BasketTokenState) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{0}
}

type TokenStrategy int32

const (
	TokenStrategy_TOKEN_STRATEGY_UNSPECIFIED TokenStrategy = 0
	TokenStrategy_MARKET_CAP_WEIGHTED        TokenStrategy = 1
	TokenStrategy_EQUAL_WEIGHTED             TokenStrategy = 2
	TokenStrategy_FACTOR_WEIGHTED            TokenStrategy = 3
	TokenStrategy_FUNDAMENTAL_WEIGHTED       TokenStrategy = 4
	TokenStrategy_RISK_WEIGHTED              TokenStrategy = 5
	TokenStrategy_MOMENTUM_WEIGHTED          TokenStrategy = 6
	TokenStrategy_CUSTOM_WEIGHTED            TokenStrategy = 7
)

// Enum value maps for TokenStrategy.
var (
	TokenStrategy_name = map[int32]string{
		0: "TOKEN_STRATEGY_UNSPECIFIED",
		1: "MARKET_CAP_WEIGHTED",
		2: "EQUAL_WEIGHTED",
		3: "FACTOR_WEIGHTED",
		4: "FUNDAMENTAL_WEIGHTED",
		5: "RISK_WEIGHTED",
		6: "MOMENTUM_WEIGHTED",
		7: "CUSTOM_WEIGHTED",
	}
	TokenStrategy_value = map[string]int32{
		"TOKEN_STRATEGY_UNSPECIFIED": 0,
		"MARKET_CAP_WEIGHTED":        1,
		"EQUAL_WEIGHTED":             2,
		"FACTOR_WEIGHTED":            3,
		"FUNDAMENTAL_WEIGHTED":       4,
		"RISK_WEIGHTED":              5,
		"MOMENTUM_WEIGHTED":          6,
		"CUSTOM_WEIGHTED":            7,
	}
)

func (x TokenStrategy) Enum() *TokenStrategy {
	p := new(TokenStrategy)
	*p = x
	return p
}

func (x TokenStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_basket_token_proto_enumTypes[1].Descriptor()
}

func (TokenStrategy) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_basket_token_proto_enumTypes[1]
}

func (x TokenStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenStrategy.Descriptor instead.
func (TokenStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{1}
}

type RebalanceFrequency int32

const (
	RebalanceFrequency_REBALANCE_FREQUENCY_UNSPECIFIED RebalanceFrequency = 0
	RebalanceFrequency_MANUAL                          RebalanceFrequency = 1
	RebalanceFrequency_DAILY                           RebalanceFrequency = 2
	RebalanceFrequency_WEEKLY                          RebalanceFrequency = 3
	RebalanceFrequency_MONTHLY                         RebalanceFrequency = 4
)

// Enum value maps for RebalanceFrequency.
var (
	RebalanceFrequency_name = map[int32]string{
		0: "REBALANCE_FREQUENCY_UNSPECIFIED",
		1: "MANUAL",
		2: "DAILY",
		3: "WEEKLY",
		4: "MONTHLY",
	}
	RebalanceFrequency_value = map[string]int32{
		"REBALANCE_FREQUENCY_UNSPECIFIED": 0,
		"MANUAL":                          1,
		"DAILY":                           2,
		"WEEKLY":                          3,
		"MONTHLY":                         4,
	}
)

func (x RebalanceFrequency) Enum() *RebalanceFrequency {
	p := new(RebalanceFrequency)
	*p = x
	return p
}

func (x RebalanceFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RebalanceFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_pie_dot_fun_v1_basket_token_proto_enumTypes[2].Descriptor()
}

func (RebalanceFrequency) Type() protoreflect.EnumType {
	return &file_pie_dot_fun_v1_basket_token_proto_enumTypes[2]
}

func (x RebalanceFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RebalanceFrequency.Descriptor instead.
func (RebalanceFrequency) EnumDescriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{2}
}

type GetBasketTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the basket token to retrieve.
	// Format : "basketTokens/{chain}/{token_address}"
	BasketToken string `protobuf:"bytes,1,opt,name=basket_token,json=basketToken,proto3" json:"basket_token,omitempty"`
}

func (x *GetBasketTokenRequest) Reset() {
	*x = GetBasketTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBasketTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasketTokenRequest) ProtoMessage() {}

func (x *GetBasketTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasketTokenRequest.ProtoReflect.Descriptor instead.
func (*GetBasketTokenRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{0}
}

func (x *GetBasketTokenRequest) GetBasketToken() string {
	if x != nil {
		return x.BasketToken
	}
	return ""
}

// ListBasketTokensRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//
//	aip.dev/not-precedent: We need to do this because reasons. --)
//
// (-- api-linter: core::0132::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: We really need this field because reasons. --)
type ListBasketTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of basket tokens to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListBasketTokens` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * name
	//   - `=`
	//
	// * chain
	//   - `=`
	//
	// * display_name
	//   - `=`
	//
	// * symbol
	//   - `=`
	//
	// * state
	//   - `=` (CREATED, LISTED)
	//
	// * onchain_id
	//   - `=`
	//
	// * market_cap_sol
	//   - `=`, `>`, `<`, `>=`, `<=`
	//
	// * market_cap_usdc
	//   - `=`, `>`, `<`, `>=`, `<=`
	//
	// Examples
	// * name="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
	// * chain=SOLANA
	// * symbol="MURAD"
	// * state=LISTED
	// * onchain_id="10"
	// * market_cap_sol>=1000000
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// One or more fields to compare and use to sort the output. (optional)
	// Default order for a field is descending by id
	// To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
	//
	// Reference
	// * https://google.aip.dev/132#ordering.
	//
	// Supported Fields
	// * "create_time", "market_cap_sol", "market_cap_usdc"
	//
	// Examples
	// * order_by=create_time desc
	// * order_by=market_cap_sol desc
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListBasketTokensRequest) Reset() {
	*x = ListBasketTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokensRequest) ProtoMessage() {}

func (x *ListBasketTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokensRequest.ProtoReflect.Descriptor instead.
func (*ListBasketTokensRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{1}
}

func (x *ListBasketTokensRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBasketTokensRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBasketTokensRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListBasketTokensRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListBasketTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasketTokens []*BasketToken `protobuf:"bytes,1,rep,name=basket_tokens,json=basketTokens,proto3" json:"basket_tokens,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBasketTokensResponse) Reset() {
	*x = ListBasketTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasketTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasketTokensResponse) ProtoMessage() {}

func (x *ListBasketTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasketTokensResponse.ProtoReflect.Descriptor instead.
func (*ListBasketTokensResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{2}
}

func (x *ListBasketTokensResponse) GetBasketTokens() []*BasketToken {
	if x != nil {
		return x.BasketTokens
	}
	return nil
}

func (x *ListBasketTokensResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListRebalancingHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the basket token to retrieve.
	// Format : "basketTokens/{chain}/{token_address}"
	BasketToken string `protobuf:"bytes,1,opt,name=basket_token,json=basketToken,proto3" json:"basket_token,omitempty"`
	// The maximum number of histories to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 rows will be returned.
	// The maximum value is 1024; values above 1024 will be coerced to 1024.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. Use the value obtained from
	// `next_page_token` in the previous response in order to request
	// the next page of results.
	//
	// When paginating, all other parameters provided to `ListUsers` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Available Sequence and Operator
	// * components_changed
	//   - `negation`
	//
	// Examples
	// * filter=components_changed
	// * filter=NOT components_changed
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRebalancingHistoriesRequest) Reset() {
	*x = ListRebalancingHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRebalancingHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRebalancingHistoriesRequest) ProtoMessage() {}

func (x *ListRebalancingHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRebalancingHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ListRebalancingHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{3}
}

func (x *ListRebalancingHistoriesRequest) GetBasketToken() string {
	if x != nil {
		return x.BasketToken
	}
	return ""
}

func (x *ListRebalancingHistoriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRebalancingHistoriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRebalancingHistoriesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListRebalancingHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebalancingHistories []*BasketTokenRebanlancingHistory `protobuf:"bytes,1,rep,name=rebalancing_histories,json=rebalancingHistories,proto3" json:"rebalancing_histories,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request. `next_page_token` is not returned for the last
	// page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRebalancingHistoriesResponse) Reset() {
	*x = ListRebalancingHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRebalancingHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRebalancingHistoriesResponse) ProtoMessage() {}

func (x *ListRebalancingHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRebalancingHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ListRebalancingHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{4}
}

func (x *ListRebalancingHistoriesResponse) GetRebalancingHistories() []*BasketTokenRebanlancingHistory {
	if x != nil {
		return x.RebalancingHistories
	}
	return nil
}

func (x *ListRebalancingHistoriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BasketToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format : "basketTokens/{chain}/{token_address}"
	Name               string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chain              ChainType          `protobuf:"varint,2,opt,name=chain,proto3,enum=piedotfun.v1.ChainType" json:"chain,omitempty"`
	Address            string             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	DisplayName        string             `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Symbol             string             `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	IconImageUri       string             `protobuf:"bytes,6,opt,name=icon_image_uri,json=iconImageUri,proto3" json:"icon_image_uri,omitempty"`
	Description        string             `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	OneLineDescription string             `protobuf:"bytes,8,opt,name=one_line_description,json=oneLineDescription,proto3" json:"one_line_description,omitempty"`
	State              BasketTokenState   `protobuf:"varint,9,opt,name=state,proto3,enum=piedotfun.v1.BasketTokenState" json:"state,omitempty"`
	Strategy           TokenStrategy      `protobuf:"varint,10,opt,name=strategy,proto3,enum=piedotfun.v1.TokenStrategy" json:"strategy,omitempty"`
	RebalanceFrequency RebalanceFrequency `protobuf:"varint,11,opt,name=rebalance_frequency,json=rebalanceFrequency,proto3,enum=piedotfun.v1.RebalanceFrequency" json:"rebalance_frequency,omitempty"`
	IsRebalancing      bool               `protobuf:"varint,12,opt,name=is_rebalancing,json=isRebalancing,proto3" json:"is_rebalancing,omitempty"`
	Components         []*Component       `protobuf:"bytes,15,rep,name=components,proto3" json:"components,omitempty"`
	// The creator of the basket token
	// Format : "users/{user_id}"
	Creator           string                 `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	LastRebalanceTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=last_rebalance_time,json=lastRebalanceTime,proto3" json:"last_rebalance_time,omitempty"`
	TotalSupply       *Quantity              `protobuf:"bytes,20,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	TotalHolders      uint64                 `protobuf:"varint,21,opt,name=total_holders,json=totalHolders,proto3" json:"total_holders,omitempty"`
	OnchainId         string                 `protobuf:"bytes,22,opt,name=onchain_id,json=onchainId,proto3" json:"onchain_id,omitempty"`
}

func (x *BasketToken) Reset() {
	*x = BasketToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketToken) ProtoMessage() {}

func (x *BasketToken) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketToken.ProtoReflect.Descriptor instead.
func (*BasketToken) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{5}
}

func (x *BasketToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasketToken) GetChain() ChainType {
	if x != nil {
		return x.Chain
	}
	return ChainType_CHAIN_UNSPECIFIED
}

func (x *BasketToken) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BasketToken) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BasketToken) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BasketToken) GetIconImageUri() string {
	if x != nil {
		return x.IconImageUri
	}
	return ""
}

func (x *BasketToken) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BasketToken) GetOneLineDescription() string {
	if x != nil {
		return x.OneLineDescription
	}
	return ""
}

func (x *BasketToken) GetState() BasketTokenState {
	if x != nil {
		return x.State
	}
	return BasketTokenState_BASKET_TOKEN_STATE_UNSPECIFIED
}

func (x *BasketToken) GetStrategy() TokenStrategy {
	if x != nil {
		return x.Strategy
	}
	return TokenStrategy_TOKEN_STRATEGY_UNSPECIFIED
}

func (x *BasketToken) GetRebalanceFrequency() RebalanceFrequency {
	if x != nil {
		return x.RebalanceFrequency
	}
	return RebalanceFrequency_REBALANCE_FREQUENCY_UNSPECIFIED
}

func (x *BasketToken) GetIsRebalancing() bool {
	if x != nil {
		return x.IsRebalancing
	}
	return false
}

func (x *BasketToken) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *BasketToken) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *BasketToken) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BasketToken) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *BasketToken) GetLastRebalanceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRebalanceTime
	}
	return nil
}

func (x *BasketToken) GetTotalSupply() *Quantity {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

func (x *BasketToken) GetTotalHolders() uint64 {
	if x != nil {
		return x.TotalHolders
	}
	return 0
}

func (x *BasketToken) GetOnchainId() string {
	if x != nil {
		return x.OnchainId
	}
	return ""
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format : "fungibleTokens/{chain}/{token_address}"
	FungibleToken string    `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token,omitempty"`
	Chain         ChainType `protobuf:"varint,2,opt,name=chain,proto3,enum=piedotfun.v1.ChainType" json:"chain,omitempty"`
	Address       string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The weight of the component in the basket token.
	// The weight is a percentage of the total value within the basket token. (0.0 ~ 100.0 %)
	Weight *Percentage `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{6}
}

func (x *Component) GetFungibleToken() string {
	if x != nil {
		return x.FungibleToken
	}
	return ""
}

func (x *Component) GetChain() ChainType {
	if x != nil {
		return x.Chain
	}
	return ChainType_CHAIN_UNSPECIFIED
}

func (x *Component) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Component) GetWeight() *Percentage {
	if x != nil {
		return x.Weight
	}
	return nil
}

type BasketTokenRebanlancingHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxSignatures      []string               `protobuf:"bytes,1,rep,name=tx_signatures,json=txSignatures,proto3" json:"tx_signatures,omitempty"`
	BeforeComponents  []*Component           `protobuf:"bytes,2,rep,name=before_components,json=beforeComponents,proto3" json:"before_components,omitempty"`
	AfterComponents   []*Component           `protobuf:"bytes,3,rep,name=after_components,json=afterComponents,proto3" json:"after_components,omitempty"`
	RebalanceTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=rebalance_time,json=rebalanceTime,proto3" json:"rebalance_time,omitempty"`
	ComponentsChanged bool                   `protobuf:"varint,5,opt,name=components_changed,json=componentsChanged,proto3" json:"components_changed,omitempty"`
}

func (x *BasketTokenRebanlancingHistory) Reset() {
	*x = BasketTokenRebanlancingHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketTokenRebanlancingHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketTokenRebanlancingHistory) ProtoMessage() {}

func (x *BasketTokenRebanlancingHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pie_dot_fun_v1_basket_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketTokenRebanlancingHistory.ProtoReflect.Descriptor instead.
func (*BasketTokenRebanlancingHistory) Descriptor() ([]byte, []int) {
	return file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP(), []int{7}
}

func (x *BasketTokenRebanlancingHistory) GetTxSignatures() []string {
	if x != nil {
		return x.TxSignatures
	}
	return nil
}

func (x *BasketTokenRebanlancingHistory) GetBeforeComponents() []*Component {
	if x != nil {
		return x.BeforeComponents
	}
	return nil
}

func (x *BasketTokenRebanlancingHistory) GetAfterComponents() []*Component {
	if x != nil {
		return x.AfterComponents
	}
	return nil
}

func (x *BasketTokenRebanlancingHistory) GetRebalanceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RebalanceTime
	}
	return nil
}

func (x *BasketTokenRebanlancingHistory) GetComponentsChanged() bool {
	if x != nil {
		return x.ComponentsChanged
	}
	return false
}

var File_pie_dot_fun_v1_basket_token_proto protoreflect.FileDescriptor

var file_pie_dot_fun_v1_basket_token_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a,
	0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xc9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x41, 0x28, 0x0a, 0x26, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x62, 0x61, 0x6e, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x72,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x83, 0x09, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x12, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41,
	0x21, 0x0a, 0x1f, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x65, 0x64,
	0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x3a, 0x4b, 0xea, 0x41, 0x48, 0x0a, 0x26, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1e, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x22, 0xdc, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x54, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xc1, 0x02, 0x0a, 0x1e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f,
	0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x2a, 0x4f, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x53, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xca, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x55, 0x4e,
	0x44, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4d, 0x45, 0x4e, 0x54,
	0x55, 0x4d, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44,
	0x10, 0x07, 0x2a, 0x69, 0x0a, 0x12, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x32, 0x8e, 0x04,
	0x0a, 0x12, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74,
	0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0xda, 0x41, 0x0c, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3d, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x12,
	0x87, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69,
	0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2d, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4c, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3d, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x3e,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6f, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x2d, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x65, 0x2d, 0x64, 0x6f, 0x74, 0x2d, 0x66, 0x75,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x69, 0x65, 0x64, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pie_dot_fun_v1_basket_token_proto_rawDescOnce sync.Once
	file_pie_dot_fun_v1_basket_token_proto_rawDescData = file_pie_dot_fun_v1_basket_token_proto_rawDesc
)

func file_pie_dot_fun_v1_basket_token_proto_rawDescGZIP() []byte {
	file_pie_dot_fun_v1_basket_token_proto_rawDescOnce.Do(func() {
		file_pie_dot_fun_v1_basket_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_pie_dot_fun_v1_basket_token_proto_rawDescData)
	})
	return file_pie_dot_fun_v1_basket_token_proto_rawDescData
}

var file_pie_dot_fun_v1_basket_token_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pie_dot_fun_v1_basket_token_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pie_dot_fun_v1_basket_token_proto_goTypes = []interface{}{
	(BasketTokenState)(0),                    // 0: piedotfun.v1.BasketTokenState
	(TokenStrategy)(0),                       // 1: piedotfun.v1.TokenStrategy
	(RebalanceFrequency)(0),                  // 2: piedotfun.v1.RebalanceFrequency
	(*GetBasketTokenRequest)(nil),            // 3: piedotfun.v1.GetBasketTokenRequest
	(*ListBasketTokensRequest)(nil),          // 4: piedotfun.v1.ListBasketTokensRequest
	(*ListBasketTokensResponse)(nil),         // 5: piedotfun.v1.ListBasketTokensResponse
	(*ListRebalancingHistoriesRequest)(nil),  // 6: piedotfun.v1.ListRebalancingHistoriesRequest
	(*ListRebalancingHistoriesResponse)(nil), // 7: piedotfun.v1.ListRebalancingHistoriesResponse
	(*BasketToken)(nil),                      // 8: piedotfun.v1.BasketToken
	(*Component)(nil),                        // 9: piedotfun.v1.Component
	(*BasketTokenRebanlancingHistory)(nil),   // 10: piedotfun.v1.BasketTokenRebanlancingHistory
	(ChainType)(0),                           // 11: piedotfun.v1.ChainType
	(*timestamppb.Timestamp)(nil),            // 12: google.protobuf.Timestamp
	(*Quantity)(nil),                         // 13: piedotfun.v1.Quantity
	(*Percentage)(nil),                       // 14: piedotfun.v1.Percentage
}
var file_pie_dot_fun_v1_basket_token_proto_depIdxs = []int32{
	8,  // 0: piedotfun.v1.ListBasketTokensResponse.basket_tokens:type_name -> piedotfun.v1.BasketToken
	10, // 1: piedotfun.v1.ListRebalancingHistoriesResponse.rebalancing_histories:type_name -> piedotfun.v1.BasketTokenRebanlancingHistory
	11, // 2: piedotfun.v1.BasketToken.chain:type_name -> piedotfun.v1.ChainType
	0,  // 3: piedotfun.v1.BasketToken.state:type_name -> piedotfun.v1.BasketTokenState
	1,  // 4: piedotfun.v1.BasketToken.strategy:type_name -> piedotfun.v1.TokenStrategy
	2,  // 5: piedotfun.v1.BasketToken.rebalance_frequency:type_name -> piedotfun.v1.RebalanceFrequency
	9,  // 6: piedotfun.v1.BasketToken.components:type_name -> piedotfun.v1.Component
	12, // 7: piedotfun.v1.BasketToken.create_time:type_name -> google.protobuf.Timestamp
	12, // 8: piedotfun.v1.BasketToken.expire_time:type_name -> google.protobuf.Timestamp
	12, // 9: piedotfun.v1.BasketToken.last_rebalance_time:type_name -> google.protobuf.Timestamp
	13, // 10: piedotfun.v1.BasketToken.total_supply:type_name -> piedotfun.v1.Quantity
	11, // 11: piedotfun.v1.Component.chain:type_name -> piedotfun.v1.ChainType
	14, // 12: piedotfun.v1.Component.weight:type_name -> piedotfun.v1.Percentage
	9,  // 13: piedotfun.v1.BasketTokenRebanlancingHistory.before_components:type_name -> piedotfun.v1.Component
	9,  // 14: piedotfun.v1.BasketTokenRebanlancingHistory.after_components:type_name -> piedotfun.v1.Component
	12, // 15: piedotfun.v1.BasketTokenRebanlancingHistory.rebalance_time:type_name -> google.protobuf.Timestamp
	3,  // 16: piedotfun.v1.BasketTokenService.GetBasketToken:input_type -> piedotfun.v1.GetBasketTokenRequest
	4,  // 17: piedotfun.v1.BasketTokenService.ListBasketTokens:input_type -> piedotfun.v1.ListBasketTokensRequest
	6,  // 18: piedotfun.v1.BasketTokenService.ListBasketTokenRebalancingHistories:input_type -> piedotfun.v1.ListRebalancingHistoriesRequest
	8,  // 19: piedotfun.v1.BasketTokenService.GetBasketToken:output_type -> piedotfun.v1.BasketToken
	5,  // 20: piedotfun.v1.BasketTokenService.ListBasketTokens:output_type -> piedotfun.v1.ListBasketTokensResponse
	7,  // 21: piedotfun.v1.BasketTokenService.ListBasketTokenRebalancingHistories:output_type -> piedotfun.v1.ListRebalancingHistoriesResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pie_dot_fun_v1_basket_token_proto_init() }
func file_pie_dot_fun_v1_basket_token_proto_init() {
	if File_pie_dot_fun_v1_basket_token_proto != nil {
		return
	}
	file_pie_dot_fun_v1_auth_proto_init()
	file_pie_dot_fun_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBasketTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasketTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRebalancingHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRebalancingHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pie_dot_fun_v1_basket_token_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketTokenRebanlancingHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pie_dot_fun_v1_basket_token_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pie_dot_fun_v1_basket_token_proto_goTypes,
		DependencyIndexes: file_pie_dot_fun_v1_basket_token_proto_depIdxs,
		EnumInfos:         file_pie_dot_fun_v1_basket_token_proto_enumTypes,
		MessageInfos:      file_pie_dot_fun_v1_basket_token_proto_msgTypes,
	}.Build()
	File_pie_dot_fun_v1_basket_token_proto = out.File
	file_pie_dot_fun_v1_basket_token_proto_rawDesc = nil
	file_pie_dot_fun_v1_basket_token_proto_goTypes = nil
	file_pie_dot_fun_v1_basket_token_proto_depIdxs = nil
}
