// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pie-dot-fun/v1/pie-program.proto

package piedotfun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPieProgramServiceClient is a mock of PieProgramServiceClient interface.
type MockPieProgramServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPieProgramServiceClientMockRecorder
}

// MockPieProgramServiceClientMockRecorder is the mock recorder for MockPieProgramServiceClient.
type MockPieProgramServiceClientMockRecorder struct {
	mock *MockPieProgramServiceClient
}

// NewMockPieProgramServiceClient creates a new mock instance.
func NewMockPieProgramServiceClient(ctrl *gomock.Controller) *MockPieProgramServiceClient {
	mock := &MockPieProgramServiceClient{ctrl: ctrl}
	mock.recorder = &MockPieProgramServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPieProgramServiceClient) EXPECT() *MockPieProgramServiceClientMockRecorder {
	return m.recorder
}

// BatchCreateTokenPools mocks base method.
func (m *MockPieProgramServiceClient) BatchCreateTokenPools(ctx context.Context, in *BatchCreateTokenPoolsRequest, opts ...grpc.CallOption) (*BatchCreateTokenPoolsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateTokenPools", varargs...)
	ret0, _ := ret[0].(*BatchCreateTokenPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateTokenPools indicates an expected call of BatchCreateTokenPools.
func (mr *MockPieProgramServiceClientMockRecorder) BatchCreateTokenPools(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateTokenPools", reflect.TypeOf((*MockPieProgramServiceClient)(nil).BatchCreateTokenPools), varargs...)
}

// BuildMintTx mocks base method.
func (m *MockPieProgramServiceClient) BuildMintTx(ctx context.Context, in *BuildMintTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildMintTx", varargs...)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMintTx indicates an expected call of BuildMintTx.
func (mr *MockPieProgramServiceClientMockRecorder) BuildMintTx(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMintTx", reflect.TypeOf((*MockPieProgramServiceClient)(nil).BuildMintTx), varargs...)
}

// BuildRebalanceTx mocks base method.
func (m *MockPieProgramServiceClient) BuildRebalanceTx(ctx context.Context, in *BuildRebalanceTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildRebalanceTx", varargs...)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRebalanceTx indicates an expected call of BuildRebalanceTx.
func (mr *MockPieProgramServiceClientMockRecorder) BuildRebalanceTx(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRebalanceTx", reflect.TypeOf((*MockPieProgramServiceClient)(nil).BuildRebalanceTx), varargs...)
}

// BuildRedeemTx mocks base method.
func (m *MockPieProgramServiceClient) BuildRedeemTx(ctx context.Context, in *BuildRedeemTxRequest, opts ...grpc.CallOption) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildRedeemTx", varargs...)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRedeemTx indicates an expected call of BuildRedeemTx.
func (mr *MockPieProgramServiceClientMockRecorder) BuildRedeemTx(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRedeemTx", reflect.TypeOf((*MockPieProgramServiceClient)(nil).BuildRedeemTx), varargs...)
}

// CommandCreateBasket mocks base method.
func (m *MockPieProgramServiceClient) CommandCreateBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*Basket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandCreateBasket", varargs...)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandCreateBasket indicates an expected call of CommandCreateBasket.
func (mr *MockPieProgramServiceClientMockRecorder) CommandCreateBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandCreateBasket", reflect.TypeOf((*MockPieProgramServiceClient)(nil).CommandCreateBasket), varargs...)
}

// CommandStartRebalanceBasket mocks base method.
func (m *MockPieProgramServiceClient) CommandStartRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandStartRebalanceBasket", varargs...)
	ret0, _ := ret[0].(*TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStartRebalanceBasket indicates an expected call of CommandStartRebalanceBasket.
func (mr *MockPieProgramServiceClientMockRecorder) CommandStartRebalanceBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStartRebalanceBasket", reflect.TypeOf((*MockPieProgramServiceClient)(nil).CommandStartRebalanceBasket), varargs...)
}

// CommandStopRebalanceBasket mocks base method.
func (m *MockPieProgramServiceClient) CommandStopRebalanceBasket(ctx context.Context, in *Basket, opts ...grpc.CallOption) (*TxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandStopRebalanceBasket", varargs...)
	ret0, _ := ret[0].(*TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStopRebalanceBasket indicates an expected call of CommandStopRebalanceBasket.
func (mr *MockPieProgramServiceClientMockRecorder) CommandStopRebalanceBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStopRebalanceBasket", reflect.TypeOf((*MockPieProgramServiceClient)(nil).CommandStopRebalanceBasket), varargs...)
}

// GetBasket mocks base method.
func (m *MockPieProgramServiceClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasket", varargs...)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockPieProgramServiceClientMockRecorder) GetBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockPieProgramServiceClient)(nil).GetBasket), varargs...)
}

// GetBasketConfigByID mocks base method.
func (m *MockPieProgramServiceClient) GetBasketConfigByID(ctx context.Context, in *GetBasketConfigByIDRequest, opts ...grpc.CallOption) (*BasketConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasketConfigByID", varargs...)
	ret0, _ := ret[0].(*BasketConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketConfigByID indicates an expected call of GetBasketConfigByID.
func (mr *MockPieProgramServiceClientMockRecorder) GetBasketConfigByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketConfigByID", reflect.TypeOf((*MockPieProgramServiceClient)(nil).GetBasketConfigByID), varargs...)
}

// GetBasketVault mocks base method.
func (m *MockPieProgramServiceClient) GetBasketVault(ctx context.Context, in *GetBasketVaultRequest, opts ...grpc.CallOption) (*GetBasketVaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasketVault", varargs...)
	ret0, _ := ret[0].(*GetBasketVaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketVault indicates an expected call of GetBasketVault.
func (mr *MockPieProgramServiceClientMockRecorder) GetBasketVault(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketVault", reflect.TypeOf((*MockPieProgramServiceClient)(nil).GetBasketVault), varargs...)
}

// GetProgramState mocks base method.
func (m *MockPieProgramServiceClient) GetProgramState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProgramState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProgramState", varargs...)
	ret0, _ := ret[0].(*ProgramState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramState indicates an expected call of GetProgramState.
func (mr *MockPieProgramServiceClientMockRecorder) GetProgramState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramState", reflect.TypeOf((*MockPieProgramServiceClient)(nil).GetProgramState), varargs...)
}

// MockPieProgramServiceServer is a mock of PieProgramServiceServer interface.
type MockPieProgramServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPieProgramServiceServerMockRecorder
}

// MockPieProgramServiceServerMockRecorder is the mock recorder for MockPieProgramServiceServer.
type MockPieProgramServiceServerMockRecorder struct {
	mock *MockPieProgramServiceServer
}

// NewMockPieProgramServiceServer creates a new mock instance.
func NewMockPieProgramServiceServer(ctrl *gomock.Controller) *MockPieProgramServiceServer {
	mock := &MockPieProgramServiceServer{ctrl: ctrl}
	mock.recorder = &MockPieProgramServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPieProgramServiceServer) EXPECT() *MockPieProgramServiceServerMockRecorder {
	return m.recorder
}

// BatchCreateTokenPools mocks base method.
func (m *MockPieProgramServiceServer) BatchCreateTokenPools(ctx context.Context, in *BatchCreateTokenPoolsRequest) (*BatchCreateTokenPoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateTokenPools", ctx, in)
	ret0, _ := ret[0].(*BatchCreateTokenPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateTokenPools indicates an expected call of BatchCreateTokenPools.
func (mr *MockPieProgramServiceServerMockRecorder) BatchCreateTokenPools(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateTokenPools", reflect.TypeOf((*MockPieProgramServiceServer)(nil).BatchCreateTokenPools), ctx, in)
}

// BuildMintTx mocks base method.
func (m *MockPieProgramServiceServer) BuildMintTx(ctx context.Context, in *BuildMintTxRequest) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMintTx", ctx, in)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMintTx indicates an expected call of BuildMintTx.
func (mr *MockPieProgramServiceServerMockRecorder) BuildMintTx(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMintTx", reflect.TypeOf((*MockPieProgramServiceServer)(nil).BuildMintTx), ctx, in)
}

// BuildRebalanceTx mocks base method.
func (m *MockPieProgramServiceServer) BuildRebalanceTx(ctx context.Context, in *BuildRebalanceTxRequest) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRebalanceTx", ctx, in)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRebalanceTx indicates an expected call of BuildRebalanceTx.
func (mr *MockPieProgramServiceServerMockRecorder) BuildRebalanceTx(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRebalanceTx", reflect.TypeOf((*MockPieProgramServiceServer)(nil).BuildRebalanceTx), ctx, in)
}

// BuildRedeemTx mocks base method.
func (m *MockPieProgramServiceServer) BuildRedeemTx(ctx context.Context, in *BuildRedeemTxRequest) (*SerializedTxBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRedeemTx", ctx, in)
	ret0, _ := ret[0].(*SerializedTxBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRedeemTx indicates an expected call of BuildRedeemTx.
func (mr *MockPieProgramServiceServerMockRecorder) BuildRedeemTx(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRedeemTx", reflect.TypeOf((*MockPieProgramServiceServer)(nil).BuildRedeemTx), ctx, in)
}

// CommandCreateBasket mocks base method.
func (m *MockPieProgramServiceServer) CommandCreateBasket(ctx context.Context, in *Basket) (*Basket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandCreateBasket", ctx, in)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandCreateBasket indicates an expected call of CommandCreateBasket.
func (mr *MockPieProgramServiceServerMockRecorder) CommandCreateBasket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandCreateBasket", reflect.TypeOf((*MockPieProgramServiceServer)(nil).CommandCreateBasket), ctx, in)
}

// CommandStartRebalanceBasket mocks base method.
func (m *MockPieProgramServiceServer) CommandStartRebalanceBasket(ctx context.Context, in *Basket) (*TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandStartRebalanceBasket", ctx, in)
	ret0, _ := ret[0].(*TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStartRebalanceBasket indicates an expected call of CommandStartRebalanceBasket.
func (mr *MockPieProgramServiceServerMockRecorder) CommandStartRebalanceBasket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStartRebalanceBasket", reflect.TypeOf((*MockPieProgramServiceServer)(nil).CommandStartRebalanceBasket), ctx, in)
}

// CommandStopRebalanceBasket mocks base method.
func (m *MockPieProgramServiceServer) CommandStopRebalanceBasket(ctx context.Context, in *Basket) (*TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandStopRebalanceBasket", ctx, in)
	ret0, _ := ret[0].(*TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStopRebalanceBasket indicates an expected call of CommandStopRebalanceBasket.
func (mr *MockPieProgramServiceServerMockRecorder) CommandStopRebalanceBasket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStopRebalanceBasket", reflect.TypeOf((*MockPieProgramServiceServer)(nil).CommandStopRebalanceBasket), ctx, in)
}

// GetBasket mocks base method.
func (m *MockPieProgramServiceServer) GetBasket(ctx context.Context, in *GetBasketRequest) (*Basket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", ctx, in)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockPieProgramServiceServerMockRecorder) GetBasket(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockPieProgramServiceServer)(nil).GetBasket), ctx, in)
}

// GetBasketConfigByID mocks base method.
func (m *MockPieProgramServiceServer) GetBasketConfigByID(ctx context.Context, in *GetBasketConfigByIDRequest) (*BasketConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasketConfigByID", ctx, in)
	ret0, _ := ret[0].(*BasketConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketConfigByID indicates an expected call of GetBasketConfigByID.
func (mr *MockPieProgramServiceServerMockRecorder) GetBasketConfigByID(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketConfigByID", reflect.TypeOf((*MockPieProgramServiceServer)(nil).GetBasketConfigByID), ctx, in)
}

// GetBasketVault mocks base method.
func (m *MockPieProgramServiceServer) GetBasketVault(ctx context.Context, in *GetBasketVaultRequest) (*GetBasketVaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasketVault", ctx, in)
	ret0, _ := ret[0].(*GetBasketVaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketVault indicates an expected call of GetBasketVault.
func (mr *MockPieProgramServiceServerMockRecorder) GetBasketVault(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketVault", reflect.TypeOf((*MockPieProgramServiceServer)(nil).GetBasketVault), ctx, in)
}

// GetProgramState mocks base method.
func (m *MockPieProgramServiceServer) GetProgramState(ctx context.Context, in *emptypb.Empty) (*ProgramState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgramState", ctx, in)
	ret0, _ := ret[0].(*ProgramState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramState indicates an expected call of GetProgramState.
func (mr *MockPieProgramServiceServerMockRecorder) GetProgramState(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramState", reflect.TypeOf((*MockPieProgramServiceServer)(nil).GetProgramState), ctx, in)
}
