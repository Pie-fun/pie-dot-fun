// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/holding.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoldingServiceClient is the client API for HoldingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoldingServiceClient interface {
	GetHolding(ctx context.Context, in *GetHoldingRequest, opts ...grpc.CallOption) (*Holding, error)
	ListHoldings(ctx context.Context, in *ListHoldingsRequest, opts ...grpc.CallOption) (*ListHoldingsResponse, error)
	// GetHoldingsStatistics ListHoldings 와 같은 필터를 기준으로 Total Count, Total Market Value in USDC, Total Market Value in SOL 을 반환합니다.
	GetHoldingsStatistics(ctx context.Context, in *GetHoldingsStatisticsRequest, opts ...grpc.CallOption) (*GetHoldingsStatisticsResponse, error)
}

type holdingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHoldingServiceClient(cc grpc.ClientConnInterface) HoldingServiceClient {
	return &holdingServiceClient{cc}
}

func (c *holdingServiceClient) GetHolding(ctx context.Context, in *GetHoldingRequest, opts ...grpc.CallOption) (*Holding, error) {
	out := new(Holding)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.HoldingService/GetHolding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdingServiceClient) ListHoldings(ctx context.Context, in *ListHoldingsRequest, opts ...grpc.CallOption) (*ListHoldingsResponse, error) {
	out := new(ListHoldingsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.HoldingService/ListHoldings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdingServiceClient) GetHoldingsStatistics(ctx context.Context, in *GetHoldingsStatisticsRequest, opts ...grpc.CallOption) (*GetHoldingsStatisticsResponse, error) {
	out := new(GetHoldingsStatisticsResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.HoldingService/GetHoldingsStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoldingServiceServer is the server API for HoldingService service.
// All implementations must embed UnimplementedHoldingServiceServer
// for forward compatibility
type HoldingServiceServer interface {
	GetHolding(context.Context, *GetHoldingRequest) (*Holding, error)
	ListHoldings(context.Context, *ListHoldingsRequest) (*ListHoldingsResponse, error)
	// GetHoldingsStatistics ListHoldings 와 같은 필터를 기준으로 Total Count, Total Market Value in USDC, Total Market Value in SOL 을 반환합니다.
	GetHoldingsStatistics(context.Context, *GetHoldingsStatisticsRequest) (*GetHoldingsStatisticsResponse, error)
	mustEmbedUnimplementedHoldingServiceServer()
}

// UnimplementedHoldingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHoldingServiceServer struct {
}

func (UnimplementedHoldingServiceServer) GetHolding(context.Context, *GetHoldingRequest) (*Holding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolding not implemented")
}
func (UnimplementedHoldingServiceServer) ListHoldings(context.Context, *ListHoldingsRequest) (*ListHoldingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHoldings not implemented")
}
func (UnimplementedHoldingServiceServer) GetHoldingsStatistics(context.Context, *GetHoldingsStatisticsRequest) (*GetHoldingsStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldingsStatistics not implemented")
}
func (UnimplementedHoldingServiceServer) mustEmbedUnimplementedHoldingServiceServer() {}

// UnsafeHoldingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoldingServiceServer will
// result in compilation errors.
type UnsafeHoldingServiceServer interface {
	mustEmbedUnimplementedHoldingServiceServer()
}

func RegisterHoldingServiceServer(s grpc.ServiceRegistrar, srv HoldingServiceServer) {
	s.RegisterService(&HoldingService_ServiceDesc, srv)
}

func _HoldingService_GetHolding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldingServiceServer).GetHolding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.HoldingService/GetHolding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldingServiceServer).GetHolding(ctx, req.(*GetHoldingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldingService_ListHoldings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHoldingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldingServiceServer).ListHoldings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.HoldingService/ListHoldings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldingServiceServer).ListHoldings(ctx, req.(*ListHoldingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldingService_GetHoldingsStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldingsStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldingServiceServer).GetHoldingsStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.HoldingService/GetHoldingsStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldingServiceServer).GetHoldingsStatistics(ctx, req.(*GetHoldingsStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HoldingService_ServiceDesc is the grpc.ServiceDesc for HoldingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HoldingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.HoldingService",
	HandlerType: (*HoldingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHolding",
			Handler:    _HoldingService_GetHolding_Handler,
		},
		{
			MethodName: "ListHoldings",
			Handler:    _HoldingService_ListHoldings_Handler,
		},
		{
			MethodName: "GetHoldingsStatistics",
			Handler:    _HoldingService_GetHoldingsStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/holding.proto",
}
