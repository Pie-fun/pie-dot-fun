// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pie-dot-fun/v1/basket-token.proto

package piedotfun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasketTokenServiceClient is the client API for BasketTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketTokenServiceClient interface {
	GetBasketToken(ctx context.Context, in *GetBasketTokenRequest, opts ...grpc.CallOption) (*BasketToken, error)
	ListBasketTokens(ctx context.Context, in *ListBasketTokensRequest, opts ...grpc.CallOption) (*ListBasketTokensResponse, error)
	ListBasketTokenRebalancingHistories(ctx context.Context, in *ListRebalancingHistoriesRequest, opts ...grpc.CallOption) (*ListRebalancingHistoriesResponse, error)
}

type basketTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketTokenServiceClient(cc grpc.ClientConnInterface) BasketTokenServiceClient {
	return &basketTokenServiceClient{cc}
}

func (c *basketTokenServiceClient) GetBasketToken(ctx context.Context, in *GetBasketTokenRequest, opts ...grpc.CallOption) (*BasketToken, error) {
	out := new(BasketToken)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenService/GetBasketToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenServiceClient) ListBasketTokens(ctx context.Context, in *ListBasketTokensRequest, opts ...grpc.CallOption) (*ListBasketTokensResponse, error) {
	out := new(ListBasketTokensResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenService/ListBasketTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketTokenServiceClient) ListBasketTokenRebalancingHistories(ctx context.Context, in *ListRebalancingHistoriesRequest, opts ...grpc.CallOption) (*ListRebalancingHistoriesResponse, error) {
	out := new(ListRebalancingHistoriesResponse)
	err := c.cc.Invoke(ctx, "/piedotfun.v1.BasketTokenService/ListBasketTokenRebalancingHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketTokenServiceServer is the server API for BasketTokenService service.
// All implementations must embed UnimplementedBasketTokenServiceServer
// for forward compatibility
type BasketTokenServiceServer interface {
	GetBasketToken(context.Context, *GetBasketTokenRequest) (*BasketToken, error)
	ListBasketTokens(context.Context, *ListBasketTokensRequest) (*ListBasketTokensResponse, error)
	ListBasketTokenRebalancingHistories(context.Context, *ListRebalancingHistoriesRequest) (*ListRebalancingHistoriesResponse, error)
	mustEmbedUnimplementedBasketTokenServiceServer()
}

// UnimplementedBasketTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasketTokenServiceServer struct {
}

func (UnimplementedBasketTokenServiceServer) GetBasketToken(context.Context, *GetBasketTokenRequest) (*BasketToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketToken not implemented")
}
func (UnimplementedBasketTokenServiceServer) ListBasketTokens(context.Context, *ListBasketTokensRequest) (*ListBasketTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasketTokens not implemented")
}
func (UnimplementedBasketTokenServiceServer) ListBasketTokenRebalancingHistories(context.Context, *ListRebalancingHistoriesRequest) (*ListRebalancingHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasketTokenRebalancingHistories not implemented")
}
func (UnimplementedBasketTokenServiceServer) mustEmbedUnimplementedBasketTokenServiceServer() {}

// UnsafeBasketTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketTokenServiceServer will
// result in compilation errors.
type UnsafeBasketTokenServiceServer interface {
	mustEmbedUnimplementedBasketTokenServiceServer()
}

func RegisterBasketTokenServiceServer(s grpc.ServiceRegistrar, srv BasketTokenServiceServer) {
	s.RegisterService(&BasketTokenService_ServiceDesc, srv)
}

func _BasketTokenService_GetBasketToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenServiceServer).GetBasketToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenService/GetBasketToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenServiceServer).GetBasketToken(ctx, req.(*GetBasketTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenService_ListBasketTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasketTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenServiceServer).ListBasketTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenService/ListBasketTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenServiceServer).ListBasketTokens(ctx, req.(*ListBasketTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketTokenService_ListBasketTokenRebalancingHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRebalancingHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketTokenServiceServer).ListBasketTokenRebalancingHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piedotfun.v1.BasketTokenService/ListBasketTokenRebalancingHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketTokenServiceServer).ListBasketTokenRebalancingHistories(ctx, req.(*ListRebalancingHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketTokenService_ServiceDesc is the grpc.ServiceDesc for BasketTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piedotfun.v1.BasketTokenService",
	HandlerType: (*BasketTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasketToken",
			Handler:    _BasketTokenService_GetBasketToken_Handler,
		},
		{
			MethodName: "ListBasketTokens",
			Handler:    _BasketTokenService_ListBasketTokens_Handler,
		},
		{
			MethodName: "ListBasketTokenRebalancingHistories",
			Handler:    _BasketTokenService_ListBasketTokenRebalancingHistories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pie-dot-fun/v1/basket-token.proto",
}
