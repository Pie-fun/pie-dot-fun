{
  "swagger": "2.0",
  "info": {
    "title": "pie-dot-fun/v1/user.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users": {
      "get": {
        "summary": "ListUsers",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of users to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListUsers` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Available Sequence and Operator\n* name\n  * `Equal`\n* address\n  * Equal`\n* display_name\n  * Equal`\n\nExamples\n* name=\"users/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9\"\n* address=\"FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9\"\n* display_name=\"Alice\"",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users:validateNicknameAvailablity": {
      "post": {
        "summary": "ValidateNicknameAvailability identify User.",
        "operationId": "UserService_ValidateNicknameAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateNicknameAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ValidateNicknameAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/{user.name}": {
      "patch": {
        "summary": "UpdateUser update User.",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.name",
            "description": "The resource name of the User.\nFormat: users/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+"
          },
          {
            "name": "user",
            "description": "User to update\nFormat: users/{id}",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "The Auth ID of User. (generated by Privy or Web3Auth)",
                  "readOnly": true
                },
                "wallets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1UserWallet"
                  },
                  "readOnly": true
                },
                "createTime": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The created time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
                  "readOnly": true
                },
                "updateTime": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The last updated time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
                  "readOnly": true
                },
                "displayName": {
                  "type": "string",
                  "description": "The display name of User."
                },
                "biography": {
                  "type": "string",
                  "description": "The biography of User."
                },
                "sns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1SNS"
                  },
                  "description": "The SNS connections of User.",
                  "readOnly": true
                },
                "profileImageUrl": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "title": "User to update\nFormat: users/{id}"
            }
          },
          {
            "name": "updateMask",
            "description": "Field mask that specifies the fields to update.\nIf no field mask is set, all fields will be updated.\nWildcards are supported.\nExamples\n[\"*\"]\n[\"nickname\"]\n[\"biography\"]",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/{user}": {
      "get": {
        "summary": "GetUser will return User.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "The name of the user to retrieve.\nFormat: users/{id}\nAlias \"users/me\" is supported.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "SNSSNSType": {
      "type": "string",
      "enum": [
        "SNS_TYPE_UNSPECIFIED",
        "EMAIL",
        "GOOGLE",
        "TWITTER"
      ],
      "default": "SNS_TYPE_UNSPECIFIED"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      },
      "title": "ListUsersResponse\n(-- api-linter: core::0158::response-next-page-token-field=disabled\n    aip.dev/not-precedent: We need to do this because reasons. --)"
    },
    "v1SNS": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SNSSNSType"
        },
        "name": {
          "type": "string"
        },
        "profileUrl": {
          "type": "string"
        }
      }
    },
    "v1User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the User.\nFormat: users/{id}"
        },
        "id": {
          "type": "string",
          "title": "The Auth ID of User. (generated by Privy or Web3Auth)",
          "readOnly": true
        },
        "wallets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UserWallet"
          },
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The created time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The last updated time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "The display name of User."
        },
        "biography": {
          "type": "string",
          "description": "The biography of User."
        },
        "sns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SNS"
          },
          "description": "The SNS connections of User.",
          "readOnly": true
        },
        "profileImageUrl": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "v1UserWallet": {
      "type": "object",
      "properties": {
        "vmType": {
          "$ref": "#/definitions/v1VMType"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "v1VMType": {
      "type": "string",
      "enum": [
        "VM_UNSPECIFIED",
        "SVM",
        "EVM"
      ],
      "default": "VM_UNSPECIFIED",
      "description": " - VM_UNSPECIFIED: Unspecified VM type.\n - SVM: Solana Virtual Machine.\n - EVM: Ethereum Virtual Machine."
    },
    "v1ValidateNicknameAvailabilityRequest": {
      "type": "object",
      "properties": {
        "nickname": {
          "type": "string",
          "description": "The nickname of User."
        }
      },
      "required": [
        "nickname"
      ]
    },
    "v1ValidateNicknameAvailabilityResponse": {
      "type": "object",
      "properties": {
        "nickname": {
          "type": "string",
          "description": "The nickname of User."
        },
        "available": {
          "type": "boolean",
          "description": "The availability of the nickname."
        },
        "reason": {
          "type": "string",
          "title": "The reason of the nickname is not available.\nExample:\n- display name should be less or equal than 15 characters\n- display name should be more or equal than 4 characters\n- display name may only contain letters, numbers, hyphens, and periods"
        }
      }
    }
  }
}
