{
  "swagger": "2.0",
  "info": {
    "title": "ethereum/v1/station/spaceship.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SpaceshipService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/spaceships": {
      "get": {
        "summary": "ListSpaceships will return spaceships.",
        "operationId": "SpaceshipService_ListSpaceships",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stationListSpaceshipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of spaceships to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListSpaceships` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Available Sequence and Operator\n* name\n  * `equal`\n* profile\n  * `equal`\n* create_time\n  * `\u003e`\n* title\n  * `contains`\n* state\n  * `equal`\n* type\n  * `equal`\n* is_upgraded\n  * `negation`\n\nExamples\n* filter=profile=\"profiles/0x927c3Ba1B0F8300E1Cc5DcA825411d756A8D4001\"\n* filter=state=RENT_WAITING\n* filter=NOT rentable\n* filter=rentable",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SpaceshipService"
        ]
      }
    },
    "/v1/{spaceship.name}": {
      "patch": {
        "summary": "UpdateSpaceship update Spaceship",
        "operationId": "SpaceshipService_UpdateSpaceship",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stationSpaceship"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "spaceship.name",
            "description": "The resource name of Spaceship.\nFormat: spaceships/{address}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "spaceships/[^/]+"
          },
          {
            "name": "spaceship",
            "description": "spaceship to update",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "title": "6551 address of Spaceship NFT",
                  "readOnly": true
                },
                "ownerAddress": {
                  "type": "string",
                  "description": "The owner address of Spaceship.\nThis address can be PFP NFT TBA or EOA.\nThis field will be empty if the Spaceship is burned.",
                  "readOnly": true
                },
                "createTime": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The created time of Spaceship\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
                  "readOnly": true
                },
                "updateTime": {
                  "type": "string",
                  "format": "date-time",
                  "title": "The last updated time of Spaceship\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
                  "readOnly": true
                },
                "nickname": {
                  "type": "string",
                  "title": "The nickname of Spaceship.\nInternship has null value.\nThis field is optional"
                },
                "state": {
                  "$ref": "#/definitions/stationSpaceshipState",
                  "title": "state of Spaceship",
                  "readOnly": true
                },
                "type": {
                  "$ref": "#/definitions/stationSpaceshipType",
                  "readOnly": true
                },
                "isUpgraded": {
                  "type": "boolean",
                  "title": "Whether the Spaceship is upgraded to Ownership",
                  "readOnly": true
                },
                "nft": {
                  "$ref": "#/definitions/stationSpaceshipNFT",
                  "title": "NFT of Spaceship",
                  "readOnly": true
                }
              },
              "title": "spaceship to update"
            }
          },
          {
            "name": "updateMask",
            "description": "Field mask that specifies the fields to update.\nIf no field mask is set, all fields will be updated.\nWildcards are supported.\nExamples\n[\"*\"]\n[\"nft.metadata[left_wing]\"]\n[\"nickname\", \"nft.metadata\"]",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SpaceshipService"
        ]
      }
    },
    "/v1/{spaceship}": {
      "get": {
        "summary": "GetSpaceship",
        "operationId": "SpaceshipService_GetSpaceship",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stationSpaceship"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "spaceship",
            "description": "The name of the spaceship to retrieve.\nFormat: spaceships/{spaceship}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "spaceships/[^/]+"
          }
        ],
        "tags": [
          "SpaceshipService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "stationListSpaceshipsResponse": {
      "type": "object",
      "properties": {
        "spaceships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stationSpaceship"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      },
      "title": "ListSpaceshipsResponse\n(-- api-linter: core::0158::response-next-page-token-field=disabled\n    aip.dev/not-precedent: We need to do this because reasons. --)"
    },
    "stationSpaceship": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of Spaceship.\nFormat: spaceships/{address}"
        },
        "address": {
          "type": "string",
          "title": "6551 address of Spaceship NFT",
          "readOnly": true
        },
        "ownerAddress": {
          "type": "string",
          "description": "The owner address of Spaceship.\nThis address can be PFP NFT TBA or EOA.\nThis field will be empty if the Spaceship is burned.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The created time of Spaceship\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The last updated time of Spaceship\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "nickname": {
          "type": "string",
          "title": "The nickname of Spaceship.\nInternship has null value.\nThis field is optional"
        },
        "state": {
          "$ref": "#/definitions/stationSpaceshipState",
          "title": "state of Spaceship",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/stationSpaceshipType",
          "readOnly": true
        },
        "isUpgraded": {
          "type": "boolean",
          "title": "Whether the Spaceship is upgraded to Ownership",
          "readOnly": true
        },
        "nft": {
          "$ref": "#/definitions/stationSpaceshipNFT",
          "title": "NFT of Spaceship",
          "readOnly": true
        }
      },
      "title": "Spaceship is type of Spaceship"
    },
    "stationSpaceshipNFT": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the NFT asset.\nFormat: nfts/{chain_type}/{contract_address}/{token_id}\nExamples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1",
          "readOnly": true
        },
        "tokenId": {
          "type": "string",
          "description": "Token ID of the NFT asset.",
          "readOnly": true
        },
        "imageUri": {
          "type": "string",
          "title": "The URI of the NFT asset's image.\nThis URI can be cached version of image original URI\ne.g. \"https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500\u0026auto=format\"",
          "readOnly": true
        },
        "metadataUri": {
          "type": "string",
          "description": "The Metadata URI of the NFT asset.",
          "readOnly": true
        }
      },
      "description": "SpaceshipNFT message represents an Spaceship's NFT."
    },
    "stationSpaceshipState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "RENTED",
        "BURNED",
        "UPGRADED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: default value. this value is unused.\n - UPGRADED: means upgraded to ownership",
      "title": "SpaceshipState"
    },
    "stationSpaceshipType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "PROTOSHIP",
        "OWNERSHIP"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: default value. this value is unused.\n - OWNERSHIP: Semantic lock for rent.",
      "title": "SpaceshipType"
    }
  }
}
