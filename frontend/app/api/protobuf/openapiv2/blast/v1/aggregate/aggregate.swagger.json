{
  "swagger": "2.0",
  "info": {
    "title": "blast/v1/aggregate/aggregate.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AggregateService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/aggregates/points": {
      "get": {
        "summary": "ListPointsAggregate returns the PointsAggregate for the given request.",
        "operationId": "AggregateService_ListPointsAggregate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/aggregateListPointsAggregateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of points to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListPoints` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Available Sequence and Operator\n* name\n  * `=`\n* user_address\n  * `=`\n\nExamples\n* name=\"points/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442\"\n* user_address=\"0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "One or more fields to compare and use to sort the output. (optional)\nDefault order for a field is descending by id\nTo specify ascending or descending order, append \" asc\" or \" desc\" to the field name. If not specified, the order is ascending.\n\nReference\n* https://google.aip.dev/132#ordering.\n\nSupported Fields\n* \"id\", \"user_address\", \"points\"\n\nExamples\n* order_by=points desc",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AggregateService"
        ]
      }
    },
    "/v1/aggregates/squares": {
      "get": {
        "summary": "ListSquaresAggregate returns the ListSquaresAggregate for the given request.",
        "operationId": "AggregateService_ListSquaresAggregate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/aggregateListSquaresAggregateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of squares to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListSquares` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Available Sequence and Operator\n* name\n  * `=`\n* token_id\n  * `=`\n* signature_id\n  * `=`\n* state\n  * `=`\n* join_type\n  * `=`\n* display_name\n  * `=`\n\nExamples\n* name=\"squares/10\"\n* token_id=\"10\"\n* signature_id=\"3ed92b99-00be-4417-b69f-dca2d8d14c7f\"\n* join_type=TOKEN_GATED\n* display_name=\"SQUARE\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Optional. One or more fields to compare and use to sort the output.\nDefault order for a field is descending by id\nTo specify ascending or descending order, append \" asc\" or \" desc\" to the field name. If not specified, the order is ascending.\n\nReference\n* https://google.aip.dev/132#ordering.\n\nSupported Fields\n* \"token_id\", \"total_points\", \"spirits\"\n\nExamples\n* order_by=token_id asc\n* order_by=total_points desc\n* order_by=spirits asc",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AggregateService"
        ]
      }
    },
    "/v1/aggregates/{square}": {
      "get": {
        "summary": "GetSquareAggregate returns the GetSquareAggregate for the given request.",
        "operationId": "AggregateService_GetSquareAggregate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/aggregateSquareAggregate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "square",
            "description": "The name of the square to retrieve.\nFormat: squares/{token_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "squares/[^/]+"
          },
          {
            "name": "view",
            "description": "The view of the square.\n\n - SQUARE_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the SQUARE_VIEW_NOT_MEMBER view.\n - SQUARE_VIEW_OWNER: Include everything.\n - SQUARE_VIEW_MEMBER: Include only fields that are safe to be exposed to members\nDo not include `private``\n - SQUARE_VIEW_NOT_MEMBER: Include only fields that are safe to be exposed to non-members\nDo not include `private`\nThis is the default value for GetSquare.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SQUARE_VIEW_UNSPECIFIED",
              "SQUARE_VIEW_OWNER",
              "SQUARE_VIEW_MEMBER",
              "SQUARE_VIEW_NOT_MEMBER"
            ],
            "default": "SQUARE_VIEW_UNSPECIFIED"
          }
        ],
        "tags": [
          "AggregateService"
        ]
      }
    },
    "/v1/aggregates/{square}/members/rankings": {
      "get": {
        "summary": "ListSquareMemberRankingsAggregate returns the SquareMemberRankingsAggregate for the given request.",
        "operationId": "AggregateService_ListSquareMemberRankingsAggregate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/aggregateListSquareMemberRankingsAggregateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "square",
            "description": "The name of the square to retrieve.\nFormat: squares/{token_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "squares/[^/]+"
          },
          {
            "name": "rankType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY"
            ],
            "default": "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of points to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListPoints` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AggregateService"
        ]
      }
    }
  },
  "definitions": {
    "aggregateListPointsAggregateResponse": {
      "type": "object",
      "properties": {
        "pointsAggregate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/aggregatePointsAggregate"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      },
      "title": "ListPointsResponse"
    },
    "aggregateListSquareMemberRankingsAggregateResponse": {
      "type": "object",
      "properties": {
        "rankingsAggregate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/aggregateSquareMemberRankingAggregate"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      }
    },
    "aggregateListSquaresAggregateResponse": {
      "type": "object",
      "properties": {
        "squaresAggregate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/aggregateSquareAggregate"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      },
      "title": "ListSquaresAggregateResponse"
    },
    "aggregatePointsAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Points.\nFormat: users/{address}/points"
        },
        "user": {
          "$ref": "#/definitions/userUser",
          "readOnly": true
        },
        "totalPoints": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "referral": {
          "$ref": "#/definitions/pointsReferral",
          "readOnly": true
        },
        "staking": {
          "$ref": "#/definitions/pointsStaking",
          "readOnly": true
        },
        "activity": {
          "$ref": "#/definitions/pointsActivity",
          "readOnly": true
        },
        "bonus": {
          "$ref": "#/definitions/pointsBonus",
          "readOnly": true
        },
        "multipliers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pointsMultiplier"
          },
          "readOnly": true
        }
      }
    },
    "aggregateSquareAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Square.\nFormat: squares/{token_id}"
        },
        "tokenId": {
          "type": "string",
          "description": "ERC721 token ID of the Square.",
          "readOnly": true
        },
        "owner": {
          "$ref": "#/definitions/userUser",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The created time of Square.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/squareSquareState",
          "readOnly": true
        },
        "signatureId": {
          "type": "string",
          "description": "The signature id of the Square.\nThis field is used for multi signature when minting the Square NFT.",
          "readOnly": true
        },
        "joinType": {
          "$ref": "#/definitions/squareSquareJoinType",
          "description": "The join type of the square."
        },
        "public": {
          "$ref": "#/definitions/squarePublic"
        },
        "private": {
          "$ref": "#/definitions/squarePrivate"
        },
        "tokenGated": {
          "$ref": "#/definitions/squareTokenGated"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the square."
        },
        "introduction": {
          "type": "string",
          "description": "The introduction of the square."
        },
        "minimumStakingAmountToJoinInEth": {
          "type": "number",
          "format": "float",
          "description": "The minimum required staking amount to join the square in ETH."
        },
        "totalMembersStakingAmountInEth": {
          "type": "number",
          "format": "float",
          "description": "The total staking amount of all members in the square in ETH.",
          "readOnly": true
        },
        "multiplier": {
          "type": "number",
          "format": "float",
          "description": "The multiplier of the square.",
          "readOnly": true
        },
        "totalPoints": {
          "type": "integer",
          "format": "int64",
          "description": "The all-time total points of the square.",
          "readOnly": true
        },
        "capacity": {
          "type": "integer",
          "format": "int64",
          "description": "The total capacity of the square.",
          "readOnly": true
        },
        "occupancy": {
          "type": "integer",
          "format": "int64",
          "description": "The current number of members in the square.",
          "readOnly": true
        },
        "occupancyIncludingPending": {
          "type": "integer",
          "format": "int64",
          "description": "The occupancy of the square including join pending members.",
          "readOnly": true
        },
        "pfpBoost": {
          "$ref": "#/definitions/squarePFPBoost",
          "description": "The PFP boost of the square.",
          "readOnly": true
        },
        "nft": {
          "$ref": "#/definitions/squareSquareNFT",
          "description": "The NFT of the square.",
          "readOnly": true
        },
        "spirits": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "stars": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "totalSpirits": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "weeklySpirits": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "aggregateSquareMemberAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Square.\nFormat: squares/{square_token_id}/members/{user_address}"
        },
        "squareTokenId": {
          "type": "string",
          "description": "The token ID of the Square.",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/userUser",
          "description": "The user address of the member.",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/squareSquareMemberType",
          "description": "The member type of the square.",
          "readOnly": true
        },
        "totalPoints": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "joinTime": {
          "type": "string",
          "format": "date-time",
          "title": "RFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        }
      }
    },
    "aggregateSquareMemberRankingAggregate": {
      "type": "object",
      "properties": {
        "rank": {
          "type": "integer",
          "format": "int64"
        },
        "points": {
          "type": "integer",
          "format": "int64"
        },
        "member": {
          "$ref": "#/definitions/aggregateSquareMemberAggregate"
        }
      }
    },
    "nftChainType": {
      "type": "string",
      "enum": [
        "CHAIN_UNSPECIFIED",
        "ETHEREUM",
        "POLYGON",
        "ARBITRUM",
        "OPTIMISM",
        "BASE",
        "BLAST",
        "ETHEREUM_SEPOLIA",
        "POLYGON_MUMBAI",
        "BLAST_SEPOLIA"
      ],
      "default": "CHAIN_UNSPECIFIED",
      "description": "- CHAIN_UNSPECIFIED: Unspecified blockchain type.\n - ETHEREUM: Ethereum Mainnet blockchain.\n - POLYGON: Polygon Mainnet blockchain.\n - ARBITRUM: Arbitrum Mainnet blockchain.\n - OPTIMISM: Optimism Mainnet blockchain.\n - BASE: Base Mainnet blockchain.\n - BLAST: Blast Mainnet blockchain.\n - ETHEREUM_SEPOLIA: Sepolia Testnet blockchain.\n - POLYGON_MUMBAI: Polygon Testnet blockchain.\n - BLAST_SEPOLIA: Blast Testnet blockchain.",
      "title": "ChainType enumeration represents the type of blockchain.\nDoes not support optimism, zksync, bsc yet"
    },
    "pointsActivity": {
      "type": "object",
      "properties": {
        "points": {
          "type": "integer",
          "format": "int64"
        },
        "dailyCheckin": {
          "type": "integer",
          "format": "int64"
        },
        "gm": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pointsBonus": {
      "type": "object",
      "properties": {
        "squareOwner": {
          "type": "integer",
          "format": "int64",
          "title": "Owner bonus"
        }
      }
    },
    "pointsMultiplier": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/pointsMultiplierType"
        },
        "percentage": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "pointsMultiplierType": {
      "type": "string",
      "enum": [
        "MULTIPLIER_TYPE_UNSPECIFIED",
        "SQUARE_OWNER_BONUS",
        "SQUARE_MULTIPLIER",
        "SQUARE_PFP_COLLECTION_BOOST"
      ],
      "default": "MULTIPLIER_TYPE_UNSPECIFIED",
      "description": " - MULTIPLIER_TYPE_UNSPECIFIED: default value. this value is unused."
    },
    "pointsReferral": {
      "type": "object",
      "properties": {
        "referredByPoints": {
          "type": "integer",
          "format": "int64"
        },
        "referredPoints": {
          "type": "integer",
          "format": "int64"
        },
        "points": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pointsStaking": {
      "type": "object",
      "properties": {
        "points": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "squarePFPBoost": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "format": "float",
          "readOnly": true
        },
        "memberCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "nftContract": {
          "type": "string",
          "title": "The resource name of the NFT contract.\nFormat: nfts/{chain_type}/{contract_address}",
          "readOnly": true
        }
      }
    },
    "squarePrivate": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "squarePublic": {
      "type": "object"
    },
    "squareSquareJoinType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "PUBLIC",
        "PRIVATE",
        "TOKEN_GATED"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: default value. this value is unused.\n - PUBLIC: Anyone can join the square.\n - PRIVATE: Only user with the code can join the square.\n - TOKEN_GATED: Only user with the specific token can join the square.",
      "title": "The join type of square"
    },
    "squareSquareMemberRankType": {
      "type": "string",
      "enum": [
        "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED",
        "ALL_TIME",
        "WEEKLY"
      ],
      "default": "SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED"
    },
    "squareSquareMemberType": {
      "type": "string",
      "enum": [
        "SQUARE_MEMBER_TYPE_UNSPECIFIED",
        "OWNER",
        "MEMBER"
      ],
      "default": "SQUARE_MEMBER_TYPE_UNSPECIFIED",
      "description": "- SQUARE_MEMBER_TYPE_UNSPECIFIED: default value. this value is unused.",
      "title": "The member type of square"
    },
    "squareSquareNFT": {
      "type": "object",
      "properties": {
        "tokenId": {
          "type": "integer",
          "format": "int64",
          "description": "Token ID of the NFT asset.",
          "readOnly": true
        },
        "imageUri": {
          "type": "string",
          "title": "The URI of the NFT asset's image.\nThis URI is cached version of image original URI\ne.g. \"https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609\"",
          "readOnly": true
        },
        "metadataUri": {
          "type": "string",
          "description": "The URI of the NFT asset's metadata.",
          "readOnly": true
        }
      }
    },
    "squareSquareState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "CREATED_PENDING",
        "OWNED",
        "UNOWNED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: default value. this value is unused.\n - CREATED_PENDING: The square is created at server side and pending for onchain tx is finalized\n - OWNED: The square is owned by Spacebar user.\n - UNOWNED: The owner of the square is not a Spacebar user.",
      "title": "The state of square"
    },
    "squareSquareView": {
      "type": "string",
      "enum": [
        "SQUARE_VIEW_UNSPECIFIED",
        "SQUARE_VIEW_OWNER",
        "SQUARE_VIEW_MEMBER",
        "SQUARE_VIEW_NOT_MEMBER"
      ],
      "default": "SQUARE_VIEW_UNSPECIFIED",
      "description": "SquareView enumeration represents the view of a square.\nThe view controls the amount of information returned.\n\nReference\nhttps://cloud.google.com/apis/design/design_patterns#list_flattening and\nhttps://google.aip.dev/157\n\n - SQUARE_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the SQUARE_VIEW_NOT_MEMBER view.\n - SQUARE_VIEW_OWNER: Include everything.\n - SQUARE_VIEW_MEMBER: Include only fields that are safe to be exposed to members\nDo not include `private``\n - SQUARE_VIEW_NOT_MEMBER: Include only fields that are safe to be exposed to non-members\nDo not include `private`\nThis is the default value for GetSquare."
    },
    "squareTokenGated": {
      "type": "object",
      "properties": {
        "nftContract": {
          "type": "string",
          "title": "The resource name of the NFT contract.\nFormat: nfts/{chain_type}/{contract_address}"
        }
      }
    },
    "userUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the User.\nFormat: users/{address}"
        },
        "address": {
          "type": "string",
          "description": "The address of User, mostly EOA address.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The created time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The last updated time of User.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "lastNftUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The last updated time of User's NFT.\nRFC3339 format e.g. \"2006-01-02T15:04:05Z07:00\"",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/userUserType",
          "title": "The type of User",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/userUserState",
          "title": "The state of User\nDeprecated: Use type instead",
          "readOnly": true
        },
        "nft": {
          "$ref": "#/definitions/userUserNFT",
          "description": "The current pfp nft of User."
        },
        "ens": {
          "type": "string",
          "title": "The ens of user\nThis field is optional",
          "readOnly": true
        },
        "nickname": {
          "type": "string",
          "description": "The nickname of User."
        }
      }
    },
    "userUserNFT": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the NFT asset.\nFormat: nfts/{chain_type}/{contract_address}/{token_id}\nExamples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1"
        },
        "tokenId": {
          "type": "string",
          "description": "Token ID of the NFT asset.",
          "readOnly": true
        },
        "tokenName": {
          "type": "string",
          "description": "Token Name of the NFT asset.",
          "readOnly": true
        },
        "imageUri": {
          "type": "string",
          "title": "The URI of the NFT asset's image.\nThis URI is cached version of image original URI\ne.g. \"https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609\"",
          "readOnly": true
        },
        "contract": {
          "$ref": "#/definitions/userUserNFTContract",
          "description": "The contract that owns the NFT asset.\nOutput only.",
          "readOnly": true
        }
      },
      "description": "UserNFT message represents an User's NFT."
    },
    "userUserNFTContract": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address of the NFT contract.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "The name of the NFT contract schema.",
          "readOnly": true
        },
        "symbol": {
          "type": "string",
          "description": "The symbol of the NFT contract.",
          "readOnly": true
        },
        "chain": {
          "$ref": "#/definitions/nftChainType",
          "description": "The blockchain on which the NFT contract resides.",
          "readOnly": true
        },
        "imageUri": {
          "type": "string",
          "title": "The URI of the contract image",
          "readOnly": true
        }
      },
      "description": "NFTContract message represents an NFT contract."
    },
    "userUserState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "CREATED_PENDING",
        "CREATED",
        "SQUARE_OWNED",
        "SQUARE_JOINED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: default value. this value is unused.\n - CREATED_PENDING: User was firstly created but nickname, nft is not set yet.\nAfter nickname and nft is set, state will be changed to CREATED.\n - CREATED: User is neither owner nor member.\n - SQUARE_OWNED: User is owner.\n - SQUARE_JOINED: User is member.",
      "title": "The state of user"
    },
    "userUserType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "INDEPENDENT",
        "SQUARE_OWNER",
        "SQUARE_MEMBER"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: default value. this value is unused.",
      "title": "The state of user"
    }
  }
}
