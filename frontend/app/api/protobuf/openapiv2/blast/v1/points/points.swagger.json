{
  "swagger": "2.0",
  "info": {
    "title": "blast/v1/points/points.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "PointsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users/-/points": {
      "get": {
        "summary": "ListPoints will return Points.\nreads across collections, reference: https://google.aip.dev/159",
        "operationId": "PointsService_ListPoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pointsListPointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of points to return. The service may return fewer than\nthis value.\nIf unspecified, at most 50 rows will be returned.\nThe maximum value is 1024; values above 1024 will be coerced to 1024.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first\npage of results will be returned. Use the value obtained from\n`next_page_token` in the previous response in order to request\nthe next page of results.\n\nWhen paginating, all other parameters provided to `ListPoints` must match\nthe call that provided the page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Available Sequence and Operator\n* name\n  * `=`\n* user_address\n  * `=`\n\nExamples\n* name=\"points/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442\"\n* user_address=\"0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "One or more fields to compare and use to sort the output. (optional)\nDefault order for a field is descending by id\nTo specify ascending or descending order, append \" asc\" or \" desc\" to the field name. If not specified, the order is ascending.\n\nReference\n* https://google.aip.dev/132#ordering.\n\nSupported Fields\n* \"id\", \"user_address\", \"points\"\n\nExamples\n* order_by=points desc",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PointsService"
        ]
      }
    },
    "/v1/{points}": {
      "get": {
        "summary": "GetPoints will return Points.",
        "operationId": "PointsService_GetPoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pointsPoints"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "points",
            "description": "The name of the points to retrieve.\nFormat: users/{address}/points",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+/points"
          }
        ],
        "tags": [
          "PointsService"
        ]
      }
    },
    "/v1/{points}:earnStakingInterest": {
      "post": {
        "summary": "EarnStakingInterestPoints will earn Staking Interest Points.\nThis function will be called by internal service and not open to the public.",
        "operationId": "PointsService_EarnStakingInterest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pointsPoints"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "points",
            "description": "The name of the points to retrieve.\nFormat: users/{address}/points",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+/points"
          }
        ],
        "tags": [
          "PointsService"
        ]
      }
    }
  },
  "definitions": {
    "pointsActivity": {
      "type": "object",
      "properties": {
        "points": {
          "type": "integer",
          "format": "int64"
        },
        "dailyCheckin": {
          "type": "integer",
          "format": "int64"
        },
        "gm": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pointsBonus": {
      "type": "object",
      "properties": {
        "squareOwner": {
          "type": "integer",
          "format": "int64",
          "title": "Owner bonus"
        }
      }
    },
    "pointsListPointsResponse": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pointsPoints"
          },
          "description": "The list of rows that matched the query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results.\nPass the content of this string as the `page_token` attribute of\nthe next request. `next_page_token` is not returned for the last\npage."
        }
      },
      "title": "ListPointsResponse\n(-- api-linter: core::0158::response-next-page-token-field=disabled\n    aip.dev/not-precedent: We need to do this because reasons. --)"
    },
    "pointsMultiplier": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/pointsMultiplierType"
        },
        "percentage": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "pointsMultiplierType": {
      "type": "string",
      "enum": [
        "MULTIPLIER_TYPE_UNSPECIFIED",
        "SQUARE_OWNER_BONUS",
        "SQUARE_MULTIPLIER",
        "SQUARE_PFP_COLLECTION_BOOST"
      ],
      "default": "MULTIPLIER_TYPE_UNSPECIFIED",
      "description": " - MULTIPLIER_TYPE_UNSPECIFIED: default value. this value is unused."
    },
    "pointsPoints": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Points.\nFormat: users/{address}/points"
        },
        "userAddress": {
          "type": "string",
          "readOnly": true
        },
        "totalPoints": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "referral": {
          "$ref": "#/definitions/pointsReferral",
          "readOnly": true
        },
        "staking": {
          "$ref": "#/definitions/pointsStaking",
          "readOnly": true
        },
        "activity": {
          "$ref": "#/definitions/pointsActivity",
          "readOnly": true
        },
        "bonus": {
          "$ref": "#/definitions/pointsBonus",
          "readOnly": true
        },
        "multipliers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pointsMultiplier"
          },
          "readOnly": true
        }
      }
    },
    "pointsReferral": {
      "type": "object",
      "properties": {
        "referredByPoints": {
          "type": "integer",
          "format": "int64"
        },
        "referredPoints": {
          "type": "integer",
          "format": "int64"
        },
        "points": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pointsStaking": {
      "type": "object",
      "properties": {
        "points": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
