// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/referral/referral.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

export enum ReferralState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** DEACTIVATED - Referral code was deactivated. */
  DEACTIVATED = "DEACTIVATED",
  /** ACTIVATED - Referral code was activated. */
  ACTIVATED = "ACTIVATED",
}

export function referralStateFromJSON(object: any): ReferralState {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ReferralState.STATE_UNSPECIFIED;
    case 1:
    case "DEACTIVATED":
      return ReferralState.DEACTIVATED;
    case 2:
    case "ACTIVATED":
      return ReferralState.ACTIVATED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReferralState");
  }
}

export function referralStateToJSON(object: ReferralState): string {
  switch (object) {
    case ReferralState.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ReferralState.DEACTIVATED:
      return "DEACTIVATED";
    case ReferralState.ACTIVATED:
      return "ACTIVATED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReferralState");
  }
}

export function referralStateToNumber(object: ReferralState): number {
  switch (object) {
    case ReferralState.STATE_UNSPECIFIED:
      return 0;
    case ReferralState.DEACTIVATED:
      return 1;
    case ReferralState.ACTIVATED:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ReferralState");
  }
}

/**
 * ListReferralsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListReferralsRequest {
  /**
   * The maximum number of users to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListReferrals` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * user_address
   *   * Equal`
   * * state
   *   * Equal`
   *
   * Examples
   * * name="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442/referrals"
   * * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * state=ACTIVATED
   */
  filter: string;
}

/**
 * ListReferralsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListReferralsResponse {
  /** The list of rows that matched the query. */
  referrals: Referral[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface GetReferralRequest {
  /**
   * The name of the referral to retrieve.
   * Format: users/{address}/referrals
   */
  referral: string;
}

/** RefferedByRequest */
export interface RefferedByRequest {
  /**
   * The name of the referral to retrieve.
   * Format: users/{address}/referrals
   */
  referral: string;
  code: string;
}

export interface Referral {
  /**
   * The resource name of the Referral.
   * Format: users/{address}/referrals
   */
  name: string;
  /**  */
  userAddress: string;
  /**  */
  state: ReferralState;
  collection: string;
  referredBy?: ReferredBy | undefined;
  referred?: Referred | undefined;
}

export interface ReferredBy {
  code: string;
  userAddress: string;
}

export interface Referred {
  code: string;
  sameCollection: number;
  otherCollection: number;
}

export interface Reference {
  referrer: string;
  referredBy: string;
  sameCollection: boolean;
  createTime: string | undefined;
}

function createBaseListReferralsRequest(): ListReferralsRequest {
  return { pageSize: 0, pageToken: "", filter: "" };
}

export const ListReferralsRequest: MessageFns<ListReferralsRequest> = {
  encode(message: ListReferralsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReferralsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReferralsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReferralsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListReferralsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReferralsRequest>, I>>(base?: I): ListReferralsRequest {
    return ListReferralsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReferralsRequest>, I>>(object: I): ListReferralsRequest {
    const message = createBaseListReferralsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListReferralsResponse(): ListReferralsResponse {
  return { referrals: [], nextPageToken: "" };
}

export const ListReferralsResponse: MessageFns<ListReferralsResponse> = {
  encode(message: ListReferralsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.referrals) {
      Referral.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReferralsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReferralsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referrals.push(Referral.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReferralsResponse {
    return {
      referrals: globalThis.Array.isArray(object?.referrals)
        ? object.referrals.map((e: any) => Referral.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListReferralsResponse): unknown {
    const obj: any = {};
    if (message.referrals?.length) {
      obj.referrals = message.referrals.map((e) => Referral.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListReferralsResponse>, I>>(base?: I): ListReferralsResponse {
    return ListReferralsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListReferralsResponse>, I>>(object: I): ListReferralsResponse {
    const message = createBaseListReferralsResponse();
    message.referrals = object.referrals?.map((e) => Referral.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetReferralRequest(): GetReferralRequest {
  return { referral: "" };
}

export const GetReferralRequest: MessageFns<GetReferralRequest> = {
  encode(message: GetReferralRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== "") {
      writer.uint32(10).string(message.referral);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralRequest {
    return { referral: isSet(object.referral) ? globalThis.String(object.referral) : "" };
  },

  toJSON(message: GetReferralRequest): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = message.referral;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralRequest>, I>>(base?: I): GetReferralRequest {
    return GetReferralRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralRequest>, I>>(object: I): GetReferralRequest {
    const message = createBaseGetReferralRequest();
    message.referral = object.referral ?? "";
    return message;
  },
};

function createBaseRefferedByRequest(): RefferedByRequest {
  return { referral: "", code: "" };
}

export const RefferedByRequest: MessageFns<RefferedByRequest> = {
  encode(message: RefferedByRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== "") {
      writer.uint32(10).string(message.referral);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefferedByRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefferedByRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefferedByRequest {
    return {
      referral: isSet(object.referral) ? globalThis.String(object.referral) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: RefferedByRequest): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = message.referral;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefferedByRequest>, I>>(base?: I): RefferedByRequest {
    return RefferedByRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefferedByRequest>, I>>(object: I): RefferedByRequest {
    const message = createBaseRefferedByRequest();
    message.referral = object.referral ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseReferral(): Referral {
  return {
    name: "",
    userAddress: "",
    state: ReferralState.STATE_UNSPECIFIED,
    collection: "",
    referredBy: undefined,
    referred: undefined,
  };
}

export const Referral: MessageFns<Referral> = {
  encode(message: Referral, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.state !== ReferralState.STATE_UNSPECIFIED) {
      writer.uint32(24).int32(referralStateToNumber(message.state));
    }
    if (message.collection !== "") {
      writer.uint32(34).string(message.collection);
    }
    if (message.referredBy !== undefined) {
      ReferredBy.encode(message.referredBy, writer.uint32(42).fork()).join();
    }
    if (message.referred !== undefined) {
      Referred.encode(message.referred, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Referral {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferral();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = referralStateFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.collection = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.referredBy = ReferredBy.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.referred = Referred.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Referral {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      state: isSet(object.state) ? referralStateFromJSON(object.state) : ReferralState.STATE_UNSPECIFIED,
      collection: isSet(object.collection) ? globalThis.String(object.collection) : "",
      referredBy: isSet(object.referredBy) ? ReferredBy.fromJSON(object.referredBy) : undefined,
      referred: isSet(object.referred) ? Referred.fromJSON(object.referred) : undefined,
    };
  },

  toJSON(message: Referral): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    if (message.state !== undefined) {
      obj.state = referralStateToJSON(message.state);
    }
    if (message.collection !== undefined) {
      obj.collection = message.collection;
    }
    if (message.referredBy !== undefined) {
      obj.referredBy = ReferredBy.toJSON(message.referredBy);
    }
    if (message.referred !== undefined) {
      obj.referred = Referred.toJSON(message.referred);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Referral>, I>>(base?: I): Referral {
    return Referral.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Referral>, I>>(object: I): Referral {
    const message = createBaseReferral();
    message.name = object.name ?? "";
    message.userAddress = object.userAddress ?? "";
    message.state = object.state ?? ReferralState.STATE_UNSPECIFIED;
    message.collection = object.collection ?? "";
    message.referredBy = (object.referredBy !== undefined && object.referredBy !== null)
      ? ReferredBy.fromPartial(object.referredBy)
      : undefined;
    message.referred = (object.referred !== undefined && object.referred !== null)
      ? Referred.fromPartial(object.referred)
      : undefined;
    return message;
  },
};

function createBaseReferredBy(): ReferredBy {
  return { code: "", userAddress: "" };
}

export const ReferredBy: MessageFns<ReferredBy> = {
  encode(message: ReferredBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferredBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferredBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferredBy {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
    };
  },

  toJSON(message: ReferredBy): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferredBy>, I>>(base?: I): ReferredBy {
    return ReferredBy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferredBy>, I>>(object: I): ReferredBy {
    const message = createBaseReferredBy();
    message.code = object.code ?? "";
    message.userAddress = object.userAddress ?? "";
    return message;
  },
};

function createBaseReferred(): Referred {
  return { code: "", sameCollection: 0, otherCollection: 0 };
}

export const Referred: MessageFns<Referred> = {
  encode(message: Referred, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.sameCollection !== 0) {
      writer.uint32(16).uint32(message.sameCollection);
    }
    if (message.otherCollection !== 0) {
      writer.uint32(24).uint32(message.otherCollection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Referred {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferred();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sameCollection = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.otherCollection = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Referred {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      sameCollection: isSet(object.sameCollection) ? globalThis.Number(object.sameCollection) : 0,
      otherCollection: isSet(object.otherCollection) ? globalThis.Number(object.otherCollection) : 0,
    };
  },

  toJSON(message: Referred): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.sameCollection !== undefined) {
      obj.sameCollection = Math.round(message.sameCollection);
    }
    if (message.otherCollection !== undefined) {
      obj.otherCollection = Math.round(message.otherCollection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Referred>, I>>(base?: I): Referred {
    return Referred.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Referred>, I>>(object: I): Referred {
    const message = createBaseReferred();
    message.code = object.code ?? "";
    message.sameCollection = object.sameCollection ?? 0;
    message.otherCollection = object.otherCollection ?? 0;
    return message;
  },
};

function createBaseReference(): Reference {
  return { referrer: "", referredBy: "", sameCollection: false, createTime: undefined };
}

export const Reference: MessageFns<Reference> = {
  encode(message: Reference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referrer !== "") {
      writer.uint32(10).string(message.referrer);
    }
    if (message.referredBy !== "") {
      writer.uint32(18).string(message.referredBy);
    }
    if (message.sameCollection !== false) {
      writer.uint32(24).bool(message.sameCollection);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referrer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.referredBy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sameCollection = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reference {
    return {
      referrer: isSet(object.referrer) ? globalThis.String(object.referrer) : "",
      referredBy: isSet(object.referredBy) ? globalThis.String(object.referredBy) : "",
      sameCollection: isSet(object.sameCollection) ? globalThis.Boolean(object.sameCollection) : false,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
    };
  },

  toJSON(message: Reference): unknown {
    const obj: any = {};
    if (message.referrer !== undefined) {
      obj.referrer = message.referrer;
    }
    if (message.referredBy !== undefined) {
      obj.referredBy = message.referredBy;
    }
    if (message.sameCollection !== undefined) {
      obj.sameCollection = message.sameCollection;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reference>, I>>(base?: I): Reference {
    return Reference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reference>, I>>(object: I): Reference {
    const message = createBaseReference();
    message.referrer = object.referrer ?? "";
    message.referredBy = object.referredBy ?? "";
    message.sameCollection = object.sameCollection ?? false;
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** ReferralService contains the function to interact with the Referral of the spacebar */
export type ReferralServiceService = typeof ReferralServiceService;
export const ReferralServiceService = {
  /** GetReferral will return Referral. */
  getReferral: {
    path: "/blast.v1.referral.ReferralService/GetReferral",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetReferralRequest) => Buffer.from(GetReferralRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetReferralRequest.decode(value),
    responseSerialize: (value: Referral) => Buffer.from(Referral.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Referral.decode(value),
  },
  /**
   * ListReferrals
   * reads across collections, reference: https://google.aip.dev/159
   */
  listReferrals: {
    path: "/blast.v1.referral.ReferralService/ListReferrals",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListReferralsRequest) => Buffer.from(ListReferralsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListReferralsRequest.decode(value),
    responseSerialize: (value: ListReferralsResponse) => Buffer.from(ListReferralsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListReferralsResponse.decode(value),
  },
  referredBy: {
    path: "/blast.v1.referral.ReferralService/ReferredBy",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefferedByRequest) => Buffer.from(RefferedByRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RefferedByRequest.decode(value),
    responseSerialize: (value: Referral) => Buffer.from(Referral.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Referral.decode(value),
  },
} as const;

export interface ReferralServiceServer extends UntypedServiceImplementation {
  /** GetReferral will return Referral. */
  getReferral: handleUnaryCall<GetReferralRequest, Referral>;
  /**
   * ListReferrals
   * reads across collections, reference: https://google.aip.dev/159
   */
  listReferrals: handleUnaryCall<ListReferralsRequest, ListReferralsResponse>;
  referredBy: handleUnaryCall<RefferedByRequest, Referral>;
}

export interface ReferralServiceClient extends Client {
  /** GetReferral will return Referral. */
  getReferral(
    request: GetReferralRequest,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
  getReferral(
    request: GetReferralRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
  getReferral(
    request: GetReferralRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
  /**
   * ListReferrals
   * reads across collections, reference: https://google.aip.dev/159
   */
  listReferrals(
    request: ListReferralsRequest,
    callback: (error: ServiceError | null, response: ListReferralsResponse) => void,
  ): ClientUnaryCall;
  listReferrals(
    request: ListReferralsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListReferralsResponse) => void,
  ): ClientUnaryCall;
  listReferrals(
    request: ListReferralsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListReferralsResponse) => void,
  ): ClientUnaryCall;
  referredBy(
    request: RefferedByRequest,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
  referredBy(
    request: RefferedByRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
  referredBy(
    request: RefferedByRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Referral) => void,
  ): ClientUnaryCall;
}

export const ReferralServiceClient = makeGenericClientConstructor(
  ReferralServiceService,
  "blast.v1.referral.ReferralService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ReferralServiceClient;
  service: typeof ReferralServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
