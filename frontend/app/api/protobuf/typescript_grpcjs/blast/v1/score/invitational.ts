// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/score/invitational.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** SSIndividualInvitationalEvent */
export interface SSIndividualInvitationalEvent {
  /**
   * The resource name of SSIndividualInvitationalEvent.
   * Format: invitationals/SSIndividual/events/{event}
   */
  name: string;
  /**
   * target year month.
   * This invitational event is held monthly.
   * iso 8601 format. ex) 2024-02
   */
  yearMonth: string;
  /** The invitational event start date. */
  startDate:
    | string
    | undefined;
  /** The invitational event end date. */
  endDate:
    | string
    | undefined;
  /** The user should write username in discord. */
  formLink: string;
}

/**
 * SSIndividualInvitational
 *
 * @deprecated
 */
export interface SSIndividualInvitational {
  /**
   * The resource name of SSIndividualInvitational.
   * Format: invitationals/SSIndividuals/{invitational}
   */
  name: string;
  /**
   * target year month.
   * This invitational is held monthly.
   * iso 8601 format. ex) 2024-02
   */
  yearMonth: string;
  /** The invitational start date. */
  startDate:
    | string
    | undefined;
  /** The invitational end date. */
  endDate:
    | string
    | undefined;
  /** The user should write username in discord. */
  formLink: string;
}

/** ListSSIndividualInvitationalEventsRequest */
export interface ListSSIndividualInvitationalEventsRequest {
  /** page size */
  pageSize: number;
}

/** ListSSIndividualInvitationalEventsResponse */
export interface ListSSIndividualInvitationalEventsResponse {
  /** The list of SSIndividualInvitationalEvents. */
  invitationalEvents: SSIndividualInvitationalEvent[];
}

/** CreateSSIndividualInvitationalEventRequest */
export interface CreateSSIndividualInvitationalEventRequest {
  /** The SSIndividualInvitationalEvent to create. */
  invitationalEvent: SSIndividualInvitationalEvent | undefined;
}

/**
 * GetSSIndividualInvitationalLetterRequest
 *
 * @deprecated
 */
export interface GetSSIndividualInvitationalLetterRequest {
}

/**
 * SSIndividualInvitationalLetter
 *
 * @deprecated
 */
export interface SSIndividualInvitationalLetter {
  /** invitational */
  invitational: SSIndividualInvitational | undefined;
}

/** InviteSSIndividualInvitationalEventRequest */
export interface InviteSSIndividualInvitationalEventRequest {
  /**
   * The resource name of SSIndividualInvitationalEvent.
   * Format: invitationals/SSIndividual/events/{event}
   */
  invitationalEvent: string;
  /**
   * The list of invitees.
   * Format: users/{user}
   */
  invitees: string[];
  /** letter viewable start time */
  viewableStartTime:
    | string
    | undefined;
  /** letter viewable end time */
  viewableEndTime: string | undefined;
}

/** InviteSSIndividualInvitationalEventResponse */
export interface InviteSSIndividualInvitationalEventResponse {
  /**
   * The resource name of SSIndividualInvitationalEvent.
   * Format: invitationals/SSIndividual/events/{event}
   */
  invitationalEvent: string;
  /**
   * The list of invitees.
   * Format: users/{user}
   */
  invitees: string[];
  /** letter viewable start time */
  viewableStartTime:
    | string
    | undefined;
  /** letter viewable end time */
  viewableEndTime: string | undefined;
}

function createBaseSSIndividualInvitationalEvent(): SSIndividualInvitationalEvent {
  return { name: "", yearMonth: "", startDate: undefined, endDate: undefined, formLink: "" };
}

export const SSIndividualInvitationalEvent: MessageFns<SSIndividualInvitationalEvent> = {
  encode(message: SSIndividualInvitationalEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.yearMonth !== "") {
      writer.uint32(18).string(message.yearMonth);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
    }
    if (message.formLink !== "") {
      writer.uint32(42).string(message.formLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SSIndividualInvitationalEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSIndividualInvitationalEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.yearMonth = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.formLink = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SSIndividualInvitationalEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      yearMonth: isSet(object.yearMonth) ? globalThis.String(object.yearMonth) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      formLink: isSet(object.formLink) ? globalThis.String(object.formLink) : "",
    };
  },

  toJSON(message: SSIndividualInvitationalEvent): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.yearMonth !== undefined) {
      obj.yearMonth = message.yearMonth;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.formLink !== undefined) {
      obj.formLink = message.formLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SSIndividualInvitationalEvent>, I>>(base?: I): SSIndividualInvitationalEvent {
    return SSIndividualInvitationalEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SSIndividualInvitationalEvent>, I>>(
    object: I,
  ): SSIndividualInvitationalEvent {
    const message = createBaseSSIndividualInvitationalEvent();
    message.name = object.name ?? "";
    message.yearMonth = object.yearMonth ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.formLink = object.formLink ?? "";
    return message;
  },
};

function createBaseSSIndividualInvitational(): SSIndividualInvitational {
  return { name: "", yearMonth: "", startDate: undefined, endDate: undefined, formLink: "" };
}

export const SSIndividualInvitational: MessageFns<SSIndividualInvitational> = {
  encode(message: SSIndividualInvitational, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.yearMonth !== "") {
      writer.uint32(18).string(message.yearMonth);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
    }
    if (message.formLink !== "") {
      writer.uint32(42).string(message.formLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SSIndividualInvitational {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSIndividualInvitational();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.yearMonth = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.formLink = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SSIndividualInvitational {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      yearMonth: isSet(object.yearMonth) ? globalThis.String(object.yearMonth) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      formLink: isSet(object.formLink) ? globalThis.String(object.formLink) : "",
    };
  },

  toJSON(message: SSIndividualInvitational): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.yearMonth !== undefined) {
      obj.yearMonth = message.yearMonth;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.formLink !== undefined) {
      obj.formLink = message.formLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SSIndividualInvitational>, I>>(base?: I): SSIndividualInvitational {
    return SSIndividualInvitational.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SSIndividualInvitational>, I>>(object: I): SSIndividualInvitational {
    const message = createBaseSSIndividualInvitational();
    message.name = object.name ?? "";
    message.yearMonth = object.yearMonth ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.formLink = object.formLink ?? "";
    return message;
  },
};

function createBaseListSSIndividualInvitationalEventsRequest(): ListSSIndividualInvitationalEventsRequest {
  return { pageSize: 0 };
}

export const ListSSIndividualInvitationalEventsRequest: MessageFns<ListSSIndividualInvitationalEventsRequest> = {
  encode(message: ListSSIndividualInvitationalEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSSIndividualInvitationalEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSSIndividualInvitationalEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSSIndividualInvitationalEventsRequest {
    return { pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0 };
  },

  toJSON(message: ListSSIndividualInvitationalEventsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSSIndividualInvitationalEventsRequest>, I>>(
    base?: I,
  ): ListSSIndividualInvitationalEventsRequest {
    return ListSSIndividualInvitationalEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSSIndividualInvitationalEventsRequest>, I>>(
    object: I,
  ): ListSSIndividualInvitationalEventsRequest {
    const message = createBaseListSSIndividualInvitationalEventsRequest();
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListSSIndividualInvitationalEventsResponse(): ListSSIndividualInvitationalEventsResponse {
  return { invitationalEvents: [] };
}

export const ListSSIndividualInvitationalEventsResponse: MessageFns<ListSSIndividualInvitationalEventsResponse> = {
  encode(message: ListSSIndividualInvitationalEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.invitationalEvents) {
      SSIndividualInvitationalEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSSIndividualInvitationalEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSSIndividualInvitationalEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationalEvents.push(SSIndividualInvitationalEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSSIndividualInvitationalEventsResponse {
    return {
      invitationalEvents: globalThis.Array.isArray(object?.invitationalEvents)
        ? object.invitationalEvents.map((e: any) => SSIndividualInvitationalEvent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSSIndividualInvitationalEventsResponse): unknown {
    const obj: any = {};
    if (message.invitationalEvents?.length) {
      obj.invitationalEvents = message.invitationalEvents.map((e) => SSIndividualInvitationalEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSSIndividualInvitationalEventsResponse>, I>>(
    base?: I,
  ): ListSSIndividualInvitationalEventsResponse {
    return ListSSIndividualInvitationalEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSSIndividualInvitationalEventsResponse>, I>>(
    object: I,
  ): ListSSIndividualInvitationalEventsResponse {
    const message = createBaseListSSIndividualInvitationalEventsResponse();
    message.invitationalEvents = object.invitationalEvents?.map((e) => SSIndividualInvitationalEvent.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseCreateSSIndividualInvitationalEventRequest(): CreateSSIndividualInvitationalEventRequest {
  return { invitationalEvent: undefined };
}

export const CreateSSIndividualInvitationalEventRequest: MessageFns<CreateSSIndividualInvitationalEventRequest> = {
  encode(message: CreateSSIndividualInvitationalEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitationalEvent !== undefined) {
      SSIndividualInvitationalEvent.encode(message.invitationalEvent, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSSIndividualInvitationalEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSSIndividualInvitationalEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationalEvent = SSIndividualInvitationalEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSSIndividualInvitationalEventRequest {
    return {
      invitationalEvent: isSet(object.invitationalEvent)
        ? SSIndividualInvitationalEvent.fromJSON(object.invitationalEvent)
        : undefined,
    };
  },

  toJSON(message: CreateSSIndividualInvitationalEventRequest): unknown {
    const obj: any = {};
    if (message.invitationalEvent !== undefined) {
      obj.invitationalEvent = SSIndividualInvitationalEvent.toJSON(message.invitationalEvent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSSIndividualInvitationalEventRequest>, I>>(
    base?: I,
  ): CreateSSIndividualInvitationalEventRequest {
    return CreateSSIndividualInvitationalEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSSIndividualInvitationalEventRequest>, I>>(
    object: I,
  ): CreateSSIndividualInvitationalEventRequest {
    const message = createBaseCreateSSIndividualInvitationalEventRequest();
    message.invitationalEvent = (object.invitationalEvent !== undefined && object.invitationalEvent !== null)
      ? SSIndividualInvitationalEvent.fromPartial(object.invitationalEvent)
      : undefined;
    return message;
  },
};

function createBaseGetSSIndividualInvitationalLetterRequest(): GetSSIndividualInvitationalLetterRequest {
  return {};
}

export const GetSSIndividualInvitationalLetterRequest: MessageFns<GetSSIndividualInvitationalLetterRequest> = {
  encode(_: GetSSIndividualInvitationalLetterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSSIndividualInvitationalLetterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSSIndividualInvitationalLetterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSSIndividualInvitationalLetterRequest {
    return {};
  },

  toJSON(_: GetSSIndividualInvitationalLetterRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSSIndividualInvitationalLetterRequest>, I>>(
    base?: I,
  ): GetSSIndividualInvitationalLetterRequest {
    return GetSSIndividualInvitationalLetterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSSIndividualInvitationalLetterRequest>, I>>(
    _: I,
  ): GetSSIndividualInvitationalLetterRequest {
    const message = createBaseGetSSIndividualInvitationalLetterRequest();
    return message;
  },
};

function createBaseSSIndividualInvitationalLetter(): SSIndividualInvitationalLetter {
  return { invitational: undefined };
}

export const SSIndividualInvitationalLetter: MessageFns<SSIndividualInvitationalLetter> = {
  encode(message: SSIndividualInvitationalLetter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitational !== undefined) {
      SSIndividualInvitational.encode(message.invitational, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SSIndividualInvitationalLetter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSIndividualInvitationalLetter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitational = SSIndividualInvitational.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SSIndividualInvitationalLetter {
    return {
      invitational: isSet(object.invitational) ? SSIndividualInvitational.fromJSON(object.invitational) : undefined,
    };
  },

  toJSON(message: SSIndividualInvitationalLetter): unknown {
    const obj: any = {};
    if (message.invitational !== undefined) {
      obj.invitational = SSIndividualInvitational.toJSON(message.invitational);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SSIndividualInvitationalLetter>, I>>(base?: I): SSIndividualInvitationalLetter {
    return SSIndividualInvitationalLetter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SSIndividualInvitationalLetter>, I>>(
    object: I,
  ): SSIndividualInvitationalLetter {
    const message = createBaseSSIndividualInvitationalLetter();
    message.invitational = (object.invitational !== undefined && object.invitational !== null)
      ? SSIndividualInvitational.fromPartial(object.invitational)
      : undefined;
    return message;
  },
};

function createBaseInviteSSIndividualInvitationalEventRequest(): InviteSSIndividualInvitationalEventRequest {
  return { invitationalEvent: "", invitees: [], viewableStartTime: undefined, viewableEndTime: undefined };
}

export const InviteSSIndividualInvitationalEventRequest: MessageFns<InviteSSIndividualInvitationalEventRequest> = {
  encode(message: InviteSSIndividualInvitationalEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitationalEvent !== "") {
      writer.uint32(10).string(message.invitationalEvent);
    }
    for (const v of message.invitees) {
      writer.uint32(18).string(v!);
    }
    if (message.viewableStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.viewableStartTime), writer.uint32(26).fork()).join();
    }
    if (message.viewableEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.viewableEndTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteSSIndividualInvitationalEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteSSIndividualInvitationalEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationalEvent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitees.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.viewableStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.viewableEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteSSIndividualInvitationalEventRequest {
    return {
      invitationalEvent: isSet(object.invitationalEvent) ? globalThis.String(object.invitationalEvent) : "",
      invitees: globalThis.Array.isArray(object?.invitees) ? object.invitees.map((e: any) => globalThis.String(e)) : [],
      viewableStartTime: isSet(object.viewableStartTime) ? globalThis.String(object.viewableStartTime) : undefined,
      viewableEndTime: isSet(object.viewableEndTime) ? globalThis.String(object.viewableEndTime) : undefined,
    };
  },

  toJSON(message: InviteSSIndividualInvitationalEventRequest): unknown {
    const obj: any = {};
    if (message.invitationalEvent !== undefined) {
      obj.invitationalEvent = message.invitationalEvent;
    }
    if (message.invitees?.length) {
      obj.invitees = message.invitees;
    }
    if (message.viewableStartTime !== undefined) {
      obj.viewableStartTime = message.viewableStartTime;
    }
    if (message.viewableEndTime !== undefined) {
      obj.viewableEndTime = message.viewableEndTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteSSIndividualInvitationalEventRequest>, I>>(
    base?: I,
  ): InviteSSIndividualInvitationalEventRequest {
    return InviteSSIndividualInvitationalEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteSSIndividualInvitationalEventRequest>, I>>(
    object: I,
  ): InviteSSIndividualInvitationalEventRequest {
    const message = createBaseInviteSSIndividualInvitationalEventRequest();
    message.invitationalEvent = object.invitationalEvent ?? "";
    message.invitees = object.invitees?.map((e) => e) || [];
    message.viewableStartTime = object.viewableStartTime ?? undefined;
    message.viewableEndTime = object.viewableEndTime ?? undefined;
    return message;
  },
};

function createBaseInviteSSIndividualInvitationalEventResponse(): InviteSSIndividualInvitationalEventResponse {
  return { invitationalEvent: "", invitees: [], viewableStartTime: undefined, viewableEndTime: undefined };
}

export const InviteSSIndividualInvitationalEventResponse: MessageFns<InviteSSIndividualInvitationalEventResponse> = {
  encode(
    message: InviteSSIndividualInvitationalEventResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.invitationalEvent !== "") {
      writer.uint32(10).string(message.invitationalEvent);
    }
    for (const v of message.invitees) {
      writer.uint32(18).string(v!);
    }
    if (message.viewableStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.viewableStartTime), writer.uint32(26).fork()).join();
    }
    if (message.viewableEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.viewableEndTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteSSIndividualInvitationalEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteSSIndividualInvitationalEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationalEvent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitees.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.viewableStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.viewableEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteSSIndividualInvitationalEventResponse {
    return {
      invitationalEvent: isSet(object.invitationalEvent) ? globalThis.String(object.invitationalEvent) : "",
      invitees: globalThis.Array.isArray(object?.invitees) ? object.invitees.map((e: any) => globalThis.String(e)) : [],
      viewableStartTime: isSet(object.viewableStartTime) ? globalThis.String(object.viewableStartTime) : undefined,
      viewableEndTime: isSet(object.viewableEndTime) ? globalThis.String(object.viewableEndTime) : undefined,
    };
  },

  toJSON(message: InviteSSIndividualInvitationalEventResponse): unknown {
    const obj: any = {};
    if (message.invitationalEvent !== undefined) {
      obj.invitationalEvent = message.invitationalEvent;
    }
    if (message.invitees?.length) {
      obj.invitees = message.invitees;
    }
    if (message.viewableStartTime !== undefined) {
      obj.viewableStartTime = message.viewableStartTime;
    }
    if (message.viewableEndTime !== undefined) {
      obj.viewableEndTime = message.viewableEndTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteSSIndividualInvitationalEventResponse>, I>>(
    base?: I,
  ): InviteSSIndividualInvitationalEventResponse {
    return InviteSSIndividualInvitationalEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteSSIndividualInvitationalEventResponse>, I>>(
    object: I,
  ): InviteSSIndividualInvitationalEventResponse {
    const message = createBaseInviteSSIndividualInvitationalEventResponse();
    message.invitationalEvent = object.invitationalEvent ?? "";
    message.invitees = object.invitees?.map((e) => e) || [];
    message.viewableStartTime = object.viewableStartTime ?? undefined;
    message.viewableEndTime = object.viewableEndTime ?? undefined;
    return message;
  },
};

/** InvitationalService */
export type InvitationalServiceService = typeof InvitationalServiceService;
export const InvitationalServiceService = {
  /**
   * ListSSIndividualInvitationals
   * admin
   */
  listSsIndividualInvitationalEvents: {
    path: "/blast.v1.score.InvitationalService/ListSSIndividualInvitationalEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListSSIndividualInvitationalEventsRequest) =>
      Buffer.from(ListSSIndividualInvitationalEventsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListSSIndividualInvitationalEventsRequest.decode(value),
    responseSerialize: (value: ListSSIndividualInvitationalEventsResponse) =>
      Buffer.from(ListSSIndividualInvitationalEventsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListSSIndividualInvitationalEventsResponse.decode(value),
  },
  /**
   * CreateSSIndividualInvitationalEvent
   * admin
   */
  createSsIndividualInvitationalEvent: {
    path: "/blast.v1.score.InvitationalService/CreateSSIndividualInvitationalEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateSSIndividualInvitationalEventRequest) =>
      Buffer.from(CreateSSIndividualInvitationalEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateSSIndividualInvitationalEventRequest.decode(value),
    responseSerialize: (value: SSIndividualInvitationalEvent) =>
      Buffer.from(SSIndividualInvitationalEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SSIndividualInvitationalEvent.decode(value),
  },
  /**
   * GetSSIndividualInvitationalLetter
   * Get Active Invitational Letter
   * deprecated: use ListInvitationLetters
   *
   * @deprecated
   */
  getSsIndividualInvitationalLetter: {
    path: "/blast.v1.score.InvitationalService/GetSSIndividualInvitationalLetter",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSSIndividualInvitationalLetterRequest) =>
      Buffer.from(GetSSIndividualInvitationalLetterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSSIndividualInvitationalLetterRequest.decode(value),
    responseSerialize: (value: SSIndividualInvitationalLetter) =>
      Buffer.from(SSIndividualInvitationalLetter.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SSIndividualInvitationalLetter.decode(value),
  },
  /**
   * InviteSSIndividualInvitationalEvent
   * Send invitations based on past results.
   * for admin, not public api.
   */
  inviteSsIndividualInvitationalEvent: {
    path: "/blast.v1.score.InvitationalService/InviteSSIndividualInvitationalEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InviteSSIndividualInvitationalEventRequest) =>
      Buffer.from(InviteSSIndividualInvitationalEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InviteSSIndividualInvitationalEventRequest.decode(value),
    responseSerialize: (value: InviteSSIndividualInvitationalEventResponse) =>
      Buffer.from(InviteSSIndividualInvitationalEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InviteSSIndividualInvitationalEventResponse.decode(value),
  },
} as const;

export interface InvitationalServiceServer extends UntypedServiceImplementation {
  /**
   * ListSSIndividualInvitationals
   * admin
   */
  listSsIndividualInvitationalEvents: handleUnaryCall<
    ListSSIndividualInvitationalEventsRequest,
    ListSSIndividualInvitationalEventsResponse
  >;
  /**
   * CreateSSIndividualInvitationalEvent
   * admin
   */
  createSsIndividualInvitationalEvent: handleUnaryCall<
    CreateSSIndividualInvitationalEventRequest,
    SSIndividualInvitationalEvent
  >;
  /**
   * GetSSIndividualInvitationalLetter
   * Get Active Invitational Letter
   * deprecated: use ListInvitationLetters
   *
   * @deprecated
   */
  getSsIndividualInvitationalLetter: handleUnaryCall<
    GetSSIndividualInvitationalLetterRequest,
    SSIndividualInvitationalLetter
  >;
  /**
   * InviteSSIndividualInvitationalEvent
   * Send invitations based on past results.
   * for admin, not public api.
   */
  inviteSsIndividualInvitationalEvent: handleUnaryCall<
    InviteSSIndividualInvitationalEventRequest,
    InviteSSIndividualInvitationalEventResponse
  >;
}

export interface InvitationalServiceClient extends Client {
  /**
   * ListSSIndividualInvitationals
   * admin
   */
  listSsIndividualInvitationalEvents(
    request: ListSSIndividualInvitationalEventsRequest,
    callback: (error: ServiceError | null, response: ListSSIndividualInvitationalEventsResponse) => void,
  ): ClientUnaryCall;
  listSsIndividualInvitationalEvents(
    request: ListSSIndividualInvitationalEventsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListSSIndividualInvitationalEventsResponse) => void,
  ): ClientUnaryCall;
  listSsIndividualInvitationalEvents(
    request: ListSSIndividualInvitationalEventsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListSSIndividualInvitationalEventsResponse) => void,
  ): ClientUnaryCall;
  /**
   * CreateSSIndividualInvitationalEvent
   * admin
   */
  createSsIndividualInvitationalEvent(
    request: CreateSSIndividualInvitationalEventRequest,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalEvent) => void,
  ): ClientUnaryCall;
  createSsIndividualInvitationalEvent(
    request: CreateSSIndividualInvitationalEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalEvent) => void,
  ): ClientUnaryCall;
  createSsIndividualInvitationalEvent(
    request: CreateSSIndividualInvitationalEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalEvent) => void,
  ): ClientUnaryCall;
  /**
   * GetSSIndividualInvitationalLetter
   * Get Active Invitational Letter
   * deprecated: use ListInvitationLetters
   *
   * @deprecated
   */
  getSsIndividualInvitationalLetter(
    request: GetSSIndividualInvitationalLetterRequest,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalLetter) => void,
  ): ClientUnaryCall;
  getSsIndividualInvitationalLetter(
    request: GetSSIndividualInvitationalLetterRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalLetter) => void,
  ): ClientUnaryCall;
  getSsIndividualInvitationalLetter(
    request: GetSSIndividualInvitationalLetterRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SSIndividualInvitationalLetter) => void,
  ): ClientUnaryCall;
  /**
   * InviteSSIndividualInvitationalEvent
   * Send invitations based on past results.
   * for admin, not public api.
   */
  inviteSsIndividualInvitationalEvent(
    request: InviteSSIndividualInvitationalEventRequest,
    callback: (error: ServiceError | null, response: InviteSSIndividualInvitationalEventResponse) => void,
  ): ClientUnaryCall;
  inviteSsIndividualInvitationalEvent(
    request: InviteSSIndividualInvitationalEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InviteSSIndividualInvitationalEventResponse) => void,
  ): ClientUnaryCall;
  inviteSsIndividualInvitationalEvent(
    request: InviteSSIndividualInvitationalEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InviteSSIndividualInvitationalEventResponse) => void,
  ): ClientUnaryCall;
}

export const InvitationalServiceClient = makeGenericClientConstructor(
  InvitationalServiceService,
  "blast.v1.score.InvitationalService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InvitationalServiceClient;
  service: typeof InvitationalServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
