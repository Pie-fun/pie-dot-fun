// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/spaceship/spaceship.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { FieldMask } from "../../../google/protobuf/field_mask";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** The state of spaceship */
export enum SpaceshipType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** PROTOSHIP -  */
  PROTOSHIP = "PROTOSHIP",
  /** OWNERSHIP -  */
  OWNERSHIP = "OWNERSHIP",
}

export function spaceshipTypeFromJSON(object: any): SpaceshipType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SpaceshipType.TYPE_UNSPECIFIED;
    case 1:
    case "PROTOSHIP":
      return SpaceshipType.PROTOSHIP;
    case 2:
    case "OWNERSHIP":
      return SpaceshipType.OWNERSHIP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SpaceshipType");
  }
}

export function spaceshipTypeToJSON(object: SpaceshipType): string {
  switch (object) {
    case SpaceshipType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SpaceshipType.PROTOSHIP:
      return "PROTOSHIP";
    case SpaceshipType.OWNERSHIP:
      return "OWNERSHIP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SpaceshipType");
  }
}

export function spaceshipTypeToNumber(object: SpaceshipType): number {
  switch (object) {
    case SpaceshipType.TYPE_UNSPECIFIED:
      return 0;
    case SpaceshipType.PROTOSHIP:
      return 1;
    case SpaceshipType.OWNERSHIP:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SpaceshipType");
  }
}

export interface ListSpaceshipsRequest {
  /**
   * The maximum number of spaceships to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSpaceships` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * create_time
   *   * `>`
   * * identified
   *   * Equal`
   *
   * Examples
   * * name="spaceships/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * create_time>"2020-04-21T11:30:00Z"
   * * identifed
   */
  filter: string;
}

export interface GetSpaceshipRequest {
  /**
   * The name of the spaceship to retrieve.
   * Format: spaceships/{address}
   * Alias "spaceships/me" is supported.
   */
  spaceship: string;
}

/**
 * ListSpaceshipsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListSpaceshipsResponse {
  /** The list of rows that matched the query. */
  spaceships: Spaceship[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

export interface UpdateSpaceshipRequest {
  /**
   * Spaceship to update
   * Format: spaceships/{address}
   */
  spaceship:
    | Spaceship
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nickname"]
   */
  updateMask: string[] | undefined;
}

export interface Spaceship {
  /**
   * The resource name of the Spaceship.
   * Format: spaceships/{address}
   */
  name: string;
  /** EIP-6551 TBA Address of the Spaceship NFT. */
  address: string;
  /**  */
  ownerAddress: string;
  /**  */
  type: SpaceshipType;
  /**
   * The created time of Spaceship.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /** The updated time of Spaceship. */
  nft: SpaceshipNFT | undefined;
}

export interface SpaceshipNFT {
  /** Token ID of the NFT asset. */
  tokenId: string;
  /**
   * The URI of the NFT asset's image.
   * This URI is cached version of image original URI
   * e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
   */
  imageUri: string;
  /** The URI of the NFT asset's metadata. */
  metadataUri: string;
}

function createBaseListSpaceshipsRequest(): ListSpaceshipsRequest {
  return { pageSize: 0, pageToken: "", filter: "" };
}

export const ListSpaceshipsRequest: MessageFns<ListSpaceshipsRequest> = {
  encode(message: ListSpaceshipsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpaceshipsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpaceshipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpaceshipsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSpaceshipsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSpaceshipsRequest>, I>>(base?: I): ListSpaceshipsRequest {
    return ListSpaceshipsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSpaceshipsRequest>, I>>(object: I): ListSpaceshipsRequest {
    const message = createBaseListSpaceshipsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseGetSpaceshipRequest(): GetSpaceshipRequest {
  return { spaceship: "" };
}

export const GetSpaceshipRequest: MessageFns<GetSpaceshipRequest> = {
  encode(message: GetSpaceshipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spaceship !== "") {
      writer.uint32(10).string(message.spaceship);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpaceshipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpaceshipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spaceship = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpaceshipRequest {
    return { spaceship: isSet(object.spaceship) ? globalThis.String(object.spaceship) : "" };
  },

  toJSON(message: GetSpaceshipRequest): unknown {
    const obj: any = {};
    if (message.spaceship !== undefined) {
      obj.spaceship = message.spaceship;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpaceshipRequest>, I>>(base?: I): GetSpaceshipRequest {
    return GetSpaceshipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpaceshipRequest>, I>>(object: I): GetSpaceshipRequest {
    const message = createBaseGetSpaceshipRequest();
    message.spaceship = object.spaceship ?? "";
    return message;
  },
};

function createBaseListSpaceshipsResponse(): ListSpaceshipsResponse {
  return { spaceships: [], nextPageToken: "" };
}

export const ListSpaceshipsResponse: MessageFns<ListSpaceshipsResponse> = {
  encode(message: ListSpaceshipsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spaceships) {
      Spaceship.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpaceshipsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpaceshipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spaceships.push(Spaceship.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpaceshipsResponse {
    return {
      spaceships: globalThis.Array.isArray(object?.spaceships)
        ? object.spaceships.map((e: any) => Spaceship.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSpaceshipsResponse): unknown {
    const obj: any = {};
    if (message.spaceships?.length) {
      obj.spaceships = message.spaceships.map((e) => Spaceship.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSpaceshipsResponse>, I>>(base?: I): ListSpaceshipsResponse {
    return ListSpaceshipsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSpaceshipsResponse>, I>>(object: I): ListSpaceshipsResponse {
    const message = createBaseListSpaceshipsResponse();
    message.spaceships = object.spaceships?.map((e) => Spaceship.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateSpaceshipRequest(): UpdateSpaceshipRequest {
  return { spaceship: undefined, updateMask: undefined };
}

export const UpdateSpaceshipRequest: MessageFns<UpdateSpaceshipRequest> = {
  encode(message: UpdateSpaceshipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spaceship !== undefined) {
      Spaceship.encode(message.spaceship, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpaceshipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpaceshipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spaceship = Spaceship.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpaceshipRequest {
    return {
      spaceship: isSet(object.spaceship) ? Spaceship.fromJSON(object.spaceship) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSpaceshipRequest): unknown {
    const obj: any = {};
    if (message.spaceship !== undefined) {
      obj.spaceship = Spaceship.toJSON(message.spaceship);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSpaceshipRequest>, I>>(base?: I): UpdateSpaceshipRequest {
    return UpdateSpaceshipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSpaceshipRequest>, I>>(object: I): UpdateSpaceshipRequest {
    const message = createBaseUpdateSpaceshipRequest();
    message.spaceship = (object.spaceship !== undefined && object.spaceship !== null)
      ? Spaceship.fromPartial(object.spaceship)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseSpaceship(): Spaceship {
  return {
    name: "",
    address: "",
    ownerAddress: "",
    type: SpaceshipType.TYPE_UNSPECIFIED,
    createTime: undefined,
    nft: undefined,
  };
}

export const Spaceship: MessageFns<Spaceship> = {
  encode(message: Spaceship, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.ownerAddress !== "") {
      writer.uint32(26).string(message.ownerAddress);
    }
    if (message.type !== SpaceshipType.TYPE_UNSPECIFIED) {
      writer.uint32(32).int32(spaceshipTypeToNumber(message.type));
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.nft !== undefined) {
      SpaceshipNFT.encode(message.nft, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spaceship {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceship();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = spaceshipTypeFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nft = SpaceshipNFT.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spaceship {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "",
      type: isSet(object.type) ? spaceshipTypeFromJSON(object.type) : SpaceshipType.TYPE_UNSPECIFIED,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      nft: isSet(object.nft) ? SpaceshipNFT.fromJSON(object.nft) : undefined,
    };
  },

  toJSON(message: Spaceship): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.ownerAddress !== undefined) {
      obj.ownerAddress = message.ownerAddress;
    }
    if (message.type !== undefined) {
      obj.type = spaceshipTypeToJSON(message.type);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.nft !== undefined) {
      obj.nft = SpaceshipNFT.toJSON(message.nft);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Spaceship>, I>>(base?: I): Spaceship {
    return Spaceship.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Spaceship>, I>>(object: I): Spaceship {
    const message = createBaseSpaceship();
    message.name = object.name ?? "";
    message.address = object.address ?? "";
    message.ownerAddress = object.ownerAddress ?? "";
    message.type = object.type ?? SpaceshipType.TYPE_UNSPECIFIED;
    message.createTime = object.createTime ?? undefined;
    message.nft = (object.nft !== undefined && object.nft !== null) ? SpaceshipNFT.fromPartial(object.nft) : undefined;
    return message;
  },
};

function createBaseSpaceshipNFT(): SpaceshipNFT {
  return { tokenId: "", imageUri: "", metadataUri: "" };
}

export const SpaceshipNFT: MessageFns<SpaceshipNFT> = {
  encode(message: SpaceshipNFT, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenId !== "") {
      writer.uint32(10).string(message.tokenId);
    }
    if (message.imageUri !== "") {
      writer.uint32(18).string(message.imageUri);
    }
    if (message.metadataUri !== "") {
      writer.uint32(26).string(message.metadataUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpaceshipNFT {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceshipNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceshipNFT {
    return {
      tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "",
    };
  },

  toJSON(message: SpaceshipNFT): unknown {
    const obj: any = {};
    if (message.tokenId !== undefined) {
      obj.tokenId = message.tokenId;
    }
    if (message.imageUri !== undefined) {
      obj.imageUri = message.imageUri;
    }
    if (message.metadataUri !== undefined) {
      obj.metadataUri = message.metadataUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceshipNFT>, I>>(base?: I): SpaceshipNFT {
    return SpaceshipNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpaceshipNFT>, I>>(object: I): SpaceshipNFT {
    const message = createBaseSpaceshipNFT();
    message.tokenId = object.tokenId ?? "";
    message.imageUri = object.imageUri ?? "";
    message.metadataUri = object.metadataUri ?? "";
    return message;
  },
};

/** SpaceshipService contains the function to interact with the Spaceship of the spacebar */
export type SpaceshipServiceService = typeof SpaceshipServiceService;
export const SpaceshipServiceService = {
  getSpaceship: {
    path: "/blast.v1.spaceship.SpaceshipService/GetSpaceship",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSpaceshipRequest) => Buffer.from(GetSpaceshipRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSpaceshipRequest.decode(value),
    responseSerialize: (value: Spaceship) => Buffer.from(Spaceship.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Spaceship.decode(value),
  },
} as const;

export interface SpaceshipServiceServer extends UntypedServiceImplementation {
  getSpaceship: handleUnaryCall<GetSpaceshipRequest, Spaceship>;
}

export interface SpaceshipServiceClient extends Client {
  getSpaceship(
    request: GetSpaceshipRequest,
    callback: (error: ServiceError | null, response: Spaceship) => void,
  ): ClientUnaryCall;
  getSpaceship(
    request: GetSpaceshipRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Spaceship) => void,
  ): ClientUnaryCall;
  getSpaceship(
    request: GetSpaceshipRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Spaceship) => void,
  ): ClientUnaryCall;
}

export const SpaceshipServiceClient = makeGenericClientConstructor(
  SpaceshipServiceService,
  "blast.v1.spaceship.SpaceshipService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SpaceshipServiceClient;
  service: typeof SpaceshipServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
