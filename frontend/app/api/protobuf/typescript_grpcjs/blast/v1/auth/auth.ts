// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/auth/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export enum AuthRole {
  /** ROLE_UNSPECIFIED - default value. this value is unused. */
  ROLE_UNSPECIFIED = "ROLE_UNSPECIFIED",
  ADMIN = "ADMIN",
  USER = "USER",
}

export function authRoleFromJSON(object: any): AuthRole {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return AuthRole.ROLE_UNSPECIFIED;
    case 1:
    case "ADMIN":
      return AuthRole.ADMIN;
    case 2:
    case "USER":
      return AuthRole.USER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AuthRole");
  }
}

export function authRoleToJSON(object: AuthRole): string {
  switch (object) {
    case AuthRole.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case AuthRole.ADMIN:
      return "ADMIN";
    case AuthRole.USER:
      return "USER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AuthRole");
  }
}

export function authRoleToNumber(object: AuthRole): number {
  switch (object) {
    case AuthRole.ROLE_UNSPECIFIED:
      return 0;
    case AuthRole.ADMIN:
      return 1;
    case AuthRole.USER:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AuthRole");
  }
}

export enum AccessLogType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** SIGNIN -  */
  SIGNIN = "SIGNIN",
  /** REFRESH -  */
  REFRESH = "REFRESH",
  /** SIGNOUT -  */
  SIGNOUT = "SIGNOUT",
}

export function accessLogTypeFromJSON(object: any): AccessLogType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AccessLogType.TYPE_UNSPECIFIED;
    case 1:
    case "SIGNIN":
      return AccessLogType.SIGNIN;
    case 2:
    case "REFRESH":
      return AccessLogType.REFRESH;
    case 3:
    case "SIGNOUT":
      return AccessLogType.SIGNOUT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AccessLogType");
  }
}

export function accessLogTypeToJSON(object: AccessLogType): string {
  switch (object) {
    case AccessLogType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AccessLogType.SIGNIN:
      return "SIGNIN";
    case AccessLogType.REFRESH:
      return "REFRESH";
    case AccessLogType.SIGNOUT:
      return "SIGNOUT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AccessLogType");
  }
}

export function accessLogTypeToNumber(object: AccessLogType): number {
  switch (object) {
    case AccessLogType.TYPE_UNSPECIFIED:
      return 0;
    case AccessLogType.SIGNIN:
      return 1;
    case AccessLogType.REFRESH:
      return 2;
    case AccessLogType.SIGNOUT:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AccessLogType");
  }
}

export interface SignInRequest {
  eoaAddress: string;
  timestamp: number;
  signature: string;
}

export interface SignInResponse {
  accessToken: string;
  refreshToken: string;
  eoaAddress: string;
  hasSpaceship: boolean;
  hasNickname: boolean;
  hasAcceptedTerms: boolean;
}

export interface RefreshTokenRequest {
}

export interface RefreshTokenResponse {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
}

export interface SignoutRequest {
}

export interface SignoutResponse {
}

export interface AuthenticateRequest {
  accessToken: string;
}

export interface AuthenticateResponse {
  eoaAddress: string;
  hasSpaceship: boolean;
  hasNickname: boolean;
  hasAcceptedTerms: boolean;
}

export interface GetTempTokenRequest {
}

export interface GetTempTokenResponse {
  accessToken: string;
}

export interface DownloadRequest {
  url: string;
}

export interface DownloadResponse {
  header: string;
  body: string;
}

export interface AccessTokenClaim {
  sessionId: string;
  userAddress: string;
  hasSpaceship: boolean;
  hasNickname: boolean;
  hasAcceptedTerms: boolean;
  role?: AuthRole | undefined;
}

function createBaseSignInRequest(): SignInRequest {
  return { eoaAddress: "", timestamp: 0, signature: "" };
}

export const SignInRequest: MessageFns<SignInRequest> = {
  encode(message: SignInRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eoaAddress !== "") {
      writer.uint32(10).string(message.eoaAddress);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.signature !== "") {
      writer.uint32(26).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eoaAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInRequest {
    return {
      eoaAddress: isSet(object.eoaAddress) ? globalThis.String(object.eoaAddress) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: SignInRequest): unknown {
    const obj: any = {};
    if (message.eoaAddress !== undefined) {
      obj.eoaAddress = message.eoaAddress;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInRequest>, I>>(base?: I): SignInRequest {
    return SignInRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInRequest>, I>>(object: I): SignInRequest {
    const message = createBaseSignInRequest();
    message.eoaAddress = object.eoaAddress ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseSignInResponse(): SignInResponse {
  return {
    accessToken: "",
    refreshToken: "",
    eoaAddress: "",
    hasSpaceship: false,
    hasNickname: false,
    hasAcceptedTerms: false,
  };
}

export const SignInResponse: MessageFns<SignInResponse> = {
  encode(message: SignInResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    if (message.eoaAddress !== "") {
      writer.uint32(26).string(message.eoaAddress);
    }
    if (message.hasSpaceship !== false) {
      writer.uint32(32).bool(message.hasSpaceship);
    }
    if (message.hasNickname !== false) {
      writer.uint32(40).bool(message.hasNickname);
    }
    if (message.hasAcceptedTerms !== false) {
      writer.uint32(48).bool(message.hasAcceptedTerms);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eoaAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasSpaceship = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hasNickname = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hasAcceptedTerms = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      eoaAddress: isSet(object.eoaAddress) ? globalThis.String(object.eoaAddress) : "",
      hasSpaceship: isSet(object.hasSpaceship) ? globalThis.Boolean(object.hasSpaceship) : false,
      hasNickname: isSet(object.hasNickname) ? globalThis.Boolean(object.hasNickname) : false,
      hasAcceptedTerms: isSet(object.hasAcceptedTerms) ? globalThis.Boolean(object.hasAcceptedTerms) : false,
    };
  },

  toJSON(message: SignInResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== undefined) {
      obj.refreshToken = message.refreshToken;
    }
    if (message.eoaAddress !== undefined) {
      obj.eoaAddress = message.eoaAddress;
    }
    if (message.hasSpaceship !== undefined) {
      obj.hasSpaceship = message.hasSpaceship;
    }
    if (message.hasNickname !== undefined) {
      obj.hasNickname = message.hasNickname;
    }
    if (message.hasAcceptedTerms !== undefined) {
      obj.hasAcceptedTerms = message.hasAcceptedTerms;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInResponse>, I>>(base?: I): SignInResponse {
    return SignInResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInResponse>, I>>(object: I): SignInResponse {
    const message = createBaseSignInResponse();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.eoaAddress = object.eoaAddress ?? "";
    message.hasSpaceship = object.hasSpaceship ?? false;
    message.hasNickname = object.hasNickname ?? false;
    message.hasAcceptedTerms = object.hasAcceptedTerms ?? false;
    return message;
  },
};

function createBaseRefreshTokenRequest(): RefreshTokenRequest {
  return {};
}

export const RefreshTokenRequest: MessageFns<RefreshTokenRequest> = {
  encode(_: RefreshTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RefreshTokenRequest {
    return {};
  },

  toJSON(_: RefreshTokenRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(base?: I): RefreshTokenRequest {
    return RefreshTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(_: I): RefreshTokenRequest {
    const message = createBaseRefreshTokenRequest();
    return message;
  },
};

function createBaseRefreshTokenResponse(): RefreshTokenResponse {
  return { accessToken: undefined, refreshToken: undefined };
}

export const RefreshTokenResponse: MessageFns<RefreshTokenResponse> = {
  encode(message: RefreshTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== undefined) {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== undefined) {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : undefined,
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : undefined,
    };
  },

  toJSON(message: RefreshTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== undefined) {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenResponse>, I>>(base?: I): RefreshTokenResponse {
    return RefreshTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenResponse>, I>>(object: I): RefreshTokenResponse {
    const message = createBaseRefreshTokenResponse();
    message.accessToken = object.accessToken ?? undefined;
    message.refreshToken = object.refreshToken ?? undefined;
    return message;
  },
};

function createBaseSignoutRequest(): SignoutRequest {
  return {};
}

export const SignoutRequest: MessageFns<SignoutRequest> = {
  encode(_: SignoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SignoutRequest {
    return {};
  },

  toJSON(_: SignoutRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SignoutRequest>, I>>(base?: I): SignoutRequest {
    return SignoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignoutRequest>, I>>(_: I): SignoutRequest {
    const message = createBaseSignoutRequest();
    return message;
  },
};

function createBaseSignoutResponse(): SignoutResponse {
  return {};
}

export const SignoutResponse: MessageFns<SignoutResponse> = {
  encode(_: SignoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SignoutResponse {
    return {};
  },

  toJSON(_: SignoutResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SignoutResponse>, I>>(base?: I): SignoutResponse {
    return SignoutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignoutResponse>, I>>(_: I): SignoutResponse {
    const message = createBaseSignoutResponse();
    return message;
  },
};

function createBaseAuthenticateRequest(): AuthenticateRequest {
  return { accessToken: "" };
}

export const AuthenticateRequest: MessageFns<AuthenticateRequest> = {
  encode(message: AuthenticateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthenticateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthenticateRequest {
    return { accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "" };
  },

  toJSON(message: AuthenticateRequest): unknown {
    const obj: any = {};
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthenticateRequest>, I>>(base?: I): AuthenticateRequest {
    return AuthenticateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthenticateRequest>, I>>(object: I): AuthenticateRequest {
    const message = createBaseAuthenticateRequest();
    message.accessToken = object.accessToken ?? "";
    return message;
  },
};

function createBaseAuthenticateResponse(): AuthenticateResponse {
  return { eoaAddress: "", hasSpaceship: false, hasNickname: false, hasAcceptedTerms: false };
}

export const AuthenticateResponse: MessageFns<AuthenticateResponse> = {
  encode(message: AuthenticateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eoaAddress !== "") {
      writer.uint32(10).string(message.eoaAddress);
    }
    if (message.hasSpaceship !== false) {
      writer.uint32(16).bool(message.hasSpaceship);
    }
    if (message.hasNickname !== false) {
      writer.uint32(24).bool(message.hasNickname);
    }
    if (message.hasAcceptedTerms !== false) {
      writer.uint32(32).bool(message.hasAcceptedTerms);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthenticateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eoaAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hasSpaceship = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasNickname = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasAcceptedTerms = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthenticateResponse {
    return {
      eoaAddress: isSet(object.eoaAddress) ? globalThis.String(object.eoaAddress) : "",
      hasSpaceship: isSet(object.hasSpaceship) ? globalThis.Boolean(object.hasSpaceship) : false,
      hasNickname: isSet(object.hasNickname) ? globalThis.Boolean(object.hasNickname) : false,
      hasAcceptedTerms: isSet(object.hasAcceptedTerms) ? globalThis.Boolean(object.hasAcceptedTerms) : false,
    };
  },

  toJSON(message: AuthenticateResponse): unknown {
    const obj: any = {};
    if (message.eoaAddress !== undefined) {
      obj.eoaAddress = message.eoaAddress;
    }
    if (message.hasSpaceship !== undefined) {
      obj.hasSpaceship = message.hasSpaceship;
    }
    if (message.hasNickname !== undefined) {
      obj.hasNickname = message.hasNickname;
    }
    if (message.hasAcceptedTerms !== undefined) {
      obj.hasAcceptedTerms = message.hasAcceptedTerms;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthenticateResponse>, I>>(base?: I): AuthenticateResponse {
    return AuthenticateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthenticateResponse>, I>>(object: I): AuthenticateResponse {
    const message = createBaseAuthenticateResponse();
    message.eoaAddress = object.eoaAddress ?? "";
    message.hasSpaceship = object.hasSpaceship ?? false;
    message.hasNickname = object.hasNickname ?? false;
    message.hasAcceptedTerms = object.hasAcceptedTerms ?? false;
    return message;
  },
};

function createBaseGetTempTokenRequest(): GetTempTokenRequest {
  return {};
}

export const GetTempTokenRequest: MessageFns<GetTempTokenRequest> = {
  encode(_: GetTempTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTempTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTempTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTempTokenRequest {
    return {};
  },

  toJSON(_: GetTempTokenRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTempTokenRequest>, I>>(base?: I): GetTempTokenRequest {
    return GetTempTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTempTokenRequest>, I>>(_: I): GetTempTokenRequest {
    const message = createBaseGetTempTokenRequest();
    return message;
  },
};

function createBaseGetTempTokenResponse(): GetTempTokenResponse {
  return { accessToken: "" };
}

export const GetTempTokenResponse: MessageFns<GetTempTokenResponse> = {
  encode(message: GetTempTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTempTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTempTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTempTokenResponse {
    return { accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "" };
  },

  toJSON(message: GetTempTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTempTokenResponse>, I>>(base?: I): GetTempTokenResponse {
    return GetTempTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTempTokenResponse>, I>>(object: I): GetTempTokenResponse {
    const message = createBaseGetTempTokenResponse();
    message.accessToken = object.accessToken ?? "";
    return message;
  },
};

function createBaseDownloadRequest(): DownloadRequest {
  return { url: "" };
}

export const DownloadRequest: MessageFns<DownloadRequest> = {
  encode(message: DownloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownloadRequest {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: DownloadRequest): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadRequest>, I>>(base?: I): DownloadRequest {
    return DownloadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadRequest>, I>>(object: I): DownloadRequest {
    const message = createBaseDownloadRequest();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseDownloadResponse(): DownloadResponse {
  return { header: "", body: "" };
}

export const DownloadResponse: MessageFns<DownloadResponse> = {
  encode(message: DownloadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownloadResponse {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: DownloadResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadResponse>, I>>(base?: I): DownloadResponse {
    return DownloadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadResponse>, I>>(object: I): DownloadResponse {
    const message = createBaseDownloadResponse();
    message.header = object.header ?? "";
    message.body = object.body ?? "";
    return message;
  },
};

function createBaseAccessTokenClaim(): AccessTokenClaim {
  return {
    sessionId: "",
    userAddress: "",
    hasSpaceship: false,
    hasNickname: false,
    hasAcceptedTerms: false,
    role: undefined,
  };
}

export const AccessTokenClaim: MessageFns<AccessTokenClaim> = {
  encode(message: AccessTokenClaim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.hasSpaceship !== false) {
      writer.uint32(24).bool(message.hasSpaceship);
    }
    if (message.hasNickname !== false) {
      writer.uint32(32).bool(message.hasNickname);
    }
    if (message.hasAcceptedTerms !== false) {
      writer.uint32(40).bool(message.hasAcceptedTerms);
    }
    if (message.role !== undefined) {
      writer.uint32(48).int32(authRoleToNumber(message.role));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTokenClaim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTokenClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasSpaceship = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasNickname = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hasAcceptedTerms = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.role = authRoleFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessTokenClaim {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      hasSpaceship: isSet(object.hasSpaceship) ? globalThis.Boolean(object.hasSpaceship) : false,
      hasNickname: isSet(object.hasNickname) ? globalThis.Boolean(object.hasNickname) : false,
      hasAcceptedTerms: isSet(object.hasAcceptedTerms) ? globalThis.Boolean(object.hasAcceptedTerms) : false,
      role: isSet(object.role) ? authRoleFromJSON(object.role) : undefined,
    };
  },

  toJSON(message: AccessTokenClaim): unknown {
    const obj: any = {};
    if (message.sessionId !== undefined) {
      obj.sessionId = message.sessionId;
    }
    if (message.userAddress !== undefined) {
      obj.userAddress = message.userAddress;
    }
    if (message.hasSpaceship !== undefined) {
      obj.hasSpaceship = message.hasSpaceship;
    }
    if (message.hasNickname !== undefined) {
      obj.hasNickname = message.hasNickname;
    }
    if (message.hasAcceptedTerms !== undefined) {
      obj.hasAcceptedTerms = message.hasAcceptedTerms;
    }
    if (message.role !== undefined) {
      obj.role = authRoleToJSON(message.role);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessTokenClaim>, I>>(base?: I): AccessTokenClaim {
    return AccessTokenClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessTokenClaim>, I>>(object: I): AccessTokenClaim {
    const message = createBaseAccessTokenClaim();
    message.sessionId = object.sessionId ?? "";
    message.userAddress = object.userAddress ?? "";
    message.hasSpaceship = object.hasSpaceship ?? false;
    message.hasNickname = object.hasNickname ?? false;
    message.hasAcceptedTerms = object.hasAcceptedTerms ?? false;
    message.role = object.role ?? undefined;
    return message;
  },
};

/** AuthService contains the function to interact with the Auth of the spacebar */
export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  /** Signin signs in a user and returns a session id. */
  signIn: {
    path: "/blast.v1.auth.AuthService/SignIn",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignInRequest) => Buffer.from(SignInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignInRequest.decode(value),
    responseSerialize: (value: SignInResponse) => Buffer.from(SignInResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignInResponse.decode(value),
  },
  /** Refresh refreshes a session. */
  refresh: {
    path: "/blast.v1.auth.AuthService/Refresh",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefreshTokenRequest) => Buffer.from(RefreshTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RefreshTokenRequest.decode(value),
    responseSerialize: (value: RefreshTokenResponse) => Buffer.from(RefreshTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RefreshTokenResponse.decode(value),
  },
  /** Signout signs out a user. */
  signOut: {
    path: "/blast.v1.auth.AuthService/SignOut",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignoutRequest) => Buffer.from(SignoutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignoutRequest.decode(value),
    responseSerialize: (value: SignoutResponse) => Buffer.from(SignoutResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignoutResponse.decode(value),
  },
  /** Authenticate authenticates token */
  authenticate: {
    path: "/blast.v1.auth.AuthService/Authenticate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthenticateRequest) => Buffer.from(AuthenticateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthenticateRequest.decode(value),
    responseSerialize: (value: AuthenticateResponse) => Buffer.from(AuthenticateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthenticateResponse.decode(value),
  },
  /** GetTempToken returns a short-lived token. */
  getTempToken: {
    path: "/blast.v1.auth.AuthService/GetTempToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTempTokenRequest) => Buffer.from(GetTempTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTempTokenRequest.decode(value),
    responseSerialize: (value: GetTempTokenResponse) => Buffer.from(GetTempTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTempTokenResponse.decode(value),
  },
  download: {
    path: "/blast.v1.auth.AuthService/Download",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DownloadRequest) => Buffer.from(DownloadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DownloadRequest.decode(value),
    responseSerialize: (value: DownloadResponse) => Buffer.from(DownloadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DownloadResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  /** Signin signs in a user and returns a session id. */
  signIn: handleUnaryCall<SignInRequest, SignInResponse>;
  /** Refresh refreshes a session. */
  refresh: handleUnaryCall<RefreshTokenRequest, RefreshTokenResponse>;
  /** Signout signs out a user. */
  signOut: handleUnaryCall<SignoutRequest, SignoutResponse>;
  /** Authenticate authenticates token */
  authenticate: handleUnaryCall<AuthenticateRequest, AuthenticateResponse>;
  /** GetTempToken returns a short-lived token. */
  getTempToken: handleUnaryCall<GetTempTokenRequest, GetTempTokenResponse>;
  download: handleUnaryCall<DownloadRequest, DownloadResponse>;
}

export interface AuthServiceClient extends Client {
  /** Signin signs in a user and returns a session id. */
  signIn(
    request: SignInRequest,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  /** Refresh refreshes a session. */
  refresh(
    request: RefreshTokenRequest,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  refresh(
    request: RefreshTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  refresh(
    request: RefreshTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  /** Signout signs out a user. */
  signOut(
    request: SignoutRequest,
    callback: (error: ServiceError | null, response: SignoutResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignoutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignoutResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignoutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignoutResponse) => void,
  ): ClientUnaryCall;
  /** Authenticate authenticates token */
  authenticate(
    request: AuthenticateRequest,
    callback: (error: ServiceError | null, response: AuthenticateResponse) => void,
  ): ClientUnaryCall;
  authenticate(
    request: AuthenticateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthenticateResponse) => void,
  ): ClientUnaryCall;
  authenticate(
    request: AuthenticateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthenticateResponse) => void,
  ): ClientUnaryCall;
  /** GetTempToken returns a short-lived token. */
  getTempToken(
    request: GetTempTokenRequest,
    callback: (error: ServiceError | null, response: GetTempTokenResponse) => void,
  ): ClientUnaryCall;
  getTempToken(
    request: GetTempTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTempTokenResponse) => void,
  ): ClientUnaryCall;
  getTempToken(
    request: GetTempTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTempTokenResponse) => void,
  ): ClientUnaryCall;
  download(
    request: DownloadRequest,
    callback: (error: ServiceError | null, response: DownloadResponse) => void,
  ): ClientUnaryCall;
  download(
    request: DownloadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DownloadResponse) => void,
  ): ClientUnaryCall;
  download(
    request: DownloadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DownloadResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(
  AuthServiceService,
  "blast.v1.auth.AuthService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
