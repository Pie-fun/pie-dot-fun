// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/wallet/wallet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export interface GetWalletRequest {
  /**
   * The name of the wallet to retrieve.
   * Format: wallets/{address}
   * Alias "wallets/me" is supported.
   */
  wallet: string;
}

export interface Wallet {
  address: string;
  totalPoints: number;
  earlyAccess: EarlyAccess | undefined;
  blastBridge: BlastBridge | undefined;
  nftAssets: NFTAssets | undefined;
  cryptoOg: CryptoOG | undefined;
}

export interface EarlyAccess {
  galxePoints: number;
}

export interface BlastBridge {
  ETH: number;
  stETH: number;
  DAI: number;
  USDT: number;
  USDC: number;
}

export interface NFTAssets {
  count: number;
}

export interface CryptoOG {
  og: boolean;
}

function createBaseGetWalletRequest(): GetWalletRequest {
  return { wallet: "" };
}

export const GetWalletRequest: MessageFns<GetWalletRequest> = {
  encode(message: GetWalletRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wallet !== "") {
      writer.uint32(10).string(message.wallet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWalletRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWalletRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wallet = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWalletRequest {
    return { wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "" };
  },

  toJSON(message: GetWalletRequest): unknown {
    const obj: any = {};
    if (message.wallet !== undefined) {
      obj.wallet = message.wallet;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWalletRequest>, I>>(base?: I): GetWalletRequest {
    return GetWalletRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWalletRequest>, I>>(object: I): GetWalletRequest {
    const message = createBaseGetWalletRequest();
    message.wallet = object.wallet ?? "";
    return message;
  },
};

function createBaseWallet(): Wallet {
  return {
    address: "",
    totalPoints: 0,
    earlyAccess: undefined,
    blastBridge: undefined,
    nftAssets: undefined,
    cryptoOg: undefined,
  };
}

export const Wallet: MessageFns<Wallet> = {
  encode(message: Wallet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.totalPoints !== 0) {
      writer.uint32(16).uint32(message.totalPoints);
    }
    if (message.earlyAccess !== undefined) {
      EarlyAccess.encode(message.earlyAccess, writer.uint32(26).fork()).join();
    }
    if (message.blastBridge !== undefined) {
      BlastBridge.encode(message.blastBridge, writer.uint32(34).fork()).join();
    }
    if (message.nftAssets !== undefined) {
      NFTAssets.encode(message.nftAssets, writer.uint32(42).fork()).join();
    }
    if (message.cryptoOg !== undefined) {
      CryptoOG.encode(message.cryptoOg, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wallet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWallet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalPoints = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.earlyAccess = EarlyAccess.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.blastBridge = BlastBridge.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nftAssets = NFTAssets.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cryptoOg = CryptoOG.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wallet {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      totalPoints: isSet(object.totalPoints) ? globalThis.Number(object.totalPoints) : 0,
      earlyAccess: isSet(object.earlyAccess) ? EarlyAccess.fromJSON(object.earlyAccess) : undefined,
      blastBridge: isSet(object.blastBridge) ? BlastBridge.fromJSON(object.blastBridge) : undefined,
      nftAssets: isSet(object.nftAssets) ? NFTAssets.fromJSON(object.nftAssets) : undefined,
      cryptoOg: isSet(object.cryptoOg) ? CryptoOG.fromJSON(object.cryptoOg) : undefined,
    };
  },

  toJSON(message: Wallet): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.totalPoints !== undefined) {
      obj.totalPoints = Math.round(message.totalPoints);
    }
    if (message.earlyAccess !== undefined) {
      obj.earlyAccess = EarlyAccess.toJSON(message.earlyAccess);
    }
    if (message.blastBridge !== undefined) {
      obj.blastBridge = BlastBridge.toJSON(message.blastBridge);
    }
    if (message.nftAssets !== undefined) {
      obj.nftAssets = NFTAssets.toJSON(message.nftAssets);
    }
    if (message.cryptoOg !== undefined) {
      obj.cryptoOg = CryptoOG.toJSON(message.cryptoOg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Wallet>, I>>(base?: I): Wallet {
    return Wallet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Wallet>, I>>(object: I): Wallet {
    const message = createBaseWallet();
    message.address = object.address ?? "";
    message.totalPoints = object.totalPoints ?? 0;
    message.earlyAccess = (object.earlyAccess !== undefined && object.earlyAccess !== null)
      ? EarlyAccess.fromPartial(object.earlyAccess)
      : undefined;
    message.blastBridge = (object.blastBridge !== undefined && object.blastBridge !== null)
      ? BlastBridge.fromPartial(object.blastBridge)
      : undefined;
    message.nftAssets = (object.nftAssets !== undefined && object.nftAssets !== null)
      ? NFTAssets.fromPartial(object.nftAssets)
      : undefined;
    message.cryptoOg = (object.cryptoOg !== undefined && object.cryptoOg !== null)
      ? CryptoOG.fromPartial(object.cryptoOg)
      : undefined;
    return message;
  },
};

function createBaseEarlyAccess(): EarlyAccess {
  return { galxePoints: 0 };
}

export const EarlyAccess: MessageFns<EarlyAccess> = {
  encode(message: EarlyAccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.galxePoints !== 0) {
      writer.uint32(8).uint32(message.galxePoints);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EarlyAccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEarlyAccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.galxePoints = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EarlyAccess {
    return { galxePoints: isSet(object.galxePoints) ? globalThis.Number(object.galxePoints) : 0 };
  },

  toJSON(message: EarlyAccess): unknown {
    const obj: any = {};
    if (message.galxePoints !== undefined) {
      obj.galxePoints = Math.round(message.galxePoints);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EarlyAccess>, I>>(base?: I): EarlyAccess {
    return EarlyAccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EarlyAccess>, I>>(object: I): EarlyAccess {
    const message = createBaseEarlyAccess();
    message.galxePoints = object.galxePoints ?? 0;
    return message;
  },
};

function createBaseBlastBridge(): BlastBridge {
  return { ETH: 0, stETH: 0, DAI: 0, USDT: 0, USDC: 0 };
}

export const BlastBridge: MessageFns<BlastBridge> = {
  encode(message: BlastBridge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ETH !== 0) {
      writer.uint32(13).float(message.ETH);
    }
    if (message.stETH !== 0) {
      writer.uint32(21).float(message.stETH);
    }
    if (message.DAI !== 0) {
      writer.uint32(29).float(message.DAI);
    }
    if (message.USDT !== 0) {
      writer.uint32(37).float(message.USDT);
    }
    if (message.USDC !== 0) {
      writer.uint32(45).float(message.USDC);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlastBridge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlastBridge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.ETH = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.stETH = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.DAI = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.USDT = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.USDC = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlastBridge {
    return {
      ETH: isSet(object.ETH) ? globalThis.Number(object.ETH) : 0,
      stETH: isSet(object.stETH) ? globalThis.Number(object.stETH) : 0,
      DAI: isSet(object.DAI) ? globalThis.Number(object.DAI) : 0,
      USDT: isSet(object.USDT) ? globalThis.Number(object.USDT) : 0,
      USDC: isSet(object.USDC) ? globalThis.Number(object.USDC) : 0,
    };
  },

  toJSON(message: BlastBridge): unknown {
    const obj: any = {};
    if (message.ETH !== undefined) {
      obj.ETH = message.ETH;
    }
    if (message.stETH !== undefined) {
      obj.stETH = message.stETH;
    }
    if (message.DAI !== undefined) {
      obj.DAI = message.DAI;
    }
    if (message.USDT !== undefined) {
      obj.USDT = message.USDT;
    }
    if (message.USDC !== undefined) {
      obj.USDC = message.USDC;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlastBridge>, I>>(base?: I): BlastBridge {
    return BlastBridge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlastBridge>, I>>(object: I): BlastBridge {
    const message = createBaseBlastBridge();
    message.ETH = object.ETH ?? 0;
    message.stETH = object.stETH ?? 0;
    message.DAI = object.DAI ?? 0;
    message.USDT = object.USDT ?? 0;
    message.USDC = object.USDC ?? 0;
    return message;
  },
};

function createBaseNFTAssets(): NFTAssets {
  return { count: 0 };
}

export const NFTAssets: MessageFns<NFTAssets> = {
  encode(message: NFTAssets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).uint32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFTAssets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFTAssets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFTAssets {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : 0 };
  },

  toJSON(message: NFTAssets): unknown {
    const obj: any = {};
    if (message.count !== undefined) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NFTAssets>, I>>(base?: I): NFTAssets {
    return NFTAssets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NFTAssets>, I>>(object: I): NFTAssets {
    const message = createBaseNFTAssets();
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseCryptoOG(): CryptoOG {
  return { og: false };
}

export const CryptoOG: MessageFns<CryptoOG> = {
  encode(message: CryptoOG, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.og !== false) {
      writer.uint32(8).bool(message.og);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CryptoOG {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCryptoOG();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.og = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CryptoOG {
    return { og: isSet(object.og) ? globalThis.Boolean(object.og) : false };
  },

  toJSON(message: CryptoOG): unknown {
    const obj: any = {};
    if (message.og !== undefined) {
      obj.og = message.og;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CryptoOG>, I>>(base?: I): CryptoOG {
    return CryptoOG.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CryptoOG>, I>>(object: I): CryptoOG {
    const message = createBaseCryptoOG();
    message.og = object.og ?? false;
    return message;
  },
};

/** WalletService contains the function to interact with the Wallet of the spacebar */
export type WalletServiceService = typeof WalletServiceService;
export const WalletServiceService = {
  getWallet: {
    path: "/blast.v1.wallet.WalletService/GetWallet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWalletRequest) => Buffer.from(GetWalletRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWalletRequest.decode(value),
    responseSerialize: (value: Wallet) => Buffer.from(Wallet.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Wallet.decode(value),
  },
} as const;

export interface WalletServiceServer extends UntypedServiceImplementation {
  getWallet: handleUnaryCall<GetWalletRequest, Wallet>;
}

export interface WalletServiceClient extends Client {
  getWallet(
    request: GetWalletRequest,
    callback: (error: ServiceError | null, response: Wallet) => void,
  ): ClientUnaryCall;
  getWallet(
    request: GetWalletRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Wallet) => void,
  ): ClientUnaryCall;
  getWallet(
    request: GetWalletRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Wallet) => void,
  ): ClientUnaryCall;
}

export const WalletServiceClient = makeGenericClientConstructor(
  WalletServiceService,
  "blast.v1.wallet.WalletService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WalletServiceClient;
  service: typeof WalletServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
