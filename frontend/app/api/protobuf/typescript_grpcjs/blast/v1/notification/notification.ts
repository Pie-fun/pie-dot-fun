// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/notification/notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "../../../google/protobuf/empty";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** Type of the notification. */
export enum NotificationType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** INFO - Plain text info message. */
  INFO = "INFO",
  /** INFO_POINTS_GIVEN - DEPRECATED: Use INFO_SPACEBAR_POINTS_GIVEN instead. */
  INFO_POINTS_GIVEN = "INFO_POINTS_GIVEN",
  INFO_SPACEBAR_POINTS_GIVEN = "INFO_SPACEBAR_POINTS_GIVEN",
  INFO_BLAST_GOLD_GIVEN = "INFO_BLAST_GOLD_GIVEN",
  INFO_BLAST_TOKEN_GIVEN = "INFO_BLAST_TOKEN_GIVEN",
}

export function notificationTypeFromJSON(object: any): NotificationType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return NotificationType.TYPE_UNSPECIFIED;
    case 100:
    case "INFO":
      return NotificationType.INFO;
    case 101:
    case "INFO_POINTS_GIVEN":
      return NotificationType.INFO_POINTS_GIVEN;
    case 110:
    case "INFO_SPACEBAR_POINTS_GIVEN":
      return NotificationType.INFO_SPACEBAR_POINTS_GIVEN;
    case 111:
    case "INFO_BLAST_GOLD_GIVEN":
      return NotificationType.INFO_BLAST_GOLD_GIVEN;
    case 112:
    case "INFO_BLAST_TOKEN_GIVEN":
      return NotificationType.INFO_BLAST_TOKEN_GIVEN;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationType");
  }
}

export function notificationTypeToJSON(object: NotificationType): string {
  switch (object) {
    case NotificationType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case NotificationType.INFO:
      return "INFO";
    case NotificationType.INFO_POINTS_GIVEN:
      return "INFO_POINTS_GIVEN";
    case NotificationType.INFO_SPACEBAR_POINTS_GIVEN:
      return "INFO_SPACEBAR_POINTS_GIVEN";
    case NotificationType.INFO_BLAST_GOLD_GIVEN:
      return "INFO_BLAST_GOLD_GIVEN";
    case NotificationType.INFO_BLAST_TOKEN_GIVEN:
      return "INFO_BLAST_TOKEN_GIVEN";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationType");
  }
}

export function notificationTypeToNumber(object: NotificationType): number {
  switch (object) {
    case NotificationType.TYPE_UNSPECIFIED:
      return 0;
    case NotificationType.INFO:
      return 100;
    case NotificationType.INFO_POINTS_GIVEN:
      return 101;
    case NotificationType.INFO_SPACEBAR_POINTS_GIVEN:
      return 110;
    case NotificationType.INFO_BLAST_GOLD_GIVEN:
      return 111;
    case NotificationType.INFO_BLAST_TOKEN_GIVEN:
      return 112;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationType");
  }
}

/** Action type that can be performed on the notification. */
export enum NotificationAction {
  /** ACTION_UNSPECIFIED - default value. this value is unused. */
  ACTION_UNSPECIFIED = "ACTION_UNSPECIFIED",
  /** NO_OP - No operation. */
  NO_OP = "NO_OP",
  /** NAVIGATE_POINTS_PAGE - Navigate to the points page. */
  NAVIGATE_POINTS_PAGE = "NAVIGATE_POINTS_PAGE",
}

export function notificationActionFromJSON(object: any): NotificationAction {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return NotificationAction.ACTION_UNSPECIFIED;
    case 1:
    case "NO_OP":
      return NotificationAction.NO_OP;
    case 100:
    case "NAVIGATE_POINTS_PAGE":
      return NotificationAction.NAVIGATE_POINTS_PAGE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationAction");
  }
}

export function notificationActionToJSON(object: NotificationAction): string {
  switch (object) {
    case NotificationAction.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case NotificationAction.NO_OP:
      return "NO_OP";
    case NotificationAction.NAVIGATE_POINTS_PAGE:
      return "NAVIGATE_POINTS_PAGE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationAction");
  }
}

export function notificationActionToNumber(object: NotificationAction): number {
  switch (object) {
    case NotificationAction.ACTION_UNSPECIFIED:
      return 0;
    case NotificationAction.NO_OP:
      return 1;
    case NotificationAction.NAVIGATE_POINTS_PAGE:
      return 100;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationAction");
  }
}

/** State of the notification. */
export enum NotificationState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /** CREATED -  */
  CREATED = "CREATED",
  /** ACKNOWLEDGED -  */
  ACKNOWLEDGED = "ACKNOWLEDGED",
  /** EXPIRED -  */
  EXPIRED = "EXPIRED",
}

export function notificationStateFromJSON(object: any): NotificationState {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return NotificationState.STATE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return NotificationState.CREATED;
    case 2:
    case "ACKNOWLEDGED":
      return NotificationState.ACKNOWLEDGED;
    case 3:
    case "EXPIRED":
      return NotificationState.EXPIRED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationState");
  }
}

export function notificationStateToJSON(object: NotificationState): string {
  switch (object) {
    case NotificationState.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case NotificationState.CREATED:
      return "CREATED";
    case NotificationState.ACKNOWLEDGED:
      return "ACKNOWLEDGED";
    case NotificationState.EXPIRED:
      return "EXPIRED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationState");
  }
}

export function notificationStateToNumber(object: NotificationState): number {
  switch (object) {
    case NotificationState.STATE_UNSPECIFIED:
      return 0;
    case NotificationState.CREATED:
      return 1;
    case NotificationState.ACKNOWLEDGED:
      return 2;
    case NotificationState.EXPIRED:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationState");
  }
}

export enum NotificationContentIcon {
  /** ICON_UNSPECIFIED - default value. this value is unused. */
  ICON_UNSPECIFIED = "ICON_UNSPECIFIED",
  ICON_SPACEBAR_POINTS = "ICON_SPACEBAR_POINTS",
  ICON_BLAST_GOLD = "ICON_BLAST_GOLD",
  ICON_BLAST_TOKEN = "ICON_BLAST_TOKEN",
}

export function notificationContentIconFromJSON(object: any): NotificationContentIcon {
  switch (object) {
    case 0:
    case "ICON_UNSPECIFIED":
      return NotificationContentIcon.ICON_UNSPECIFIED;
    case 1:
    case "ICON_SPACEBAR_POINTS":
      return NotificationContentIcon.ICON_SPACEBAR_POINTS;
    case 2:
    case "ICON_BLAST_GOLD":
      return NotificationContentIcon.ICON_BLAST_GOLD;
    case 3:
    case "ICON_BLAST_TOKEN":
      return NotificationContentIcon.ICON_BLAST_TOKEN;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationContentIcon");
  }
}

export function notificationContentIconToJSON(object: NotificationContentIcon): string {
  switch (object) {
    case NotificationContentIcon.ICON_UNSPECIFIED:
      return "ICON_UNSPECIFIED";
    case NotificationContentIcon.ICON_SPACEBAR_POINTS:
      return "ICON_SPACEBAR_POINTS";
    case NotificationContentIcon.ICON_BLAST_GOLD:
      return "ICON_BLAST_GOLD";
    case NotificationContentIcon.ICON_BLAST_TOKEN:
      return "ICON_BLAST_TOKEN";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationContentIcon");
  }
}

export function notificationContentIconToNumber(object: NotificationContentIcon): number {
  switch (object) {
    case NotificationContentIcon.ICON_UNSPECIFIED:
      return 0;
    case NotificationContentIcon.ICON_SPACEBAR_POINTS:
      return 1;
    case NotificationContentIcon.ICON_BLAST_GOLD:
      return 2;
    case NotificationContentIcon.ICON_BLAST_TOKEN:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum NotificationContentIcon");
  }
}

export interface ListNotificationsRequest {
  /**
   * The resource name of User.
   * User is required.
   * Format: users/{address}
   */
  parent: string;
  /**
   * The maximum number of items to return. The service may return fewer than this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListNotifications` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * state
   *   * `Equal`
   * * type
   *   * `Equal`
   *
   * Examples
   * * state=CREATED
   * * type=INFO_POINTS_GIVEN
   */
  filter: string;
}

export interface ListNotificationsResponse {
  notifications: Notification[];
  nextPageToken: string;
}

export interface AcknowledgeNotificationRequest {
  name: string;
}

export interface Notification {
  /**
   * The resource name of the Notification.
   * Format: users/{user_address}/notifications/{id}
   */
  name: string;
  /**
   * The resource name of User.
   * Format: users/{address}
   */
  user: string;
  /** The id of Notification. */
  id: number;
  type: NotificationType;
  action: NotificationAction;
  state: NotificationState;
  icon: NotificationContentIcon;
  title: string;
  body: string;
  metadata: { [key: string]: string };
  /**
   * The created time of Notification.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The expire time of Notification if exists.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  expireTime?:
    | string
    | undefined;
  /** The acknowledged time of Notification. */
  acknowledgeTime?: string | undefined;
}

export interface Notification_MetadataEntry {
  key: string;
  value: string;
}

function createBaseListNotificationsRequest(): ListNotificationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListNotificationsRequest: MessageFns<ListNotificationsRequest> = {
  encode(message: ListNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListNotificationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== undefined) {
      obj.parent = message.parent;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListNotificationsRequest>, I>>(base?: I): ListNotificationsRequest {
    return ListNotificationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListNotificationsRequest>, I>>(object: I): ListNotificationsRequest {
    const message = createBaseListNotificationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListNotificationsResponse(): ListNotificationsResponse {
  return { notifications: [], nextPageToken: "" };
}

export const ListNotificationsResponse: MessageFns<ListNotificationsResponse> = {
  encode(message: ListNotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationsResponse {
    return {
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotificationsResponse): unknown {
    const obj: any = {};
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListNotificationsResponse>, I>>(base?: I): ListNotificationsResponse {
    return ListNotificationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListNotificationsResponse>, I>>(object: I): ListNotificationsResponse {
    const message = createBaseListNotificationsResponse();
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAcknowledgeNotificationRequest(): AcknowledgeNotificationRequest {
  return { name: "" };
}

export const AcknowledgeNotificationRequest: MessageFns<AcknowledgeNotificationRequest> = {
  encode(message: AcknowledgeNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcknowledgeNotificationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: AcknowledgeNotificationRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcknowledgeNotificationRequest>, I>>(base?: I): AcknowledgeNotificationRequest {
    return AcknowledgeNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcknowledgeNotificationRequest>, I>>(
    object: I,
  ): AcknowledgeNotificationRequest {
    const message = createBaseAcknowledgeNotificationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseNotification(): Notification {
  return {
    name: "",
    user: "",
    id: 0,
    type: NotificationType.TYPE_UNSPECIFIED,
    action: NotificationAction.ACTION_UNSPECIFIED,
    state: NotificationState.STATE_UNSPECIFIED,
    icon: NotificationContentIcon.ICON_UNSPECIFIED,
    title: "",
    body: "",
    metadata: {},
    createTime: undefined,
    expireTime: undefined,
    acknowledgeTime: undefined,
  };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.user !== "") {
      writer.uint32(18).string(message.user);
    }
    if (message.id !== 0) {
      writer.uint32(24).uint64(message.id);
    }
    if (message.type !== NotificationType.TYPE_UNSPECIFIED) {
      writer.uint32(32).int32(notificationTypeToNumber(message.type));
    }
    if (message.action !== NotificationAction.ACTION_UNSPECIFIED) {
      writer.uint32(40).int32(notificationActionToNumber(message.action));
    }
    if (message.state !== NotificationState.STATE_UNSPECIFIED) {
      writer.uint32(48).int32(notificationStateToNumber(message.state));
    }
    if (message.icon !== NotificationContentIcon.ICON_UNSPECIFIED) {
      writer.uint32(56).int32(notificationContentIconToNumber(message.icon));
    }
    if (message.title !== "") {
      writer.uint32(66).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(74).string(message.body);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Notification_MetadataEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(106).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(114).fork()).join();
    }
    if (message.acknowledgeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.acknowledgeTime), writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = notificationTypeFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.action = notificationActionFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = notificationStateFromJSON(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.icon = notificationContentIconFromJSON(reader.int32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = Notification_MetadataEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.metadata[entry10.key] = entry10.value;
          }
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.acknowledgeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? notificationTypeFromJSON(object.type) : NotificationType.TYPE_UNSPECIFIED,
      action: isSet(object.action) ? notificationActionFromJSON(object.action) : NotificationAction.ACTION_UNSPECIFIED,
      state: isSet(object.state) ? notificationStateFromJSON(object.state) : NotificationState.STATE_UNSPECIFIED,
      icon: isSet(object.icon)
        ? notificationContentIconFromJSON(object.icon)
        : NotificationContentIcon.ICON_UNSPECIFIED,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      expireTime: isSet(object.expireTime) ? globalThis.String(object.expireTime) : undefined,
      acknowledgeTime: isSet(object.acknowledgeTime) ? globalThis.String(object.acknowledgeTime) : undefined,
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== undefined) {
      obj.type = notificationTypeToJSON(message.type);
    }
    if (message.action !== undefined) {
      obj.action = notificationActionToJSON(message.action);
    }
    if (message.state !== undefined) {
      obj.state = notificationStateToJSON(message.state);
    }
    if (message.icon !== undefined) {
      obj.icon = notificationContentIconToJSON(message.icon);
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime;
    }
    if (message.acknowledgeTime !== undefined) {
      obj.acknowledgeTime = message.acknowledgeTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.name = object.name ?? "";
    message.user = object.user ?? "";
    message.id = object.id ?? 0;
    message.type = object.type ?? NotificationType.TYPE_UNSPECIFIED;
    message.action = object.action ?? NotificationAction.ACTION_UNSPECIFIED;
    message.state = object.state ?? NotificationState.STATE_UNSPECIFIED;
    message.icon = object.icon ?? NotificationContentIcon.ICON_UNSPECIFIED;
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.acknowledgeTime = object.acknowledgeTime ?? undefined;
    return message;
  },
};

function createBaseNotification_MetadataEntry(): Notification_MetadataEntry {
  return { key: "", value: "" };
}

export const Notification_MetadataEntry: MessageFns<Notification_MetadataEntry> = {
  encode(message: Notification_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Notification_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification_MetadataEntry>, I>>(base?: I): Notification_MetadataEntry {
    return Notification_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification_MetadataEntry>, I>>(object: I): Notification_MetadataEntry {
    const message = createBaseNotification_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** NotificationService contains the function to interact with the Notification of the spacebar */
export type NotificationServiceService = typeof NotificationServiceService;
export const NotificationServiceService = {
  /** Signin signs in a user and returns a session id. */
  listNotifications: {
    path: "/blast.v1.notification.NotificationService/ListNotifications",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListNotificationsRequest) => Buffer.from(ListNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListNotificationsRequest.decode(value),
    responseSerialize: (value: ListNotificationsResponse) =>
      Buffer.from(ListNotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListNotificationsResponse.decode(value),
  },
  /** AcknowledgeNotification acknowledges a notification. */
  acknowledgeNotification: {
    path: "/blast.v1.notification.NotificationService/AcknowledgeNotification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AcknowledgeNotificationRequest) =>
      Buffer.from(AcknowledgeNotificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AcknowledgeNotificationRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface NotificationServiceServer extends UntypedServiceImplementation {
  /** Signin signs in a user and returns a session id. */
  listNotifications: handleUnaryCall<ListNotificationsRequest, ListNotificationsResponse>;
  /** AcknowledgeNotification acknowledges a notification. */
  acknowledgeNotification: handleUnaryCall<AcknowledgeNotificationRequest, Empty>;
}

export interface NotificationServiceClient extends Client {
  /** Signin signs in a user and returns a session id. */
  listNotifications(
    request: ListNotificationsRequest,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  listNotifications(
    request: ListNotificationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  listNotifications(
    request: ListNotificationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  /** AcknowledgeNotification acknowledges a notification. */
  acknowledgeNotification(
    request: AcknowledgeNotificationRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  acknowledgeNotification(
    request: AcknowledgeNotificationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  acknowledgeNotification(
    request: AcknowledgeNotificationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const NotificationServiceClient = makeGenericClientConstructor(
  NotificationServiceService,
  "blast.v1.notification.NotificationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NotificationServiceClient;
  service: typeof NotificationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
