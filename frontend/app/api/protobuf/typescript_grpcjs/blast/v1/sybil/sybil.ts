// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/sybil/sybil.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** GetSybilRequest */
export interface GetSybilRequest {
  /** The resource name of the Sybil. */
  name: string;
}

export interface Sybil {
  /** The resource name of the Sybil. */
  name: string;
  createTime: string | undefined;
}

function createBaseGetSybilRequest(): GetSybilRequest {
  return { name: "" };
}

export const GetSybilRequest: MessageFns<GetSybilRequest> = {
  encode(message: GetSybilRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSybilRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSybilRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSybilRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSybilRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSybilRequest>, I>>(base?: I): GetSybilRequest {
    return GetSybilRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSybilRequest>, I>>(object: I): GetSybilRequest {
    const message = createBaseGetSybilRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSybil(): Sybil {
  return { name: "", createTime: undefined };
}

export const Sybil: MessageFns<Sybil> = {
  encode(message: Sybil, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sybil {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSybil();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sybil {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
    };
  },

  toJSON(message: Sybil): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sybil>, I>>(base?: I): Sybil {
    return Sybil.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sybil>, I>>(object: I): Sybil {
    const message = createBaseSybil();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** SybilService contains the function to interact with the Sybil of the spacebar */
export type SybilServiceService = typeof SybilServiceService;
export const SybilServiceService = {
  getSybil: {
    path: "/blast.v1.sybil.SybilService/GetSybil",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSybilRequest) => Buffer.from(GetSybilRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSybilRequest.decode(value),
    responseSerialize: (value: Sybil) => Buffer.from(Sybil.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Sybil.decode(value),
  },
} as const;

export interface SybilServiceServer extends UntypedServiceImplementation {
  getSybil: handleUnaryCall<GetSybilRequest, Sybil>;
}

export interface SybilServiceClient extends Client {
  getSybil(request: GetSybilRequest, callback: (error: ServiceError | null, response: Sybil) => void): ClientUnaryCall;
  getSybil(
    request: GetSybilRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Sybil) => void,
  ): ClientUnaryCall;
  getSybil(
    request: GetSybilRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Sybil) => void,
  ): ClientUnaryCall;
}

export const SybilServiceClient = makeGenericClientConstructor(
  SybilServiceService,
  "blast.v1.sybil.SybilService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SybilServiceClient;
  service: typeof SybilServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
