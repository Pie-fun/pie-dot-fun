// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: blast/v1/time/time.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "../../../google/protobuf/empty";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DateMessage } from "../../../google/type/date";

/**
 * SpacebarWeek has the service-based incremental week number.
 * 2024/02/19 ~ 2024/02/25 => 1
 */
export interface SpacebarWeek {
  /** week. incremental value. */
  week: number;
  /**
   * date. [start_date, end_date]
   * start_date. It's monday
   */
  startDate:
    | DateMessage
    | undefined;
  /** end_date. It's sunday */
  endDate:
    | DateMessage
    | undefined;
  /** full_week_based_year */
  fullWeekBasedYear?:
    | number
    | undefined;
  /** full_week_based_year */
  fullWeekBasedMonth?:
    | number
    | undefined;
  /** full_week_based_week */
  fullWeekBasedWeek?:
    | number
    | undefined;
  /**
   * full_week_based_week_string
   * Format: {year}-{month}-{week}. Example: 2021-01-W1
   */
  fullWeekBasedWeekString: string;
  /**
   * full_week_based_month_string
   * Format: yyyy-MM. Example: 2021-01
   */
  fullWeekBasedMonthString: string;
}

/** GetCurrentTimeResponse */
export interface GetCurrentTimeResponse {
  /** time */
  time: string | undefined;
}

/** GetCurrentWeekResponse */
export interface GetCurrentWeekResponse {
  /** week */
  week: number;
}

/** GetSpacebarWeekRequest */
export interface GetSpacebarWeekRequest {
  /** week */
  week: number;
}

/** GetSpacebarWeekByDateRequest */
export interface GetSpacebarWeekByDateRequest {
  /**
   * date
   * if null, it's today (UTC)
   */
  date?: DateMessage | undefined;
}

/** GetCurrentFullWeekBasedWeekResponse */
export interface GetCurrentFullWeekBasedWeekResponse {
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  currentWeek: string;
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  previousWeek: string;
}

/** GetFullWeekBasedWeekRequest */
export interface GetFullWeekBasedWeekRequest {
  /** base */
  base?:
    | //
    /** date */
    { $case: "date"; date: DateMessage }
    | //
    /** week */
    { $case: "week"; week: number }
    | undefined;
}

/** GetFullWeekBasedWeekResponse */
export interface GetFullWeekBasedWeekResponse {
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  week: string;
}

/** GetCurrentFullWeekBasedMonthResponse */
export interface GetCurrentFullWeekBasedMonthResponse {
  /** Format: yyyy-MM. Example: 2021-01 */
  currentMonth: string;
  /** Format: yyyy-MM. Example: 2021-01 */
  previousMonth: string;
}

function createBaseSpacebarWeek(): SpacebarWeek {
  return {
    week: 0,
    startDate: undefined,
    endDate: undefined,
    fullWeekBasedYear: undefined,
    fullWeekBasedMonth: undefined,
    fullWeekBasedWeek: undefined,
    fullWeekBasedWeekString: "",
    fullWeekBasedMonthString: "",
  };
}

export const SpacebarWeek: MessageFns<SpacebarWeek> = {
  encode(message: SpacebarWeek, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    if (message.startDate !== undefined) {
      DateMessage.encode(message.startDate, writer.uint32(18).fork()).join();
    }
    if (message.endDate !== undefined) {
      DateMessage.encode(message.endDate, writer.uint32(26).fork()).join();
    }
    if (message.fullWeekBasedYear !== undefined) {
      writer.uint32(32).uint32(message.fullWeekBasedYear);
    }
    if (message.fullWeekBasedMonth !== undefined) {
      writer.uint32(40).uint32(message.fullWeekBasedMonth);
    }
    if (message.fullWeekBasedWeek !== undefined) {
      writer.uint32(48).uint32(message.fullWeekBasedWeek);
    }
    if (message.fullWeekBasedWeekString !== "") {
      writer.uint32(58).string(message.fullWeekBasedWeekString);
    }
    if (message.fullWeekBasedMonthString !== "") {
      writer.uint32(66).string(message.fullWeekBasedMonthString);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpacebarWeek {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpacebarWeek();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startDate = DateMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endDate = DateMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fullWeekBasedYear = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fullWeekBasedMonth = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fullWeekBasedWeek = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fullWeekBasedWeekString = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fullWeekBasedMonthString = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpacebarWeek {
    return {
      week: isSet(object.week) ? globalThis.Number(object.week) : 0,
      startDate: isSet(object.startDate) ? DateMessage.fromJSON(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? DateMessage.fromJSON(object.endDate) : undefined,
      fullWeekBasedYear: isSet(object.fullWeekBasedYear) ? globalThis.Number(object.fullWeekBasedYear) : undefined,
      fullWeekBasedMonth: isSet(object.fullWeekBasedMonth) ? globalThis.Number(object.fullWeekBasedMonth) : undefined,
      fullWeekBasedWeek: isSet(object.fullWeekBasedWeek) ? globalThis.Number(object.fullWeekBasedWeek) : undefined,
      fullWeekBasedWeekString: isSet(object.fullWeekBasedWeekString)
        ? globalThis.String(object.fullWeekBasedWeekString)
        : "",
      fullWeekBasedMonthString: isSet(object.fullWeekBasedMonthString)
        ? globalThis.String(object.fullWeekBasedMonthString)
        : "",
    };
  },

  toJSON(message: SpacebarWeek): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    if (message.startDate !== undefined) {
      obj.startDate = DateMessage.toJSON(message.startDate);
    }
    if (message.endDate !== undefined) {
      obj.endDate = DateMessage.toJSON(message.endDate);
    }
    if (message.fullWeekBasedYear !== undefined) {
      obj.fullWeekBasedYear = Math.round(message.fullWeekBasedYear);
    }
    if (message.fullWeekBasedMonth !== undefined) {
      obj.fullWeekBasedMonth = Math.round(message.fullWeekBasedMonth);
    }
    if (message.fullWeekBasedWeek !== undefined) {
      obj.fullWeekBasedWeek = Math.round(message.fullWeekBasedWeek);
    }
    if (message.fullWeekBasedWeekString !== undefined) {
      obj.fullWeekBasedWeekString = message.fullWeekBasedWeekString;
    }
    if (message.fullWeekBasedMonthString !== undefined) {
      obj.fullWeekBasedMonthString = message.fullWeekBasedMonthString;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpacebarWeek>, I>>(base?: I): SpacebarWeek {
    return SpacebarWeek.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpacebarWeek>, I>>(object: I): SpacebarWeek {
    const message = createBaseSpacebarWeek();
    message.week = object.week ?? 0;
    message.startDate = (object.startDate !== undefined && object.startDate !== null)
      ? DateMessage.fromPartial(object.startDate)
      : undefined;
    message.endDate = (object.endDate !== undefined && object.endDate !== null)
      ? DateMessage.fromPartial(object.endDate)
      : undefined;
    message.fullWeekBasedYear = object.fullWeekBasedYear ?? undefined;
    message.fullWeekBasedMonth = object.fullWeekBasedMonth ?? undefined;
    message.fullWeekBasedWeek = object.fullWeekBasedWeek ?? undefined;
    message.fullWeekBasedWeekString = object.fullWeekBasedWeekString ?? "";
    message.fullWeekBasedMonthString = object.fullWeekBasedMonthString ?? "";
    return message;
  },
};

function createBaseGetCurrentTimeResponse(): GetCurrentTimeResponse {
  return { time: undefined };
}

export const GetCurrentTimeResponse: MessageFns<GetCurrentTimeResponse> = {
  encode(message: GetCurrentTimeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentTimeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentTimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentTimeResponse {
    return { time: isSet(object.time) ? globalThis.String(object.time) : undefined };
  },

  toJSON(message: GetCurrentTimeResponse): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentTimeResponse>, I>>(base?: I): GetCurrentTimeResponse {
    return GetCurrentTimeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentTimeResponse>, I>>(object: I): GetCurrentTimeResponse {
    const message = createBaseGetCurrentTimeResponse();
    message.time = object.time ?? undefined;
    return message;
  },
};

function createBaseGetCurrentWeekResponse(): GetCurrentWeekResponse {
  return { week: 0 };
}

export const GetCurrentWeekResponse: MessageFns<GetCurrentWeekResponse> = {
  encode(message: GetCurrentWeekResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentWeekResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentWeekResponse {
    return { week: isSet(object.week) ? globalThis.Number(object.week) : 0 };
  },

  toJSON(message: GetCurrentWeekResponse): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentWeekResponse>, I>>(base?: I): GetCurrentWeekResponse {
    return GetCurrentWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentWeekResponse>, I>>(object: I): GetCurrentWeekResponse {
    const message = createBaseGetCurrentWeekResponse();
    message.week = object.week ?? 0;
    return message;
  },
};

function createBaseGetSpacebarWeekRequest(): GetSpacebarWeekRequest {
  return { week: 0 };
}

export const GetSpacebarWeekRequest: MessageFns<GetSpacebarWeekRequest> = {
  encode(message: GetSpacebarWeekRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpacebarWeekRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpacebarWeekRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpacebarWeekRequest {
    return { week: isSet(object.week) ? globalThis.Number(object.week) : 0 };
  },

  toJSON(message: GetSpacebarWeekRequest): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpacebarWeekRequest>, I>>(base?: I): GetSpacebarWeekRequest {
    return GetSpacebarWeekRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpacebarWeekRequest>, I>>(object: I): GetSpacebarWeekRequest {
    const message = createBaseGetSpacebarWeekRequest();
    message.week = object.week ?? 0;
    return message;
  },
};

function createBaseGetSpacebarWeekByDateRequest(): GetSpacebarWeekByDateRequest {
  return { date: undefined };
}

export const GetSpacebarWeekByDateRequest: MessageFns<GetSpacebarWeekByDateRequest> = {
  encode(message: GetSpacebarWeekByDateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpacebarWeekByDateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpacebarWeekByDateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpacebarWeekByDateRequest {
    return { date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined };
  },

  toJSON(message: GetSpacebarWeekByDateRequest): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpacebarWeekByDateRequest>, I>>(base?: I): GetSpacebarWeekByDateRequest {
    return GetSpacebarWeekByDateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpacebarWeekByDateRequest>, I>>(object: I): GetSpacebarWeekByDateRequest {
    const message = createBaseGetSpacebarWeekByDateRequest();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    return message;
  },
};

function createBaseGetCurrentFullWeekBasedWeekResponse(): GetCurrentFullWeekBasedWeekResponse {
  return { currentWeek: "", previousWeek: "" };
}

export const GetCurrentFullWeekBasedWeekResponse: MessageFns<GetCurrentFullWeekBasedWeekResponse> = {
  encode(message: GetCurrentFullWeekBasedWeekResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentWeek !== "") {
      writer.uint32(10).string(message.currentWeek);
    }
    if (message.previousWeek !== "") {
      writer.uint32(18).string(message.previousWeek);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentFullWeekBasedWeekResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentFullWeekBasedWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentWeek = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousWeek = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentFullWeekBasedWeekResponse {
    return {
      currentWeek: isSet(object.currentWeek) ? globalThis.String(object.currentWeek) : "",
      previousWeek: isSet(object.previousWeek) ? globalThis.String(object.previousWeek) : "",
    };
  },

  toJSON(message: GetCurrentFullWeekBasedWeekResponse): unknown {
    const obj: any = {};
    if (message.currentWeek !== undefined) {
      obj.currentWeek = message.currentWeek;
    }
    if (message.previousWeek !== undefined) {
      obj.previousWeek = message.previousWeek;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentFullWeekBasedWeekResponse>, I>>(
    base?: I,
  ): GetCurrentFullWeekBasedWeekResponse {
    return GetCurrentFullWeekBasedWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentFullWeekBasedWeekResponse>, I>>(
    object: I,
  ): GetCurrentFullWeekBasedWeekResponse {
    const message = createBaseGetCurrentFullWeekBasedWeekResponse();
    message.currentWeek = object.currentWeek ?? "";
    message.previousWeek = object.previousWeek ?? "";
    return message;
  },
};

function createBaseGetFullWeekBasedWeekRequest(): GetFullWeekBasedWeekRequest {
  return { base: undefined };
}

export const GetFullWeekBasedWeekRequest: MessageFns<GetFullWeekBasedWeekRequest> = {
  encode(message: GetFullWeekBasedWeekRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.base?.$case) {
      case "date":
        DateMessage.encode(message.base.date, writer.uint32(10).fork()).join();
        break;
      case "week":
        writer.uint32(16).uint32(message.base.week);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFullWeekBasedWeekRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFullWeekBasedWeekRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = { $case: "date", date: DateMessage.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.base = { $case: "week", week: reader.uint32() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFullWeekBasedWeekRequest {
    return {
      base: isSet(object.date)
        ? { $case: "date", date: DateMessage.fromJSON(object.date) }
        : isSet(object.week)
        ? { $case: "week", week: globalThis.Number(object.week) }
        : undefined,
    };
  },

  toJSON(message: GetFullWeekBasedWeekRequest): unknown {
    const obj: any = {};
    if (message.base?.$case === "date") {
      obj.date = DateMessage.toJSON(message.base.date);
    } else if (message.base?.$case === "week") {
      obj.week = Math.round(message.base.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFullWeekBasedWeekRequest>, I>>(base?: I): GetFullWeekBasedWeekRequest {
    return GetFullWeekBasedWeekRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFullWeekBasedWeekRequest>, I>>(object: I): GetFullWeekBasedWeekRequest {
    const message = createBaseGetFullWeekBasedWeekRequest();
    switch (object.base?.$case) {
      case "date": {
        if (object.base?.date !== undefined && object.base?.date !== null) {
          message.base = { $case: "date", date: DateMessage.fromPartial(object.base.date) };
        }
        break;
      }
      case "week": {
        if (object.base?.week !== undefined && object.base?.week !== null) {
          message.base = { $case: "week", week: object.base.week };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseGetFullWeekBasedWeekResponse(): GetFullWeekBasedWeekResponse {
  return { week: "" };
}

export const GetFullWeekBasedWeekResponse: MessageFns<GetFullWeekBasedWeekResponse> = {
  encode(message: GetFullWeekBasedWeekResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.week !== "") {
      writer.uint32(10).string(message.week);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFullWeekBasedWeekResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFullWeekBasedWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.week = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFullWeekBasedWeekResponse {
    return { week: isSet(object.week) ? globalThis.String(object.week) : "" };
  },

  toJSON(message: GetFullWeekBasedWeekResponse): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = message.week;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFullWeekBasedWeekResponse>, I>>(base?: I): GetFullWeekBasedWeekResponse {
    return GetFullWeekBasedWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFullWeekBasedWeekResponse>, I>>(object: I): GetFullWeekBasedWeekResponse {
    const message = createBaseGetFullWeekBasedWeekResponse();
    message.week = object.week ?? "";
    return message;
  },
};

function createBaseGetCurrentFullWeekBasedMonthResponse(): GetCurrentFullWeekBasedMonthResponse {
  return { currentMonth: "", previousMonth: "" };
}

export const GetCurrentFullWeekBasedMonthResponse: MessageFns<GetCurrentFullWeekBasedMonthResponse> = {
  encode(message: GetCurrentFullWeekBasedMonthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentMonth !== "") {
      writer.uint32(10).string(message.currentMonth);
    }
    if (message.previousMonth !== "") {
      writer.uint32(18).string(message.previousMonth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentFullWeekBasedMonthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentFullWeekBasedMonthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentMonth = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousMonth = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentFullWeekBasedMonthResponse {
    return {
      currentMonth: isSet(object.currentMonth) ? globalThis.String(object.currentMonth) : "",
      previousMonth: isSet(object.previousMonth) ? globalThis.String(object.previousMonth) : "",
    };
  },

  toJSON(message: GetCurrentFullWeekBasedMonthResponse): unknown {
    const obj: any = {};
    if (message.currentMonth !== undefined) {
      obj.currentMonth = message.currentMonth;
    }
    if (message.previousMonth !== undefined) {
      obj.previousMonth = message.previousMonth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentFullWeekBasedMonthResponse>, I>>(
    base?: I,
  ): GetCurrentFullWeekBasedMonthResponse {
    return GetCurrentFullWeekBasedMonthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentFullWeekBasedMonthResponse>, I>>(
    object: I,
  ): GetCurrentFullWeekBasedMonthResponse {
    const message = createBaseGetCurrentFullWeekBasedMonthResponse();
    message.currentMonth = object.currentMonth ?? "";
    message.previousMonth = object.previousMonth ?? "";
    return message;
  },
};

/** TimeService */
export type TimeServiceService = typeof TimeServiceService;
export const TimeServiceService = {
  /** GetCurrentTime */
  getCurrentTime: {
    path: "/blast.v1.time.TimeService/GetCurrentTime",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GetCurrentTimeResponse) => Buffer.from(GetCurrentTimeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCurrentTimeResponse.decode(value),
  },
  /**
   * GetCurrentWeek
   *
   * @deprecated
   */
  getCurrentWeek: {
    path: "/blast.v1.time.TimeService/GetCurrentWeek",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GetCurrentWeekResponse) => Buffer.from(GetCurrentWeekResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCurrentWeekResponse.decode(value),
  },
  /** GetSpacebarWeek */
  getSpacebarWeek: {
    path: "/blast.v1.time.TimeService/GetSpacebarWeek",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSpacebarWeekRequest) => Buffer.from(GetSpacebarWeekRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSpacebarWeekRequest.decode(value),
    responseSerialize: (value: SpacebarWeek) => Buffer.from(SpacebarWeek.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpacebarWeek.decode(value),
  },
  /** GetSpacebarWeekByDate */
  getSpacebarWeekByDate: {
    path: "/blast.v1.time.TimeService/GetSpacebarWeekByDate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSpacebarWeekByDateRequest) =>
      Buffer.from(GetSpacebarWeekByDateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSpacebarWeekByDateRequest.decode(value),
    responseSerialize: (value: SpacebarWeek) => Buffer.from(SpacebarWeek.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpacebarWeek.decode(value),
  },
  /**
   * GetCurrentFullWeekBasedWeek
   *
   * @deprecated
   */
  getCurrentFullWeekBasedWeek: {
    path: "/blast.v1.time.TimeService/GetCurrentFullWeekBasedWeek",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GetCurrentFullWeekBasedWeekResponse) =>
      Buffer.from(GetCurrentFullWeekBasedWeekResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCurrentFullWeekBasedWeekResponse.decode(value),
  },
  /**
   * GetCurrentFullWeekBasedMonth
   *
   * @deprecated
   */
  getCurrentFullWeekBasedMonth: {
    path: "/blast.v1.time.TimeService/GetCurrentFullWeekBasedMonth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GetCurrentFullWeekBasedMonthResponse) =>
      Buffer.from(GetCurrentFullWeekBasedMonthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCurrentFullWeekBasedMonthResponse.decode(value),
  },
} as const;

export interface TimeServiceServer extends UntypedServiceImplementation {
  /** GetCurrentTime */
  getCurrentTime: handleUnaryCall<Empty, GetCurrentTimeResponse>;
  /**
   * GetCurrentWeek
   *
   * @deprecated
   */
  getCurrentWeek: handleUnaryCall<Empty, GetCurrentWeekResponse>;
  /** GetSpacebarWeek */
  getSpacebarWeek: handleUnaryCall<GetSpacebarWeekRequest, SpacebarWeek>;
  /** GetSpacebarWeekByDate */
  getSpacebarWeekByDate: handleUnaryCall<GetSpacebarWeekByDateRequest, SpacebarWeek>;
  /**
   * GetCurrentFullWeekBasedWeek
   *
   * @deprecated
   */
  getCurrentFullWeekBasedWeek: handleUnaryCall<Empty, GetCurrentFullWeekBasedWeekResponse>;
  /**
   * GetCurrentFullWeekBasedMonth
   *
   * @deprecated
   */
  getCurrentFullWeekBasedMonth: handleUnaryCall<Empty, GetCurrentFullWeekBasedMonthResponse>;
}

export interface TimeServiceClient extends Client {
  /** GetCurrentTime */
  getCurrentTime(
    request: Empty,
    callback: (error: ServiceError | null, response: GetCurrentTimeResponse) => void,
  ): ClientUnaryCall;
  getCurrentTime(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCurrentTimeResponse) => void,
  ): ClientUnaryCall;
  getCurrentTime(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCurrentTimeResponse) => void,
  ): ClientUnaryCall;
  /**
   * GetCurrentWeek
   *
   * @deprecated
   */
  getCurrentWeek(
    request: Empty,
    callback: (error: ServiceError | null, response: GetCurrentWeekResponse) => void,
  ): ClientUnaryCall;
  getCurrentWeek(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCurrentWeekResponse) => void,
  ): ClientUnaryCall;
  getCurrentWeek(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCurrentWeekResponse) => void,
  ): ClientUnaryCall;
  /** GetSpacebarWeek */
  getSpacebarWeek(
    request: GetSpacebarWeekRequest,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  getSpacebarWeek(
    request: GetSpacebarWeekRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  getSpacebarWeek(
    request: GetSpacebarWeekRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  /** GetSpacebarWeekByDate */
  getSpacebarWeekByDate(
    request: GetSpacebarWeekByDateRequest,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  getSpacebarWeekByDate(
    request: GetSpacebarWeekByDateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  getSpacebarWeekByDate(
    request: GetSpacebarWeekByDateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpacebarWeek) => void,
  ): ClientUnaryCall;
  /**
   * GetCurrentFullWeekBasedWeek
   *
   * @deprecated
   */
  getCurrentFullWeekBasedWeek(
    request: Empty,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedWeekResponse) => void,
  ): ClientUnaryCall;
  getCurrentFullWeekBasedWeek(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedWeekResponse) => void,
  ): ClientUnaryCall;
  getCurrentFullWeekBasedWeek(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedWeekResponse) => void,
  ): ClientUnaryCall;
  /**
   * GetCurrentFullWeekBasedMonth
   *
   * @deprecated
   */
  getCurrentFullWeekBasedMonth(
    request: Empty,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedMonthResponse) => void,
  ): ClientUnaryCall;
  getCurrentFullWeekBasedMonth(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedMonthResponse) => void,
  ): ClientUnaryCall;
  getCurrentFullWeekBasedMonth(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCurrentFullWeekBasedMonthResponse) => void,
  ): ClientUnaryCall;
}

export const TimeServiceClient = makeGenericClientConstructor(
  TimeServiceService,
  "blast.v1.time.TimeService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TimeServiceClient;
  service: typeof TimeServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
