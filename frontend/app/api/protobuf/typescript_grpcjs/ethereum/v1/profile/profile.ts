// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ethereum/v1/profile/profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { FieldMask } from "../../../google/protobuf/field_mask";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { ChainType, chainTypeFromJSON, chainTypeToJSON, chainTypeToNumber } from "../outpost/nft";
import { MySpace } from "./my_space";
import { SNSType, sNSTypeFromJSON, sNSTypeToJSON, sNSTypeToNumber } from "./sns_connection";

/** The state of profile */
export enum ProfileState {
  /** STATE_UNSPECIFIED - default value. this value is unused. */
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  /**
   * CREATED - Profile was firstly created but not started to rent base spaceship.
   * This state is very transitory state because next transaction will change it to PROTOSHIP_MINTED or OWNERSHIP_ACQUIRED state immediately.
   */
  CREATED = "CREATED",
  /** PROTOSHIP_MINTED - Profile was firstly created with base spaceship rental. */
  PROTOSHIP_MINTED = "PROTOSHIP_MINTED",
  /** PROTOSHIP_BURNED - Profile was created with base spaceship rental but failed to acquire */
  PROTOSHIP_BURNED = "PROTOSHIP_BURNED",
  /** OWNERSHIP_ACQUIRED - Profile has acquired ownership. */
  OWNERSHIP_ACQUIRED = "OWNERSHIP_ACQUIRED",
}

export function profileStateFromJSON(object: any): ProfileState {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ProfileState.STATE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return ProfileState.CREATED;
    case 2:
    case "PROTOSHIP_MINTED":
      return ProfileState.PROTOSHIP_MINTED;
    case 3:
    case "PROTOSHIP_BURNED":
      return ProfileState.PROTOSHIP_BURNED;
    case 4:
    case "OWNERSHIP_ACQUIRED":
      return ProfileState.OWNERSHIP_ACQUIRED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileState");
  }
}

export function profileStateToJSON(object: ProfileState): string {
  switch (object) {
    case ProfileState.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ProfileState.CREATED:
      return "CREATED";
    case ProfileState.PROTOSHIP_MINTED:
      return "PROTOSHIP_MINTED";
    case ProfileState.PROTOSHIP_BURNED:
      return "PROTOSHIP_BURNED";
    case ProfileState.OWNERSHIP_ACQUIRED:
      return "OWNERSHIP_ACQUIRED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileState");
  }
}

export function profileStateToNumber(object: ProfileState): number {
  switch (object) {
    case ProfileState.STATE_UNSPECIFIED:
      return 0;
    case ProfileState.CREATED:
      return 1;
    case ProfileState.PROTOSHIP_MINTED:
      return 2;
    case ProfileState.PROTOSHIP_BURNED:
      return 3;
    case ProfileState.OWNERSHIP_ACQUIRED:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileState");
  }
}

/**
 * ProfileView enumeration represents the view of a profile.
 * The view controls the amount of information returned.
 * The BASIC view omits the following fields:
 * star_balance, sns_connections, gm_stats
 *
 * Reference
 * https://cloud.google.com/apis/design/design_patterns#list_flattening and
 * https://google.aip.dev/157
 */
export enum ProfileView {
  /**
   * Profile_VIEW_UNSPECIFIED - The default / unset value.
   * The API will default to the FULL view.
   */
  Profile_VIEW_UNSPECIFIED = "Profile_VIEW_UNSPECIFIED",
  /**
   * BASIC - Include only basic info.
   * Do not include `nft`, `star_balance`, `sns_connections`, `gm_stats`
   */
  BASIC = "BASIC",
  /**
   * FULL - Include everything.
   * This is the default value for both ListProfiles and GetProfile.
   */
  FULL = "FULL",
}

export function profileViewFromJSON(object: any): ProfileView {
  switch (object) {
    case 0:
    case "Profile_VIEW_UNSPECIFIED":
      return ProfileView.Profile_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return ProfileView.BASIC;
    case 2:
    case "FULL":
      return ProfileView.FULL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileView");
  }
}

export function profileViewToJSON(object: ProfileView): string {
  switch (object) {
    case ProfileView.Profile_VIEW_UNSPECIFIED:
      return "Profile_VIEW_UNSPECIFIED";
    case ProfileView.BASIC:
      return "BASIC";
    case ProfileView.FULL:
      return "FULL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileView");
  }
}

export function profileViewToNumber(object: ProfileView): number {
  switch (object) {
    case ProfileView.Profile_VIEW_UNSPECIFIED:
      return 0;
    case ProfileView.BASIC:
      return 1;
    case ProfileView.FULL:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProfileView");
  }
}

/**
 * ListProfilesRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 */
export interface ListProfilesRequest {
  /**
   * The maximum number of profiles to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListProfiles` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * create_time
   *   * `>`
   * * identified
   *   * Equal`
   *
   * Examples
   * * name="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * create_time>"2020-04-21T11:30:00Z"
   * * identifed
   */
  filter: string;
  /**
   * Optional. The view to return.
   * Defaults to FULL if not set.
   *
   * ProfileView enumeration represents the view of a profile.
   * The view controls the amount of information returned.
   * The BASIC view omits the following fields:
   * star_balance, sns_connections, gm_stats
   *
   * Reference
   * https://cloud.google.com/apis/design/design_patterns#list_flattening and
   * https://google.aip.dev/157
   */
  view: ProfileView;
}

/**
 * ListProfilesResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 */
export interface ListProfilesResponse {
  /** The list of rows that matched the query. */
  profiles: Profile[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

/** GetProfileRequest. */
export interface GetProfileRequest {
  /**
   * The name of the profile to retrieve.
   * Format: profiles/{address}
   * Alias "profiles/me" is supported.
   */
  profile: string;
  /**
   * Optional. The view to return.
   * Defaults to FULL if not set.
   *
   * ProfileView enumeration represents the view of a profile.
   * The view controls the amount of information returned.
   * The BASIC view omits the following fields:
   * star_balance, sns_connections, gm_stats
   *
   * Reference
   * https://cloud.google.com/apis/design/design_patterns#list_flattening and
   * https://google.aip.dev/157
   */
  view: ProfileView;
}

/** UpdateProfileRequest. */
export interface UpdateProfileRequest {
  /**
   * Profile to update
   * Format: profiles/{address}
   */
  profile:
    | Profile
    | undefined;
  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nickname"]
   * ["nickname", "nft"]
   */
  updateMask: string[] | undefined;
}

/** CompleteTutorialRequest message represents a request to complete a tutorial. */
export interface CompleteTutorialRequest {
  /**
   * The profile to complete the tutorial for.
   * Format: profiles/{address}
   * Resource name alias "profiles/me" is supported.
   */
  profile: string;
}

/** CompleteTutorialResponse message represents a response from completing a tutorial. */
export interface CompleteTutorialResponse {
  /** The ID of the completed tutorial. */
  tutorialId: string;
  /** The timestamp of when the tutorial was completed. */
  completedTimestamp: string | undefined;
}

/** GetMySpaceRequest message represents the request to list my space assets. */
export interface GetMySpaceRequest {
  /**
   * The profile whose my space assets should be listed.
   * Format: profiles/{address}
   */
  profile: string;
}

/**
 * UpdateMySpaceRequest message represents the request to update my space assets.
 * There is no update_mask for this request because always upate all my space assets.
 */
export interface UpdateMySpaceRequest {
  /**
   * The profile whose my space assets should be updated.
   * Format: profiles/{address}
   */
  profile: string;
  mySpace: MySpace | undefined;
}

export interface GetProfileDailyPlayCountRequest {
  /** Format: profiles/{address} */
  profile: string;
}

export interface GetProfileDailyPlayCountResponse {
  /** The daily play count of the profile. */
  dailyPlayCount: number;
}

export interface IncrementProfileDailyPlayCountRequest {
  /** Format: profiles/{address} */
  profile: string;
}

export interface IncrementProfileDailyPlayCountResponse {
  /** The daily play count of the profile. */
  dailyPlayCount: number;
}

export interface ConnectSNSRequest {
  /**
   * The profile to connect the SNS.
   * Format: profiles/{address}
   * Resource name alias "profiles/me" is supported.
   */
  profile: string;
  /** The SNS type to connect. */
  snsType: SNSType;
  /**
   * The access token for the SNS API.
   * NOTE: This field can be changed depending on the implementation or SNS type.
   */
  accessToken: string;
  /** The access token secret for the SNS API. */
  accessTokenSecret: string;
}

export interface Profile {
  /**
   * The resource name of the Profile.
   * Format: profiles/{address}
   */
  name: string;
  /** EIP-6551 TBA Address of the Profile NFT. */
  address: string;
  /**
   * The created time of Profile.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  createTime:
    | string
    | undefined;
  /**
   * The last updated time of Profile.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   */
  updateTime:
    | string
    | undefined;
  /** The number of Profile. */
  number: number;
  /** The state of Profile */
  state: ProfileState;
  /** The current pfp nft of Profile. */
  nft:
    | ProfileNFT
    | undefined;
  /** The star account of Profile */
  starAccount:
    | StarAccount
    | undefined;
  /**
   * The ens of profile
   * This field is optional
   */
  ens?:
    | string
    | undefined;
  /**
   * The nickname of Profile.
   * This field is optional.
   */
  nickname?:
    | string
    | undefined;
  /** Whether Profile finished tutorial or not */
  isTutorialDone: boolean;
  /** Whether Profile is identified or not */
  isIdentified: boolean;
}

/** 다양한 tutorial 이 생길 예정 */
export interface Tutorial {
  /** whether tutorial is done or not */
  isDone: boolean;
  /** The completed time of tutorial. */
  completeTime: string | undefined;
}

/** StarAccount message represents a balance of stars for a profile. */
export interface StarAccount {
  /** The current balance of stars. */
  balance: number;
  /** The cumulative total of stars. */
  cumulativeTotal: number;
}

/** GMStatsSlim message represents the statistics for a gm count. */
export interface GMStatsSlim {
  /** The number of messages sent. */
  sentCount: number;
  /** The number of messages received. */
  receivedCount: number;
}

/** ProfileNFT message represents an Profile's NFT. */
export interface ProfileNFT {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   */
  name: string;
  /** Token ID of the NFT asset. */
  tokenId: string;
  /** Token Name of the NFT asset. */
  tokenName: string;
  /**
   * The URI of the NFT asset's image.
   * This URI is cached version of image original URI
   * e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
   */
  imageUri: string;
  /**
   * The contract that owns the NFT asset.
   * Output only.
   */
  contract: ProfileNFTContract | undefined;
}

/** NFTContract message represents an NFT contract. */
export interface ProfileNFTContract {
  /** The address of the NFT contract. */
  address: string;
  /** The name of the NFT contract schema. */
  displayName: string;
  /** The symbol of the NFT contract. */
  symbol: string;
  /** The blockchain on which the NFT contract resides. */
  chain: ChainType;
  /** The URI of the contract image */
  imageUri: string;
}

function createBaseListProfilesRequest(): ListProfilesRequest {
  return { pageSize: 0, pageToken: "", filter: "", view: ProfileView.Profile_VIEW_UNSPECIFIED };
}

export const ListProfilesRequest: MessageFns<ListProfilesRequest> = {
  encode(message: ListProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.view !== ProfileView.Profile_VIEW_UNSPECIFIED) {
      writer.uint32(32).int32(profileViewToNumber(message.view));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.view = profileViewFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      view: isSet(object.view) ? profileViewFromJSON(object.view) : ProfileView.Profile_VIEW_UNSPECIFIED,
    };
  },

  toJSON(message: ListProfilesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.view !== undefined) {
      obj.view = profileViewToJSON(message.view);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProfilesRequest>, I>>(base?: I): ListProfilesRequest {
    return ListProfilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProfilesRequest>, I>>(object: I): ListProfilesRequest {
    const message = createBaseListProfilesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.view = object.view ?? ProfileView.Profile_VIEW_UNSPECIFIED;
    return message;
  },
};

function createBaseListProfilesResponse(): ListProfilesResponse {
  return { profiles: [], nextPageToken: "" };
}

export const ListProfilesResponse: MessageFns<ListProfilesResponse> = {
  encode(message: ListProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      Profile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(Profile.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles) ? object.profiles.map((e: any) => Profile.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => Profile.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProfilesResponse>, I>>(base?: I): ListProfilesResponse {
    return ListProfilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProfilesResponse>, I>>(object: I): ListProfilesResponse {
    const message = createBaseListProfilesResponse();
    message.profiles = object.profiles?.map((e) => Profile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetProfileRequest(): GetProfileRequest {
  return { profile: "", view: ProfileView.Profile_VIEW_UNSPECIFIED };
}

export const GetProfileRequest: MessageFns<GetProfileRequest> = {
  encode(message: GetProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    if (message.view !== ProfileView.Profile_VIEW_UNSPECIFIED) {
      writer.uint32(16).int32(profileViewToNumber(message.view));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.view = profileViewFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileRequest {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      view: isSet(object.view) ? profileViewFromJSON(object.view) : ProfileView.Profile_VIEW_UNSPECIFIED,
    };
  },

  toJSON(message: GetProfileRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.view !== undefined) {
      obj.view = profileViewToJSON(message.view);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileRequest>, I>>(base?: I): GetProfileRequest {
    return GetProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileRequest>, I>>(object: I): GetProfileRequest {
    const message = createBaseGetProfileRequest();
    message.profile = object.profile ?? "";
    message.view = object.view ?? ProfileView.Profile_VIEW_UNSPECIFIED;
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { profile: undefined, updateMask: undefined };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCompleteTutorialRequest(): CompleteTutorialRequest {
  return { profile: "" };
}

export const CompleteTutorialRequest: MessageFns<CompleteTutorialRequest> = {
  encode(message: CompleteTutorialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteTutorialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteTutorialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteTutorialRequest {
    return { profile: isSet(object.profile) ? globalThis.String(object.profile) : "" };
  },

  toJSON(message: CompleteTutorialRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteTutorialRequest>, I>>(base?: I): CompleteTutorialRequest {
    return CompleteTutorialRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteTutorialRequest>, I>>(object: I): CompleteTutorialRequest {
    const message = createBaseCompleteTutorialRequest();
    message.profile = object.profile ?? "";
    return message;
  },
};

function createBaseCompleteTutorialResponse(): CompleteTutorialResponse {
  return { tutorialId: "", completedTimestamp: undefined };
}

export const CompleteTutorialResponse: MessageFns<CompleteTutorialResponse> = {
  encode(message: CompleteTutorialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tutorialId !== "") {
      writer.uint32(10).string(message.tutorialId);
    }
    if (message.completedTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.completedTimestamp), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteTutorialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteTutorialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tutorialId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.completedTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteTutorialResponse {
    return {
      tutorialId: isSet(object.tutorialId) ? globalThis.String(object.tutorialId) : "",
      completedTimestamp: isSet(object.completedTimestamp) ? globalThis.String(object.completedTimestamp) : undefined,
    };
  },

  toJSON(message: CompleteTutorialResponse): unknown {
    const obj: any = {};
    if (message.tutorialId !== undefined) {
      obj.tutorialId = message.tutorialId;
    }
    if (message.completedTimestamp !== undefined) {
      obj.completedTimestamp = message.completedTimestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteTutorialResponse>, I>>(base?: I): CompleteTutorialResponse {
    return CompleteTutorialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteTutorialResponse>, I>>(object: I): CompleteTutorialResponse {
    const message = createBaseCompleteTutorialResponse();
    message.tutorialId = object.tutorialId ?? "";
    message.completedTimestamp = object.completedTimestamp ?? undefined;
    return message;
  },
};

function createBaseGetMySpaceRequest(): GetMySpaceRequest {
  return { profile: "" };
}

export const GetMySpaceRequest: MessageFns<GetMySpaceRequest> = {
  encode(message: GetMySpaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMySpaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMySpaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMySpaceRequest {
    return { profile: isSet(object.profile) ? globalThis.String(object.profile) : "" };
  },

  toJSON(message: GetMySpaceRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMySpaceRequest>, I>>(base?: I): GetMySpaceRequest {
    return GetMySpaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMySpaceRequest>, I>>(object: I): GetMySpaceRequest {
    const message = createBaseGetMySpaceRequest();
    message.profile = object.profile ?? "";
    return message;
  },
};

function createBaseUpdateMySpaceRequest(): UpdateMySpaceRequest {
  return { profile: "", mySpace: undefined };
}

export const UpdateMySpaceRequest: MessageFns<UpdateMySpaceRequest> = {
  encode(message: UpdateMySpaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    if (message.mySpace !== undefined) {
      MySpace.encode(message.mySpace, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMySpaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMySpaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mySpace = MySpace.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMySpaceRequest {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      mySpace: isSet(object.mySpace) ? MySpace.fromJSON(object.mySpace) : undefined,
    };
  },

  toJSON(message: UpdateMySpaceRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.mySpace !== undefined) {
      obj.mySpace = MySpace.toJSON(message.mySpace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMySpaceRequest>, I>>(base?: I): UpdateMySpaceRequest {
    return UpdateMySpaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMySpaceRequest>, I>>(object: I): UpdateMySpaceRequest {
    const message = createBaseUpdateMySpaceRequest();
    message.profile = object.profile ?? "";
    message.mySpace = (object.mySpace !== undefined && object.mySpace !== null)
      ? MySpace.fromPartial(object.mySpace)
      : undefined;
    return message;
  },
};

function createBaseGetProfileDailyPlayCountRequest(): GetProfileDailyPlayCountRequest {
  return { profile: "" };
}

export const GetProfileDailyPlayCountRequest: MessageFns<GetProfileDailyPlayCountRequest> = {
  encode(message: GetProfileDailyPlayCountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileDailyPlayCountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileDailyPlayCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileDailyPlayCountRequest {
    return { profile: isSet(object.profile) ? globalThis.String(object.profile) : "" };
  },

  toJSON(message: GetProfileDailyPlayCountRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileDailyPlayCountRequest>, I>>(base?: I): GetProfileDailyPlayCountRequest {
    return GetProfileDailyPlayCountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileDailyPlayCountRequest>, I>>(
    object: I,
  ): GetProfileDailyPlayCountRequest {
    const message = createBaseGetProfileDailyPlayCountRequest();
    message.profile = object.profile ?? "";
    return message;
  },
};

function createBaseGetProfileDailyPlayCountResponse(): GetProfileDailyPlayCountResponse {
  return { dailyPlayCount: 0 };
}

export const GetProfileDailyPlayCountResponse: MessageFns<GetProfileDailyPlayCountResponse> = {
  encode(message: GetProfileDailyPlayCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dailyPlayCount !== 0) {
      writer.uint32(8).uint32(message.dailyPlayCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileDailyPlayCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileDailyPlayCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dailyPlayCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileDailyPlayCountResponse {
    return { dailyPlayCount: isSet(object.dailyPlayCount) ? globalThis.Number(object.dailyPlayCount) : 0 };
  },

  toJSON(message: GetProfileDailyPlayCountResponse): unknown {
    const obj: any = {};
    if (message.dailyPlayCount !== undefined) {
      obj.dailyPlayCount = Math.round(message.dailyPlayCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileDailyPlayCountResponse>, I>>(
    base?: I,
  ): GetProfileDailyPlayCountResponse {
    return GetProfileDailyPlayCountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileDailyPlayCountResponse>, I>>(
    object: I,
  ): GetProfileDailyPlayCountResponse {
    const message = createBaseGetProfileDailyPlayCountResponse();
    message.dailyPlayCount = object.dailyPlayCount ?? 0;
    return message;
  },
};

function createBaseIncrementProfileDailyPlayCountRequest(): IncrementProfileDailyPlayCountRequest {
  return { profile: "" };
}

export const IncrementProfileDailyPlayCountRequest: MessageFns<IncrementProfileDailyPlayCountRequest> = {
  encode(message: IncrementProfileDailyPlayCountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncrementProfileDailyPlayCountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncrementProfileDailyPlayCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncrementProfileDailyPlayCountRequest {
    return { profile: isSet(object.profile) ? globalThis.String(object.profile) : "" };
  },

  toJSON(message: IncrementProfileDailyPlayCountRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncrementProfileDailyPlayCountRequest>, I>>(
    base?: I,
  ): IncrementProfileDailyPlayCountRequest {
    return IncrementProfileDailyPlayCountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncrementProfileDailyPlayCountRequest>, I>>(
    object: I,
  ): IncrementProfileDailyPlayCountRequest {
    const message = createBaseIncrementProfileDailyPlayCountRequest();
    message.profile = object.profile ?? "";
    return message;
  },
};

function createBaseIncrementProfileDailyPlayCountResponse(): IncrementProfileDailyPlayCountResponse {
  return { dailyPlayCount: 0 };
}

export const IncrementProfileDailyPlayCountResponse: MessageFns<IncrementProfileDailyPlayCountResponse> = {
  encode(message: IncrementProfileDailyPlayCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dailyPlayCount !== 0) {
      writer.uint32(8).uint32(message.dailyPlayCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncrementProfileDailyPlayCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncrementProfileDailyPlayCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dailyPlayCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncrementProfileDailyPlayCountResponse {
    return { dailyPlayCount: isSet(object.dailyPlayCount) ? globalThis.Number(object.dailyPlayCount) : 0 };
  },

  toJSON(message: IncrementProfileDailyPlayCountResponse): unknown {
    const obj: any = {};
    if (message.dailyPlayCount !== undefined) {
      obj.dailyPlayCount = Math.round(message.dailyPlayCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncrementProfileDailyPlayCountResponse>, I>>(
    base?: I,
  ): IncrementProfileDailyPlayCountResponse {
    return IncrementProfileDailyPlayCountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncrementProfileDailyPlayCountResponse>, I>>(
    object: I,
  ): IncrementProfileDailyPlayCountResponse {
    const message = createBaseIncrementProfileDailyPlayCountResponse();
    message.dailyPlayCount = object.dailyPlayCount ?? 0;
    return message;
  },
};

function createBaseConnectSNSRequest(): ConnectSNSRequest {
  return { profile: "", snsType: SNSType.SNS_UNSPECIFIED, accessToken: "", accessTokenSecret: "" };
}

export const ConnectSNSRequest: MessageFns<ConnectSNSRequest> = {
  encode(message: ConnectSNSRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    if (message.snsType !== SNSType.SNS_UNSPECIFIED) {
      writer.uint32(16).int32(sNSTypeToNumber(message.snsType));
    }
    if (message.accessToken !== "") {
      writer.uint32(26).string(message.accessToken);
    }
    if (message.accessTokenSecret !== "") {
      writer.uint32(34).string(message.accessTokenSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectSNSRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectSNSRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.snsType = sNSTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessTokenSecret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectSNSRequest {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      snsType: isSet(object.snsType) ? sNSTypeFromJSON(object.snsType) : SNSType.SNS_UNSPECIFIED,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      accessTokenSecret: isSet(object.accessTokenSecret) ? globalThis.String(object.accessTokenSecret) : "",
    };
  },

  toJSON(message: ConnectSNSRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.snsType !== undefined) {
      obj.snsType = sNSTypeToJSON(message.snsType);
    }
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    if (message.accessTokenSecret !== undefined) {
      obj.accessTokenSecret = message.accessTokenSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectSNSRequest>, I>>(base?: I): ConnectSNSRequest {
    return ConnectSNSRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectSNSRequest>, I>>(object: I): ConnectSNSRequest {
    const message = createBaseConnectSNSRequest();
    message.profile = object.profile ?? "";
    message.snsType = object.snsType ?? SNSType.SNS_UNSPECIFIED;
    message.accessToken = object.accessToken ?? "";
    message.accessTokenSecret = object.accessTokenSecret ?? "";
    return message;
  },
};

function createBaseProfile(): Profile {
  return {
    name: "",
    address: "",
    createTime: undefined,
    updateTime: undefined,
    number: 0,
    state: ProfileState.STATE_UNSPECIFIED,
    nft: undefined,
    starAccount: undefined,
    ens: undefined,
    nickname: undefined,
    isTutorialDone: false,
    isIdentified: false,
  };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.number !== 0) {
      writer.uint32(40).uint64(message.number);
    }
    if (message.state !== ProfileState.STATE_UNSPECIFIED) {
      writer.uint32(48).int32(profileStateToNumber(message.state));
    }
    if (message.nft !== undefined) {
      ProfileNFT.encode(message.nft, writer.uint32(58).fork()).join();
    }
    if (message.starAccount !== undefined) {
      StarAccount.encode(message.starAccount, writer.uint32(66).fork()).join();
    }
    if (message.ens !== undefined) {
      writer.uint32(74).string(message.ens);
    }
    if (message.nickname !== undefined) {
      writer.uint32(82).string(message.nickname);
    }
    if (message.isTutorialDone !== false) {
      writer.uint32(88).bool(message.isTutorialDone);
    }
    if (message.isIdentified !== false) {
      writer.uint32(96).bool(message.isIdentified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.number = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = profileStateFromJSON(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nft = ProfileNFT.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.starAccount = StarAccount.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.ens = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isTutorialDone = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isIdentified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      state: isSet(object.state) ? profileStateFromJSON(object.state) : ProfileState.STATE_UNSPECIFIED,
      nft: isSet(object.nft) ? ProfileNFT.fromJSON(object.nft) : undefined,
      starAccount: isSet(object.starAccount) ? StarAccount.fromJSON(object.starAccount) : undefined,
      ens: isSet(object.ens) ? globalThis.String(object.ens) : undefined,
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : undefined,
      isTutorialDone: isSet(object.isTutorialDone) ? globalThis.Boolean(object.isTutorialDone) : false,
      isIdentified: isSet(object.isIdentified) ? globalThis.Boolean(object.isIdentified) : false,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.number !== undefined) {
      obj.number = Math.round(message.number);
    }
    if (message.state !== undefined) {
      obj.state = profileStateToJSON(message.state);
    }
    if (message.nft !== undefined) {
      obj.nft = ProfileNFT.toJSON(message.nft);
    }
    if (message.starAccount !== undefined) {
      obj.starAccount = StarAccount.toJSON(message.starAccount);
    }
    if (message.ens !== undefined) {
      obj.ens = message.ens;
    }
    if (message.nickname !== undefined) {
      obj.nickname = message.nickname;
    }
    if (message.isTutorialDone !== undefined) {
      obj.isTutorialDone = message.isTutorialDone;
    }
    if (message.isIdentified !== undefined) {
      obj.isIdentified = message.isIdentified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.name = object.name ?? "";
    message.address = object.address ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.number = object.number ?? 0;
    message.state = object.state ?? ProfileState.STATE_UNSPECIFIED;
    message.nft = (object.nft !== undefined && object.nft !== null) ? ProfileNFT.fromPartial(object.nft) : undefined;
    message.starAccount = (object.starAccount !== undefined && object.starAccount !== null)
      ? StarAccount.fromPartial(object.starAccount)
      : undefined;
    message.ens = object.ens ?? undefined;
    message.nickname = object.nickname ?? undefined;
    message.isTutorialDone = object.isTutorialDone ?? false;
    message.isIdentified = object.isIdentified ?? false;
    return message;
  },
};

function createBaseTutorial(): Tutorial {
  return { isDone: false, completeTime: undefined };
}

export const Tutorial: MessageFns<Tutorial> = {
  encode(message: Tutorial, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isDone !== false) {
      writer.uint32(8).bool(message.isDone);
    }
    if (message.completeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completeTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tutorial {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTutorial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isDone = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.completeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tutorial {
    return {
      isDone: isSet(object.isDone) ? globalThis.Boolean(object.isDone) : false,
      completeTime: isSet(object.completeTime) ? globalThis.String(object.completeTime) : undefined,
    };
  },

  toJSON(message: Tutorial): unknown {
    const obj: any = {};
    if (message.isDone !== undefined) {
      obj.isDone = message.isDone;
    }
    if (message.completeTime !== undefined) {
      obj.completeTime = message.completeTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tutorial>, I>>(base?: I): Tutorial {
    return Tutorial.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tutorial>, I>>(object: I): Tutorial {
    const message = createBaseTutorial();
    message.isDone = object.isDone ?? false;
    message.completeTime = object.completeTime ?? undefined;
    return message;
  },
};

function createBaseStarAccount(): StarAccount {
  return { balance: 0, cumulativeTotal: 0 };
}

export const StarAccount: MessageFns<StarAccount> = {
  encode(message: StarAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balance !== 0) {
      writer.uint32(8).uint32(message.balance);
    }
    if (message.cumulativeTotal !== 0) {
      writer.uint32(16).uint32(message.cumulativeTotal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.balance = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cumulativeTotal = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarAccount {
    return {
      balance: isSet(object.balance) ? globalThis.Number(object.balance) : 0,
      cumulativeTotal: isSet(object.cumulativeTotal) ? globalThis.Number(object.cumulativeTotal) : 0,
    };
  },

  toJSON(message: StarAccount): unknown {
    const obj: any = {};
    if (message.balance !== undefined) {
      obj.balance = Math.round(message.balance);
    }
    if (message.cumulativeTotal !== undefined) {
      obj.cumulativeTotal = Math.round(message.cumulativeTotal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarAccount>, I>>(base?: I): StarAccount {
    return StarAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarAccount>, I>>(object: I): StarAccount {
    const message = createBaseStarAccount();
    message.balance = object.balance ?? 0;
    message.cumulativeTotal = object.cumulativeTotal ?? 0;
    return message;
  },
};

function createBaseGMStatsSlim(): GMStatsSlim {
  return { sentCount: 0, receivedCount: 0 };
}

export const GMStatsSlim: MessageFns<GMStatsSlim> = {
  encode(message: GMStatsSlim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentCount !== 0) {
      writer.uint32(8).uint32(message.sentCount);
    }
    if (message.receivedCount !== 0) {
      writer.uint32(16).uint32(message.receivedCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GMStatsSlim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGMStatsSlim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sentCount = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.receivedCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GMStatsSlim {
    return {
      sentCount: isSet(object.sentCount) ? globalThis.Number(object.sentCount) : 0,
      receivedCount: isSet(object.receivedCount) ? globalThis.Number(object.receivedCount) : 0,
    };
  },

  toJSON(message: GMStatsSlim): unknown {
    const obj: any = {};
    if (message.sentCount !== undefined) {
      obj.sentCount = Math.round(message.sentCount);
    }
    if (message.receivedCount !== undefined) {
      obj.receivedCount = Math.round(message.receivedCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GMStatsSlim>, I>>(base?: I): GMStatsSlim {
    return GMStatsSlim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GMStatsSlim>, I>>(object: I): GMStatsSlim {
    const message = createBaseGMStatsSlim();
    message.sentCount = object.sentCount ?? 0;
    message.receivedCount = object.receivedCount ?? 0;
    return message;
  },
};

function createBaseProfileNFT(): ProfileNFT {
  return { name: "", tokenId: "", tokenName: "", imageUri: "", contract: undefined };
}

export const ProfileNFT: MessageFns<ProfileNFT> = {
  encode(message: ProfileNFT, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    if (message.tokenName !== "") {
      writer.uint32(26).string(message.tokenName);
    }
    if (message.imageUri !== "") {
      writer.uint32(34).string(message.imageUri);
    }
    if (message.contract !== undefined) {
      ProfileNFTContract.encode(message.contract, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileNFT {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileNFT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contract = ProfileNFTContract.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileNFT {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      contract: isSet(object.contract) ? ProfileNFTContract.fromJSON(object.contract) : undefined,
    };
  },

  toJSON(message: ProfileNFT): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.tokenId !== undefined) {
      obj.tokenId = message.tokenId;
    }
    if (message.tokenName !== undefined) {
      obj.tokenName = message.tokenName;
    }
    if (message.imageUri !== undefined) {
      obj.imageUri = message.imageUri;
    }
    if (message.contract !== undefined) {
      obj.contract = ProfileNFTContract.toJSON(message.contract);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileNFT>, I>>(base?: I): ProfileNFT {
    return ProfileNFT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileNFT>, I>>(object: I): ProfileNFT {
    const message = createBaseProfileNFT();
    message.name = object.name ?? "";
    message.tokenId = object.tokenId ?? "";
    message.tokenName = object.tokenName ?? "";
    message.imageUri = object.imageUri ?? "";
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? ProfileNFTContract.fromPartial(object.contract)
      : undefined;
    return message;
  },
};

function createBaseProfileNFTContract(): ProfileNFTContract {
  return { address: "", displayName: "", symbol: "", chain: ChainType.CHAIN_UNSPECIFIED, imageUri: "" };
}

export const ProfileNFTContract: MessageFns<ProfileNFTContract> = {
  encode(message: ProfileNFTContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.chain !== ChainType.CHAIN_UNSPECIFIED) {
      writer.uint32(32).int32(chainTypeToNumber(message.chain));
    }
    if (message.imageUri !== "") {
      writer.uint32(42).string(message.imageUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileNFTContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileNFTContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.chain = chainTypeFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileNFTContract {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      chain: isSet(object.chain) ? chainTypeFromJSON(object.chain) : ChainType.CHAIN_UNSPECIFIED,
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
    };
  },

  toJSON(message: ProfileNFTContract): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    if (message.chain !== undefined) {
      obj.chain = chainTypeToJSON(message.chain);
    }
    if (message.imageUri !== undefined) {
      obj.imageUri = message.imageUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileNFTContract>, I>>(base?: I): ProfileNFTContract {
    return ProfileNFTContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileNFTContract>, I>>(object: I): ProfileNFTContract {
    const message = createBaseProfileNFTContract();
    message.address = object.address ?? "";
    message.displayName = object.displayName ?? "";
    message.symbol = object.symbol ?? "";
    message.chain = object.chain ?? ChainType.CHAIN_UNSPECIFIED;
    message.imageUri = object.imageUri ?? "";
    return message;
  },
};

/** ProfileService contains the function to interact with the Profile of the spacebar */
export type ProfileServiceService = typeof ProfileServiceService;
export const ProfileServiceService = {
  /** ListProfiles will return Profiles. */
  listProfiles: {
    path: "/ethereum.v1.profile.ProfileService/ListProfiles",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProfilesRequest) => Buffer.from(ListProfilesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListProfilesRequest.decode(value),
    responseSerialize: (value: ListProfilesResponse) => Buffer.from(ListProfilesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListProfilesResponse.decode(value),
  },
  /** GetProfile will return Profile. */
  getProfile: {
    path: "/ethereum.v1.profile.ProfileService/GetProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProfileRequest) => Buffer.from(GetProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetProfileRequest.decode(value),
    responseSerialize: (value: Profile) => Buffer.from(Profile.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Profile.decode(value),
  },
  /** UpdateProfile update Profile. */
  updateProfile: {
    path: "/ethereum.v1.profile.ProfileService/UpdateProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProfileRequest) => Buffer.from(UpdateProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateProfileRequest.decode(value),
    responseSerialize: (value: Profile) => Buffer.from(Profile.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Profile.decode(value),
  },
  /** GetMySpace will return the Profile's MySpace. */
  getMySpace: {
    path: "/ethereum.v1.profile.ProfileService/GetMySpace",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMySpaceRequest) => Buffer.from(GetMySpaceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMySpaceRequest.decode(value),
    responseSerialize: (value: MySpace) => Buffer.from(MySpace.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MySpace.decode(value),
  },
  /** UpdateMySpace update Profile's MySpace. */
  updateMySpace: {
    path: "/ethereum.v1.profile.ProfileService/UpdateMySpace",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMySpaceRequest) => Buffer.from(UpdateMySpaceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateMySpaceRequest.decode(value),
    responseSerialize: (value: MySpace) => Buffer.from(MySpace.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MySpace.decode(value),
  },
  /** GetProfileDailyPlayCount will return the Profile's daily play count. */
  getProfileDailyPlayCount: {
    path: "/ethereum.v1.profile.ProfileService/GetProfileDailyPlayCount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProfileDailyPlayCountRequest) =>
      Buffer.from(GetProfileDailyPlayCountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetProfileDailyPlayCountRequest.decode(value),
    responseSerialize: (value: GetProfileDailyPlayCountResponse) =>
      Buffer.from(GetProfileDailyPlayCountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetProfileDailyPlayCountResponse.decode(value),
  },
  /** IncrementProfileDailyPlayCount will return the Profile's daily play count. */
  incrementProfileDailyPlayCount: {
    path: "/ethereum.v1.profile.ProfileService/IncrementProfileDailyPlayCount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IncrementProfileDailyPlayCountRequest) =>
      Buffer.from(IncrementProfileDailyPlayCountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IncrementProfileDailyPlayCountRequest.decode(value),
    responseSerialize: (value: IncrementProfileDailyPlayCountResponse) =>
      Buffer.from(IncrementProfileDailyPlayCountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => IncrementProfileDailyPlayCountResponse.decode(value),
  },
} as const;

export interface ProfileServiceServer extends UntypedServiceImplementation {
  /** ListProfiles will return Profiles. */
  listProfiles: handleUnaryCall<ListProfilesRequest, ListProfilesResponse>;
  /** GetProfile will return Profile. */
  getProfile: handleUnaryCall<GetProfileRequest, Profile>;
  /** UpdateProfile update Profile. */
  updateProfile: handleUnaryCall<UpdateProfileRequest, Profile>;
  /** GetMySpace will return the Profile's MySpace. */
  getMySpace: handleUnaryCall<GetMySpaceRequest, MySpace>;
  /** UpdateMySpace update Profile's MySpace. */
  updateMySpace: handleUnaryCall<UpdateMySpaceRequest, MySpace>;
  /** GetProfileDailyPlayCount will return the Profile's daily play count. */
  getProfileDailyPlayCount: handleUnaryCall<GetProfileDailyPlayCountRequest, GetProfileDailyPlayCountResponse>;
  /** IncrementProfileDailyPlayCount will return the Profile's daily play count. */
  incrementProfileDailyPlayCount: handleUnaryCall<
    IncrementProfileDailyPlayCountRequest,
    IncrementProfileDailyPlayCountResponse
  >;
}

export interface ProfileServiceClient extends Client {
  /** ListProfiles will return Profiles. */
  listProfiles(
    request: ListProfilesRequest,
    callback: (error: ServiceError | null, response: ListProfilesResponse) => void,
  ): ClientUnaryCall;
  listProfiles(
    request: ListProfilesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProfilesResponse) => void,
  ): ClientUnaryCall;
  listProfiles(
    request: ListProfilesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProfilesResponse) => void,
  ): ClientUnaryCall;
  /** GetProfile will return Profile. */
  getProfile(
    request: GetProfileRequest,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  getProfile(
    request: GetProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  getProfile(
    request: GetProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  /** UpdateProfile update Profile. */
  updateProfile(
    request: UpdateProfileRequest,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Profile) => void,
  ): ClientUnaryCall;
  /** GetMySpace will return the Profile's MySpace. */
  getMySpace(
    request: GetMySpaceRequest,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  getMySpace(
    request: GetMySpaceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  getMySpace(
    request: GetMySpaceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  /** UpdateMySpace update Profile's MySpace. */
  updateMySpace(
    request: UpdateMySpaceRequest,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  updateMySpace(
    request: UpdateMySpaceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  updateMySpace(
    request: UpdateMySpaceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MySpace) => void,
  ): ClientUnaryCall;
  /** GetProfileDailyPlayCount will return the Profile's daily play count. */
  getProfileDailyPlayCount(
    request: GetProfileDailyPlayCountRequest,
    callback: (error: ServiceError | null, response: GetProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
  getProfileDailyPlayCount(
    request: GetProfileDailyPlayCountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
  getProfileDailyPlayCount(
    request: GetProfileDailyPlayCountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
  /** IncrementProfileDailyPlayCount will return the Profile's daily play count. */
  incrementProfileDailyPlayCount(
    request: IncrementProfileDailyPlayCountRequest,
    callback: (error: ServiceError | null, response: IncrementProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
  incrementProfileDailyPlayCount(
    request: IncrementProfileDailyPlayCountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IncrementProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
  incrementProfileDailyPlayCount(
    request: IncrementProfileDailyPlayCountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IncrementProfileDailyPlayCountResponse) => void,
  ): ClientUnaryCall;
}

export const ProfileServiceClient = makeGenericClientConstructor(
  ProfileServiceService,
  "ethereum.v1.profile.ProfileService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProfileServiceClient;
  service: typeof ProfileServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
