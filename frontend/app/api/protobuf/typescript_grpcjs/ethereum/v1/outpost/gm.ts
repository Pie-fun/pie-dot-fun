// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ethereum/v1/outpost/gm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** SendGMRequest message represents the request to send a GM message. */
export interface SendGMRequest {
  /**
   * The profile whom the GM should be sent from.
   * Format: profiles/{address}
   * Resource name alias for the sender, "profiles/me" is supported.
   */
  profile: string;
  /**
   * The profile whom the GM should be sent to.
   * Format: profiles/{address}
   */
  to: string;
}

/**
 * Request message for ListGMs.
 * At least one of the following fields must be set
 * if both "from" and "to" are empty, the server will return an error
 */
export interface ListGMsRequest {
  /**
   * The maximum number of gms to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   */
  pageSize: number;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListGMs` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. The resource name of the profile to list GM messages from.
   * Format: profiles/{address}
   */
  from: string;
  /**
   * Optional. The resource name of the profile to list GM messages to.
   * Format: profiles/{address}
   */
  to: string;
}

/** Response message for ListGMs. */
export interface ListGMsResponse {
  /** The list of GM messages that match the filters. */
  gms: GM[];
  /** Pagination token used to retrieve the next page of results. */
  nextPageToken: string;
}

/** GMStats message represents the statistics of a profile's profile. */
export interface GMStats {
  /**
   * The resource name of the profile.
   * Format: profiles/{address}/gm_statistics
   */
  name: string;
  /** The profile name. */
  profile: string;
  /** The number of messages sent by the profile. */
  sentCount: number;
  /** The number of messages received by the profile. */
  receivedCount: number;
  /** The list of messages sent by the profile. */
  sentGms: GM[];
  /** The list of messages received by the profile. */
  receivedGms: GM[];
}

/** GM message represents a message sent or received by a profile. */
export interface GM {
  /** The resource name of the GM message. */
  name: string;
  /** The profile name of the sender. */
  from: string;
  /** The profile name of the receiver. */
  to: string;
  /** The time when the message was sent or received. */
  createTime: string | undefined;
}

function createBaseSendGMRequest(): SendGMRequest {
  return { profile: "", to: "" };
}

export const SendGMRequest: MessageFns<SendGMRequest> = {
  encode(message: SendGMRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendGMRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendGMRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendGMRequest {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
    };
  },

  toJSON(message: SendGMRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.to !== undefined) {
      obj.to = message.to;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendGMRequest>, I>>(base?: I): SendGMRequest {
    return SendGMRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendGMRequest>, I>>(object: I): SendGMRequest {
    const message = createBaseSendGMRequest();
    message.profile = object.profile ?? "";
    message.to = object.to ?? "";
    return message;
  },
};

function createBaseListGMsRequest(): ListGMsRequest {
  return { pageSize: 0, pageToken: "", from: "", to: "" };
}

export const ListGMsRequest: MessageFns<ListGMsRequest> = {
  encode(message: ListGMsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.from !== "") {
      writer.uint32(26).string(message.from);
    }
    if (message.to !== "") {
      writer.uint32(34).string(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGMsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGMsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.to = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGMsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
    };
  },

  toJSON(message: ListGMsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.from !== undefined) {
      obj.from = message.from;
    }
    if (message.to !== undefined) {
      obj.to = message.to;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGMsRequest>, I>>(base?: I): ListGMsRequest {
    return ListGMsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGMsRequest>, I>>(object: I): ListGMsRequest {
    const message = createBaseListGMsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.from = object.from ?? "";
    message.to = object.to ?? "";
    return message;
  },
};

function createBaseListGMsResponse(): ListGMsResponse {
  return { gms: [], nextPageToken: "" };
}

export const ListGMsResponse: MessageFns<ListGMsResponse> = {
  encode(message: ListGMsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gms) {
      GM.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGMsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGMsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gms.push(GM.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGMsResponse {
    return {
      gms: globalThis.Array.isArray(object?.gms) ? object.gms.map((e: any) => GM.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGMsResponse): unknown {
    const obj: any = {};
    if (message.gms?.length) {
      obj.gms = message.gms.map((e) => GM.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGMsResponse>, I>>(base?: I): ListGMsResponse {
    return ListGMsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGMsResponse>, I>>(object: I): ListGMsResponse {
    const message = createBaseListGMsResponse();
    message.gms = object.gms?.map((e) => GM.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGMStats(): GMStats {
  return { name: "", profile: "", sentCount: 0, receivedCount: 0, sentGms: [], receivedGms: [] };
}

export const GMStats: MessageFns<GMStats> = {
  encode(message: GMStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.profile !== "") {
      writer.uint32(18).string(message.profile);
    }
    if (message.sentCount !== 0) {
      writer.uint32(24).int32(message.sentCount);
    }
    if (message.receivedCount !== 0) {
      writer.uint32(32).int32(message.receivedCount);
    }
    for (const v of message.sentGms) {
      GM.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.receivedGms) {
      GM.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GMStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGMStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.receivedCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sentGms.push(GM.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.receivedGms.push(GM.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GMStats {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      sentCount: isSet(object.sentCount) ? globalThis.Number(object.sentCount) : 0,
      receivedCount: isSet(object.receivedCount) ? globalThis.Number(object.receivedCount) : 0,
      sentGms: globalThis.Array.isArray(object?.sentGms) ? object.sentGms.map((e: any) => GM.fromJSON(e)) : [],
      receivedGms: globalThis.Array.isArray(object?.receivedGms)
        ? object.receivedGms.map((e: any) => GM.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GMStats): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.sentCount !== undefined) {
      obj.sentCount = Math.round(message.sentCount);
    }
    if (message.receivedCount !== undefined) {
      obj.receivedCount = Math.round(message.receivedCount);
    }
    if (message.sentGms?.length) {
      obj.sentGms = message.sentGms.map((e) => GM.toJSON(e));
    }
    if (message.receivedGms?.length) {
      obj.receivedGms = message.receivedGms.map((e) => GM.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GMStats>, I>>(base?: I): GMStats {
    return GMStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GMStats>, I>>(object: I): GMStats {
    const message = createBaseGMStats();
    message.name = object.name ?? "";
    message.profile = object.profile ?? "";
    message.sentCount = object.sentCount ?? 0;
    message.receivedCount = object.receivedCount ?? 0;
    message.sentGms = object.sentGms?.map((e) => GM.fromPartial(e)) || [];
    message.receivedGms = object.receivedGms?.map((e) => GM.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGM(): GM {
  return { name: "", from: "", to: "", createTime: undefined };
}

export const GM: MessageFns<GM> = {
  encode(message: GM, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.from !== "") {
      writer.uint32(18).string(message.from);
    }
    if (message.to !== "") {
      writer.uint32(26).string(message.to);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GM {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGM();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GM {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
    };
  },

  toJSON(message: GM): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.from !== undefined) {
      obj.from = message.from;
    }
    if (message.to !== undefined) {
      obj.to = message.to;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GM>, I>>(base?: I): GM {
    return GM.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GM>, I>>(object: I): GM {
    const message = createBaseGM();
    message.name = object.name ?? "";
    message.from = object.from ?? "";
    message.to = object.to ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** GMService contains the function to interact with the GM of the spacebar */
export type GMServiceService = typeof GMServiceService;
export const GMServiceService = {
  /** SendGM send GM to another Profile. */
  sendGm: {
    path: "/ethereum.v1.outpost.GMService/SendGM",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendGMRequest) => Buffer.from(SendGMRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendGMRequest.decode(value),
    responseSerialize: (value: GM) => Buffer.from(GM.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GM.decode(value),
  },
  /** Lists GM messages based on "from" and/or "to" filters. */
  listGMs: {
    path: "/ethereum.v1.outpost.GMService/ListGMs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListGMsRequest) => Buffer.from(ListGMsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListGMsRequest.decode(value),
    responseSerialize: (value: ListGMsResponse) => Buffer.from(ListGMsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListGMsResponse.decode(value),
  },
} as const;

export interface GMServiceServer extends UntypedServiceImplementation {
  /** SendGM send GM to another Profile. */
  sendGm: handleUnaryCall<SendGMRequest, GM>;
  /** Lists GM messages based on "from" and/or "to" filters. */
  listGMs: handleUnaryCall<ListGMsRequest, ListGMsResponse>;
}

export interface GMServiceClient extends Client {
  /** SendGM send GM to another Profile. */
  sendGm(request: SendGMRequest, callback: (error: ServiceError | null, response: GM) => void): ClientUnaryCall;
  sendGm(
    request: SendGMRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GM) => void,
  ): ClientUnaryCall;
  sendGm(
    request: SendGMRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GM) => void,
  ): ClientUnaryCall;
  /** Lists GM messages based on "from" and/or "to" filters. */
  listGMs(
    request: ListGMsRequest,
    callback: (error: ServiceError | null, response: ListGMsResponse) => void,
  ): ClientUnaryCall;
  listGMs(
    request: ListGMsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListGMsResponse) => void,
  ): ClientUnaryCall;
  listGMs(
    request: ListGMsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListGMsResponse) => void,
  ): ClientUnaryCall;
}

export const GMServiceClient = makeGenericClientConstructor(
  GMServiceService,
  "ethereum.v1.outpost.GMService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GMServiceClient;
  service: typeof GMServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
