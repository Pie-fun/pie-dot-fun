// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ethereum/v1/outpost/stardoodle.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export enum StarDoodleAction {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** DOODLE -  */
  DOODLE = "DOODLE",
  /** MINE -  */
  MINE = "MINE",
}

export function starDoodleActionFromJSON(object: any): StarDoodleAction {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return StarDoodleAction.TYPE_UNSPECIFIED;
    case 1:
    case "DOODLE":
      return StarDoodleAction.DOODLE;
    case 2:
    case "MINE":
      return StarDoodleAction.MINE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodleAction");
  }
}

export function starDoodleActionToJSON(object: StarDoodleAction): string {
  switch (object) {
    case StarDoodleAction.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case StarDoodleAction.DOODLE:
      return "DOODLE";
    case StarDoodleAction.MINE:
      return "MINE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodleAction");
  }
}

export function starDoodleActionToNumber(object: StarDoodleAction): number {
  switch (object) {
    case StarDoodleAction.TYPE_UNSPECIFIED:
      return 0;
    case StarDoodleAction.DOODLE:
      return 1;
    case StarDoodleAction.MINE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodleAction");
  }
}

/**
 * Request message for ListStarDoodles.
 * If location filter is not specified, the server will return an error.
 */
export interface ListStarDoodlesRequest {
  /**
   * Available Sequence and Operator
   * * location
   *   * `Equal`
   *
   * Examples
   * * filter=location="SQUARE"
   * * filter=location="BACKSPACE/0x06fAfC5d2fe61fF8d15A5Ca55FD6D3cf6069E2aB"
   */
  filter: string;
}

/** Response message for ListStarDoodles. */
export interface ListStarDoodlesResponse {
  /** The list of StarDoodle messages that match the filters. */
  starDoodles: StarDoodle[];
}

/** StarDoodle message represents the star doodle */
export interface StarDoodle {
  /**
   * The profile name of doodle the star
   * Format: profiles/{wallet_address}
   */
  doodler: string;
  /** To where the star is doodled. */
  locationType: StarDoodle_LocationType;
  /** The coordinates of the star doodle. */
  position: Position | undefined;
}

export enum StarDoodle_LocationType {
  /** TYPE_UNSPECIFIED - default value. this value is unused. */
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  /** SQUARE -  */
  SQUARE = "SQUARE",
  /** BACKSPACE -  */
  BACKSPACE = "BACKSPACE",
}

export function starDoodle_LocationTypeFromJSON(object: any): StarDoodle_LocationType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return StarDoodle_LocationType.TYPE_UNSPECIFIED;
    case 1:
    case "SQUARE":
      return StarDoodle_LocationType.SQUARE;
    case 2:
    case "BACKSPACE":
      return StarDoodle_LocationType.BACKSPACE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodle_LocationType");
  }
}

export function starDoodle_LocationTypeToJSON(object: StarDoodle_LocationType): string {
  switch (object) {
    case StarDoodle_LocationType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case StarDoodle_LocationType.SQUARE:
      return "SQUARE";
    case StarDoodle_LocationType.BACKSPACE:
      return "BACKSPACE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodle_LocationType");
  }
}

export function starDoodle_LocationTypeToNumber(object: StarDoodle_LocationType): number {
  switch (object) {
    case StarDoodle_LocationType.TYPE_UNSPECIFIED:
      return 0;
    case StarDoodle_LocationType.SQUARE:
      return 1;
    case StarDoodle_LocationType.BACKSPACE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum StarDoodle_LocationType");
  }
}

export interface Position {
  /** The x coordinate of the star doodle. */
  x: number;
  /** The y coordinate of the star doodle. */
  y: number;
}

export interface Star {
  color: Star_StarColor;
}

export enum Star_StarColor {
  /** COLOR_UNSPECIFIED - default value. this value is unused. */
  COLOR_UNSPECIFIED = "COLOR_UNSPECIFIED",
  /** YELLOW -  */
  YELLOW = "YELLOW",
  /** RED -  */
  RED = "RED",
  GREEN = "GREEN",
  BLUE = "BLUE",
}

export function star_StarColorFromJSON(object: any): Star_StarColor {
  switch (object) {
    case 0:
    case "COLOR_UNSPECIFIED":
      return Star_StarColor.COLOR_UNSPECIFIED;
    case 1:
    case "YELLOW":
      return Star_StarColor.YELLOW;
    case 2:
    case "RED":
      return Star_StarColor.RED;
    case 3:
    case "GREEN":
      return Star_StarColor.GREEN;
    case 4:
    case "BLUE":
      return Star_StarColor.BLUE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Star_StarColor");
  }
}

export function star_StarColorToJSON(object: Star_StarColor): string {
  switch (object) {
    case Star_StarColor.COLOR_UNSPECIFIED:
      return "COLOR_UNSPECIFIED";
    case Star_StarColor.YELLOW:
      return "YELLOW";
    case Star_StarColor.RED:
      return "RED";
    case Star_StarColor.GREEN:
      return "GREEN";
    case Star_StarColor.BLUE:
      return "BLUE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Star_StarColor");
  }
}

export function star_StarColorToNumber(object: Star_StarColor): number {
  switch (object) {
    case Star_StarColor.COLOR_UNSPECIFIED:
      return 0;
    case Star_StarColor.YELLOW:
      return 1;
    case Star_StarColor.RED:
      return 2;
    case Star_StarColor.GREEN:
      return 3;
    case Star_StarColor.BLUE:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Star_StarColor");
  }
}

function createBaseListStarDoodlesRequest(): ListStarDoodlesRequest {
  return { filter: "" };
}

export const ListStarDoodlesRequest: MessageFns<ListStarDoodlesRequest> = {
  encode(message: ListStarDoodlesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStarDoodlesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStarDoodlesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStarDoodlesRequest {
    return { filter: isSet(object.filter) ? globalThis.String(object.filter) : "" };
  },

  toJSON(message: ListStarDoodlesRequest): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStarDoodlesRequest>, I>>(base?: I): ListStarDoodlesRequest {
    return ListStarDoodlesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStarDoodlesRequest>, I>>(object: I): ListStarDoodlesRequest {
    const message = createBaseListStarDoodlesRequest();
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListStarDoodlesResponse(): ListStarDoodlesResponse {
  return { starDoodles: [] };
}

export const ListStarDoodlesResponse: MessageFns<ListStarDoodlesResponse> = {
  encode(message: ListStarDoodlesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.starDoodles) {
      StarDoodle.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStarDoodlesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStarDoodlesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.starDoodles.push(StarDoodle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStarDoodlesResponse {
    return {
      starDoodles: globalThis.Array.isArray(object?.starDoodles)
        ? object.starDoodles.map((e: any) => StarDoodle.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListStarDoodlesResponse): unknown {
    const obj: any = {};
    if (message.starDoodles?.length) {
      obj.starDoodles = message.starDoodles.map((e) => StarDoodle.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStarDoodlesResponse>, I>>(base?: I): ListStarDoodlesResponse {
    return ListStarDoodlesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStarDoodlesResponse>, I>>(object: I): ListStarDoodlesResponse {
    const message = createBaseListStarDoodlesResponse();
    message.starDoodles = object.starDoodles?.map((e) => StarDoodle.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStarDoodle(): StarDoodle {
  return { doodler: "", locationType: StarDoodle_LocationType.TYPE_UNSPECIFIED, position: undefined };
}

export const StarDoodle: MessageFns<StarDoodle> = {
  encode(message: StarDoodle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.doodler !== "") {
      writer.uint32(10).string(message.doodler);
    }
    if (message.locationType !== StarDoodle_LocationType.TYPE_UNSPECIFIED) {
      writer.uint32(16).int32(starDoodle_LocationTypeToNumber(message.locationType));
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarDoodle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarDoodle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.doodler = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.locationType = starDoodle_LocationTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarDoodle {
    return {
      doodler: isSet(object.doodler) ? globalThis.String(object.doodler) : "",
      locationType: isSet(object.locationType)
        ? starDoodle_LocationTypeFromJSON(object.locationType)
        : StarDoodle_LocationType.TYPE_UNSPECIFIED,
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: StarDoodle): unknown {
    const obj: any = {};
    if (message.doodler !== undefined) {
      obj.doodler = message.doodler;
    }
    if (message.locationType !== undefined) {
      obj.locationType = starDoodle_LocationTypeToJSON(message.locationType);
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarDoodle>, I>>(base?: I): StarDoodle {
    return StarDoodle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarDoodle>, I>>(object: I): StarDoodle {
    const message = createBaseStarDoodle();
    message.doodler = object.doodler ?? "";
    message.locationType = object.locationType ?? StarDoodle_LocationType.TYPE_UNSPECIFIED;
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBasePosition(): Position {
  return { x: 0, y: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.x !== undefined) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== undefined) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseStar(): Star {
  return { color: Star_StarColor.COLOR_UNSPECIFIED };
}

export const Star: MessageFns<Star> = {
  encode(message: Star, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== Star_StarColor.COLOR_UNSPECIFIED) {
      writer.uint32(8).int32(star_StarColorToNumber(message.color));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Star {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.color = star_StarColorFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Star {
    return { color: isSet(object.color) ? star_StarColorFromJSON(object.color) : Star_StarColor.COLOR_UNSPECIFIED };
  },

  toJSON(message: Star): unknown {
    const obj: any = {};
    if (message.color !== undefined) {
      obj.color = star_StarColorToJSON(message.color);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Star>, I>>(base?: I): Star {
    return Star.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Star>, I>>(object: I): Star {
    const message = createBaseStar();
    message.color = object.color ?? Star_StarColor.COLOR_UNSPECIFIED;
    return message;
  },
};

/** StarDoodleService contains the function to interact with the StarDoodle of the spacebar */
export type StarDoodleServiceService = typeof StarDoodleServiceService;
export const StarDoodleServiceService = {
  listStarDoodles: {
    path: "/ethereum.v1.outpost.StarDoodleService/ListStarDoodles",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListStarDoodlesRequest) => Buffer.from(ListStarDoodlesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListStarDoodlesRequest.decode(value),
    responseSerialize: (value: ListStarDoodlesResponse) => Buffer.from(ListStarDoodlesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListStarDoodlesResponse.decode(value),
  },
} as const;

export interface StarDoodleServiceServer extends UntypedServiceImplementation {
  listStarDoodles: handleUnaryCall<ListStarDoodlesRequest, ListStarDoodlesResponse>;
}

export interface StarDoodleServiceClient extends Client {
  listStarDoodles(
    request: ListStarDoodlesRequest,
    callback: (error: ServiceError | null, response: ListStarDoodlesResponse) => void,
  ): ClientUnaryCall;
  listStarDoodles(
    request: ListStarDoodlesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListStarDoodlesResponse) => void,
  ): ClientUnaryCall;
  listStarDoodles(
    request: ListStarDoodlesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListStarDoodlesResponse) => void,
  ): ClientUnaryCall;
}

export const StarDoodleServiceClient = makeGenericClientConstructor(
  StarDoodleServiceService,
  "ethereum.v1.outpost.StarDoodleService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): StarDoodleServiceClient;
  service: typeof StarDoodleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
