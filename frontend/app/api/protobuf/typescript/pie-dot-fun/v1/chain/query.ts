// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: pie-dot-fun/v1/chain/query.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "piedotfun.v1.chain";

export interface QueryFungibleTokenDecimalsRequest {
  fungibleToken: string;
}

export interface QueryFungibleTokenDecimalsResponse {
  decimals: number;
}

export interface QueryFungibleTokenMetadataRequest {
  fungibleToken: string;
}

export interface QueryFungibleTokenMetadataResponse {
  uri: string;
  metadata: Metadata | undefined;
}

export interface Metadata {
  name: string;
  symbol: string;
  image: string;
  description: string;
  oneLiner: string;
  website: string;
  email: string;
  twitter: string;
  telegram: string;
  discord: string;
}

function createBaseQueryFungibleTokenDecimalsRequest(): QueryFungibleTokenDecimalsRequest {
  return { fungibleToken: "" };
}

export const QueryFungibleTokenDecimalsRequest = {
  encode(message: QueryFungibleTokenDecimalsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fungibleToken !== "") {
      writer.uint32(10).string(message.fungibleToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFungibleTokenDecimalsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFungibleTokenDecimalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fungibleToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFungibleTokenDecimalsRequest {
    return { fungibleToken: isSet(object.fungibleToken) ? globalThis.String(object.fungibleToken) : "" };
  },

  toJSON(message: QueryFungibleTokenDecimalsRequest): unknown {
    const obj: any = {};
    if (message.fungibleToken !== undefined) {
      obj.fungibleToken = message.fungibleToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFungibleTokenDecimalsRequest>, I>>(
    base?: I,
  ): QueryFungibleTokenDecimalsRequest {
    return QueryFungibleTokenDecimalsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFungibleTokenDecimalsRequest>, I>>(
    object: I,
  ): QueryFungibleTokenDecimalsRequest {
    const message = createBaseQueryFungibleTokenDecimalsRequest();
    message.fungibleToken = object.fungibleToken ?? "";
    return message;
  },
};

function createBaseQueryFungibleTokenDecimalsResponse(): QueryFungibleTokenDecimalsResponse {
  return { decimals: 0 };
}

export const QueryFungibleTokenDecimalsResponse = {
  encode(message: QueryFungibleTokenDecimalsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.decimals !== 0) {
      writer.uint32(8).int32(message.decimals);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFungibleTokenDecimalsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFungibleTokenDecimalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.decimals = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFungibleTokenDecimalsResponse {
    return { decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0 };
  },

  toJSON(message: QueryFungibleTokenDecimalsResponse): unknown {
    const obj: any = {};
    if (message.decimals !== undefined) {
      obj.decimals = Math.round(message.decimals);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFungibleTokenDecimalsResponse>, I>>(
    base?: I,
  ): QueryFungibleTokenDecimalsResponse {
    return QueryFungibleTokenDecimalsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFungibleTokenDecimalsResponse>, I>>(
    object: I,
  ): QueryFungibleTokenDecimalsResponse {
    const message = createBaseQueryFungibleTokenDecimalsResponse();
    message.decimals = object.decimals ?? 0;
    return message;
  },
};

function createBaseQueryFungibleTokenMetadataRequest(): QueryFungibleTokenMetadataRequest {
  return { fungibleToken: "" };
}

export const QueryFungibleTokenMetadataRequest = {
  encode(message: QueryFungibleTokenMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fungibleToken !== "") {
      writer.uint32(10).string(message.fungibleToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFungibleTokenMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFungibleTokenMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fungibleToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFungibleTokenMetadataRequest {
    return { fungibleToken: isSet(object.fungibleToken) ? globalThis.String(object.fungibleToken) : "" };
  },

  toJSON(message: QueryFungibleTokenMetadataRequest): unknown {
    const obj: any = {};
    if (message.fungibleToken !== undefined) {
      obj.fungibleToken = message.fungibleToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFungibleTokenMetadataRequest>, I>>(
    base?: I,
  ): QueryFungibleTokenMetadataRequest {
    return QueryFungibleTokenMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFungibleTokenMetadataRequest>, I>>(
    object: I,
  ): QueryFungibleTokenMetadataRequest {
    const message = createBaseQueryFungibleTokenMetadataRequest();
    message.fungibleToken = object.fungibleToken ?? "";
    return message;
  },
};

function createBaseQueryFungibleTokenMetadataResponse(): QueryFungibleTokenMetadataResponse {
  return { uri: "", metadata: undefined };
}

export const QueryFungibleTokenMetadataResponse = {
  encode(message: QueryFungibleTokenMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFungibleTokenMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFungibleTokenMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFungibleTokenMetadataResponse {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: QueryFungibleTokenMetadataResponse): unknown {
    const obj: any = {};
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFungibleTokenMetadataResponse>, I>>(
    base?: I,
  ): QueryFungibleTokenMetadataResponse {
    return QueryFungibleTokenMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFungibleTokenMetadataResponse>, I>>(
    object: I,
  ): QueryFungibleTokenMetadataResponse {
    const message = createBaseQueryFungibleTokenMetadataResponse();
    message.uri = object.uri ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMetadata(): Metadata {
  return {
    name: "",
    symbol: "",
    image: "",
    description: "",
    oneLiner: "",
    website: "",
    email: "",
    twitter: "",
    telegram: "",
    discord: "",
  };
}

export const Metadata = {
  encode(message: Metadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.oneLiner !== "") {
      writer.uint32(42).string(message.oneLiner);
    }
    if (message.website !== "") {
      writer.uint32(50).string(message.website);
    }
    if (message.email !== "") {
      writer.uint32(58).string(message.email);
    }
    if (message.twitter !== "") {
      writer.uint32(66).string(message.twitter);
    }
    if (message.telegram !== "") {
      writer.uint32(74).string(message.telegram);
    }
    if (message.discord !== "") {
      writer.uint32(82).string(message.discord);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.oneLiner = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.website = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.email = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.twitter = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.telegram = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.discord = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      oneLiner: isSet(object.oneLiner) ? globalThis.String(object.oneLiner) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : "",
      discord: isSet(object.discord) ? globalThis.String(object.discord) : "",
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    if (message.image !== undefined) {
      obj.image = message.image;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.oneLiner !== undefined) {
      obj.oneLiner = message.oneLiner;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.twitter !== undefined) {
      obj.twitter = message.twitter;
    }
    if (message.telegram !== undefined) {
      obj.telegram = message.telegram;
    }
    if (message.discord !== undefined) {
      obj.discord = message.discord;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.image = object.image ?? "";
    message.description = object.description ?? "";
    message.oneLiner = object.oneLiner ?? "";
    message.website = object.website ?? "";
    message.email = object.email ?? "";
    message.twitter = object.twitter ?? "";
    message.telegram = object.telegram ?? "";
    message.discord = object.discord ?? "";
    return message;
  },
};

/** ChainQueryService is the service that handles all chain requests. */
export interface ChainQueryService {
  QueryFungibleTokenDecimals(request: QueryFungibleTokenDecimalsRequest): Promise<QueryFungibleTokenDecimalsResponse>;
  QueryFungibleTokenMetadata(request: QueryFungibleTokenMetadataRequest): Promise<QueryFungibleTokenMetadataResponse>;
}

export const ChainQueryServiceServiceName = "piedotfun.v1.chain.ChainQueryService";
export class ChainQueryServiceClientImpl implements ChainQueryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ChainQueryServiceServiceName;
    this.rpc = rpc;
    this.QueryFungibleTokenDecimals = this.QueryFungibleTokenDecimals.bind(this);
    this.QueryFungibleTokenMetadata = this.QueryFungibleTokenMetadata.bind(this);
  }
  QueryFungibleTokenDecimals(request: QueryFungibleTokenDecimalsRequest): Promise<QueryFungibleTokenDecimalsResponse> {
    const data = QueryFungibleTokenDecimalsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryFungibleTokenDecimals", data);
    return promise.then((data) => QueryFungibleTokenDecimalsResponse.decode(_m0.Reader.create(data)));
  }

  QueryFungibleTokenMetadata(request: QueryFungibleTokenMetadataRequest): Promise<QueryFungibleTokenMetadataResponse> {
    const data = QueryFungibleTokenMetadataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryFungibleTokenMetadata", data);
    return promise.then((data) => QueryFungibleTokenMetadataResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
