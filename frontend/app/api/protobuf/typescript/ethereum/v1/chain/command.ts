// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/chain/command.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "ethereum.v1.chain";

export enum EventType {
  /** EVENT_TYPE_UNSPECIFIED - default value. this value is unused. */
  EVENT_TYPE_UNSPECIFIED = "EVENT_TYPE_UNSPECIFIED",
  MINT_SPACESHIP = "MINT_SPACESHIP",
  BURN_SPACESHIP = "BURN_SPACESHIP",
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "EVENT_TYPE_UNSPECIFIED":
      return EventType.EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "MINT_SPACESHIP":
      return EventType.MINT_SPACESHIP;
    case 2:
    case "BURN_SPACESHIP":
      return EventType.BURN_SPACESHIP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EventType");
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.EVENT_TYPE_UNSPECIFIED:
      return "EVENT_TYPE_UNSPECIFIED";
    case EventType.MINT_SPACESHIP:
      return "MINT_SPACESHIP";
    case EventType.BURN_SPACESHIP:
      return "BURN_SPACESHIP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EventType");
  }
}

export function eventTypeToNumber(object: EventType): number {
  switch (object) {
    case EventType.EVENT_TYPE_UNSPECIFIED:
      return 0;
    case EventType.MINT_SPACESHIP:
      return 1;
    case EventType.BURN_SPACESHIP:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EventType");
  }
}

export interface MintProtoShipUniverse1Request {
  tokenContract: string;
  tokenId: string;
}

export interface MintProtoShipUniverse1Response {
  transaction: Transaction | undefined;
  address: string;
}

export interface BurnProtoShipUniverse1Request {
  tokenId: string;
}

export interface UpgradeToOwnerShipUniverse1Request {
  tokenId: string;
}

export interface Transaction {
  hash: string;
  chainId: string;
  nonce: number;
  gasPrice: string;
  data: Uint8Array;
}

function createBaseMintProtoShipUniverse1Request(): MintProtoShipUniverse1Request {
  return { tokenContract: "", tokenId: "" };
}

export const MintProtoShipUniverse1Request = {
  encode(message: MintProtoShipUniverse1Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tokenContract !== "") {
      writer.uint32(10).string(message.tokenContract);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MintProtoShipUniverse1Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintProtoShipUniverse1Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokenContract = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintProtoShipUniverse1Request {
    return {
      tokenContract: isSet(object.tokenContract) ? globalThis.String(object.tokenContract) : "",
      tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
    };
  },

  toJSON(message: MintProtoShipUniverse1Request): unknown {
    const obj: any = {};
    if (message.tokenContract !== undefined) {
      obj.tokenContract = message.tokenContract;
    }
    if (message.tokenId !== undefined) {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintProtoShipUniverse1Request>, I>>(base?: I): MintProtoShipUniverse1Request {
    return MintProtoShipUniverse1Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintProtoShipUniverse1Request>, I>>(
    object: I,
  ): MintProtoShipUniverse1Request {
    const message = createBaseMintProtoShipUniverse1Request();
    message.tokenContract = object.tokenContract ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseMintProtoShipUniverse1Response(): MintProtoShipUniverse1Response {
  return { transaction: undefined, address: "" };
}

export const MintProtoShipUniverse1Response = {
  encode(message: MintProtoShipUniverse1Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transaction !== undefined) {
      Transaction.encode(message.transaction, writer.uint32(10).fork()).ldelim();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MintProtoShipUniverse1Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintProtoShipUniverse1Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transaction = Transaction.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintProtoShipUniverse1Response {
    return {
      transaction: isSet(object.transaction) ? Transaction.fromJSON(object.transaction) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: MintProtoShipUniverse1Response): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = Transaction.toJSON(message.transaction);
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintProtoShipUniverse1Response>, I>>(base?: I): MintProtoShipUniverse1Response {
    return MintProtoShipUniverse1Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintProtoShipUniverse1Response>, I>>(
    object: I,
  ): MintProtoShipUniverse1Response {
    const message = createBaseMintProtoShipUniverse1Response();
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? Transaction.fromPartial(object.transaction)
      : undefined;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseBurnProtoShipUniverse1Request(): BurnProtoShipUniverse1Request {
  return { tokenId: "" };
}

export const BurnProtoShipUniverse1Request = {
  encode(message: BurnProtoShipUniverse1Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tokenId !== "") {
      writer.uint32(10).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BurnProtoShipUniverse1Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBurnProtoShipUniverse1Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BurnProtoShipUniverse1Request {
    return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
  },

  toJSON(message: BurnProtoShipUniverse1Request): unknown {
    const obj: any = {};
    if (message.tokenId !== undefined) {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BurnProtoShipUniverse1Request>, I>>(base?: I): BurnProtoShipUniverse1Request {
    return BurnProtoShipUniverse1Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BurnProtoShipUniverse1Request>, I>>(
    object: I,
  ): BurnProtoShipUniverse1Request {
    const message = createBaseBurnProtoShipUniverse1Request();
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseUpgradeToOwnerShipUniverse1Request(): UpgradeToOwnerShipUniverse1Request {
  return { tokenId: "" };
}

export const UpgradeToOwnerShipUniverse1Request = {
  encode(message: UpgradeToOwnerShipUniverse1Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tokenId !== "") {
      writer.uint32(10).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpgradeToOwnerShipUniverse1Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeToOwnerShipUniverse1Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeToOwnerShipUniverse1Request {
    return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
  },

  toJSON(message: UpgradeToOwnerShipUniverse1Request): unknown {
    const obj: any = {};
    if (message.tokenId !== undefined) {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpgradeToOwnerShipUniverse1Request>, I>>(
    base?: I,
  ): UpgradeToOwnerShipUniverse1Request {
    return UpgradeToOwnerShipUniverse1Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpgradeToOwnerShipUniverse1Request>, I>>(
    object: I,
  ): UpgradeToOwnerShipUniverse1Request {
    const message = createBaseUpgradeToOwnerShipUniverse1Request();
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { hash: "", chainId: "", nonce: 0, gasPrice: "", data: new Uint8Array(0) };
}

export const Transaction = {
  encode(message: Transaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.nonce !== 0) {
      writer.uint32(24).uint64(message.nonce);
    }
    if (message.gasPrice !== "") {
      writer.uint32(34).string(message.gasPrice);
    }
    if (message.data.length !== 0) {
      writer.uint32(42).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.nonce = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gasPrice = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      nonce: isSet(object.nonce) ? globalThis.Number(object.nonce) : 0,
      gasPrice: isSet(object.gasPrice) ? globalThis.String(object.gasPrice) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.hash !== undefined) {
      obj.hash = message.hash;
    }
    if (message.chainId !== undefined) {
      obj.chainId = message.chainId;
    }
    if (message.nonce !== undefined) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.gasPrice !== undefined) {
      obj.gasPrice = message.gasPrice;
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.hash = object.hash ?? "";
    message.chainId = object.chainId ?? "";
    message.nonce = object.nonce ?? 0;
    message.gasPrice = object.gasPrice ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

/** ChainCommandService is the service that handles all chain requests. */
export interface ChainCommandService {
  MintProtoShipUniverse1(request: MintProtoShipUniverse1Request): Promise<MintProtoShipUniverse1Response>;
  BurnProtoShipUniverse1(request: BurnProtoShipUniverse1Request): Promise<Transaction>;
  UpgradeToOwnerShipUniverse1(request: UpgradeToOwnerShipUniverse1Request): Promise<Transaction>;
}

export const ChainCommandServiceServiceName = "ethereum.v1.chain.ChainCommandService";
export class ChainCommandServiceClientImpl implements ChainCommandService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ChainCommandServiceServiceName;
    this.rpc = rpc;
    this.MintProtoShipUniverse1 = this.MintProtoShipUniverse1.bind(this);
    this.BurnProtoShipUniverse1 = this.BurnProtoShipUniverse1.bind(this);
    this.UpgradeToOwnerShipUniverse1 = this.UpgradeToOwnerShipUniverse1.bind(this);
  }
  MintProtoShipUniverse1(request: MintProtoShipUniverse1Request): Promise<MintProtoShipUniverse1Response> {
    const data = MintProtoShipUniverse1Request.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintProtoShipUniverse1", data);
    return promise.then((data) => MintProtoShipUniverse1Response.decode(_m0.Reader.create(data)));
  }

  BurnProtoShipUniverse1(request: BurnProtoShipUniverse1Request): Promise<Transaction> {
    const data = BurnProtoShipUniverse1Request.encode(request).finish();
    const promise = this.rpc.request(this.service, "BurnProtoShipUniverse1", data);
    return promise.then((data) => Transaction.decode(_m0.Reader.create(data)));
  }

  UpgradeToOwnerShipUniverse1(request: UpgradeToOwnerShipUniverse1Request): Promise<Transaction> {
    const data = UpgradeToOwnerShipUniverse1Request.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpgradeToOwnerShipUniverse1", data);
    return promise.then((data) => Transaction.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
