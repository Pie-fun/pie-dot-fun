// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/profile/sns_connection.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "ethereum.v1.profile";

/** SNSType enumeration represents the type of sns. */
export enum SNSType {
  /** SNS_UNSPECIFIED - Unspecified sns type. */
  SNS_UNSPECIFIED = "SNS_UNSPECIFIED",
  /** SNS_TWITTER - Twitter sns type. */
  SNS_TWITTER = "SNS_TWITTER",
}

export function sNSTypeFromJSON(object: any): SNSType {
  switch (object) {
    case 0:
    case "SNS_UNSPECIFIED":
      return SNSType.SNS_UNSPECIFIED;
    case 1:
    case "SNS_TWITTER":
      return SNSType.SNS_TWITTER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SNSType");
  }
}

export function sNSTypeToJSON(object: SNSType): string {
  switch (object) {
    case SNSType.SNS_UNSPECIFIED:
      return "SNS_UNSPECIFIED";
    case SNSType.SNS_TWITTER:
      return "SNS_TWITTER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SNSType");
  }
}

export function sNSTypeToNumber(object: SNSType): number {
  switch (object) {
    case SNSType.SNS_UNSPECIFIED:
      return 0;
    case SNSType.SNS_TWITTER:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SNSType");
  }
}

/** ExternalProfile message represents an external profile. */
export interface ExternalProfile {
  /** The name of the external profile. */
  name: string;
  /** The image uri of the external profile. */
  imageUri: string;
  /** The link of the external profile. */
  link: string;
}

/** SNSConnection message represents a profile's connection. */
export interface SNSConnection {
  /** The profile resource name of the connection. */
  profile: string;
  /** The type of the SNS. */
  type: SNSType;
  /** The external profile. */
  externalProfile: ExternalProfile | undefined;
}

function createBaseExternalProfile(): ExternalProfile {
  return { name: "", imageUri: "", link: "" };
}

export const ExternalProfile = {
  encode(message: ExternalProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.imageUri !== "") {
      writer.uint32(18).string(message.imageUri);
    }
    if (message.link !== "") {
      writer.uint32(26).string(message.link);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExternalProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.link = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalProfile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : "",
    };
  },

  toJSON(message: ExternalProfile): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.imageUri !== undefined) {
      obj.imageUri = message.imageUri;
    }
    if (message.link !== undefined) {
      obj.link = message.link;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalProfile>, I>>(base?: I): ExternalProfile {
    return ExternalProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalProfile>, I>>(object: I): ExternalProfile {
    const message = createBaseExternalProfile();
    message.name = object.name ?? "";
    message.imageUri = object.imageUri ?? "";
    message.link = object.link ?? "";
    return message;
  },
};

function createBaseSNSConnection(): SNSConnection {
  return { profile: "", type: SNSType.SNS_UNSPECIFIED, externalProfile: undefined };
}

export const SNSConnection = {
  encode(message: SNSConnection, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    if (message.type !== SNSType.SNS_UNSPECIFIED) {
      writer.uint32(24).int32(sNSTypeToNumber(message.type));
    }
    if (message.externalProfile !== undefined) {
      ExternalProfile.encode(message.externalProfile, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SNSConnection {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSNSConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = sNSTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.externalProfile = ExternalProfile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SNSConnection {
    return {
      profile: isSet(object.profile) ? globalThis.String(object.profile) : "",
      type: isSet(object.type) ? sNSTypeFromJSON(object.type) : SNSType.SNS_UNSPECIFIED,
      externalProfile: isSet(object.externalProfile) ? ExternalProfile.fromJSON(object.externalProfile) : undefined,
    };
  },

  toJSON(message: SNSConnection): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    if (message.type !== undefined) {
      obj.type = sNSTypeToJSON(message.type);
    }
    if (message.externalProfile !== undefined) {
      obj.externalProfile = ExternalProfile.toJSON(message.externalProfile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SNSConnection>, I>>(base?: I): SNSConnection {
    return SNSConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SNSConnection>, I>>(object: I): SNSConnection {
    const message = createBaseSNSConnection();
    message.profile = object.profile ?? "";
    message.type = object.type ?? SNSType.SNS_UNSPECIFIED;
    message.externalProfile = (object.externalProfile !== undefined && object.externalProfile !== null)
      ? ExternalProfile.fromPartial(object.externalProfile)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
