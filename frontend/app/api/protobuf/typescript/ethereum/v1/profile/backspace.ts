// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: ethereum/v1/profile/backspace.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "ethereum.v1.profile";

export interface GetBackspaceRequest {
  /**
   * The name of the profile to retrieve.
   * Format: profiles/{address}
   * Wildcard (*) is not allowed.
   */
  profile: string;
}

export interface UpdateBackspaceRequest {
  /** Backspace to update */
  backspace: Backspace | undefined;
}

export interface Backspace {
  /**
   * The resource name of the Backspace.
   * Format: profiles/{address}/backspace
   */
  name: string;
  /** Introduction chat message of the Backspace. */
  introductionChat: string;
}

function createBaseGetBackspaceRequest(): GetBackspaceRequest {
  return { profile: "" };
}

export const GetBackspaceRequest = {
  encode(message: GetBackspaceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profile !== "") {
      writer.uint32(10).string(message.profile);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBackspaceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profile = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackspaceRequest {
    return { profile: isSet(object.profile) ? globalThis.String(object.profile) : "" };
  },

  toJSON(message: GetBackspaceRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBackspaceRequest>, I>>(base?: I): GetBackspaceRequest {
    return GetBackspaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBackspaceRequest>, I>>(object: I): GetBackspaceRequest {
    const message = createBaseGetBackspaceRequest();
    message.profile = object.profile ?? "";
    return message;
  },
};

function createBaseUpdateBackspaceRequest(): UpdateBackspaceRequest {
  return { backspace: undefined };
}

export const UpdateBackspaceRequest = {
  encode(message: UpdateBackspaceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.backspace !== undefined) {
      Backspace.encode(message.backspace, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateBackspaceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBackspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backspace = Backspace.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBackspaceRequest {
    return { backspace: isSet(object.backspace) ? Backspace.fromJSON(object.backspace) : undefined };
  },

  toJSON(message: UpdateBackspaceRequest): unknown {
    const obj: any = {};
    if (message.backspace !== undefined) {
      obj.backspace = Backspace.toJSON(message.backspace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBackspaceRequest>, I>>(base?: I): UpdateBackspaceRequest {
    return UpdateBackspaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBackspaceRequest>, I>>(object: I): UpdateBackspaceRequest {
    const message = createBaseUpdateBackspaceRequest();
    message.backspace = (object.backspace !== undefined && object.backspace !== null)
      ? Backspace.fromPartial(object.backspace)
      : undefined;
    return message;
  },
};

function createBaseBackspace(): Backspace {
  return { name: "", introductionChat: "" };
}

export const Backspace = {
  encode(message: Backspace, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.introductionChat !== "") {
      writer.uint32(18).string(message.introductionChat);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Backspace {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.introductionChat = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Backspace {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      introductionChat: isSet(object.introductionChat) ? globalThis.String(object.introductionChat) : "",
    };
  },

  toJSON(message: Backspace): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.introductionChat !== undefined) {
      obj.introductionChat = message.introductionChat;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Backspace>, I>>(base?: I): Backspace {
    return Backspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Backspace>, I>>(object: I): Backspace {
    const message = createBaseBackspace();
    message.name = object.name ?? "";
    message.introductionChat = object.introductionChat ?? "";
    return message;
  },
};

/** BackspaceService contains the function to interact with the Backspace of the spacebar */
export interface BackspaceService {
  /** GetBackspace will return Backspace. */
  GetBackspace(request: GetBackspaceRequest): Promise<Backspace>;
  UpdateBackspace(request: UpdateBackspaceRequest): Promise<Backspace>;
}

export const BackspaceServiceServiceName = "ethereum.v1.profile.BackspaceService";
export class BackspaceServiceClientImpl implements BackspaceService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BackspaceServiceServiceName;
    this.rpc = rpc;
    this.GetBackspace = this.GetBackspace.bind(this);
    this.UpdateBackspace = this.UpdateBackspace.bind(this);
  }
  GetBackspace(request: GetBackspaceRequest): Promise<Backspace> {
    const data = GetBackspaceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBackspace", data);
    return promise.then((data) => Backspace.decode(_m0.Reader.create(data)));
  }

  UpdateBackspace(request: UpdateBackspaceRequest): Promise<Backspace> {
    const data = UpdateBackspaceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateBackspace", data);
    return promise.then((data) => Backspace.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
