// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/chain/sign.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "blast.v1.chain";

export interface SignMessageRequest {
  message: string;
}

export interface SignatureResponse {
  signature: string;
  message: string;
}

export interface SignatureTypedResponse {
  signature: string;
  message: { [key: string]: string };
}

export interface SignatureTypedResponse_MessageEntry {
  key: string;
  value: string;
}

export interface MintAndCreateSquareParams {
  user: string;
  /** uint64 can be overflowed */
  minStaking: string;
  signatureId: string;
  timestamp: number;
  nonce: string;
}

export interface SignMintSquareRequest {
  params: MintAndCreateSquareParams | undefined;
}

export interface SignMintSquareResponse {
  signature: string;
  params: MintAndCreateSquareParams | undefined;
}

export interface JoinSquareParams {
  user: string;
  squareId: number;
  timestamp: number;
  nonce: string;
}

export interface SignJoinSquareRequest {
  params: JoinSquareParams | undefined;
}

export interface SignJoinSquareResponse {
  signature: string;
  params: JoinSquareParams | undefined;
}

export interface TransferSquareParams {
  user: string;
  /** token id of the user's current square */
  from: number;
  /** token id of the target square */
  to: number;
  timestamp: number;
  nonce: string;
}

export interface SignTransferSquareRequest {
  params: TransferSquareParams | undefined;
}

export interface SignTransferSquareResponse {
  signature: string;
  params: TransferSquareParams | undefined;
}

export interface UploadScoreParams {
  player: string;
  gameCode: number;
  squareIdOrZero: number;
  score: number;
  gameId: string;
  timestamp: number;
  nonce: string;
}

export interface SignUploadScoreRequest {
  params: UploadScoreParams | undefined;
}

export interface SignUploadScoreResponse {
  signature: string;
  params: UploadScoreParams | undefined;
}

function createBaseSignMessageRequest(): SignMessageRequest {
  return { message: "" };
}

export const SignMessageRequest = {
  encode(message: SignMessageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignMessageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignMessageRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SignMessageRequest): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignMessageRequest>, I>>(base?: I): SignMessageRequest {
    return SignMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignMessageRequest>, I>>(object: I): SignMessageRequest {
    const message = createBaseSignMessageRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSignatureResponse(): SignatureResponse {
  return { signature: "", message: "" };
}

export const SignatureResponse = {
  encode(message: SignatureResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SignatureResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureResponse>, I>>(base?: I): SignatureResponse {
    return SignatureResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureResponse>, I>>(object: I): SignatureResponse {
    const message = createBaseSignatureResponse();
    message.signature = object.signature ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSignatureTypedResponse(): SignatureTypedResponse {
  return { signature: "", message: {} };
}

export const SignatureTypedResponse = {
  encode(message: SignatureTypedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    Object.entries(message.message).forEach(([key, value]) => {
      SignatureTypedResponse_MessageEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureTypedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureTypedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SignatureTypedResponse_MessageEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.message[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureTypedResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      message: isObject(object.message)
        ? Object.entries(object.message).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SignatureTypedResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.message) {
      const entries = Object.entries(message.message);
      if (entries.length > 0) {
        obj.message = {};
        entries.forEach(([k, v]) => {
          obj.message[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureTypedResponse>, I>>(base?: I): SignatureTypedResponse {
    return SignatureTypedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureTypedResponse>, I>>(object: I): SignatureTypedResponse {
    const message = createBaseSignatureTypedResponse();
    message.signature = object.signature ?? "";
    message.message = Object.entries(object.message ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSignatureTypedResponse_MessageEntry(): SignatureTypedResponse_MessageEntry {
  return { key: "", value: "" };
}

export const SignatureTypedResponse_MessageEntry = {
  encode(message: SignatureTypedResponse_MessageEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureTypedResponse_MessageEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureTypedResponse_MessageEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureTypedResponse_MessageEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SignatureTypedResponse_MessageEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignatureTypedResponse_MessageEntry>, I>>(
    base?: I,
  ): SignatureTypedResponse_MessageEntry {
    return SignatureTypedResponse_MessageEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignatureTypedResponse_MessageEntry>, I>>(
    object: I,
  ): SignatureTypedResponse_MessageEntry {
    const message = createBaseSignatureTypedResponse_MessageEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMintAndCreateSquareParams(): MintAndCreateSquareParams {
  return { user: "", minStaking: "", signatureId: "", timestamp: 0, nonce: "" };
}

export const MintAndCreateSquareParams = {
  encode(message: MintAndCreateSquareParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.minStaking !== "") {
      writer.uint32(18).string(message.minStaking);
    }
    if (message.signatureId !== "") {
      writer.uint32(26).string(message.signatureId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).uint32(message.timestamp);
    }
    if (message.nonce !== "") {
      writer.uint32(42).string(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MintAndCreateSquareParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintAndCreateSquareParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.minStaking = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signatureId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nonce = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintAndCreateSquareParams {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      minStaking: isSet(object.minStaking) ? globalThis.String(object.minStaking) : "",
      signatureId: isSet(object.signatureId) ? globalThis.String(object.signatureId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: MintAndCreateSquareParams): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.minStaking !== undefined) {
      obj.minStaking = message.minStaking;
    }
    if (message.signatureId !== undefined) {
      obj.signatureId = message.signatureId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.nonce !== undefined) {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintAndCreateSquareParams>, I>>(base?: I): MintAndCreateSquareParams {
    return MintAndCreateSquareParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintAndCreateSquareParams>, I>>(object: I): MintAndCreateSquareParams {
    const message = createBaseMintAndCreateSquareParams();
    message.user = object.user ?? "";
    message.minStaking = object.minStaking ?? "";
    message.signatureId = object.signatureId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseSignMintSquareRequest(): SignMintSquareRequest {
  return { params: undefined };
}

export const SignMintSquareRequest = {
  encode(message: SignMintSquareRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      MintAndCreateSquareParams.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignMintSquareRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignMintSquareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = MintAndCreateSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignMintSquareRequest {
    return { params: isSet(object.params) ? MintAndCreateSquareParams.fromJSON(object.params) : undefined };
  },

  toJSON(message: SignMintSquareRequest): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = MintAndCreateSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignMintSquareRequest>, I>>(base?: I): SignMintSquareRequest {
    return SignMintSquareRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignMintSquareRequest>, I>>(object: I): SignMintSquareRequest {
    const message = createBaseSignMintSquareRequest();
    message.params = (object.params !== undefined && object.params !== null)
      ? MintAndCreateSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseSignMintSquareResponse(): SignMintSquareResponse {
  return { signature: "", params: undefined };
}

export const SignMintSquareResponse = {
  encode(message: SignMintSquareResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.params !== undefined) {
      MintAndCreateSquareParams.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignMintSquareResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignMintSquareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = MintAndCreateSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignMintSquareResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      params: isSet(object.params) ? MintAndCreateSquareParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: SignMintSquareResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.params !== undefined) {
      obj.params = MintAndCreateSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignMintSquareResponse>, I>>(base?: I): SignMintSquareResponse {
    return SignMintSquareResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignMintSquareResponse>, I>>(object: I): SignMintSquareResponse {
    const message = createBaseSignMintSquareResponse();
    message.signature = object.signature ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? MintAndCreateSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseJoinSquareParams(): JoinSquareParams {
  return { user: "", squareId: 0, timestamp: 0, nonce: "" };
}

export const JoinSquareParams = {
  encode(message: JoinSquareParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.squareId !== 0) {
      writer.uint32(16).uint32(message.squareId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint32(message.timestamp);
    }
    if (message.nonce !== "") {
      writer.uint32(34).string(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JoinSquareParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSquareParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.squareId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nonce = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSquareParams {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      squareId: isSet(object.squareId) ? globalThis.Number(object.squareId) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: JoinSquareParams): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.squareId !== undefined) {
      obj.squareId = Math.round(message.squareId);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.nonce !== undefined) {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSquareParams>, I>>(base?: I): JoinSquareParams {
    return JoinSquareParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSquareParams>, I>>(object: I): JoinSquareParams {
    const message = createBaseJoinSquareParams();
    message.user = object.user ?? "";
    message.squareId = object.squareId ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseSignJoinSquareRequest(): SignJoinSquareRequest {
  return { params: undefined };
}

export const SignJoinSquareRequest = {
  encode(message: SignJoinSquareRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      JoinSquareParams.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignJoinSquareRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignJoinSquareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = JoinSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignJoinSquareRequest {
    return { params: isSet(object.params) ? JoinSquareParams.fromJSON(object.params) : undefined };
  },

  toJSON(message: SignJoinSquareRequest): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = JoinSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignJoinSquareRequest>, I>>(base?: I): SignJoinSquareRequest {
    return SignJoinSquareRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignJoinSquareRequest>, I>>(object: I): SignJoinSquareRequest {
    const message = createBaseSignJoinSquareRequest();
    message.params = (object.params !== undefined && object.params !== null)
      ? JoinSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseSignJoinSquareResponse(): SignJoinSquareResponse {
  return { signature: "", params: undefined };
}

export const SignJoinSquareResponse = {
  encode(message: SignJoinSquareResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.params !== undefined) {
      JoinSquareParams.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignJoinSquareResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignJoinSquareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = JoinSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignJoinSquareResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      params: isSet(object.params) ? JoinSquareParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: SignJoinSquareResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.params !== undefined) {
      obj.params = JoinSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignJoinSquareResponse>, I>>(base?: I): SignJoinSquareResponse {
    return SignJoinSquareResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignJoinSquareResponse>, I>>(object: I): SignJoinSquareResponse {
    const message = createBaseSignJoinSquareResponse();
    message.signature = object.signature ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? JoinSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseTransferSquareParams(): TransferSquareParams {
  return { user: "", from: 0, to: 0, timestamp: 0, nonce: "" };
}

export const TransferSquareParams = {
  encode(message: TransferSquareParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.from !== 0) {
      writer.uint32(16).uint32(message.from);
    }
    if (message.to !== 0) {
      writer.uint32(24).uint32(message.to);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).uint32(message.timestamp);
    }
    if (message.nonce !== "") {
      writer.uint32(42).string(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferSquareParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferSquareParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.from = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.to = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nonce = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferSquareParams {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: TransferSquareParams): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = message.user;
    }
    if (message.from !== undefined) {
      obj.from = Math.round(message.from);
    }
    if (message.to !== undefined) {
      obj.to = Math.round(message.to);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.nonce !== undefined) {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferSquareParams>, I>>(base?: I): TransferSquareParams {
    return TransferSquareParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferSquareParams>, I>>(object: I): TransferSquareParams {
    const message = createBaseTransferSquareParams();
    message.user = object.user ?? "";
    message.from = object.from ?? 0;
    message.to = object.to ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseSignTransferSquareRequest(): SignTransferSquareRequest {
  return { params: undefined };
}

export const SignTransferSquareRequest = {
  encode(message: SignTransferSquareRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      TransferSquareParams.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignTransferSquareRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignTransferSquareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = TransferSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignTransferSquareRequest {
    return { params: isSet(object.params) ? TransferSquareParams.fromJSON(object.params) : undefined };
  },

  toJSON(message: SignTransferSquareRequest): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = TransferSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignTransferSquareRequest>, I>>(base?: I): SignTransferSquareRequest {
    return SignTransferSquareRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignTransferSquareRequest>, I>>(object: I): SignTransferSquareRequest {
    const message = createBaseSignTransferSquareRequest();
    message.params = (object.params !== undefined && object.params !== null)
      ? TransferSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseSignTransferSquareResponse(): SignTransferSquareResponse {
  return { signature: "", params: undefined };
}

export const SignTransferSquareResponse = {
  encode(message: SignTransferSquareResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.params !== undefined) {
      TransferSquareParams.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignTransferSquareResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignTransferSquareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = TransferSquareParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignTransferSquareResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      params: isSet(object.params) ? TransferSquareParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: SignTransferSquareResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.params !== undefined) {
      obj.params = TransferSquareParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignTransferSquareResponse>, I>>(base?: I): SignTransferSquareResponse {
    return SignTransferSquareResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignTransferSquareResponse>, I>>(object: I): SignTransferSquareResponse {
    const message = createBaseSignTransferSquareResponse();
    message.signature = object.signature ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? TransferSquareParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseUploadScoreParams(): UploadScoreParams {
  return { player: "", gameCode: 0, squareIdOrZero: 0, score: 0, gameId: "", timestamp: 0, nonce: "" };
}

export const UploadScoreParams = {
  encode(message: UploadScoreParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== "") {
      writer.uint32(10).string(message.player);
    }
    if (message.gameCode !== 0) {
      writer.uint32(16).uint32(message.gameCode);
    }
    if (message.squareIdOrZero !== 0) {
      writer.uint32(24).uint32(message.squareIdOrZero);
    }
    if (message.score !== 0) {
      writer.uint32(32).uint32(message.score);
    }
    if (message.gameId !== "") {
      writer.uint32(42).string(message.gameId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(48).uint32(message.timestamp);
    }
    if (message.nonce !== "") {
      writer.uint32(58).string(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UploadScoreParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadScoreParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.player = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gameCode = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.squareIdOrZero = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.score = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.nonce = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadScoreParams {
    return {
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameCode: isSet(object.gameCode) ? globalThis.Number(object.gameCode) : 0,
      squareIdOrZero: isSet(object.squareIdOrZero) ? globalThis.Number(object.squareIdOrZero) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: UploadScoreParams): unknown {
    const obj: any = {};
    if (message.player !== undefined) {
      obj.player = message.player;
    }
    if (message.gameCode !== undefined) {
      obj.gameCode = Math.round(message.gameCode);
    }
    if (message.squareIdOrZero !== undefined) {
      obj.squareIdOrZero = Math.round(message.squareIdOrZero);
    }
    if (message.score !== undefined) {
      obj.score = Math.round(message.score);
    }
    if (message.gameId !== undefined) {
      obj.gameId = message.gameId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.nonce !== undefined) {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadScoreParams>, I>>(base?: I): UploadScoreParams {
    return UploadScoreParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadScoreParams>, I>>(object: I): UploadScoreParams {
    const message = createBaseUploadScoreParams();
    message.player = object.player ?? "";
    message.gameCode = object.gameCode ?? 0;
    message.squareIdOrZero = object.squareIdOrZero ?? 0;
    message.score = object.score ?? 0;
    message.gameId = object.gameId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseSignUploadScoreRequest(): SignUploadScoreRequest {
  return { params: undefined };
}

export const SignUploadScoreRequest = {
  encode(message: SignUploadScoreRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      UploadScoreParams.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignUploadScoreRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUploadScoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = UploadScoreParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUploadScoreRequest {
    return { params: isSet(object.params) ? UploadScoreParams.fromJSON(object.params) : undefined };
  },

  toJSON(message: SignUploadScoreRequest): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = UploadScoreParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUploadScoreRequest>, I>>(base?: I): SignUploadScoreRequest {
    return SignUploadScoreRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUploadScoreRequest>, I>>(object: I): SignUploadScoreRequest {
    const message = createBaseSignUploadScoreRequest();
    message.params = (object.params !== undefined && object.params !== null)
      ? UploadScoreParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseSignUploadScoreResponse(): SignUploadScoreResponse {
  return { signature: "", params: undefined };
}

export const SignUploadScoreResponse = {
  encode(message: SignUploadScoreResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.params !== undefined) {
      UploadScoreParams.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignUploadScoreResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUploadScoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = UploadScoreParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUploadScoreResponse {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      params: isSet(object.params) ? UploadScoreParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: SignUploadScoreResponse): unknown {
    const obj: any = {};
    if (message.signature !== undefined) {
      obj.signature = message.signature;
    }
    if (message.params !== undefined) {
      obj.params = UploadScoreParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUploadScoreResponse>, I>>(base?: I): SignUploadScoreResponse {
    return SignUploadScoreResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUploadScoreResponse>, I>>(object: I): SignUploadScoreResponse {
    const message = createBaseSignUploadScoreResponse();
    message.signature = object.signature ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? UploadScoreParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** ChainSignService is the service that handles signing messages. */
export interface ChainSignService {
  /**
   * SignMessage signs a message with arbitrary message.
   *
   * This rpc is not open to the public request and only used by the internal service.
   */
  SignMessage(request: SignMessageRequest): Promise<SignatureResponse>;
  /**
   * SignMintSquare signs a square mint with the given parameters.
   *
   * 403 error will be returned if the given owner address not not eligible to mint the square.
   */
  SignMintSquare(request: SignMintSquareRequest): Promise<SignMintSquareResponse>;
  /** SignJoinSquare signs a square mint with the given parameters. */
  SignJoinSquare(request: SignJoinSquareRequest): Promise<SignJoinSquareResponse>;
  /** SignTransferSquare signs a square mint with the given parameters. */
  SignTransferSquare(request: SignTransferSquareRequest): Promise<SignTransferSquareResponse>;
  /** SignUploadScore signs a score creation with the given parameters. */
  SignUploadScore(request: SignUploadScoreRequest): Promise<SignUploadScoreResponse>;
}

export const ChainSignServiceServiceName = "blast.v1.chain.ChainSignService";
export class ChainSignServiceClientImpl implements ChainSignService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ChainSignServiceServiceName;
    this.rpc = rpc;
    this.SignMessage = this.SignMessage.bind(this);
    this.SignMintSquare = this.SignMintSquare.bind(this);
    this.SignJoinSquare = this.SignJoinSquare.bind(this);
    this.SignTransferSquare = this.SignTransferSquare.bind(this);
    this.SignUploadScore = this.SignUploadScore.bind(this);
  }
  SignMessage(request: SignMessageRequest): Promise<SignatureResponse> {
    const data = SignMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignMessage", data);
    return promise.then((data) => SignatureResponse.decode(_m0.Reader.create(data)));
  }

  SignMintSquare(request: SignMintSquareRequest): Promise<SignMintSquareResponse> {
    const data = SignMintSquareRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignMintSquare", data);
    return promise.then((data) => SignMintSquareResponse.decode(_m0.Reader.create(data)));
  }

  SignJoinSquare(request: SignJoinSquareRequest): Promise<SignJoinSquareResponse> {
    const data = SignJoinSquareRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignJoinSquare", data);
    return promise.then((data) => SignJoinSquareResponse.decode(_m0.Reader.create(data)));
  }

  SignTransferSquare(request: SignTransferSquareRequest): Promise<SignTransferSquareResponse> {
    const data = SignTransferSquareRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignTransferSquare", data);
    return promise.then((data) => SignTransferSquareResponse.decode(_m0.Reader.create(data)));
  }

  SignUploadScore(request: SignUploadScoreRequest): Promise<SignUploadScoreResponse> {
    const data = SignUploadScoreRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignUploadScore", data);
    return promise.then((data) => SignUploadScoreResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
