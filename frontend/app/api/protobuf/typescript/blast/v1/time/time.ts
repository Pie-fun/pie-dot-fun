// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: blast/v1/time/time.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DateMessage } from "../../../google/type/date";

export const protobufPackage = "blast.v1.time";

/**
 * SpacebarWeek has the service-based incremental week number.
 * 2024/02/19 ~ 2024/02/25 => 1
 */
export interface SpacebarWeek {
  /** week. incremental value. */
  week: number;
  /**
   * date. [start_date, end_date]
   * start_date. It's monday
   */
  startDate:
    | DateMessage
    | undefined;
  /** end_date. It's sunday */
  endDate:
    | DateMessage
    | undefined;
  /** full_week_based_year */
  fullWeekBasedYear?:
    | number
    | undefined;
  /** full_week_based_year */
  fullWeekBasedMonth?:
    | number
    | undefined;
  /** full_week_based_week */
  fullWeekBasedWeek?:
    | number
    | undefined;
  /**
   * full_week_based_week_string
   * Format: {year}-{month}-{week}. Example: 2021-01-W1
   */
  fullWeekBasedWeekString: string;
  /**
   * full_week_based_month_string
   * Format: yyyy-MM. Example: 2021-01
   */
  fullWeekBasedMonthString: string;
}

/** GetCurrentTimeResponse */
export interface GetCurrentTimeResponse {
  /** time */
  time: string | undefined;
}

/** GetCurrentWeekResponse */
export interface GetCurrentWeekResponse {
  /** week */
  week: number;
}

/** GetSpacebarWeekRequest */
export interface GetSpacebarWeekRequest {
  /** week */
  week: number;
}

/** GetSpacebarWeekByDateRequest */
export interface GetSpacebarWeekByDateRequest {
  /**
   * date
   * if null, it's today (UTC)
   */
  date?: DateMessage | undefined;
}

/** GetCurrentFullWeekBasedWeekResponse */
export interface GetCurrentFullWeekBasedWeekResponse {
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  currentWeek: string;
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  previousWeek: string;
}

/** GetFullWeekBasedWeekRequest */
export interface GetFullWeekBasedWeekRequest {
  base?: { $case: "date"; date: DateMessage } | { $case: "week"; week: number } | undefined;
}

/** GetFullWeekBasedWeekResponse */
export interface GetFullWeekBasedWeekResponse {
  /** Format: {year}-{month}-{week}. Example: 2021-01-W1 */
  week: string;
}

/** GetCurrentFullWeekBasedMonthResponse */
export interface GetCurrentFullWeekBasedMonthResponse {
  /** Format: yyyy-MM. Example: 2021-01 */
  currentMonth: string;
  /** Format: yyyy-MM. Example: 2021-01 */
  previousMonth: string;
}

function createBaseSpacebarWeek(): SpacebarWeek {
  return {
    week: 0,
    startDate: undefined,
    endDate: undefined,
    fullWeekBasedYear: undefined,
    fullWeekBasedMonth: undefined,
    fullWeekBasedWeek: undefined,
    fullWeekBasedWeekString: "",
    fullWeekBasedMonthString: "",
  };
}

export const SpacebarWeek = {
  encode(message: SpacebarWeek, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    if (message.startDate !== undefined) {
      DateMessage.encode(message.startDate, writer.uint32(18).fork()).ldelim();
    }
    if (message.endDate !== undefined) {
      DateMessage.encode(message.endDate, writer.uint32(26).fork()).ldelim();
    }
    if (message.fullWeekBasedYear !== undefined) {
      writer.uint32(32).uint32(message.fullWeekBasedYear);
    }
    if (message.fullWeekBasedMonth !== undefined) {
      writer.uint32(40).uint32(message.fullWeekBasedMonth);
    }
    if (message.fullWeekBasedWeek !== undefined) {
      writer.uint32(48).uint32(message.fullWeekBasedWeek);
    }
    if (message.fullWeekBasedWeekString !== "") {
      writer.uint32(58).string(message.fullWeekBasedWeekString);
    }
    if (message.fullWeekBasedMonthString !== "") {
      writer.uint32(66).string(message.fullWeekBasedMonthString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpacebarWeek {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpacebarWeek();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fullWeekBasedYear = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.fullWeekBasedMonth = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.fullWeekBasedWeek = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.fullWeekBasedWeekString = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fullWeekBasedMonthString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpacebarWeek {
    return {
      week: isSet(object.week) ? globalThis.Number(object.week) : 0,
      startDate: isSet(object.startDate) ? DateMessage.fromJSON(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? DateMessage.fromJSON(object.endDate) : undefined,
      fullWeekBasedYear: isSet(object.fullWeekBasedYear) ? globalThis.Number(object.fullWeekBasedYear) : undefined,
      fullWeekBasedMonth: isSet(object.fullWeekBasedMonth) ? globalThis.Number(object.fullWeekBasedMonth) : undefined,
      fullWeekBasedWeek: isSet(object.fullWeekBasedWeek) ? globalThis.Number(object.fullWeekBasedWeek) : undefined,
      fullWeekBasedWeekString: isSet(object.fullWeekBasedWeekString)
        ? globalThis.String(object.fullWeekBasedWeekString)
        : "",
      fullWeekBasedMonthString: isSet(object.fullWeekBasedMonthString)
        ? globalThis.String(object.fullWeekBasedMonthString)
        : "",
    };
  },

  toJSON(message: SpacebarWeek): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    if (message.startDate !== undefined) {
      obj.startDate = DateMessage.toJSON(message.startDate);
    }
    if (message.endDate !== undefined) {
      obj.endDate = DateMessage.toJSON(message.endDate);
    }
    if (message.fullWeekBasedYear !== undefined) {
      obj.fullWeekBasedYear = Math.round(message.fullWeekBasedYear);
    }
    if (message.fullWeekBasedMonth !== undefined) {
      obj.fullWeekBasedMonth = Math.round(message.fullWeekBasedMonth);
    }
    if (message.fullWeekBasedWeek !== undefined) {
      obj.fullWeekBasedWeek = Math.round(message.fullWeekBasedWeek);
    }
    if (message.fullWeekBasedWeekString !== undefined) {
      obj.fullWeekBasedWeekString = message.fullWeekBasedWeekString;
    }
    if (message.fullWeekBasedMonthString !== undefined) {
      obj.fullWeekBasedMonthString = message.fullWeekBasedMonthString;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpacebarWeek>, I>>(base?: I): SpacebarWeek {
    return SpacebarWeek.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpacebarWeek>, I>>(object: I): SpacebarWeek {
    const message = createBaseSpacebarWeek();
    message.week = object.week ?? 0;
    message.startDate = (object.startDate !== undefined && object.startDate !== null)
      ? DateMessage.fromPartial(object.startDate)
      : undefined;
    message.endDate = (object.endDate !== undefined && object.endDate !== null)
      ? DateMessage.fromPartial(object.endDate)
      : undefined;
    message.fullWeekBasedYear = object.fullWeekBasedYear ?? undefined;
    message.fullWeekBasedMonth = object.fullWeekBasedMonth ?? undefined;
    message.fullWeekBasedWeek = object.fullWeekBasedWeek ?? undefined;
    message.fullWeekBasedWeekString = object.fullWeekBasedWeekString ?? "";
    message.fullWeekBasedMonthString = object.fullWeekBasedMonthString ?? "";
    return message;
  },
};

function createBaseGetCurrentTimeResponse(): GetCurrentTimeResponse {
  return { time: undefined };
}

export const GetCurrentTimeResponse = {
  encode(message: GetCurrentTimeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentTimeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentTimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentTimeResponse {
    return { time: isSet(object.time) ? globalThis.String(object.time) : undefined };
  },

  toJSON(message: GetCurrentTimeResponse): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentTimeResponse>, I>>(base?: I): GetCurrentTimeResponse {
    return GetCurrentTimeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentTimeResponse>, I>>(object: I): GetCurrentTimeResponse {
    const message = createBaseGetCurrentTimeResponse();
    message.time = object.time ?? undefined;
    return message;
  },
};

function createBaseGetCurrentWeekResponse(): GetCurrentWeekResponse {
  return { week: 0 };
}

export const GetCurrentWeekResponse = {
  encode(message: GetCurrentWeekResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentWeekResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentWeekResponse {
    return { week: isSet(object.week) ? globalThis.Number(object.week) : 0 };
  },

  toJSON(message: GetCurrentWeekResponse): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentWeekResponse>, I>>(base?: I): GetCurrentWeekResponse {
    return GetCurrentWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentWeekResponse>, I>>(object: I): GetCurrentWeekResponse {
    const message = createBaseGetCurrentWeekResponse();
    message.week = object.week ?? 0;
    return message;
  },
};

function createBaseGetSpacebarWeekRequest(): GetSpacebarWeekRequest {
  return { week: 0 };
}

export const GetSpacebarWeekRequest = {
  encode(message: GetSpacebarWeekRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.week !== 0) {
      writer.uint32(8).uint32(message.week);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSpacebarWeekRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpacebarWeekRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.week = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpacebarWeekRequest {
    return { week: isSet(object.week) ? globalThis.Number(object.week) : 0 };
  },

  toJSON(message: GetSpacebarWeekRequest): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = Math.round(message.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpacebarWeekRequest>, I>>(base?: I): GetSpacebarWeekRequest {
    return GetSpacebarWeekRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpacebarWeekRequest>, I>>(object: I): GetSpacebarWeekRequest {
    const message = createBaseGetSpacebarWeekRequest();
    message.week = object.week ?? 0;
    return message;
  },
};

function createBaseGetSpacebarWeekByDateRequest(): GetSpacebarWeekByDateRequest {
  return { date: undefined };
}

export const GetSpacebarWeekByDateRequest = {
  encode(message: GetSpacebarWeekByDateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSpacebarWeekByDateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpacebarWeekByDateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpacebarWeekByDateRequest {
    return { date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined };
  },

  toJSON(message: GetSpacebarWeekByDateRequest): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpacebarWeekByDateRequest>, I>>(base?: I): GetSpacebarWeekByDateRequest {
    return GetSpacebarWeekByDateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpacebarWeekByDateRequest>, I>>(object: I): GetSpacebarWeekByDateRequest {
    const message = createBaseGetSpacebarWeekByDateRequest();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    return message;
  },
};

function createBaseGetCurrentFullWeekBasedWeekResponse(): GetCurrentFullWeekBasedWeekResponse {
  return { currentWeek: "", previousWeek: "" };
}

export const GetCurrentFullWeekBasedWeekResponse = {
  encode(message: GetCurrentFullWeekBasedWeekResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentWeek !== "") {
      writer.uint32(10).string(message.currentWeek);
    }
    if (message.previousWeek !== "") {
      writer.uint32(18).string(message.previousWeek);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentFullWeekBasedWeekResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentFullWeekBasedWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.currentWeek = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.previousWeek = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentFullWeekBasedWeekResponse {
    return {
      currentWeek: isSet(object.currentWeek) ? globalThis.String(object.currentWeek) : "",
      previousWeek: isSet(object.previousWeek) ? globalThis.String(object.previousWeek) : "",
    };
  },

  toJSON(message: GetCurrentFullWeekBasedWeekResponse): unknown {
    const obj: any = {};
    if (message.currentWeek !== undefined) {
      obj.currentWeek = message.currentWeek;
    }
    if (message.previousWeek !== undefined) {
      obj.previousWeek = message.previousWeek;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentFullWeekBasedWeekResponse>, I>>(
    base?: I,
  ): GetCurrentFullWeekBasedWeekResponse {
    return GetCurrentFullWeekBasedWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentFullWeekBasedWeekResponse>, I>>(
    object: I,
  ): GetCurrentFullWeekBasedWeekResponse {
    const message = createBaseGetCurrentFullWeekBasedWeekResponse();
    message.currentWeek = object.currentWeek ?? "";
    message.previousWeek = object.previousWeek ?? "";
    return message;
  },
};

function createBaseGetFullWeekBasedWeekRequest(): GetFullWeekBasedWeekRequest {
  return { base: undefined };
}

export const GetFullWeekBasedWeekRequest = {
  encode(message: GetFullWeekBasedWeekRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.base?.$case) {
      case "date":
        DateMessage.encode(message.base.date, writer.uint32(10).fork()).ldelim();
        break;
      case "week":
        writer.uint32(16).uint32(message.base.week);
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFullWeekBasedWeekRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFullWeekBasedWeekRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base = { $case: "date", date: DateMessage.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.base = { $case: "week", week: reader.uint32() };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFullWeekBasedWeekRequest {
    return {
      base: isSet(object.date)
        ? { $case: "date", date: DateMessage.fromJSON(object.date) }
        : isSet(object.week)
        ? { $case: "week", week: globalThis.Number(object.week) }
        : undefined,
    };
  },

  toJSON(message: GetFullWeekBasedWeekRequest): unknown {
    const obj: any = {};
    if (message.base?.$case === "date") {
      obj.date = DateMessage.toJSON(message.base.date);
    }
    if (message.base?.$case === "week") {
      obj.week = Math.round(message.base.week);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFullWeekBasedWeekRequest>, I>>(base?: I): GetFullWeekBasedWeekRequest {
    return GetFullWeekBasedWeekRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFullWeekBasedWeekRequest>, I>>(object: I): GetFullWeekBasedWeekRequest {
    const message = createBaseGetFullWeekBasedWeekRequest();
    if (object.base?.$case === "date" && object.base?.date !== undefined && object.base?.date !== null) {
      message.base = { $case: "date", date: DateMessage.fromPartial(object.base.date) };
    }
    if (object.base?.$case === "week" && object.base?.week !== undefined && object.base?.week !== null) {
      message.base = { $case: "week", week: object.base.week };
    }
    return message;
  },
};

function createBaseGetFullWeekBasedWeekResponse(): GetFullWeekBasedWeekResponse {
  return { week: "" };
}

export const GetFullWeekBasedWeekResponse = {
  encode(message: GetFullWeekBasedWeekResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.week !== "") {
      writer.uint32(10).string(message.week);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFullWeekBasedWeekResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFullWeekBasedWeekResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.week = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFullWeekBasedWeekResponse {
    return { week: isSet(object.week) ? globalThis.String(object.week) : "" };
  },

  toJSON(message: GetFullWeekBasedWeekResponse): unknown {
    const obj: any = {};
    if (message.week !== undefined) {
      obj.week = message.week;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFullWeekBasedWeekResponse>, I>>(base?: I): GetFullWeekBasedWeekResponse {
    return GetFullWeekBasedWeekResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFullWeekBasedWeekResponse>, I>>(object: I): GetFullWeekBasedWeekResponse {
    const message = createBaseGetFullWeekBasedWeekResponse();
    message.week = object.week ?? "";
    return message;
  },
};

function createBaseGetCurrentFullWeekBasedMonthResponse(): GetCurrentFullWeekBasedMonthResponse {
  return { currentMonth: "", previousMonth: "" };
}

export const GetCurrentFullWeekBasedMonthResponse = {
  encode(message: GetCurrentFullWeekBasedMonthResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentMonth !== "") {
      writer.uint32(10).string(message.currentMonth);
    }
    if (message.previousMonth !== "") {
      writer.uint32(18).string(message.previousMonth);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentFullWeekBasedMonthResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentFullWeekBasedMonthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.currentMonth = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.previousMonth = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentFullWeekBasedMonthResponse {
    return {
      currentMonth: isSet(object.currentMonth) ? globalThis.String(object.currentMonth) : "",
      previousMonth: isSet(object.previousMonth) ? globalThis.String(object.previousMonth) : "",
    };
  },

  toJSON(message: GetCurrentFullWeekBasedMonthResponse): unknown {
    const obj: any = {};
    if (message.currentMonth !== undefined) {
      obj.currentMonth = message.currentMonth;
    }
    if (message.previousMonth !== undefined) {
      obj.previousMonth = message.previousMonth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentFullWeekBasedMonthResponse>, I>>(
    base?: I,
  ): GetCurrentFullWeekBasedMonthResponse {
    return GetCurrentFullWeekBasedMonthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentFullWeekBasedMonthResponse>, I>>(
    object: I,
  ): GetCurrentFullWeekBasedMonthResponse {
    const message = createBaseGetCurrentFullWeekBasedMonthResponse();
    message.currentMonth = object.currentMonth ?? "";
    message.previousMonth = object.previousMonth ?? "";
    return message;
  },
};

/** TimeService */
export interface TimeService {
  /** GetCurrentTime */
  GetCurrentTime(request: Empty): Promise<GetCurrentTimeResponse>;
  /**
   * GetCurrentWeek
   *
   * @deprecated
   */
  GetCurrentWeek(request: Empty): Promise<GetCurrentWeekResponse>;
  /** GetSpacebarWeek */
  GetSpacebarWeek(request: GetSpacebarWeekRequest): Promise<SpacebarWeek>;
  /** GetSpacebarWeekByDate */
  GetSpacebarWeekByDate(request: GetSpacebarWeekByDateRequest): Promise<SpacebarWeek>;
  /**
   * GetCurrentFullWeekBasedWeek
   *
   * @deprecated
   */
  GetCurrentFullWeekBasedWeek(request: Empty): Promise<GetCurrentFullWeekBasedWeekResponse>;
  /**
   * GetCurrentFullWeekBasedMonth
   *
   * @deprecated
   */
  GetCurrentFullWeekBasedMonth(request: Empty): Promise<GetCurrentFullWeekBasedMonthResponse>;
}

export const TimeServiceServiceName = "blast.v1.time.TimeService";
export class TimeServiceClientImpl implements TimeService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TimeServiceServiceName;
    this.rpc = rpc;
    this.GetCurrentTime = this.GetCurrentTime.bind(this);
    this.GetCurrentWeek = this.GetCurrentWeek.bind(this);
    this.GetSpacebarWeek = this.GetSpacebarWeek.bind(this);
    this.GetSpacebarWeekByDate = this.GetSpacebarWeekByDate.bind(this);
    this.GetCurrentFullWeekBasedWeek = this.GetCurrentFullWeekBasedWeek.bind(this);
    this.GetCurrentFullWeekBasedMonth = this.GetCurrentFullWeekBasedMonth.bind(this);
  }
  GetCurrentTime(request: Empty): Promise<GetCurrentTimeResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCurrentTime", data);
    return promise.then((data) => GetCurrentTimeResponse.decode(_m0.Reader.create(data)));
  }

  GetCurrentWeek(request: Empty): Promise<GetCurrentWeekResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCurrentWeek", data);
    return promise.then((data) => GetCurrentWeekResponse.decode(_m0.Reader.create(data)));
  }

  GetSpacebarWeek(request: GetSpacebarWeekRequest): Promise<SpacebarWeek> {
    const data = GetSpacebarWeekRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSpacebarWeek", data);
    return promise.then((data) => SpacebarWeek.decode(_m0.Reader.create(data)));
  }

  GetSpacebarWeekByDate(request: GetSpacebarWeekByDateRequest): Promise<SpacebarWeek> {
    const data = GetSpacebarWeekByDateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSpacebarWeekByDate", data);
    return promise.then((data) => SpacebarWeek.decode(_m0.Reader.create(data)));
  }

  GetCurrentFullWeekBasedWeek(request: Empty): Promise<GetCurrentFullWeekBasedWeekResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCurrentFullWeekBasedWeek", data);
    return promise.then((data) => GetCurrentFullWeekBasedWeekResponse.decode(_m0.Reader.create(data)));
  }

  GetCurrentFullWeekBasedMonth(request: Empty): Promise<GetCurrentFullWeekBasedMonthResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCurrentFullWeekBasedMonth", data);
    return promise.then((data) => GetCurrentFullWeekBasedMonthResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
