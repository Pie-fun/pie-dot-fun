// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/blastpoints/blastpoints.proto (package blast.v1.blastpoints, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum blast.v1.blastpoints.BlastPointsType
 */
export declare enum BlastPointsType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: LIQUIDITY = 1;
   */
  LIQUIDITY = 1,

  /**
   * @generated from enum value: DEVELOPER = 2;
   */
  DEVELOPER = 2,
}

/**
 * @generated from enum blast.v1.blastpoints.BlastPointsTransferType
 */
export declare enum BlastPointsTransferType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: TRANSFER_UNSPECIFIED = 0;
   */
  TRANSFER_UNSPECIFIED = 0,

  /**
   * @generated from enum value: POINTS_STAKING = 1;
   */
  POINTS_STAKING = 1,

  /**
   * @generated from enum value: GOLD_REFERRAL = 2;
   */
  GOLD_REFERRAL = 2,

  /**
   * @generated from enum value: GOLD_RAFFLE = 3;
   */
  GOLD_RAFFLE = 3,

  /**
   * @generated from enum value: GOLD_WEEKLY_SPACEBAR_POINTS = 4;
   */
  GOLD_WEEKLY_SPACEBAR_POINTS = 4,

  /**
   * @generated from enum value: GOLD_SCORE_UPLOAD = 5;
   */
  GOLD_SCORE_UPLOAD = 5,

  /**
   * @generated from enum value: GOLD_SCORE_RANKINGS_WINNER = 6;
   */
  GOLD_SCORE_RANKINGS_WINNER = 6,

  /**
   * @generated from enum value: GOLD_COMMUNITY_EVENT = 7;
   */
  GOLD_COMMUNITY_EVENT = 7,

  /**
   * @generated from enum value: GOLD_SS_CHALLENGE_WINNER = 100;
   */
  GOLD_SS_CHALLENGE_WINNER = 100,

  /**
   * @generated from enum value: GOLD_SS_INVITATIONAL = 200;
   */
  GOLD_SS_INVITATIONAL = 200,
}

/**
 * @generated from enum blast.v1.blastpoints.BlastPointsBatchState
 */
export declare enum BlastPointsBatchState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The batch is pending.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * The batch is cancelled.
   *
   * @generated from enum value: CANCELLED = 2;
   */
  CANCELLED = 2,

  /**
   * The batch is finalizing.
   *
   * @generated from enum value: FINALIZING = 3;
   */
  FINALIZING = 3,

  /**
   * The batch is finalized.
   *
   * @generated from enum value: FINALIZED = 4;
   */
  FINALIZED = 4,
}

/**
 * @generated from enum blast.v1.blastpoints.ReservationType
 */
export declare enum ReservationType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: RESERVATION_TYPE_UNSPECIFIED = 0;
   */
  RESERVATION_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: WEEKLY_SPACEBAR_POINTS = 1;
   */
  WEEKLY_SPACEBAR_POINTS = 1,

  /**
   * @generated from enum value: REFERREE_WITH_STAKING = 2;
   */
  REFERREE_WITH_STAKING = 2,

  /**
   * @generated from enum value: SCORE_RANKINGS_WINNER = 3;
   */
  SCORE_RANKINGS_WINNER = 3,

  /**
   * @generated from enum value: SCORE_UPLOAD_BACKFILL = 4;
   */
  SCORE_UPLOAD_BACKFILL = 4,

  /**
   * @generated from enum value: COMMUNITY_EVENT_WINNER = 5;
   */
  COMMUNITY_EVENT_WINNER = 5,

  /**
   * @generated from enum value: SS_CHALLENGE_WINNER = 6;
   */
  SS_CHALLENGE_WINNER = 6,

  /**
   * @generated from enum value: SS_INVITATIONAL = 7;
   */
  SS_INVITATIONAL = 7,
}

/**
 * @generated from enum blast.v1.blastpoints.ReservationState
 */
export declare enum ReservationState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: RESERVATION_STATE_UNSPECIFIED = 0;
   */
  RESERVATION_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESERVED = 1;
   */
  RESERVED = 1,

  /**
   * @generated from enum value: TRANSFERRED = 2;
   */
  TRANSFERRED = 2,
}

/**
 * @generated from message blast.v1.blastpoints.GetBlastPointsRequest
 */
export declare class GetBlastPointsRequest extends Message<GetBlastPointsRequest> {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   *
   * @generated from field: string blast_points = 1;
   */
  blastPoints: string;

  constructor(data?: PartialMessage<GetBlastPointsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.GetBlastPointsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlastPointsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlastPointsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlastPointsRequest;

  static equals(a: GetBlastPointsRequest | PlainMessage<GetBlastPointsRequest> | undefined, b: GetBlastPointsRequest | PlainMessage<GetBlastPointsRequest> | undefined): boolean;
}

/**
 * GetBlastBalanceRequest this rpc only can be accessed by the admin role
 *
 * @generated from message blast.v1.blastpoints.GetBlastBalanceRequest
 */
export declare class GetBlastBalanceRequest extends Message<GetBlastBalanceRequest> {
  /**
   * @generated from field: string blast_balance = 1;
   */
  blastBalance: string;

  /**
   * The contract address of the token.
   * This field is required if the blast_balance has skipped the blast_points field.
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  /**
   * Which phase of blast points API
   *
   * @generated from field: int32 phase = 3;
   */
  phase: number;

  constructor(data?: PartialMessage<GetBlastBalanceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.GetBlastBalanceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlastBalanceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlastBalanceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlastBalanceRequest;

  static equals(a: GetBlastBalanceRequest | PlainMessage<GetBlastBalanceRequest> | undefined, b: GetBlastBalanceRequest | PlainMessage<GetBlastBalanceRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.ListAllPendingTransfersRequest
 */
export declare class ListAllPendingTransfersRequest extends Message<ListAllPendingTransfersRequest> {
  /**
   * The name of the points to retrieve.
   * Format: users/{address}/blastPoints
   *
   * @generated from field: string blast_points = 1;
   */
  blastPoints: string;

  /**
   * The type of the points to retrieve.
   * IF not set, it will return LIQUIDITY points.
   *
   * @generated from field: blast.v1.blastpoints.BlastPointsType points_type = 2;
   */
  pointsType: BlastPointsType;

  constructor(data?: PartialMessage<ListAllPendingTransfersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.ListAllPendingTransfersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllPendingTransfersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllPendingTransfersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllPendingTransfersRequest;

  static equals(a: ListAllPendingTransfersRequest | PlainMessage<ListAllPendingTransfersRequest> | undefined, b: ListAllPendingTransfersRequest | PlainMessage<ListAllPendingTransfersRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.ListAllPendingTransfersResponse
 */
export declare class ListAllPendingTransfersResponse extends Message<ListAllPendingTransfersResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.blastpoints.Transfer transfers = 1;
   */
  transfers: Transfer[];

  constructor(data?: PartialMessage<ListAllPendingTransfersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.ListAllPendingTransfersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllPendingTransfersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllPendingTransfersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllPendingTransfersResponse;

  static equals(a: ListAllPendingTransfersResponse | PlainMessage<ListAllPendingTransfersResponse> | undefined, b: ListAllPendingTransfersResponse | PlainMessage<ListAllPendingTransfersResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.BlastPoints
 */
export declare class BlastPoints extends Message<BlastPoints> {
  /**
   * The resource name of the Points.
   * Format: users/{address}/blastPoints
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string user_address = 2;
   */
  userAddress: string;

  /**
   * DEPRECATED in favor of phase1.liquidity_points
   *
   * @generated from field: float liquidity_points = 3;
   */
  liquidityPoints: number;

  /**
   * DEPRECATED in favor of phase1.developer_points
   *
   * @generated from field: float developer_points = 4;
   */
  developerPoints: number;

  /**
   * @generated from field: blast.v1.blastpoints.Points phase1 = 5;
   */
  phase1?: Points;

  /**
   * @generated from field: blast.v1.blastpoints.Points phase2 = 6;
   */
  phase2?: Points;

  constructor(data?: PartialMessage<BlastPoints>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.BlastPoints";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlastPoints;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlastPoints;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlastPoints;

  static equals(a: BlastPoints | PlainMessage<BlastPoints> | undefined, b: BlastPoints | PlainMessage<BlastPoints> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.Points
 */
export declare class Points extends Message<Points> {
  /**
   * @generated from field: float liquidity_points = 1;
   */
  liquidityPoints: number;

  /**
   * @generated from field: float developer_points = 2;
   */
  developerPoints: number;

  constructor(data?: PartialMessage<Points>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.Points";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Points;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Points;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Points;

  static equals(a: Points | PlainMessage<Points> | undefined, b: Points | PlainMessage<Points> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.Transfer
 */
export declare class Transfer extends Message<Transfer> {
  /**
   * @generated from field: string user_address = 1;
   */
  userAddress: string;

  /**
   * @generated from field: blast.v1.blastpoints.BlastPointsBatchState state = 2;
   */
  state: BlastPointsBatchState;

  /**
   * @generated from field: blast.v1.blastpoints.BlastPointsType points_type = 3;
   */
  pointsType: BlastPointsType;

  /**
   * @generated from field: float points = 4;
   */
  points: number;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: int32 phase = 7;
   */
  phase: number;

  /**
   * @generated from field: blast.v1.blastpoints.BlastPointsTransferType transfer_type = 8;
   */
  transferType: BlastPointsTransferType;

  constructor(data?: PartialMessage<Transfer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.Transfer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transfer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transfer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transfer;

  static equals(a: Transfer | PlainMessage<Transfer> | undefined, b: Transfer | PlainMessage<Transfer> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.TransferBatch
 */
export declare class TransferBatch extends Message<TransferBatch> {
  /**
   * @generated from field: string batch_id = 1;
   */
  batchId: string;

  /**
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  /**
   * @generated from field: blast.v1.blastpoints.BlastPointsBatchState state = 3;
   */
  state: BlastPointsBatchState;

  /**
   * @generated from field: blast.v1.blastpoints.BlastPointsType points_type = 4;
   */
  pointsType: BlastPointsType;

  /**
   * @generated from field: repeated blast.v1.blastpoints.Transfer transfers = 5;
   */
  transfers: Transfer[];

  /**
   * @generated from field: float total_points = 6;
   */
  totalPoints: number;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: int32 phase = 8;
   */
  phase: number;

  constructor(data?: PartialMessage<TransferBatch>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.TransferBatch";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferBatch;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferBatch;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferBatch;

  static equals(a: TransferBatch | PlainMessage<TransferBatch> | undefined, b: TransferBatch | PlainMessage<TransferBatch> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.BlastBalance
 */
export declare class BlastBalance extends Message<BlastBalance> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: blast.v1.blastpoints.Balance liquidity = 2;
   */
  liquidity?: Balance;

  /**
   * @generated from field: blast.v1.blastpoints.Balance developer = 3;
   */
  developer?: Balance;

  constructor(data?: PartialMessage<BlastBalance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.BlastBalance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlastBalance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlastBalance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlastBalance;

  static equals(a: BlastBalance | PlainMessage<BlastBalance> | undefined, b: BlastBalance | PlainMessage<BlastBalance> | undefined): boolean;
}

/**
 * @generated from message blast.v1.blastpoints.Balance
 */
export declare class Balance extends Message<Balance> {
  /**
   * @generated from field: string available = 1;
   */
  available: string;

  /**
   * @generated from field: string pending_sent = 2;
   */
  pendingSent: string;

  /**
   * @generated from field: string earned_cumulative = 3;
   */
  earnedCumulative: string;

  /**
   * @generated from field: string received_cumulative = 4;
   */
  receivedCumulative: string;

  /**
   * @generated from field: string finalized_sent_cumulative = 5;
   */
  finalizedSentCumulative: string;

  constructor(data?: PartialMessage<Balance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.Balance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance;

  static equals(a: Balance | PlainMessage<Balance> | undefined, b: Balance | PlainMessage<Balance> | undefined): boolean;
}

/**
 * BlastGoldReservation
 *
 * @generated from message blast.v1.blastpoints.BlastGoldReservation
 */
export declare class BlastGoldReservation extends Message<BlastGoldReservation> {
  /**
   * The resource name of the BlastGoldReservation.
   * Format: blastGoldReservations/{blast_gold_reservation}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The user address of the user to reserve the points.
   *
   * @generated from field: string user_address = 2;
   */
  userAddress: string;

  /**
   * The amount of points to reserve.
   *
   * @generated from field: string amount = 3;
   */
  amount: string;

  /**
   * The type of the reservation.
   *
   * @generated from field: blast.v1.blastpoints.ReservationType reservation_type = 4;
   */
  reservationType: ReservationType;

  /**
   * The state of the reservation.
   *
   * @generated from field: blast.v1.blastpoints.ReservationState state = 5;
   */
  state: ReservationState;

  /**
   * The create time of the reservation.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * The transfer time of the reservation.
   *
   * @generated from field: google.protobuf.Timestamp transfer_time = 7;
   */
  transferTime?: Timestamp;

  constructor(data?: PartialMessage<BlastGoldReservation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.BlastGoldReservation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlastGoldReservation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlastGoldReservation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlastGoldReservation;

  static equals(a: BlastGoldReservation | PlainMessage<BlastGoldReservation> | undefined, b: BlastGoldReservation | PlainMessage<BlastGoldReservation> | undefined): boolean;
}

/**
 * BatchCreateBlastGoldReservationsRequest
 *
 * @generated from message blast.v1.blastpoints.BatchCreateBlastGoldReservationsRequest
 */
export declare class BatchCreateBlastGoldReservationsRequest extends Message<BatchCreateBlastGoldReservationsRequest> {
  /**
   * @generated from field: repeated blast.v1.blastpoints.CreateBlastGoldReservationRequest requests = 1;
   */
  requests: CreateBlastGoldReservationRequest[];

  constructor(data?: PartialMessage<BatchCreateBlastGoldReservationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.BatchCreateBlastGoldReservationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateBlastGoldReservationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateBlastGoldReservationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateBlastGoldReservationsRequest;

  static equals(a: BatchCreateBlastGoldReservationsRequest | PlainMessage<BatchCreateBlastGoldReservationsRequest> | undefined, b: BatchCreateBlastGoldReservationsRequest | PlainMessage<BatchCreateBlastGoldReservationsRequest> | undefined): boolean;
}

/**
 * CreateBlastGoldReservationRequest
 *
 * @generated from message blast.v1.blastpoints.CreateBlastGoldReservationRequest
 */
export declare class CreateBlastGoldReservationRequest extends Message<CreateBlastGoldReservationRequest> {
  /**
   * @generated from field: blast.v1.blastpoints.BlastGoldReservation reservation = 1;
   */
  reservation?: BlastGoldReservation;

  constructor(data?: PartialMessage<CreateBlastGoldReservationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.CreateBlastGoldReservationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBlastGoldReservationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBlastGoldReservationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBlastGoldReservationRequest;

  static equals(a: CreateBlastGoldReservationRequest | PlainMessage<CreateBlastGoldReservationRequest> | undefined, b: CreateBlastGoldReservationRequest | PlainMessage<CreateBlastGoldReservationRequest> | undefined): boolean;
}

/**
 * BatchCreateBlastGoldReservationsResponse
 *
 * @generated from message blast.v1.blastpoints.BatchCreateBlastGoldReservationsResponse
 */
export declare class BatchCreateBlastGoldReservationsResponse extends Message<BatchCreateBlastGoldReservationsResponse> {
  /**
   * @generated from field: repeated blast.v1.blastpoints.BlastGoldReservation reservations = 1;
   */
  reservations: BlastGoldReservation[];

  constructor(data?: PartialMessage<BatchCreateBlastGoldReservationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.BatchCreateBlastGoldReservationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateBlastGoldReservationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateBlastGoldReservationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateBlastGoldReservationsResponse;

  static equals(a: BatchCreateBlastGoldReservationsResponse | PlainMessage<BatchCreateBlastGoldReservationsResponse> | undefined, b: BatchCreateBlastGoldReservationsResponse | PlainMessage<BatchCreateBlastGoldReservationsResponse> | undefined): boolean;
}

/**
 * ListBlastGoldReservationsRequest
 *
 * @generated from message blast.v1.blastpoints.ListBlastGoldReservationsRequest
 */
export declare class ListBlastGoldReservationsRequest extends Message<ListBlastGoldReservationsRequest> {
  /**
   * The maximum number of BlastGoldReservations to return. The service may return fewer than
   * this value.
   * If unspecified, at most 100 rows will be returned.
   * The maximum value is 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListBlastGoldReservationsRequest` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * filter
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is ascending by create_time
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "create_time"
   *
   * Examples
   * * order_by=create_time desc
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  constructor(data?: PartialMessage<ListBlastGoldReservationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.ListBlastGoldReservationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBlastGoldReservationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBlastGoldReservationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBlastGoldReservationsRequest;

  static equals(a: ListBlastGoldReservationsRequest | PlainMessage<ListBlastGoldReservationsRequest> | undefined, b: ListBlastGoldReservationsRequest | PlainMessage<ListBlastGoldReservationsRequest> | undefined): boolean;
}

/**
 * ListBlastGoldReservationsResponse
 *
 * @generated from message blast.v1.blastpoints.ListBlastGoldReservationsResponse
 */
export declare class ListBlastGoldReservationsResponse extends Message<ListBlastGoldReservationsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.blastpoints.BlastGoldReservation reservations = 1;
   */
  reservations: BlastGoldReservation[];

  /**
   * The token to retrieve the next page of results, or empty if there are no more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListBlastGoldReservationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.ListBlastGoldReservationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBlastGoldReservationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBlastGoldReservationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBlastGoldReservationsResponse;

  static equals(a: ListBlastGoldReservationsResponse | PlainMessage<ListBlastGoldReservationsResponse> | undefined, b: ListBlastGoldReservationsResponse | PlainMessage<ListBlastGoldReservationsResponse> | undefined): boolean;
}

/**
 * TransferReservedBlastGoldsRequest
 *
 * @generated from message blast.v1.blastpoints.TransferReservedBlastGoldsRequest
 */
export declare class TransferReservedBlastGoldsRequest extends Message<TransferReservedBlastGoldsRequest> {
  /**
   * type of the reservation to transfer
   *
   * @generated from field: blast.v1.blastpoints.ReservationType reservation_type = 1;
   */
  reservationType: ReservationType;

  constructor(data?: PartialMessage<TransferReservedBlastGoldsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.TransferReservedBlastGoldsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferReservedBlastGoldsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferReservedBlastGoldsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferReservedBlastGoldsRequest;

  static equals(a: TransferReservedBlastGoldsRequest | PlainMessage<TransferReservedBlastGoldsRequest> | undefined, b: TransferReservedBlastGoldsRequest | PlainMessage<TransferReservedBlastGoldsRequest> | undefined): boolean;
}

/**
 * TransferReservedBlastGoldsResponse
 *
 * @generated from message blast.v1.blastpoints.TransferReservedBlastGoldsResponse
 */
export declare class TransferReservedBlastGoldsResponse extends Message<TransferReservedBlastGoldsResponse> {
  /**
   * transfered reservations
   *
   * @generated from field: repeated blast.v1.blastpoints.BlastGoldReservation reservations = 1;
   */
  reservations: BlastGoldReservation[];

  constructor(data?: PartialMessage<TransferReservedBlastGoldsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.blastpoints.TransferReservedBlastGoldsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferReservedBlastGoldsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferReservedBlastGoldsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferReservedBlastGoldsResponse;

  static equals(a: TransferReservedBlastGoldsResponse | PlainMessage<TransferReservedBlastGoldsResponse> | undefined, b: TransferReservedBlastGoldsResponse | PlainMessage<TransferReservedBlastGoldsResponse> | undefined): boolean;
}

