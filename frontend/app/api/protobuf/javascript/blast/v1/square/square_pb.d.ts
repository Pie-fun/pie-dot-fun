// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/square/square.proto (package blast.v1.square, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { JoinSquareParams, MintAndCreateSquareParams, TransferSquareParams } from "../chain/sign_pb.js";

/**
 * SquareView enumeration represents the view of a square.
 * The view controls the amount of information returned.
 *
 * Reference
 * https://cloud.google.com/apis/design/design_patterns#list_flattening and
 * https://google.aip.dev/157
 *
 * @generated from enum blast.v1.square.SquareView
 */
export declare enum SquareView {
  /**
   * The default / unset value.
   * The API will default to the SQUARE_VIEW_NOT_MEMBER view.
   *
   * @generated from enum value: SQUARE_VIEW_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Include everything.
   *
   * @generated from enum value: SQUARE_VIEW_OWNER = 1;
   */
  OWNER = 1,

  /**
   * Include only fields that are safe to be exposed to members
   * Do not include `private``
   *
   * @generated from enum value: SQUARE_VIEW_MEMBER = 2;
   */
  MEMBER = 2,

  /**
   * Include only fields that are safe to be exposed to non-members
   * Do not include `private`
   * This is the default value for GetSquare.
   *
   * @generated from enum value: SQUARE_VIEW_NOT_MEMBER = 3;
   */
  NOT_MEMBER = 3,
}

/**
 * The state of square
 *
 * @generated from enum blast.v1.square.SquareState
 */
export declare enum SquareState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The square is created at server side and pending for onchain tx is finalized
   *
   * @generated from enum value: CREATED_PENDING = 1;
   */
  CREATED_PENDING = 1,

  /**
   * The square is owned by Spacebar user.
   *
   * @generated from enum value: OWNED = 2;
   */
  OWNED = 2,

  /**
   * The owner of the square is not a Spacebar user.
   *
   * @generated from enum value: UNOWNED = 3;
   */
  UNOWNED = 3,
}

/**
 * The join type of square
 *
 * @generated from enum blast.v1.square.SquareJoinType
 */
export declare enum SquareJoinType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Anyone can join the square.
   *
   * @generated from enum value: PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * Only user with the code can join the square.
   *
   * @generated from enum value: PRIVATE = 2;
   */
  PRIVATE = 2,

  /**
   * Only user with the specific token can join the square.
   *
   * @generated from enum value: TOKEN_GATED = 3;
   */
  TOKEN_GATED = 3,
}

/**
 * The member type of square
 *
 * @generated from enum blast.v1.square.SquareMemberType
 */
export declare enum SquareMemberType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SQUARE_MEMBER_TYPE_UNSPECIFIED = 0;
   */
  SQUARE_MEMBER_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: OWNER = 1;
   */
  OWNER = 1,

  /**
   * @generated from enum value: MEMBER = 2;
   */
  MEMBER = 2,
}

/**
 * @generated from enum blast.v1.square.SquareMemberRankType
 */
export declare enum SquareMemberRankType {
  /**
   * @generated from enum value: SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED = 0;
   */
  SQUARE_MEMBER_RANK_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ALL_TIME = 1;
   */
  ALL_TIME = 1,

  /**
   * @generated from enum value: WEEKLY = 2;
   */
  WEEKLY = 2,
}

/**
 * @generated from enum blast.v1.square.RejectMintCode
 */
export declare enum RejectMintCode {
  /**
   * @generated from enum value: REJECT_MINT_CODE_UNSPECIFIED = 0;
   */
  REJECT_MINT_CODE_UNSPECIFIED = 0,

  /**
   * The user is not whitelisted to mint the Square NFT.
   *
   * @generated from enum value: NO_ELIGIBILITY = 1;
   */
  NO_ELIGIBILITY = 1,

  /**
   * The Square NFT is already minted.
   *
   * @generated from enum value: ROUND_TIME_NOT_MATCH = 2;
   */
  ROUND_TIME_NOT_MATCH = 2,

  /**
   * The Square NFT is already minted.
   *
   * @generated from enum value: ALREADY_MINTED = 3;
   */
  ALREADY_MINTED = 3,
}

/**
 * @generated from enum blast.v1.square.RejectJoinSquareCode
 */
export declare enum RejectJoinSquareCode {
  /**
   * @generated from enum value: REJECT_JOIN_CODE_UNSPECIFIED = 0;
   */
  REJECT_JOIN_CODE_UNSPECIFIED = 0,

  /**
   * The square is fully occupied.
   *
   * @generated from enum value: REJECT_JOIN_FULLY_OCCUPIED = 1;
   */
  REJECT_JOIN_FULLY_OCCUPIED = 1,

  /**
   * The user's staking amount is below the minimum required amount to join the square.
   *
   * @generated from enum value: REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT = 2;
   */
  REJECT_JOIN_NOT_ENOUGH_STAKING_AMOUNT = 2,

  /**
   * The private code is incorrect.
   *
   * @generated from enum value: REJECT_JOIN_INCORRECT_PRIVATE_CODE = 3;
   */
  REJECT_JOIN_INCORRECT_PRIVATE_CODE = 3,

  /**
   * The user is not a token holder of the token gated square.
   *
   * @generated from enum value: REJECT_JOIN_NOT_TOKEN_HOLDER = 4;
   */
  REJECT_JOIN_NOT_TOKEN_HOLDER = 4,

  /**
   * The user is already memeber of the square.
   *
   * @generated from enum value: REJECT_JOIN_ALREADY_JOINED = 5;
   */
  REJECT_JOIN_ALREADY_JOINED = 5,
}

/**
 * @generated from enum blast.v1.square.RejectTransferSquareCode
 */
export declare enum RejectTransferSquareCode {
  /**
   * @generated from enum value: REJECT_TRANSFER_CODE_UNSPECIFIED = 0;
   */
  REJECT_TRANSFER_CODE_UNSPECIFIED = 0,

  /**
   * The square is fully occupied.
   *
   * @generated from enum value: REJECT_TRANSFER_FULLY_OCCUPIED = 1;
   */
  REJECT_TRANSFER_FULLY_OCCUPIED = 1,

  /**
   * The user's staking amount is below the minimum required amount to join the square.
   *
   * @generated from enum value: REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT = 2;
   */
  REJECT_TRANSFER_NOT_ENOUGH_STAKING_AMOUNT = 2,

  /**
   * The private code is incorrect.
   *
   * @generated from enum value: REJECT_TRANSFER_INCORRECT_PRIVATE_CODE = 3;
   */
  REJECT_TRANSFER_INCORRECT_PRIVATE_CODE = 3,

  /**
   * The user is not a token holder of the token gated square.
   *
   * @generated from enum value: REJECT_TRANSFER_NOT_TOKEN_HOLDER = 4;
   */
  REJECT_TRANSFER_NOT_TOKEN_HOLDER = 4,

  /**
   * The user is not member of any square.
   *
   * @generated from enum value: REJECT_TRANSFER_NOT_SQUARE_MEMBER = 5;
   */
  REJECT_TRANSFER_NOT_SQUARE_MEMBER = 5,

  /**
   * The user transfer or join the square within the cooldown time.
   *
   * @generated from enum value: REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME = 6;
   */
  REJECT_TRANSFER_NOT_AFTER_COOLDOWN_TIME = 6,
}

/**
 * @generated from enum blast.v1.square.MintEligibility
 */
export declare enum MintEligibility {
  /**
   * @generated from enum value: MINT_ELIGIBILITY_UNSPECIFIED = 0;
   */
  MINT_ELIGIBILITY_UNSPECIFIED = 0,

  /**
   * The user is not eligible to mint the Square NFT.
   *
   * @generated from enum value: NOT_ELIGIBLE = 1;
   */
  NOT_ELIGIBLE = 1,

  /**
   * The user is eligible to mint the Square NFT in round 1.
   *
   * @generated from enum value: ELIGIBLE_ROUND1 = 2;
   */
  ELIGIBLE_ROUND1 = 2,

  /**
   * The user is eligible to mint the Square NFT in round 2.
   *
   * @generated from enum value: ELIGIBLE_ROUND2 = 3;
   */
  ELIGIBLE_ROUND2 = 3,

  /**
   * The user is eligible to mint the Square NFT in round 1 and round 2.
   *
   * @generated from enum value: ELIGIBLE_ROUND1_AND_ROUND2 = 4;
   */
  ELIGIBLE_ROUND1_AND_ROUND2 = 4,
}

/**
 * @generated from enum blast.v1.square.TransferMemberType
 */
export declare enum TransferMemberType {
  /**
   * @generated from enum value: TRANSFER_MEMBER_TYPE_UNSPECIFIED = 0;
   */
  TRANSFER_MEMBER_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * @generated from enum value: KICKED_OUT = 2;
   */
  KICKED_OUT = 2,

  /**
   * @generated from enum value: TO_OWNER = 3;
   */
  TO_OWNER = 3,
}

/**
 * @generated from enum blast.v1.square.SpiritType
 */
export declare enum SpiritType {
  /**
   * @generated from enum value: SQUARE_SPIRIT_TYPE_UNSPECIFIED = 0;
   */
  SQUARE_SPIRIT_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: VOTING = 1;
   */
  VOTING = 1,

  /**
   * @generated from enum value: SUMMON_BEBOB_SUCCESS = 2;
   */
  SUMMON_BEBOB_SUCCESS = 2,

  /**
   * @generated from enum value: ATTACK_BEBOB_SUCCESS = 3;
   */
  ATTACK_BEBOB_SUCCESS = 3,

  /**
   * @generated from enum value: COLLECT_STARS = 4;
   */
  COLLECT_STARS = 4,

  /**
   * @generated from enum value: COMMUNITY_EVENT = 5;
   */
  COMMUNITY_EVENT = 5,
}

/**
 * @generated from message blast.v1.square.GetSquareRequest
 */
export declare class GetSquareRequest extends Message<GetSquareRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * Optional. The view to return.
   * Defaults to SQUARE_VIEW_NOT_MEMBER if not set.
   * If set to SQUARE_VIEW_OWNER or SQUARE_VIEW_MEMBER, but the user does not have permission to do so, the API will return a PERMISSION_DENIED error.
   *
   * SquareView enumeration represents the view of a square.
   * The view controls the amount of information returned.
   *
   * Reference
   * https://cloud.google.com/apis/design/design_patterns#list_flattening and
   * https://google.aip.dev/157
   *
   * @generated from field: blast.v1.square.SquareView view = 2;
   */
  view: SquareView;

  constructor(data?: PartialMessage<GetSquareRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.GetSquareRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareRequest;

  static equals(a: GetSquareRequest | PlainMessage<GetSquareRequest> | undefined, b: GetSquareRequest | PlainMessage<GetSquareRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquaresRequest
 */
export declare class ListSquaresRequest extends Message<ListSquaresRequest> {
  /**
   * The maximum number of squares to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquares` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   * * token_id
   *   * `=`
   * * signature_id
   *   * `=`
   * * state
   *   * `=`
   * * join_type
   *   * `=`
   * * display_name
   *   * `=`
   * * occupied
   *   * `negation`
   *
   * Examples
   * * name="squares/10"
   * * token_id="10"
   * * signature_id="3ed92b99-00be-4417-b69f-dca2d8d14c7f"
   * * join_type=TOKEN_GATED
   * * display_name="SQUARE"
   * * join_type=TOKEN_GATED AND not occupied
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "token_id", "total_points", "spirits"
   *
   * Examples
   * * order_by=token_id asc
   * * order_by=total_points desc
   * * order_by=spirits desc
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  constructor(data?: PartialMessage<ListSquaresRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquaresRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquaresRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquaresRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquaresRequest;

  static equals(a: ListSquaresRequest | PlainMessage<ListSquaresRequest> | undefined, b: ListSquaresRequest | PlainMessage<ListSquaresRequest> | undefined): boolean;
}

/**
 * ListSquaresResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message blast.v1.square.ListSquaresResponse
 */
export declare class ListSquaresResponse extends Message<ListSquaresResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.square.Square squares = 1;
   */
  squares: Square[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquaresResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquaresResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquaresResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquaresResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquaresResponse;

  static equals(a: ListSquaresResponse | PlainMessage<ListSquaresResponse> | undefined, b: ListSquaresResponse | PlainMessage<ListSquaresResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ValidateDisplayNameAvailabilityRequest
 */
export declare class ValidateDisplayNameAvailabilityRequest extends Message<ValidateDisplayNameAvailabilityRequest> {
  /**
   * The display_name of Square.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  constructor(data?: PartialMessage<ValidateDisplayNameAvailabilityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ValidateDisplayNameAvailabilityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateDisplayNameAvailabilityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateDisplayNameAvailabilityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateDisplayNameAvailabilityRequest;

  static equals(a: ValidateDisplayNameAvailabilityRequest | PlainMessage<ValidateDisplayNameAvailabilityRequest> | undefined, b: ValidateDisplayNameAvailabilityRequest | PlainMessage<ValidateDisplayNameAvailabilityRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ValidateDisplayNameAvailabilityResponse
 */
export declare class ValidateDisplayNameAvailabilityResponse extends Message<ValidateDisplayNameAvailabilityResponse> {
  /**
   * The display_name of Square.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * The availability of the nickname.
   *
   * @generated from field: bool available = 2;
   */
  available: boolean;

  /**
   * The reason of the display_name is not available.
   * Example:
   * - display name already exists
   * - display name should more or equal than 4
   * - display name should less or equal than 10
   * - display name contains non uppercase character
   *
   * @generated from field: optional string reason = 3;
   */
  reason?: string;

  constructor(data?: PartialMessage<ValidateDisplayNameAvailabilityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ValidateDisplayNameAvailabilityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateDisplayNameAvailabilityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateDisplayNameAvailabilityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateDisplayNameAvailabilityResponse;

  static equals(a: ValidateDisplayNameAvailabilityResponse | PlainMessage<ValidateDisplayNameAvailabilityResponse> | undefined, b: ValidateDisplayNameAvailabilityResponse | PlainMessage<ValidateDisplayNameAvailabilityResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.CreateSquareAndSignRequest
 */
export declare class CreateSquareAndSignRequest extends Message<CreateSquareAndSignRequest> {
  /**
   * @generated from field: string nonce = 1;
   */
  nonce: string;

  /**
   * square to create
   *
   * @generated from field: blast.v1.square.Square square = 2;
   */
  square?: Square;

  constructor(data?: PartialMessage<CreateSquareAndSignRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.CreateSquareAndSignRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSquareAndSignRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSquareAndSignRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSquareAndSignRequest;

  static equals(a: CreateSquareAndSignRequest | PlainMessage<CreateSquareAndSignRequest> | undefined, b: CreateSquareAndSignRequest | PlainMessage<CreateSquareAndSignRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.CreateSquareAndSignResponse
 */
export declare class CreateSquareAndSignResponse extends Message<CreateSquareAndSignResponse> {
  /**
   * square to create
   *
   * @generated from field: blast.v1.square.Square square = 1;
   */
  square?: Square;

  /**
   * signature to sign the onchain tx
   *
   * @generated from field: string signature = 2;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.MintAndCreateSquareParams params = 3;
   */
  params?: MintAndCreateSquareParams;

  constructor(data?: PartialMessage<CreateSquareAndSignResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.CreateSquareAndSignResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSquareAndSignResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSquareAndSignResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSquareAndSignResponse;

  static equals(a: CreateSquareAndSignResponse | PlainMessage<CreateSquareAndSignResponse> | undefined, b: CreateSquareAndSignResponse | PlainMessage<CreateSquareAndSignResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListUsersSquaresRequest
 */
export declare class ListUsersSquaresRequest extends Message<ListUsersSquaresRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  constructor(data?: PartialMessage<ListUsersSquaresRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListUsersSquaresRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersSquaresRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersSquaresRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersSquaresRequest;

  static equals(a: ListUsersSquaresRequest | PlainMessage<ListUsersSquaresRequest> | undefined, b: ListUsersSquaresRequest | PlainMessage<ListUsersSquaresRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListUsersSquaresResponse
 */
export declare class ListUsersSquaresResponse extends Message<ListUsersSquaresResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.square.Square squares = 1;
   */
  squares: Square[];

  constructor(data?: PartialMessage<ListUsersSquaresResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListUsersSquaresResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersSquaresResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersSquaresResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersSquaresResponse;

  static equals(a: ListUsersSquaresResponse | PlainMessage<ListUsersSquaresResponse> | undefined, b: ListUsersSquaresResponse | PlainMessage<ListUsersSquaresResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.UpdateSquareRequest
 */
export declare class UpdateSquareRequest extends Message<UpdateSquareRequest> {
  /**
   * Square to update
   * Format: squares/{token_id}
   *
   * @generated from field: blast.v1.square.Square square = 1;
   */
  square?: Square;

  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   *
   * Supported Fields
   * * "display_name", "description", "join"
   *
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["display_name"]
   * ["display_name", "description"]
   * ["join"]
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateSquareRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.UpdateSquareRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSquareRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSquareRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSquareRequest;

  static equals(a: UpdateSquareRequest | PlainMessage<UpdateSquareRequest> | undefined, b: UpdateSquareRequest | PlainMessage<UpdateSquareRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.GetSquareWeeklySpiritsRequest
 */
export declare class GetSquareWeeklySpiritsRequest extends Message<GetSquareWeeklySpiritsRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The week number to retrieve.
   * If unspecified, the current week will be returned.
   *
   * @generated from field: optional uint32 week = 2;
   */
  week?: number;

  constructor(data?: PartialMessage<GetSquareWeeklySpiritsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.GetSquareWeeklySpiritsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareWeeklySpiritsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareWeeklySpiritsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareWeeklySpiritsRequest;

  static equals(a: GetSquareWeeklySpiritsRequest | PlainMessage<GetSquareWeeklySpiritsRequest> | undefined, b: GetSquareWeeklySpiritsRequest | PlainMessage<GetSquareWeeklySpiritsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.GetSquareWeeklySpiritsResponse
 */
export declare class GetSquareWeeklySpiritsResponse extends Message<GetSquareWeeklySpiritsResponse> {
  /**
   * @generated from field: uint32 weekly_spirits = 1;
   */
  weeklySpirits: number;

  constructor(data?: PartialMessage<GetSquareWeeklySpiritsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.GetSquareWeeklySpiritsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareWeeklySpiritsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareWeeklySpiritsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareWeeklySpiritsResponse;

  static equals(a: GetSquareWeeklySpiritsResponse | PlainMessage<GetSquareWeeklySpiritsResponse> | undefined, b: GetSquareWeeklySpiritsResponse | PlainMessage<GetSquareWeeklySpiritsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.CheckMintEligibilityRequest
 */
export declare class CheckMintEligibilityRequest extends Message<CheckMintEligibilityRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  constructor(data?: PartialMessage<CheckMintEligibilityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.CheckMintEligibilityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckMintEligibilityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckMintEligibilityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckMintEligibilityRequest;

  static equals(a: CheckMintEligibilityRequest | PlainMessage<CheckMintEligibilityRequest> | undefined, b: CheckMintEligibilityRequest | PlainMessage<CheckMintEligibilityRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.CheckMintEligibilityResponse
 */
export declare class CheckMintEligibilityResponse extends Message<CheckMintEligibilityResponse> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * Whether the user is eligible to mint the Square NFT
   *
   * @generated from field: blast.v1.square.MintEligibility eligibility = 2;
   */
  eligibility: MintEligibility;

  /**
   * Whether the user is currently available to mint the Square NFT
   * If the user is not available, the reason code will be set.
   * If the user is available, the reason code will be empty.
   * Can be unavailable though the eligibility is ELIGIBLE_ROUND1 or ELIGIBLE_ROUND2 if it is not appropriate round time.
   *
   * @generated from field: bool available = 3;
   */
  available: boolean;

  /**
   * The reason code of the user is not eligible to mint the Square NFT.
   *
   * @generated from field: optional blast.v1.square.RejectMintCode reject_code = 4;
   */
  rejectCode?: RejectMintCode;

  constructor(data?: PartialMessage<CheckMintEligibilityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.CheckMintEligibilityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckMintEligibilityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckMintEligibilityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckMintEligibilityResponse;

  static equals(a: CheckMintEligibilityResponse | PlainMessage<CheckMintEligibilityResponse> | undefined, b: CheckMintEligibilityResponse | PlainMessage<CheckMintEligibilityResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ApproveJoinSquareAndSignRequest
 */
export declare class ApproveJoinSquareAndSignRequest extends Message<ApproveJoinSquareAndSignRequest> {
  /**
   * The resource name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The resource name of the user to join.
   * Format: users/{address}
   *
   * @generated from field: string user = 2;
   */
  user: string;

  /**
   * The private code of the square.
   * This field is required if the square is private.
   * Otherwise, this field should be empty.
   *
   * @generated from field: optional string private_code = 3;
   */
  privateCode?: string;

  /**
   * @generated from field: string nonce = 4;
   */
  nonce: string;

  constructor(data?: PartialMessage<ApproveJoinSquareAndSignRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ApproveJoinSquareAndSignRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveJoinSquareAndSignRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveJoinSquareAndSignRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveJoinSquareAndSignRequest;

  static equals(a: ApproveJoinSquareAndSignRequest | PlainMessage<ApproveJoinSquareAndSignRequest> | undefined, b: ApproveJoinSquareAndSignRequest | PlainMessage<ApproveJoinSquareAndSignRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ApproveJoinSquareAndSignResponse
 */
export declare class ApproveJoinSquareAndSignResponse extends Message<ApproveJoinSquareAndSignResponse> {
  /**
   * @generated from field: bool approved = 1;
   */
  approved: boolean;

  /**
   * @generated from field: string signature = 2;
   */
  signature: string;

  /**
   * @generated from field: optional blast.v1.square.RejectJoinSquareCode reject_code = 3;
   */
  rejectCode?: RejectJoinSquareCode;

  /**
   * @generated from field: blast.v1.chain.JoinSquareParams params = 4;
   */
  params?: JoinSquareParams;

  constructor(data?: PartialMessage<ApproveJoinSquareAndSignResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ApproveJoinSquareAndSignResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveJoinSquareAndSignResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveJoinSquareAndSignResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveJoinSquareAndSignResponse;

  static equals(a: ApproveJoinSquareAndSignResponse | PlainMessage<ApproveJoinSquareAndSignResponse> | undefined, b: ApproveJoinSquareAndSignResponse | PlainMessage<ApproveJoinSquareAndSignResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ApproveTransferSquareAndSignRequest
 */
export declare class ApproveTransferSquareAndSignRequest extends Message<ApproveTransferSquareAndSignRequest> {
  /**
   * The resource name of the square to transfer.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The resource name of the user to transfer.
   * Format: users/{address}
   *
   * @generated from field: string user = 2;
   */
  user: string;

  /**
   * The private code of the square.
   * This field is required if the square is private.
   * Otherwise, this field should be empty.
   *
   * @generated from field: optional string private_code = 3;
   */
  privateCode?: string;

  /**
   * @generated from field: string nonce = 4;
   */
  nonce: string;

  constructor(data?: PartialMessage<ApproveTransferSquareAndSignRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ApproveTransferSquareAndSignRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveTransferSquareAndSignRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveTransferSquareAndSignRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveTransferSquareAndSignRequest;

  static equals(a: ApproveTransferSquareAndSignRequest | PlainMessage<ApproveTransferSquareAndSignRequest> | undefined, b: ApproveTransferSquareAndSignRequest | PlainMessage<ApproveTransferSquareAndSignRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ApproveTransferSquareAndSignResponse
 */
export declare class ApproveTransferSquareAndSignResponse extends Message<ApproveTransferSquareAndSignResponse> {
  /**
   * @generated from field: bool approved = 1;
   */
  approved: boolean;

  /**
   * @generated from field: string signature = 2;
   */
  signature: string;

  /**
   * @generated from field: optional blast.v1.square.RejectTransferSquareCode reject_code = 3;
   */
  rejectCode?: RejectTransferSquareCode;

  /**
   * @generated from field: blast.v1.chain.TransferSquareParams params = 4;
   */
  params?: TransferSquareParams;

  constructor(data?: PartialMessage<ApproveTransferSquareAndSignResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ApproveTransferSquareAndSignResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveTransferSquareAndSignResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveTransferSquareAndSignResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveTransferSquareAndSignResponse;

  static equals(a: ApproveTransferSquareAndSignResponse | PlainMessage<ApproveTransferSquareAndSignResponse> | undefined, b: ApproveTransferSquareAndSignResponse | PlainMessage<ApproveTransferSquareAndSignResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.GetSquareWeeklyPointsRequest
 */
export declare class GetSquareWeeklyPointsRequest extends Message<GetSquareWeeklyPointsRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The week number to retrieve.
   * If unspecified, the current week will be returned.
   *
   * @generated from field: uint32 week = 2;
   */
  week: number;

  constructor(data?: PartialMessage<GetSquareWeeklyPointsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.GetSquareWeeklyPointsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareWeeklyPointsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareWeeklyPointsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareWeeklyPointsRequest;

  static equals(a: GetSquareWeeklyPointsRequest | PlainMessage<GetSquareWeeklyPointsRequest> | undefined, b: GetSquareWeeklyPointsRequest | PlainMessage<GetSquareWeeklyPointsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.GetSquareWeeklyPointsResponse
 */
export declare class GetSquareWeeklyPointsResponse extends Message<GetSquareWeeklyPointsResponse> {
  /**
   * The weekly points of the square.
   *
   * @generated from field: uint32 weekly_points = 1;
   */
  weeklyPoints: number;

  /**
   * The week number of the points.
   *
   * @generated from field: uint32 week = 2;
   */
  week: number;

  constructor(data?: PartialMessage<GetSquareWeeklyPointsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.GetSquareWeeklyPointsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareWeeklyPointsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareWeeklyPointsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareWeeklyPointsResponse;

  static equals(a: GetSquareWeeklyPointsResponse | PlainMessage<GetSquareWeeklyPointsResponse> | undefined, b: GetSquareWeeklyPointsResponse | PlainMessage<GetSquareWeeklyPointsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquareSpiritHistoriesRequest
 */
export declare class ListSquareSpiritHistoriesRequest extends Message<ListSquareSpiritHistoriesRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The maximum number of spirits to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquareSpiritHistories` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListSquareSpiritHistoriesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareSpiritHistoriesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareSpiritHistoriesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareSpiritHistoriesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareSpiritHistoriesRequest;

  static equals(a: ListSquareSpiritHistoriesRequest | PlainMessage<ListSquareSpiritHistoriesRequest> | undefined, b: ListSquareSpiritHistoriesRequest | PlainMessage<ListSquareSpiritHistoriesRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquareSpiritHistoriesResposne
 */
export declare class ListSquareSpiritHistoriesResposne extends Message<ListSquareSpiritHistoriesResposne> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.square.SquareSpiritHistory histories = 1;
   */
  histories: SquareSpiritHistory[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content
   * of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquareSpiritHistoriesResposne>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareSpiritHistoriesResposne";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareSpiritHistoriesResposne;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareSpiritHistoriesResposne;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareSpiritHistoriesResposne;

  static equals(a: ListSquareSpiritHistoriesResposne | PlainMessage<ListSquareSpiritHistoriesResposne> | undefined, b: ListSquareSpiritHistoriesResposne | PlainMessage<ListSquareSpiritHistoriesResposne> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquareMembersRequest
 */
export declare class ListSquareMembersRequest extends Message<ListSquareMembersRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The maximum number of squares to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquareMembers` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * user
   *   * `=`
   * * member
   *   * `=`
   * * member_address
   *   * `=`
   * * join_time
   *   * `>`, `<`, `>=`, `<=`
   * * show_left
   *   * `NOT`
   *
   * Examples
   * * member_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * join_time>"2024-04-10T11:30:00Z"
   * * show_left
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "total_points", "join_time"
   *
   * Examples
   * * order_by=join_time asc
   * * order_by=total_points desc, join_time asc
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;

  constructor(data?: PartialMessage<ListSquareMembersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareMembersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMembersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMembersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMembersRequest;

  static equals(a: ListSquareMembersRequest | PlainMessage<ListSquareMembersRequest> | undefined, b: ListSquareMembersRequest | PlainMessage<ListSquareMembersRequest> | undefined): boolean;
}

/**
 * ListSquareMembersResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message blast.v1.square.ListSquareMembersResponse
 */
export declare class ListSquareMembersResponse extends Message<ListSquareMembersResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.square.SquareMember members = 1;
   */
  members: SquareMember[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquareMembersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareMembersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMembersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMembersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMembersResponse;

  static equals(a: ListSquareMembersResponse | PlainMessage<ListSquareMembersResponse> | undefined, b: ListSquareMembersResponse | PlainMessage<ListSquareMembersResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquareMemberRankingsRequest
 */
export declare class ListSquareMemberRankingsRequest extends Message<ListSquareMemberRankingsRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * @generated from field: blast.v1.square.SquareMemberRankType rank_type = 2;
   */
  rankType: SquareMemberRankType;

  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListSquareMemberRankingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareMemberRankingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMemberRankingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsRequest;

  static equals(a: ListSquareMemberRankingsRequest | PlainMessage<ListSquareMemberRankingsRequest> | undefined, b: ListSquareMemberRankingsRequest | PlainMessage<ListSquareMemberRankingsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.ListSquareMemberRankingsResponse
 */
export declare class ListSquareMemberRankingsResponse extends Message<ListSquareMemberRankingsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.square.SquareMemberRanking rankings = 1;
   */
  rankings: SquareMemberRanking[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquareMemberRankingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.ListSquareMemberRankingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMemberRankingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsResponse;

  static equals(a: ListSquareMemberRankingsResponse | PlainMessage<ListSquareMemberRankingsResponse> | undefined, b: ListSquareMemberRankingsResponse | PlainMessage<ListSquareMemberRankingsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.Square
 */
export declare class Square extends Message<Square> {
  /**
   * The resource name of the Square.
   * Format: squares/{token_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ERC721 token ID of the Square.
   *
   * @generated from field: string token_id = 2;
   */
  tokenId: string;

  /**
   * @generated from field: string owner_address = 3;
   */
  ownerAddress: string;

  /**
   * The created time of Square.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: blast.v1.square.SquareState state = 5;
   */
  state: SquareState;

  /**
   * The signature id of the Square.
   * This field is used for multi signature when minting the Square NFT.
   *
   * @generated from field: string signature_id = 6;
   */
  signatureId: string;

  /**
   * The join type of the square.
   *
   * @generated from field: blast.v1.square.SquareJoinType join_type = 7;
   */
  joinType: SquareJoinType;

  /**
   * @generated from oneof blast.v1.square.Square.join
   */
  join: {
    /**
     * @generated from field: blast.v1.square.Public public = 8;
     */
    value: Public;
    case: "public";
  } | {
    /**
     * @generated from field: blast.v1.square.Private private = 9;
     */
    value: Private;
    case: "private";
  } | {
    /**
     * @generated from field: blast.v1.square.TokenGated token_gated = 10;
     */
    value: TokenGated;
    case: "tokenGated";
  } | { case: undefined; value?: undefined };

  /**
   * The display name of the square.
   *
   * @generated from field: string display_name = 11;
   */
  displayName: string;

  /**
   * The introduction of the square.
   *
   * @generated from field: string introduction = 12;
   */
  introduction: string;

  /**
   * The minimum required staking amount to join the square in ETH.
   *
   * @generated from field: float minimum_staking_amount_to_join_in_eth = 13;
   */
  minimumStakingAmountToJoinInEth: number;

  /**
   * The total staking amount of all members in the square in ETH.
   *
   * @generated from field: float total_members_staking_amount_in_eth = 14;
   */
  totalMembersStakingAmountInEth: number;

  /**
   * The multiplier of the square.
   *
   * @generated from field: float multiplier = 15;
   */
  multiplier: number;

  /**
   * The all-time total points of the square.
   *
   * @generated from field: uint32 total_points = 16;
   */
  totalPoints: number;

  /**
   * The total capacity of the square.
   *
   * @generated from field: uint32 capacity = 17;
   */
  capacity: number;

  /**
   * The current number of members in the square.
   *
   * @generated from field: uint32 occupancy = 18;
   */
  occupancy: number;

  /**
   * The occupancy of the square including join pending members.
   *
   * @generated from field: uint32 occupancy_including_pending = 19;
   */
  occupancyIncludingPending: number;

  /**
   * The PFP boost of the square.
   *
   * @generated from field: blast.v1.square.PFPBoost pfp_boost = 20;
   */
  pfpBoost?: PFPBoost;

  /**
   * The NFT of the square.
   *
   * @generated from field: blast.v1.square.SquareNFT nft = 21;
   */
  nft?: SquareNFT;

  /**
   * @generated from field: uint32 spirits = 22;
   */
  spirits: number;

  /**
   * @generated from field: uint32 stars = 23;
   */
  stars: number;

  /**
   * DEPRECATED: Use spirits instead.
   *
   * @generated from field: uint32 total_spirits = 24;
   */
  totalSpirits: number;

  /**
   * DEPRECATED: Use GetSquareWeeklySpirits API instead.
   *
   * @generated from field: uint32 weekly_spirits = 25;
   */
  weeklySpirits: number;

  constructor(data?: PartialMessage<Square>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.Square";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Square;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Square;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Square;

  static equals(a: Square | PlainMessage<Square> | undefined, b: Square | PlainMessage<Square> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.PFPBoost
 */
export declare class PFPBoost extends Message<PFPBoost> {
  /**
   * @generated from field: float percentage = 1;
   */
  percentage: number;

  /**
   * @generated from field: uint32 member_count = 2;
   */
  memberCount: number;

  /**
   * The resource name of the NFT contract.
   * Format: nfts/{chain_type}/{contract_address}
   *
   * @generated from field: string nft_contract = 3;
   */
  nftContract: string;

  constructor(data?: PartialMessage<PFPBoost>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.PFPBoost";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PFPBoost;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PFPBoost;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PFPBoost;

  static equals(a: PFPBoost | PlainMessage<PFPBoost> | undefined, b: PFPBoost | PlainMessage<PFPBoost> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.Public
 */
export declare class Public extends Message<Public> {
  constructor(data?: PartialMessage<Public>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.Public";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Public;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Public;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Public;

  static equals(a: Public | PlainMessage<Public> | undefined, b: Public | PlainMessage<Public> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.Private
 */
export declare class Private extends Message<Private> {
  /**
   * @generated from field: string code = 1;
   */
  code: string;

  constructor(data?: PartialMessage<Private>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.Private";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Private;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Private;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Private;

  static equals(a: Private | PlainMessage<Private> | undefined, b: Private | PlainMessage<Private> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.TokenGated
 */
export declare class TokenGated extends Message<TokenGated> {
  /**
   * The resource name of the NFT contract.
   * Format: nfts/{chain_type}/{contract_address}
   *
   * @generated from field: string nft_contract = 1;
   */
  nftContract: string;

  constructor(data?: PartialMessage<TokenGated>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.TokenGated";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenGated;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenGated;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenGated;

  static equals(a: TokenGated | PlainMessage<TokenGated> | undefined, b: TokenGated | PlainMessage<TokenGated> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.SquareNFT
 */
export declare class SquareNFT extends Message<SquareNFT> {
  /**
   * Token ID of the NFT asset.
   *
   * @generated from field: uint32 token_id = 1;
   */
  tokenId: number;

  /**
   * The URI of the NFT asset's image.
   * This URI is cached version of image original URI
   * e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
   *
   * @generated from field: string image_uri = 2;
   */
  imageUri: string;

  /**
   * The URI of the NFT asset's metadata.
   *
   * @generated from field: string metadata_uri = 3;
   */
  metadataUri: string;

  constructor(data?: PartialMessage<SquareNFT>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.SquareNFT";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareNFT;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareNFT;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareNFT;

  static equals(a: SquareNFT | PlainMessage<SquareNFT> | undefined, b: SquareNFT | PlainMessage<SquareNFT> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.SquareMember
 */
export declare class SquareMember extends Message<SquareMember> {
  /**
   * The resource name of the Square.
   * Format: squares/{square_token_id}/members/{user_address}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The token ID of the Square.
   *
   * @generated from field: string square_token_id = 2;
   */
  squareTokenId: string;

  /**
   * The user address of the member.
   *
   * @generated from field: string user_address = 3;
   */
  userAddress: string;

  /**
   * The member type of the square.
   *
   * @generated from field: blast.v1.square.SquareMemberType type = 4;
   */
  type: SquareMemberType;

  /**
   * @generated from field: uint32 total_points = 5;
   */
  totalPoints: number;

  /**
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp join_time = 8;
   */
  joinTime?: Timestamp;

  constructor(data?: PartialMessage<SquareMember>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.SquareMember";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareMember;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareMember;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareMember;

  static equals(a: SquareMember | PlainMessage<SquareMember> | undefined, b: SquareMember | PlainMessage<SquareMember> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.SquareMemberRanking
 */
export declare class SquareMemberRanking extends Message<SquareMemberRanking> {
  /**
   * @generated from field: uint32 rank = 1;
   */
  rank: number;

  /**
   * @generated from field: uint32 points = 2;
   */
  points: number;

  /**
   * @generated from field: blast.v1.square.SquareMember member = 3;
   */
  member?: SquareMember;

  constructor(data?: PartialMessage<SquareMemberRanking>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.SquareMemberRanking";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareMemberRanking;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareMemberRanking;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareMemberRanking;

  static equals(a: SquareMemberRanking | PlainMessage<SquareMemberRanking> | undefined, b: SquareMemberRanking | PlainMessage<SquareMemberRanking> | undefined): boolean;
}

/**
 * @generated from message blast.v1.square.SquareSpiritHistory
 */
export declare class SquareSpiritHistory extends Message<SquareSpiritHistory> {
  /**
   * The name of the Square
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 2;
   */
  square: string;

  /**
   * The spirit type of the square.
   *
   * @generated from field: blast.v1.square.SpiritType type = 3;
   */
  type: SpiritType;

  /**
   * The user address of the member.
   *
   * @generated from field: uint32 amount = 4;
   */
  amount: number;

  /**
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<SquareSpiritHistory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.square.SquareSpiritHistory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareSpiritHistory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareSpiritHistory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareSpiritHistory;

  static equals(a: SquareSpiritHistory | PlainMessage<SquareSpiritHistory> | undefined, b: SquareSpiritHistory | PlainMessage<SquareSpiritHistory> | undefined): boolean;
}

