// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/aggregate/aggregate.proto (package blast.v1.aggregate, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { User } from "../user/user_pb.js";
import type { Activity, Bonus, Multiplier, Referral, Staking } from "../points/points_pb.js";
import type { PFPBoost, Private, Public, SquareJoinType, SquareMemberRankType, SquareMemberType, SquareNFT, SquareState, SquareView, TokenGated } from "../square/square_pb.js";

/**
 * @generated from message blast.v1.aggregate.ListPointsAggregateRequest
 */
export declare class ListPointsAggregateRequest extends Message<ListPointsAggregateRequest> {
  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   * * user_address
   *   * `=`
   *
   * Examples
   * * name="points/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   * * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * One or more fields to compare and use to sort the output. (optional)
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "id", "user_address", "points"
   *
   * Examples
   * * order_by=points desc
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  constructor(data?: PartialMessage<ListPointsAggregateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListPointsAggregateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPointsAggregateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPointsAggregateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPointsAggregateRequest;

  static equals(a: ListPointsAggregateRequest | PlainMessage<ListPointsAggregateRequest> | undefined, b: ListPointsAggregateRequest | PlainMessage<ListPointsAggregateRequest> | undefined): boolean;
}

/**
 * ListPointsResponse
 *
 * @generated from message blast.v1.aggregate.ListPointsAggregateResponse
 */
export declare class ListPointsAggregateResponse extends Message<ListPointsAggregateResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.aggregate.PointsAggregate points_aggregate = 1;
   */
  pointsAggregate: PointsAggregate[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListPointsAggregateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListPointsAggregateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPointsAggregateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPointsAggregateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPointsAggregateResponse;

  static equals(a: ListPointsAggregateResponse | PlainMessage<ListPointsAggregateResponse> | undefined, b: ListPointsAggregateResponse | PlainMessage<ListPointsAggregateResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.PointsAggregate
 */
export declare class PointsAggregate extends Message<PointsAggregate> {
  /**
   * The resource name of the Points.
   * Format: users/{address}/points
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: blast.v1.user.User user = 2;
   */
  user?: User;

  /**
   * @generated from field: uint32 total_points = 3;
   */
  totalPoints: number;

  /**
   * @generated from field: blast.v1.points.Referral referral = 5;
   */
  referral?: Referral;

  /**
   * @generated from field: blast.v1.points.Staking staking = 6;
   */
  staking?: Staking;

  /**
   * @generated from field: blast.v1.points.Activity activity = 7;
   */
  activity?: Activity;

  /**
   * @generated from field: blast.v1.points.Bonus bonus = 8;
   */
  bonus?: Bonus;

  /**
   * @generated from field: repeated blast.v1.points.Multiplier multipliers = 9;
   */
  multipliers: Multiplier[];

  constructor(data?: PartialMessage<PointsAggregate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.PointsAggregate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointsAggregate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointsAggregate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointsAggregate;

  static equals(a: PointsAggregate | PlainMessage<PointsAggregate> | undefined, b: PointsAggregate | PlainMessage<PointsAggregate> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.ListSquareMemberRankingsAggregateRequest
 */
export declare class ListSquareMemberRankingsAggregateRequest extends Message<ListSquareMemberRankingsAggregateRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * @generated from field: blast.v1.square.SquareMemberRankType rank_type = 2;
   */
  rankType: SquareMemberRankType;

  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListSquareMemberRankingsAggregateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListSquareMemberRankingsAggregateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMemberRankingsAggregateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsAggregateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsAggregateRequest;

  static equals(a: ListSquareMemberRankingsAggregateRequest | PlainMessage<ListSquareMemberRankingsAggregateRequest> | undefined, b: ListSquareMemberRankingsAggregateRequest | PlainMessage<ListSquareMemberRankingsAggregateRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.ListSquareMemberRankingsAggregateResponse
 */
export declare class ListSquareMemberRankingsAggregateResponse extends Message<ListSquareMemberRankingsAggregateResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.aggregate.SquareMemberRankingAggregate rankings_aggregate = 1;
   */
  rankingsAggregate: SquareMemberRankingAggregate[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquareMemberRankingsAggregateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListSquareMemberRankingsAggregateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareMemberRankingsAggregateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsAggregateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareMemberRankingsAggregateResponse;

  static equals(a: ListSquareMemberRankingsAggregateResponse | PlainMessage<ListSquareMemberRankingsAggregateResponse> | undefined, b: ListSquareMemberRankingsAggregateResponse | PlainMessage<ListSquareMemberRankingsAggregateResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.SquareMemberRankingAggregate
 */
export declare class SquareMemberRankingAggregate extends Message<SquareMemberRankingAggregate> {
  /**
   * @generated from field: uint32 rank = 1;
   */
  rank: number;

  /**
   * @generated from field: uint32 points = 2;
   */
  points: number;

  /**
   * @generated from field: blast.v1.aggregate.SquareMemberAggregate member = 3;
   */
  member?: SquareMemberAggregate;

  constructor(data?: PartialMessage<SquareMemberRankingAggregate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.SquareMemberRankingAggregate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareMemberRankingAggregate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareMemberRankingAggregate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareMemberRankingAggregate;

  static equals(a: SquareMemberRankingAggregate | PlainMessage<SquareMemberRankingAggregate> | undefined, b: SquareMemberRankingAggregate | PlainMessage<SquareMemberRankingAggregate> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.SquareMemberAggregate
 */
export declare class SquareMemberAggregate extends Message<SquareMemberAggregate> {
  /**
   * The resource name of the Square.
   * Format: squares/{square_token_id}/members/{user_address}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The token ID of the Square.
   *
   * @generated from field: string square_token_id = 2;
   */
  squareTokenId: string;

  /**
   * The user address of the member.
   *
   * @generated from field: blast.v1.user.User user = 3;
   */
  user?: User;

  /**
   * The member type of the square.
   *
   * @generated from field: blast.v1.square.SquareMemberType type = 4;
   */
  type: SquareMemberType;

  /**
   * @generated from field: uint32 total_points = 5;
   */
  totalPoints: number;

  /**
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp join_time = 8;
   */
  joinTime?: Timestamp;

  constructor(data?: PartialMessage<SquareMemberAggregate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.SquareMemberAggregate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareMemberAggregate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareMemberAggregate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareMemberAggregate;

  static equals(a: SquareMemberAggregate | PlainMessage<SquareMemberAggregate> | undefined, b: SquareMemberAggregate | PlainMessage<SquareMemberAggregate> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.GetSquareAggregateRequest
 */
export declare class GetSquareAggregateRequest extends Message<GetSquareAggregateRequest> {
  /**
   * The name of the square to retrieve.
   * Format: squares/{token_id}
   *
   * @generated from field: string square = 1;
   */
  square: string;

  /**
   * The view of the square.
   *
   * @generated from field: blast.v1.square.SquareView view = 2;
   */
  view: SquareView;

  constructor(data?: PartialMessage<GetSquareAggregateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.GetSquareAggregateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareAggregateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareAggregateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareAggregateRequest;

  static equals(a: GetSquareAggregateRequest | PlainMessage<GetSquareAggregateRequest> | undefined, b: GetSquareAggregateRequest | PlainMessage<GetSquareAggregateRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.SquareAggregate
 */
export declare class SquareAggregate extends Message<SquareAggregate> {
  /**
   * The resource name of the Square.
   * Format: squares/{token_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ERC721 token ID of the Square.
   *
   * @generated from field: string token_id = 2;
   */
  tokenId: string;

  /**
   * @generated from field: blast.v1.user.User owner = 3;
   */
  owner?: User;

  /**
   * The created time of Square.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: blast.v1.square.SquareState state = 5;
   */
  state: SquareState;

  /**
   * The signature id of the Square.
   * This field is used for multi signature when minting the Square NFT.
   *
   * @generated from field: string signature_id = 6;
   */
  signatureId: string;

  /**
   * The join type of the square.
   *
   * @generated from field: blast.v1.square.SquareJoinType join_type = 7;
   */
  joinType: SquareJoinType;

  /**
   * @generated from oneof blast.v1.aggregate.SquareAggregate.join
   */
  join: {
    /**
     * @generated from field: blast.v1.square.Public public = 8;
     */
    value: Public;
    case: "public";
  } | {
    /**
     * @generated from field: blast.v1.square.Private private = 9;
     */
    value: Private;
    case: "private";
  } | {
    /**
     * @generated from field: blast.v1.square.TokenGated token_gated = 10;
     */
    value: TokenGated;
    case: "tokenGated";
  } | { case: undefined; value?: undefined };

  /**
   * The display name of the square.
   *
   * @generated from field: string display_name = 11;
   */
  displayName: string;

  /**
   * The introduction of the square.
   *
   * @generated from field: string introduction = 12;
   */
  introduction: string;

  /**
   * The minimum required staking amount to join the square in ETH.
   *
   * @generated from field: float minimum_staking_amount_to_join_in_eth = 13;
   */
  minimumStakingAmountToJoinInEth: number;

  /**
   * The total staking amount of all members in the square in ETH.
   *
   * @generated from field: float total_members_staking_amount_in_eth = 14;
   */
  totalMembersStakingAmountInEth: number;

  /**
   * The multiplier of the square.
   *
   * @generated from field: float multiplier = 15;
   */
  multiplier: number;

  /**
   * The all-time total points of the square.
   *
   * @generated from field: uint32 total_points = 16;
   */
  totalPoints: number;

  /**
   * The total capacity of the square.
   *
   * @generated from field: uint32 capacity = 17;
   */
  capacity: number;

  /**
   * The current number of members in the square.
   *
   * @generated from field: uint32 occupancy = 18;
   */
  occupancy: number;

  /**
   * The occupancy of the square including join pending members.
   *
   * @generated from field: uint32 occupancy_including_pending = 19;
   */
  occupancyIncludingPending: number;

  /**
   * The PFP boost of the square.
   *
   * @generated from field: blast.v1.square.PFPBoost pfp_boost = 20;
   */
  pfpBoost?: PFPBoost;

  /**
   * The NFT of the square.
   *
   * @generated from field: blast.v1.square.SquareNFT nft = 21;
   */
  nft?: SquareNFT;

  /**
   * @generated from field: uint32 spirits = 22;
   */
  spirits: number;

  /**
   * @generated from field: uint32 stars = 23;
   */
  stars: number;

  /**
   * @generated from field: uint32 total_spirits = 24;
   */
  totalSpirits: number;

  /**
   * @generated from field: uint32 weekly_spirits = 25;
   */
  weeklySpirits: number;

  constructor(data?: PartialMessage<SquareAggregate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.SquareAggregate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareAggregate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareAggregate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareAggregate;

  static equals(a: SquareAggregate | PlainMessage<SquareAggregate> | undefined, b: SquareAggregate | PlainMessage<SquareAggregate> | undefined): boolean;
}

/**
 * @generated from message blast.v1.aggregate.ListSquaresAggregateRequest
 */
export declare class ListSquaresAggregateRequest extends Message<ListSquaresAggregateRequest> {
  /**
   * The maximum number of squares to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSquares` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   * * token_id
   *   * `=`
   * * signature_id
   *   * `=`
   * * state
   *   * `=`
   * * join_type
   *   * `=`
   * * display_name
   *   * `=`
   *
   * Examples
   * * name="squares/10"
   * * token_id="10"
   * * signature_id="3ed92b99-00be-4417-b69f-dca2d8d14c7f"
   * * join_type=TOKEN_GATED
   * * display_name="SQUARE"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Optional. One or more fields to compare and use to sort the output.
   * Default order for a field is descending by id
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * "token_id", "total_points", "spirits"
   *
   * Examples
   * * order_by=token_id asc
   * * order_by=total_points desc
   * * order_by=spirits asc
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  constructor(data?: PartialMessage<ListSquaresAggregateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListSquaresAggregateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquaresAggregateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquaresAggregateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquaresAggregateRequest;

  static equals(a: ListSquaresAggregateRequest | PlainMessage<ListSquaresAggregateRequest> | undefined, b: ListSquaresAggregateRequest | PlainMessage<ListSquaresAggregateRequest> | undefined): boolean;
}

/**
 * ListSquaresAggregateResponse
 *
 * @generated from message blast.v1.aggregate.ListSquaresAggregateResponse
 */
export declare class ListSquaresAggregateResponse extends Message<ListSquaresAggregateResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.aggregate.SquareAggregate squares_aggregate = 1;
   */
  squaresAggregate: SquareAggregate[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquaresAggregateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.aggregate.ListSquaresAggregateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquaresAggregateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquaresAggregateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquaresAggregateResponse;

  static equals(a: ListSquaresAggregateResponse | PlainMessage<ListSquaresAggregateResponse> | undefined, b: ListSquaresAggregateResponse | PlainMessage<ListSquaresAggregateResponse> | undefined): boolean;
}

