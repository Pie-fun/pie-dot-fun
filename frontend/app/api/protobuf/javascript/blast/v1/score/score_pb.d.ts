// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/score/score.proto (package blast.v1.score, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Decimal } from "../../../google/type/decimal_pb.js";
import type { UploadScoreParams } from "../chain/sign_pb.js";

/**
 * @generated from enum blast.v1.score.GameType
 */
export declare enum GameType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: GAME_TYPE_UNSPECIFIED = 0;
   */
  GAME_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STAR_SWEEPERS = 1;
   */
  STAR_SWEEPERS = 1,
}

/**
 * @generated from enum blast.v1.score.PlayMode
 */
export declare enum PlayMode {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: PLAY_MODE_UNSPECIFIED = 0;
   */
  PLAY_MODE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SINGLE_PLAYER = 1;
   */
  SINGLE_PLAYER = 1,
}

/**
 * The state of score
 *
 * @generated from enum blast.v1.score.ScoreState
 */
export declare enum ScoreState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SCORE_STATE_UNSPECIFIED = 0;
   */
  SCORE_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CREATED = 1;
   */
  CREATED = 1,

  /**
   * The score is uploaded to onchain.
   *
   * @generated from enum value: UPLOADED = 2;
   */
  UPLOADED = 2,
}

/**
 * @generated from enum blast.v1.score.ScoreRankUserType
 */
export declare enum ScoreRankUserType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SCORE_RANK_USER_TYPE_UNSPECIFIED = 0;
   */
  SCORE_RANK_USER_TYPE_UNSPECIFIED = 0,

  /**
   * All users in the spacebar.
   * Ranking persists regardless of the square.
   *
   * @generated from enum value: ALL_USERS = 1;
   */
  ALL_USERS = 1,

  /**
   * All members in the square.
   * Ranking persists only when the user is a member of the snapshot square.
   *
   * @generated from enum value: ALL_MEMBERS = 2;
   */
  ALL_MEMBERS = 2,

  /**
   * Members in the specific square.
   * Ranking persists only when the user is a member of the snapshot square.
   *
   * @generated from enum value: SQUARE_MEMBERS = 3;
   */
  SQUARE_MEMBERS = 3,

  /**
   * All users in the specific square.
   * Ranking persists regardless of the square.
   *
   * @generated from enum value: SQUARE_USERS = 4;
   */
  SQUARE_USERS = 4,
}

/**
 * @generated from enum blast.v1.score.ScoreRankTimePeriod
 */
export declare enum ScoreRankTimePeriod {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SCORE_RANK_TIME_PERIOD_UNSPECIFIED = 0;
   */
  SCORE_RANK_TIME_PERIOD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ALL_TIME = 1;
   */
  ALL_TIME = 1,

  /**
   * @generated from enum value: WEEKLY = 2;
   */
  WEEKLY = 2,

  /**
   * @generated from enum value: WEEKLY_FULL_WEEK_BASED = 21;
   */
  WEEKLY_FULL_WEEK_BASED = 21,

  /**
   * @generated from enum value: MONTHLY_FULL_WEEK_BASED = 31;
   */
  MONTHLY_FULL_WEEK_BASED = 31,
}

/**
 * @generated from enum blast.v1.score.ScoreRankScoreType
 */
export declare enum ScoreRankScoreType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SCORE_RANK_SCORE_TYPE_UNSPECIFIED = 0;
   */
  SCORE_RANK_SCORE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BEST_SCORE = 1;
   */
  BEST_SCORE = 1,

  /**
   * @generated from enum value: CUMULATIVE_SCORE = 2;
   */
  CUMULATIVE_SCORE = 2,
}

/**
 * @generated from enum blast.v1.score.ScoreRankEntitiyType
 */
export declare enum ScoreRankEntitiyType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: SCORE_RANK_ENTITY_TYPE_UNSPECIFIED = 0;
   */
  SCORE_RANK_ENTITY_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: SQUARE = 2;
   */
  SQUARE = 2,
}

/**
 * RewardRequest
 *
 * @generated from message blast.v1.score.RewardRequest
 */
export declare class RewardRequest extends Message<RewardRequest> {
  /**
   * type
   *
   * @generated from field: blast.v1.score.RewardRequest.RewardType type = 1;
   */
  type: RewardRequest_RewardType;

  constructor(data?: PartialMessage<RewardRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.RewardRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardRequest;

  static equals(a: RewardRequest | PlainMessage<RewardRequest> | undefined, b: RewardRequest | PlainMessage<RewardRequest> | undefined): boolean;
}

/**
 * RewardType
 *
 * @generated from enum blast.v1.score.RewardRequest.RewardType
 */
export declare enum RewardRequest_RewardType {
  /**
   * default value.
   *
   * @generated from enum value: REWARD_TYPE_UNSPECIFIED = 0;
   */
  REWARD_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: WEEKLY_ALL_USERS_LEADERBOARD = 1;
   */
  WEEKLY_ALL_USERS_LEADERBOARD = 1,

  /**
   * @generated from enum value: WEEKLY_SQUARE_MEMBERS_LEADERBOARD = 2;
   */
  WEEKLY_SQUARE_MEMBERS_LEADERBOARD = 2,

  /**
   * @generated from enum value: WEEKLY_SS_CHALLENGE = 3;
   */
  WEEKLY_SS_CHALLENGE = 3,

  /**
   * @generated from enum value: MONTHLY_SS_CHALLENGE = 4;
   */
  MONTHLY_SS_CHALLENGE = 4,

  /**
   * @generated from enum value: MONTHLY_SQUARE_COMPETITION = 5;
   */
  MONTHLY_SQUARE_COMPETITION = 5,
}

/**
 * RewardResponse
 *
 * @generated from message blast.v1.score.RewardResponse
 */
export declare class RewardResponse extends Message<RewardResponse> {
  /**
   * user rewards
   *
   * @generated from field: repeated blast.v1.score.RewardResponse.UserReward user_rewards = 1;
   */
  userRewards: RewardResponse_UserReward[];

  constructor(data?: PartialMessage<RewardResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.RewardResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardResponse;

  static equals(a: RewardResponse | PlainMessage<RewardResponse> | undefined, b: RewardResponse | PlainMessage<RewardResponse> | undefined): boolean;
}

/**
 * user reward
 *
 * @generated from message blast.v1.score.RewardResponse.UserReward
 */
export declare class RewardResponse_UserReward extends Message<RewardResponse_UserReward> {
  /**
   * user address
   *
   * @generated from field: string user_address = 1;
   */
  userAddress: string;

  /**
   * spacebar points
   *
   * @generated from field: google.type.Decimal points = 2;
   */
  points?: Decimal;

  /**
   * blast points
   *
   * @generated from field: google.type.Decimal blast_points = 3;
   */
  blastPoints?: Decimal;

  /**
   * blast gold
   *
   * @generated from field: google.type.Decimal blast_gold = 4;
   */
  blastGold?: Decimal;

  constructor(data?: PartialMessage<RewardResponse_UserReward>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.RewardResponse.UserReward";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardResponse_UserReward;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardResponse_UserReward;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardResponse_UserReward;

  static equals(a: RewardResponse_UserReward | PlainMessage<RewardResponse_UserReward> | undefined, b: RewardResponse_UserReward | PlainMessage<RewardResponse_UserReward> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ValidateUploadScoreAndSignRequest
 */
export declare class ValidateUploadScoreAndSignRequest extends Message<ValidateUploadScoreAndSignRequest> {
  /**
   * The name of the score to create.
   * Format: users/{user_address}/scores/{game_id}
   *
   * @generated from field: string score = 1;
   */
  score: string;

  /**
   * @generated from field: string nonce = 2;
   */
  nonce: string;

  constructor(data?: PartialMessage<ValidateUploadScoreAndSignRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ValidateUploadScoreAndSignRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateUploadScoreAndSignRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateUploadScoreAndSignRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateUploadScoreAndSignRequest;

  static equals(a: ValidateUploadScoreAndSignRequest | PlainMessage<ValidateUploadScoreAndSignRequest> | undefined, b: ValidateUploadScoreAndSignRequest | PlainMessage<ValidateUploadScoreAndSignRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ValidateUploadScoreAndSignResponse
 */
export declare class ValidateUploadScoreAndSignResponse extends Message<ValidateUploadScoreAndSignResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.UploadScoreParams params = 2;
   */
  params?: UploadScoreParams;

  constructor(data?: PartialMessage<ValidateUploadScoreAndSignResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ValidateUploadScoreAndSignResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateUploadScoreAndSignResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateUploadScoreAndSignResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateUploadScoreAndSignResponse;

  static equals(a: ValidateUploadScoreAndSignResponse | PlainMessage<ValidateUploadScoreAndSignResponse> | undefined, b: ValidateUploadScoreAndSignResponse | PlainMessage<ValidateUploadScoreAndSignResponse> | undefined): boolean;
}

/**
 * CreateScoreRequest
 *
 * @generated from message blast.v1.score.CreateScoreRequest
 */
export declare class CreateScoreRequest extends Message<CreateScoreRequest> {
  /**
   * The name of the score to create.
   * Format: users/{user_address}/scores/{game_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * score to create
   *
   * @generated from field: blast.v1.score.Score score = 2;
   */
  score?: Score;

  constructor(data?: PartialMessage<CreateScoreRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.CreateScoreRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateScoreRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateScoreRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateScoreRequest;

  static equals(a: CreateScoreRequest | PlainMessage<CreateScoreRequest> | undefined, b: CreateScoreRequest | PlainMessage<CreateScoreRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.GetScoreRequest
 */
export declare class GetScoreRequest extends Message<GetScoreRequest> {
  /**
   * The name of the score to retrieve.
   * Format: users/{user_address}/scores/{game_id}
   *
   * @generated from field: string score = 1;
   */
  score: string;

  constructor(data?: PartialMessage<GetScoreRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.GetScoreRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoreRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoreRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoreRequest;

  static equals(a: GetScoreRequest | PlainMessage<GetScoreRequest> | undefined, b: GetScoreRequest | PlainMessage<GetScoreRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.GetUserBestScoreRankingRequest
 */
export declare class GetUserBestScoreRankingRequest extends Message<GetUserBestScoreRankingRequest> {
  /**
   * The name of the score ranking to retrieve.
   * Format: rankings/bestScores/users/{user_address}
   *
   * @generated from field: string userBestScoreRanking = 1;
   */
  userBestScoreRanking: string;

  /**
   * The user type of the ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 2;
   */
  userType: ScoreRankUserType;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 3;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
   * * snapshot_square="squares/{square_token_id}"
   * * snapshot_square_token_id="{square_token_id}"
   *
   * If rank type is ALL_USERS, the context should be empty.
   *
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   *
   * @generated from field: string context = 4;
   */
  context: string;

  constructor(data?: PartialMessage<GetUserBestScoreRankingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.GetUserBestScoreRankingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserBestScoreRankingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserBestScoreRankingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserBestScoreRankingRequest;

  static equals(a: GetUserBestScoreRankingRequest | PlainMessage<GetUserBestScoreRankingRequest> | undefined, b: GetUserBestScoreRankingRequest | PlainMessage<GetUserBestScoreRankingRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListUserBestScoreRankingsRequest
 */
export declare class ListUserBestScoreRankingsRequest extends Message<ListUserBestScoreRankingsRequest> {
  /**
   * The user type of the ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 1;
   */
  userType: ScoreRankUserType;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 2;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
   * * snapshot_square="squares/{square_token_id}"
   * * snapshot_square_token_id="{square_token_id}"
   *
   * If rank type is ALL_USERS, the context should be empty.
   *
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   *
   * @generated from field: string context = 3;
   */
  context: string;

  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListUserBestScoreRankingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListUserBestScoreRankingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserBestScoreRankingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserBestScoreRankingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserBestScoreRankingsRequest;

  static equals(a: ListUserBestScoreRankingsRequest | PlainMessage<ListUserBestScoreRankingsRequest> | undefined, b: ListUserBestScoreRankingsRequest | PlainMessage<ListUserBestScoreRankingsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListUserBestScoreRankingsResponse
 */
export declare class ListUserBestScoreRankingsResponse extends Message<ListUserBestScoreRankingsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.score.UserBestScoreRanking rankings = 1;
   */
  rankings: UserBestScoreRanking[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListUserBestScoreRankingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListUserBestScoreRankingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserBestScoreRankingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserBestScoreRankingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserBestScoreRankingsResponse;

  static equals(a: ListUserBestScoreRankingsResponse | PlainMessage<ListUserBestScoreRankingsResponse> | undefined, b: ListUserBestScoreRankingsResponse | PlainMessage<ListUserBestScoreRankingsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.GetUserCumulativeScoreRankingRequest
 */
export declare class GetUserCumulativeScoreRankingRequest extends Message<GetUserCumulativeScoreRankingRequest> {
  /**
   * The name of the score ranking to retrieve.
   * Format: rankings/cumulativeScores/users/{user_address}
   *
   * @generated from field: string userCumulativeScoreRanking = 1;
   */
  userCumulativeScoreRanking: string;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 2;
   */
  userType: ScoreRankUserType;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 3;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
   * * snapshot_square="squares/{square_token_id}"
   * * snapshot_square_token_id="{square_token_id}"
   *
   * If rank type is ALL_USERS, the context should be empty.
   *
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   * If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_week="2024-08-W1"
   * If time period is MONTH_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_month="2024-08"
   *
   * @generated from field: string context = 4;
   */
  context: string;

  constructor(data?: PartialMessage<GetUserCumulativeScoreRankingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.GetUserCumulativeScoreRankingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserCumulativeScoreRankingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserCumulativeScoreRankingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserCumulativeScoreRankingRequest;

  static equals(a: GetUserCumulativeScoreRankingRequest | PlainMessage<GetUserCumulativeScoreRankingRequest> | undefined, b: GetUserCumulativeScoreRankingRequest | PlainMessage<GetUserCumulativeScoreRankingRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListUserCumulativeScoreRankingsRequest
 */
export declare class ListUserCumulativeScoreRankingsRequest extends Message<ListUserCumulativeScoreRankingsRequest> {
  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 1;
   */
  userType: ScoreRankUserType;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 2;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If rank type is one of ALL_MEMBERS, SQUARE_MEMBERS, the context should contain the square.
   * * snapshot_square="squares/{square_token_id}"
   * * snapshot_square_token_id="{square_token_id}"
   *
   * If rank type is ALL_USERS, the context should be empty.
   *
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   * If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_week="2024-08-W1"
   * If time period is MONTH_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_month="2024-08"
   *
   * @generated from field: string context = 3;
   */
  context: string;

  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListUserCumulativeScoreRankingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListUserCumulativeScoreRankingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserCumulativeScoreRankingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserCumulativeScoreRankingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserCumulativeScoreRankingsRequest;

  static equals(a: ListUserCumulativeScoreRankingsRequest | PlainMessage<ListUserCumulativeScoreRankingsRequest> | undefined, b: ListUserCumulativeScoreRankingsRequest | PlainMessage<ListUserCumulativeScoreRankingsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListUserCumulativeScoreRankingsResponse
 */
export declare class ListUserCumulativeScoreRankingsResponse extends Message<ListUserCumulativeScoreRankingsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.score.UserCumulativeScoreRanking rankings = 1;
   */
  rankings: UserCumulativeScoreRanking[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListUserCumulativeScoreRankingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListUserCumulativeScoreRankingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserCumulativeScoreRankingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserCumulativeScoreRankingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserCumulativeScoreRankingsResponse;

  static equals(a: ListUserCumulativeScoreRankingsResponse | PlainMessage<ListUserCumulativeScoreRankingsResponse> | undefined, b: ListUserCumulativeScoreRankingsResponse | PlainMessage<ListUserCumulativeScoreRankingsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.GetSquareCumulativeScoreRankingRequest
 */
export declare class GetSquareCumulativeScoreRankingRequest extends Message<GetSquareCumulativeScoreRankingRequest> {
  /**
   * The name of the score ranking to retrieve.
   * Format: rankings/cumulativeScores/squares/{square_address}
   *
   * @generated from field: string squareCumulativeScoreRanking = 1;
   */
  squareCumulativeScoreRanking: string;

  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 2;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   * If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_week="2024-08-W1"
   * If time period is MONTH_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_month="2024-08"
   *
   * @generated from field: optional string context = 3;
   */
  context?: string;

  constructor(data?: PartialMessage<GetSquareCumulativeScoreRankingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.GetSquareCumulativeScoreRankingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSquareCumulativeScoreRankingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSquareCumulativeScoreRankingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSquareCumulativeScoreRankingRequest;

  static equals(a: GetSquareCumulativeScoreRankingRequest | PlainMessage<GetSquareCumulativeScoreRankingRequest> | undefined, b: GetSquareCumulativeScoreRankingRequest | PlainMessage<GetSquareCumulativeScoreRankingRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListSquareCumulativeScoreRankingsRequest
 */
export declare class ListSquareCumulativeScoreRankingsRequest extends Message<ListSquareCumulativeScoreRankingsRequest> {
  /**
   * The type of ranking to retrieve.
   *
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 1;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * The context needed to get the ranking according to the rank type.
   * If time period is WEEKLY, the week can be set. If not set, the current week will be used.
   * * week=10
   * If time period is WEEKLY_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_week="2024-08-W1"
   * If time period is MONTH_FULL_WEEK_BASED, the week can be set.
   * * full_week_based_month="2024-08"
   *
   * @generated from field: optional string context = 2;
   */
  context?: string;

  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListPoints` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListSquareCumulativeScoreRankingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListSquareCumulativeScoreRankingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareCumulativeScoreRankingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareCumulativeScoreRankingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareCumulativeScoreRankingsRequest;

  static equals(a: ListSquareCumulativeScoreRankingsRequest | PlainMessage<ListSquareCumulativeScoreRankingsRequest> | undefined, b: ListSquareCumulativeScoreRankingsRequest | PlainMessage<ListSquareCumulativeScoreRankingsRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.ListSquareCumulativeScoreRankingsResponse
 */
export declare class ListSquareCumulativeScoreRankingsResponse extends Message<ListSquareCumulativeScoreRankingsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.score.SquareCumulativeScoreRanking rankings = 1;
   */
  rankings: SquareCumulativeScoreRanking[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSquareCumulativeScoreRankingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.ListSquareCumulativeScoreRankingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSquareCumulativeScoreRankingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSquareCumulativeScoreRankingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSquareCumulativeScoreRankingsResponse;

  static equals(a: ListSquareCumulativeScoreRankingsResponse | PlainMessage<ListSquareCumulativeScoreRankingsResponse> | undefined, b: ListSquareCumulativeScoreRankingsResponse | PlainMessage<ListSquareCumulativeScoreRankingsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.InvalidateScoreRankingsByUserRequest
 */
export declare class InvalidateScoreRankingsByUserRequest extends Message<InvalidateScoreRankingsByUserRequest> {
  /**
   * The name of the score ranking to invalidate.
   * Format: users/{user_address}
   *
   * @generated from field: repeated string users = 1;
   */
  users: string[];

  /**
   * The context needed to decumulate the ranking according to the rank type.
   * Context for square is always required.
   * * snapshot_square="squares/{square_token_id}"
   * * snapshot_square_token_id="{square_token_id}"
   * Context for week is optional. If not set, the current week will be used.
   * * week=10
   * Context for full week based week is optional. If not set, the current date will be used.
   * * full_week_based_week="2024-08-W1"
   * Context for full week based month is optional. If not set, the current date will be used.
   * * full_week_based_month="2024-08"
   *
   * @generated from field: string context = 2;
   */
  context: string;

  constructor(data?: PartialMessage<InvalidateScoreRankingsByUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.InvalidateScoreRankingsByUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InvalidateScoreRankingsByUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InvalidateScoreRankingsByUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InvalidateScoreRankingsByUserRequest;

  static equals(a: InvalidateScoreRankingsByUserRequest | PlainMessage<InvalidateScoreRankingsByUserRequest> | undefined, b: InvalidateScoreRankingsByUserRequest | PlainMessage<InvalidateScoreRankingsByUserRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.Score
 */
export declare class Score extends Message<Score> {
  /**
   * The resource name of the Score.
   * Format: "users/{user_address}/scores/{game_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The user address of the member.
   *
   * @generated from field: string user_address = 2;
   */
  userAddress: string;

  /**
   * The game ID of the Score.
   *
   * @generated from field: string game_id = 3;
   */
  gameId: string;

  /**
   * created time of score
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: blast.v1.score.ScoreState state = 5;
   */
  state: ScoreState;

  /**
   * points got from game
   *
   * @generated from field: uint32 points = 6;
   */
  points: number;

  /**
   * Game mode of score.
   *
   * @generated from field: blast.v1.score.GameType game_type = 8;
   */
  gameType: GameType;

  /**
   * Play mode of score.
   *
   * @generated from field: blast.v1.score.PlayMode play_mode = 9;
   */
  playMode: PlayMode;

  /**
   * week of score
   *
   * @generated from field: uint32 week = 10;
   */
  week: number;

  /**
   * The snapshot square token ID of the Score.
   * This field can be null if the score is not related to any square.
   *
   * @generated from field: optional string snapshot_square_token_id = 11;
   */
  snapshotSquareTokenId?: string;

  /**
   * Thie field is internal use only.
   *
   * @generated from field: optional float blast_gold = 12;
   */
  blastGold?: number;

  constructor(data?: PartialMessage<Score>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.Score";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Score;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Score;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Score;

  static equals(a: Score | PlainMessage<Score> | undefined, b: Score | PlainMessage<Score> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.UserBestScoreRanking
 */
export declare class UserBestScoreRanking extends Message<UserBestScoreRanking> {
  /**
   * @generated from field: uint32 rank = 1;
   */
  rank: number;

  /**
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 2;
   */
  userType: ScoreRankUserType;

  /**
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 3;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * @generated from field: blast.v1.score.Score score = 4;
   */
  score?: Score;

  constructor(data?: PartialMessage<UserBestScoreRanking>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.UserBestScoreRanking";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserBestScoreRanking;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserBestScoreRanking;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserBestScoreRanking;

  static equals(a: UserBestScoreRanking | PlainMessage<UserBestScoreRanking> | undefined, b: UserBestScoreRanking | PlainMessage<UserBestScoreRanking> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.UserCumulativeScoreRanking
 */
export declare class UserCumulativeScoreRanking extends Message<UserCumulativeScoreRanking> {
  /**
   * @generated from field: uint32 rank = 1;
   */
  rank: number;

  /**
   * @generated from field: blast.v1.score.ScoreRankUserType user_type = 2;
   */
  userType: ScoreRankUserType;

  /**
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 3;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * @generated from field: string user_address = 5;
   */
  userAddress: string;

  /**
   * @generated from field: uint64 total_points = 6;
   */
  totalPoints: bigint;

  constructor(data?: PartialMessage<UserCumulativeScoreRanking>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.UserCumulativeScoreRanking";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCumulativeScoreRanking;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCumulativeScoreRanking;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCumulativeScoreRanking;

  static equals(a: UserCumulativeScoreRanking | PlainMessage<UserCumulativeScoreRanking> | undefined, b: UserCumulativeScoreRanking | PlainMessage<UserCumulativeScoreRanking> | undefined): boolean;
}

/**
 * @generated from message blast.v1.score.SquareCumulativeScoreRanking
 */
export declare class SquareCumulativeScoreRanking extends Message<SquareCumulativeScoreRanking> {
  /**
   * @generated from field: uint32 rank = 1;
   */
  rank: number;

  /**
   * @generated from field: blast.v1.score.ScoreRankTimePeriod time_period = 2;
   */
  timePeriod: ScoreRankTimePeriod;

  /**
   * @generated from field: string square_token_id = 5;
   */
  squareTokenId: string;

  /**
   * @generated from field: uint64 total_points = 6;
   */
  totalPoints: bigint;

  /**
   * @generated from field: uint32 points_count = 7;
   */
  pointsCount: number;

  /**
   * @generated from field: uint32 participants_count = 8;
   */
  participantsCount: number;

  constructor(data?: PartialMessage<SquareCumulativeScoreRanking>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.score.SquareCumulativeScoreRanking";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SquareCumulativeScoreRanking;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SquareCumulativeScoreRanking;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SquareCumulativeScoreRanking;

  static equals(a: SquareCumulativeScoreRanking | PlainMessage<SquareCumulativeScoreRanking> | undefined, b: SquareCumulativeScoreRanking | PlainMessage<SquareCumulativeScoreRanking> | undefined): boolean;
}

