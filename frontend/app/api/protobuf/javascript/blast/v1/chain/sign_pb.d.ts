// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/chain/sign.proto (package blast.v1.chain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message blast.v1.chain.SignMessageRequest
 */
export declare class SignMessageRequest extends Message<SignMessageRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  constructor(data?: PartialMessage<SignMessageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignMessageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignMessageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignMessageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignMessageRequest;

  static equals(a: SignMessageRequest | PlainMessage<SignMessageRequest> | undefined, b: SignMessageRequest | PlainMessage<SignMessageRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignatureResponse
 */
export declare class SignatureResponse extends Message<SignatureResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<SignatureResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignatureResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureResponse;

  static equals(a: SignatureResponse | PlainMessage<SignatureResponse> | undefined, b: SignatureResponse | PlainMessage<SignatureResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignatureTypedResponse
 */
export declare class SignatureTypedResponse extends Message<SignatureTypedResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: map<string, string> message = 2;
   */
  message: { [key: string]: string };

  constructor(data?: PartialMessage<SignatureTypedResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignatureTypedResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureTypedResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureTypedResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureTypedResponse;

  static equals(a: SignatureTypedResponse | PlainMessage<SignatureTypedResponse> | undefined, b: SignatureTypedResponse | PlainMessage<SignatureTypedResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.MintAndCreateSquareParams
 */
export declare class MintAndCreateSquareParams extends Message<MintAndCreateSquareParams> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * uint64 can be overflowed
   *
   * @generated from field: string minStaking = 2;
   */
  minStaking: string;

  /**
   * @generated from field: string signatureId = 3;
   */
  signatureId: string;

  /**
   * @generated from field: uint32 timestamp = 4;
   */
  timestamp: number;

  /**
   * @generated from field: string nonce = 5;
   */
  nonce: string;

  constructor(data?: PartialMessage<MintAndCreateSquareParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.MintAndCreateSquareParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAndCreateSquareParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAndCreateSquareParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAndCreateSquareParams;

  static equals(a: MintAndCreateSquareParams | PlainMessage<MintAndCreateSquareParams> | undefined, b: MintAndCreateSquareParams | PlainMessage<MintAndCreateSquareParams> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignMintSquareRequest
 */
export declare class SignMintSquareRequest extends Message<SignMintSquareRequest> {
  /**
   * @generated from field: blast.v1.chain.MintAndCreateSquareParams params = 1;
   */
  params?: MintAndCreateSquareParams;

  constructor(data?: PartialMessage<SignMintSquareRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignMintSquareRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignMintSquareRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignMintSquareRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignMintSquareRequest;

  static equals(a: SignMintSquareRequest | PlainMessage<SignMintSquareRequest> | undefined, b: SignMintSquareRequest | PlainMessage<SignMintSquareRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignMintSquareResponse
 */
export declare class SignMintSquareResponse extends Message<SignMintSquareResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.MintAndCreateSquareParams params = 2;
   */
  params?: MintAndCreateSquareParams;

  constructor(data?: PartialMessage<SignMintSquareResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignMintSquareResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignMintSquareResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignMintSquareResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignMintSquareResponse;

  static equals(a: SignMintSquareResponse | PlainMessage<SignMintSquareResponse> | undefined, b: SignMintSquareResponse | PlainMessage<SignMintSquareResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.JoinSquareParams
 */
export declare class JoinSquareParams extends Message<JoinSquareParams> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * @generated from field: uint32 squareId = 2;
   */
  squareId: number;

  /**
   * @generated from field: uint32 timestamp = 3;
   */
  timestamp: number;

  /**
   * @generated from field: string nonce = 4;
   */
  nonce: string;

  constructor(data?: PartialMessage<JoinSquareParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.JoinSquareParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinSquareParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinSquareParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinSquareParams;

  static equals(a: JoinSquareParams | PlainMessage<JoinSquareParams> | undefined, b: JoinSquareParams | PlainMessage<JoinSquareParams> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignJoinSquareRequest
 */
export declare class SignJoinSquareRequest extends Message<SignJoinSquareRequest> {
  /**
   * @generated from field: blast.v1.chain.JoinSquareParams params = 1;
   */
  params?: JoinSquareParams;

  constructor(data?: PartialMessage<SignJoinSquareRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignJoinSquareRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignJoinSquareRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignJoinSquareRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignJoinSquareRequest;

  static equals(a: SignJoinSquareRequest | PlainMessage<SignJoinSquareRequest> | undefined, b: SignJoinSquareRequest | PlainMessage<SignJoinSquareRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignJoinSquareResponse
 */
export declare class SignJoinSquareResponse extends Message<SignJoinSquareResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.JoinSquareParams params = 2;
   */
  params?: JoinSquareParams;

  constructor(data?: PartialMessage<SignJoinSquareResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignJoinSquareResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignJoinSquareResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignJoinSquareResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignJoinSquareResponse;

  static equals(a: SignJoinSquareResponse | PlainMessage<SignJoinSquareResponse> | undefined, b: SignJoinSquareResponse | PlainMessage<SignJoinSquareResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.TransferSquareParams
 */
export declare class TransferSquareParams extends Message<TransferSquareParams> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * token id of the user's current square
   *
   * @generated from field: uint32 from = 2;
   */
  from: number;

  /**
   * token id of the target square
   *
   * @generated from field: uint32 to = 3;
   */
  to: number;

  /**
   * @generated from field: uint32 timestamp = 4;
   */
  timestamp: number;

  /**
   * @generated from field: string nonce = 5;
   */
  nonce: string;

  constructor(data?: PartialMessage<TransferSquareParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.TransferSquareParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferSquareParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferSquareParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferSquareParams;

  static equals(a: TransferSquareParams | PlainMessage<TransferSquareParams> | undefined, b: TransferSquareParams | PlainMessage<TransferSquareParams> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignTransferSquareRequest
 */
export declare class SignTransferSquareRequest extends Message<SignTransferSquareRequest> {
  /**
   * @generated from field: blast.v1.chain.TransferSquareParams params = 1;
   */
  params?: TransferSquareParams;

  constructor(data?: PartialMessage<SignTransferSquareRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignTransferSquareRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTransferSquareRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTransferSquareRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTransferSquareRequest;

  static equals(a: SignTransferSquareRequest | PlainMessage<SignTransferSquareRequest> | undefined, b: SignTransferSquareRequest | PlainMessage<SignTransferSquareRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignTransferSquareResponse
 */
export declare class SignTransferSquareResponse extends Message<SignTransferSquareResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.TransferSquareParams params = 2;
   */
  params?: TransferSquareParams;

  constructor(data?: PartialMessage<SignTransferSquareResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignTransferSquareResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTransferSquareResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTransferSquareResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTransferSquareResponse;

  static equals(a: SignTransferSquareResponse | PlainMessage<SignTransferSquareResponse> | undefined, b: SignTransferSquareResponse | PlainMessage<SignTransferSquareResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.UploadScoreParams
 */
export declare class UploadScoreParams extends Message<UploadScoreParams> {
  /**
   * @generated from field: string player = 1;
   */
  player: string;

  /**
   * @generated from field: uint32 gameCode = 2;
   */
  gameCode: number;

  /**
   * @generated from field: uint32 squareIdOrZero = 3;
   */
  squareIdOrZero: number;

  /**
   * @generated from field: uint32 score = 4;
   */
  score: number;

  /**
   * @generated from field: string gameId = 5;
   */
  gameId: string;

  /**
   * @generated from field: uint32 timestamp = 6;
   */
  timestamp: number;

  /**
   * @generated from field: string nonce = 7;
   */
  nonce: string;

  constructor(data?: PartialMessage<UploadScoreParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.UploadScoreParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadScoreParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadScoreParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadScoreParams;

  static equals(a: UploadScoreParams | PlainMessage<UploadScoreParams> | undefined, b: UploadScoreParams | PlainMessage<UploadScoreParams> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignUploadScoreRequest
 */
export declare class SignUploadScoreRequest extends Message<SignUploadScoreRequest> {
  /**
   * @generated from field: blast.v1.chain.UploadScoreParams params = 1;
   */
  params?: UploadScoreParams;

  constructor(data?: PartialMessage<SignUploadScoreRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignUploadScoreRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUploadScoreRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUploadScoreRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUploadScoreRequest;

  static equals(a: SignUploadScoreRequest | PlainMessage<SignUploadScoreRequest> | undefined, b: SignUploadScoreRequest | PlainMessage<SignUploadScoreRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.chain.SignUploadScoreResponse
 */
export declare class SignUploadScoreResponse extends Message<SignUploadScoreResponse> {
  /**
   * @generated from field: string signature = 1;
   */
  signature: string;

  /**
   * @generated from field: blast.v1.chain.UploadScoreParams params = 2;
   */
  params?: UploadScoreParams;

  constructor(data?: PartialMessage<SignUploadScoreResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.chain.SignUploadScoreResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUploadScoreResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUploadScoreResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUploadScoreResponse;

  static equals(a: SignUploadScoreResponse | PlainMessage<SignUploadScoreResponse> | undefined, b: SignUploadScoreResponse | PlainMessage<SignUploadScoreResponse> | undefined): boolean;
}

