// @generated by protoc-gen-es v1.6.0
// @generated from file blast/v1/staking/staking.proto (package blast.v1.staking, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum blast.v1.staking.StakingCurrency
 */
export declare enum StakingCurrency {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: CURRENCY_UNSPECIFIED = 0;
   */
  CURRENCY_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ETH = 1;
   */
  ETH = 1,
}

/**
 * The state of staking
 *
 * @generated from enum blast.v1.staking.StakingState
 */
export declare enum StakingState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: INACTIVE = 2;
   */
  INACTIVE = 2,
}

/**
 * @generated from message blast.v1.staking.GetStakingRequest
 */
export declare class GetStakingRequest extends Message<GetStakingRequest> {
  /**
   * The name of the staking to retrieve.
   * Format: users/{user_address}/stakings
   *
   * @generated from field: string staking = 1;
   */
  staking: string;

  constructor(data?: PartialMessage<GetStakingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.GetStakingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStakingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStakingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStakingRequest;

  static equals(a: GetStakingRequest | PlainMessage<GetStakingRequest> | undefined, b: GetStakingRequest | PlainMessage<GetStakingRequest> | undefined): boolean;
}

/**
 * ListStakingsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message blast.v1.staking.ListStakingsRequest
 */
export declare class ListStakingsRequest extends Message<ListStakingsRequest> {
  /**
   * The maximum number of points to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListStakings` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * user_address
   *   * Equal`
   *
   * Examples
   * * name="users/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442/stakings"
   * * user_address="0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  constructor(data?: PartialMessage<ListStakingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.ListStakingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStakingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStakingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStakingsRequest;

  static equals(a: ListStakingsRequest | PlainMessage<ListStakingsRequest> | undefined, b: ListStakingsRequest | PlainMessage<ListStakingsRequest> | undefined): boolean;
}

/**
 * ListStakingsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message blast.v1.staking.ListStakingsResponse
 */
export declare class ListStakingsResponse extends Message<ListStakingsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated blast.v1.staking.Staking stakings = 1;
   */
  stakings: Staking[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListStakingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.ListStakingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStakingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStakingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStakingsResponse;

  static equals(a: ListStakingsResponse | PlainMessage<ListStakingsResponse> | undefined, b: ListStakingsResponse | PlainMessage<ListStakingsResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.staking.GetStakingTotalAmountRequest
 */
export declare class GetStakingTotalAmountRequest extends Message<GetStakingTotalAmountRequest> {
  constructor(data?: PartialMessage<GetStakingTotalAmountRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.GetStakingTotalAmountRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStakingTotalAmountRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStakingTotalAmountRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStakingTotalAmountRequest;

  static equals(a: GetStakingTotalAmountRequest | PlainMessage<GetStakingTotalAmountRequest> | undefined, b: GetStakingTotalAmountRequest | PlainMessage<GetStakingTotalAmountRequest> | undefined): boolean;
}

/**
 * @generated from message blast.v1.staking.GetStakingTotalAmountResponse
 */
export declare class GetStakingTotalAmountResponse extends Message<GetStakingTotalAmountResponse> {
  /**
   * The total amount of the staking.
   *
   * @generated from field: float total_amount = 1;
   */
  totalAmount: number;

  constructor(data?: PartialMessage<GetStakingTotalAmountResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.GetStakingTotalAmountResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStakingTotalAmountResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStakingTotalAmountResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStakingTotalAmountResponse;

  static equals(a: GetStakingTotalAmountResponse | PlainMessage<GetStakingTotalAmountResponse> | undefined, b: GetStakingTotalAmountResponse | PlainMessage<GetStakingTotalAmountResponse> | undefined): boolean;
}

/**
 * @generated from message blast.v1.staking.Staking
 */
export declare class Staking extends Message<Staking> {
  /**
   * The resource name of the Staking.
   * Format: users/{user_address}/stakings
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string user_address = 2;
   */
  userAddress: string;

  /**
   * @generated from field: blast.v1.staking.StakingCurrency currency = 4;
   */
  currency: StakingCurrency;

  /**
   * @generated from field: float amount = 5;
   */
  amount: number;

  /**
   * @generated from field: blast.v1.staking.StakingState state = 6;
   */
  state: StakingState;

  constructor(data?: PartialMessage<Staking>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "blast.v1.staking.Staking";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Staking;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Staking;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Staking;

  static equals(a: Staking | PlainMessage<Staking> | undefined, b: Staking | PlainMessage<Staking> | undefined): boolean;
}

