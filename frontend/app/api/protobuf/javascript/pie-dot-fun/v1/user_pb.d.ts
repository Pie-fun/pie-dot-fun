// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/user.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { SNS, VMType } from "./common_pb.js";

/**
 * @generated from message piedotfun.v1.GetUserRequest
 */
export declare class GetUserRequest extends Message<GetUserRequest> {
  /**
   * The name of the user to retrieve.
   * Format: users/{id}
   * Alias "users/me" is supported.
   *
   * @generated from field: string user = 1;
   */
  user: string;

  constructor(data?: PartialMessage<GetUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest;

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean;
}

/**
 * ListUsersRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message piedotfun.v1.ListUsersRequest
 */
export declare class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * The maximum number of users to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListUsers` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `Equal`
   * * address
   *   * Equal`
   * * display_name
   *   * Equal`
   *
   * Examples
   * * name="users/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * address="FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9"
   * * display_name="Alice"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  constructor(data?: PartialMessage<ListUsersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListUsersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest;

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean;
}

/**
 * ListUsersResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message piedotfun.v1.ListUsersResponse
 */
export declare class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated piedotfun.v1.User users = 1;
   */
  users: User[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListUsersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListUsersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse;

  static equals(a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined, b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.UpdateUserRequest
 */
export declare class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * User to update
   * Format: users/{id}
   *
   * @generated from field: piedotfun.v1.User user = 1;
   */
  user?: User;

  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nickname"]
   * ["biography"]
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.UpdateUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest;

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ValidateNicknameAvailabilityRequest
 */
export declare class ValidateNicknameAvailabilityRequest extends Message<ValidateNicknameAvailabilityRequest> {
  /**
   * The nickname of User.
   *
   * @generated from field: string nickname = 1;
   */
  nickname: string;

  constructor(data?: PartialMessage<ValidateNicknameAvailabilityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ValidateNicknameAvailabilityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNicknameAvailabilityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNicknameAvailabilityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNicknameAvailabilityRequest;

  static equals(a: ValidateNicknameAvailabilityRequest | PlainMessage<ValidateNicknameAvailabilityRequest> | undefined, b: ValidateNicknameAvailabilityRequest | PlainMessage<ValidateNicknameAvailabilityRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ValidateNicknameAvailabilityResponse
 */
export declare class ValidateNicknameAvailabilityResponse extends Message<ValidateNicknameAvailabilityResponse> {
  /**
   * The nickname of User.
   *
   * @generated from field: string nickname = 1;
   */
  nickname: string;

  /**
   * The availability of the nickname.
   *
   * @generated from field: bool available = 2;
   */
  available: boolean;

  /**
   * The reason of the nickname is not available.
   * Example:
   * - display name should be less or equal than 15 characters
   * - display name should be more or equal than 4 characters
   * - display name may only contain letters, numbers, hyphens, and periods
   *
   * @generated from field: string reason = 3;
   */
  reason: string;

  constructor(data?: PartialMessage<ValidateNicknameAvailabilityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ValidateNicknameAvailabilityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNicknameAvailabilityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNicknameAvailabilityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNicknameAvailabilityResponse;

  static equals(a: ValidateNicknameAvailabilityResponse | PlainMessage<ValidateNicknameAvailabilityResponse> | undefined, b: ValidateNicknameAvailabilityResponse | PlainMessage<ValidateNicknameAvailabilityResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.User
 */
export declare class User extends Message<User> {
  /**
   * The resource name of the User.
   * Format: users/{id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The Auth ID of User. (generated by Privy or Web3Auth)
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: repeated piedotfun.v1.UserWallet wallets = 3;
   */
  wallets: UserWallet[];

  /**
   * The created time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * The last updated time of User.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * The display name of User.
   *
   * @generated from field: string display_name = 7;
   */
  displayName: string;

  /**
   * The biography of User.
   *
   * @generated from field: string biography = 8;
   */
  biography: string;

  /**
   * The SNS connections of User.
   *
   * @generated from field: repeated piedotfun.v1.SNS sns = 9;
   */
  sns: SNS[];

  /**
   * @generated from field: string profile_image_url = 10;
   */
  profileImageUrl: string;

  constructor(data?: PartialMessage<User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User;

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.UserWallet
 */
export declare class UserWallet extends Message<UserWallet> {
  /**
   * @generated from field: piedotfun.v1.VMType vm_type = 1;
   */
  vmType: VMType;

  /**
   * @generated from field: string address = 2;
   */
  address: string;

  constructor(data?: PartialMessage<UserWallet>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.UserWallet";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserWallet;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserWallet;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserWallet;

  static equals(a: UserWallet | PlainMessage<UserWallet> | undefined, b: UserWallet | PlainMessage<UserWallet> | undefined): boolean;
}

