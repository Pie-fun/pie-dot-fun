// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/holding-wallet.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { VMType } from "./common_pb.js";

/**
 * @generated from message piedotfun.v1.GetHoldingWalletRequest
 */
export declare class GetHoldingWalletRequest extends Message<GetHoldingWalletRequest> {
  /**
   * The name of the holding_wallet to retrieve.
   * Format: holdingWallets/{vm_type}/{address}
   *
   * @generated from field: string holding_wallet = 1;
   */
  holdingWallet: string;

  constructor(data?: PartialMessage<GetHoldingWalletRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetHoldingWalletRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHoldingWalletRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHoldingWalletRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHoldingWalletRequest;

  static equals(a: GetHoldingWalletRequest | PlainMessage<GetHoldingWalletRequest> | undefined, b: GetHoldingWalletRequest | PlainMessage<GetHoldingWalletRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListHoldingWalletsRequest
 */
export declare class ListHoldingWalletsRequest extends Message<ListHoldingWalletsRequest> {
  /**
   * The maximum number of holdings to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListHoldingWallets` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * user
   *   * `=`
   *
   * * user="users/1"
   * * market_value_sol>=10
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  constructor(data?: PartialMessage<ListHoldingWalletsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListHoldingWalletsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHoldingWalletsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHoldingWalletsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHoldingWalletsRequest;

  static equals(a: ListHoldingWalletsRequest | PlainMessage<ListHoldingWalletsRequest> | undefined, b: ListHoldingWalletsRequest | PlainMessage<ListHoldingWalletsRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListHoldingWalletsResponse
 */
export declare class ListHoldingWalletsResponse extends Message<ListHoldingWalletsResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.HoldingWallet holding_wallets = 1;
   */
  holdingWallets: HoldingWallet[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListHoldingWalletsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListHoldingWalletsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHoldingWalletsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHoldingWalletsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHoldingWalletsResponse;

  static equals(a: ListHoldingWalletsResponse | PlainMessage<ListHoldingWalletsResponse> | undefined, b: ListHoldingWalletsResponse | PlainMessage<ListHoldingWalletsResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.HoldingWallet
 */
export declare class HoldingWallet extends Message<HoldingWallet> {
  /**
   * The name of the holding_wallet.
   * Format: holdingWallets/{vm_type}/{address}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: piedotfun.v1.VMType vm_type = 2;
   */
  vmType: VMType;

  /**
   * @generated from field: string address = 3;
   */
  address: string;

  /**
   * @generated from field: optional string user = 4;
   */
  user?: string;

  constructor(data?: PartialMessage<HoldingWallet>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.HoldingWallet";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HoldingWallet;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HoldingWallet;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HoldingWallet;

  static equals(a: HoldingWallet | PlainMessage<HoldingWallet> | undefined, b: HoldingWallet | PlainMessage<HoldingWallet> | undefined): boolean;
}

