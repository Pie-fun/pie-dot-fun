// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/basket-token-market.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Currency, Money, Percentage, PriceChangesByPeriod, Quantity } from "./common_pb.js";

/**
 * @generated from enum piedotfun.v1.TickInterval
 */
export declare enum TickInterval {
  /**
   * @generated from enum value: INTERVAL_UNSPECIFIED = 0;
   */
  INTERVAL_UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTERVAL_1_SECOND = 1 [deprecated = true];
   * @deprecated
   */
  INTERVAL_1_SECOND = 1,

  /**
   * @generated from enum value: INTERVAL_1_MINUTE = 2;
   */
  INTERVAL_1_MINUTE = 2,

  /**
   * @generated from enum value: INTERVAL_15_MINUTES = 3;
   */
  INTERVAL_15_MINUTES = 3,

  /**
   * @generated from enum value: INTERVAL_1_HOUR = 4;
   */
  INTERVAL_1_HOUR = 4,

  /**
   * @generated from enum value: INTERVAL_4_HOUR = 5;
   */
  INTERVAL_4_HOUR = 5,

  /**
   * @generated from enum value: INTERVAL_1_DAY = 6;
   */
  INTERVAL_1_DAY = 6,
}

/**
 * BasketTokenMarket contains the market data for a basket token.
 *
 * @generated from message piedotfun.v1.BasketTokenMarket
 */
export declare class BasketTokenMarket extends Message<BasketTokenMarket> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string basket_token = 2;
   */
  basketToken: string;

  /**
   * Native token symbol of the chain the basket-token belongs to.
   * Not dollar(USDT, USDC), 
   * and the prices and market cap fields will display dollar values together.
   *
   * @generated from field: piedotfun.v1.Currency native_currency = 3;
   */
  nativeCurrency: Currency;

  /**
   * @generated from field: map<string, piedotfun.v1.Money> values = 5 [deprecated = true];
   * @deprecated
   */
  values: { [key: string]: Money };

  /**
   * Key is the currency enum string, 
   * value is the market cap with the currency.
   *
   * @generated from field: map<string, piedotfun.v1.Money> market_caps = 6 [deprecated = true];
   * @deprecated
   */
  marketCaps: { [key: string]: Money };

  /**
   * Key is the currency enum string,
   * value is the INAV changes with the currency.
   * {
   *   "CURRENCY_USDC": {
   *     "PRICE_CHANGE_PERIOD_1_HOUR": {
   *       "nominal_value": {
   *         "currency": "CURRENCY_USDC",
   *         "amount": 0.0001
   *       },
   *       "percentage_change": {
   *         "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_1_HOUR"
   *     },
   *     "CURRENTCY_SOL": { ... }
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_1_HOUR
   * * PRICE_CHANGE_PERIOD_24_HOUR
   * * PRICE_CHANGE_PERIOD_7_DAY
   * * PRICE_CHANGE_PERIOD_30_DAY
   * * PRICE_CHANGE_PERIOD_ALL_TIME
   *
   * @generated from field: map<string, piedotfun.v1.PriceChangesByPeriod> value_changes = 7 [deprecated = true];
   * @deprecated
   */
  valueChanges: { [key: string]: PriceChangesByPeriod };

  /**
   * Percentage of lowest after the previous highest.
   * {(`previous highest` - `lowest` after `previous highest`) / `previous highest`} * 100
   *
   * @generated from field: piedotfun.v1.Percentage maximum_draw_down = 8;
   */
  maximumDrawDown?: Percentage;

  /**
   * Current NAV(Net Asset Value) per BasketToken.
   *
   * @generated from field: piedotfun.v1.Money value = 9;
   */
  value?: Money;

  /**
   * Market cap is based on the current NAV(Net Asset Value) per BasketToken.
   *
   * @generated from field: piedotfun.v1.Money market_cap = 10;
   */
  marketCap?: Money;

  /**
   * Example
   * {
   *   "PRICE_CHANGE_PERIOD_1_HOUR": {
   *       "nominal_value": {
   *           "currency": "CURRENCY_USDC",
   *           "amount": 0.0001
   *       },
   *       "percentage_change": {
   *           "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_1_HOUR"
   *   },
   *   "PRICE_CHANGE_PERIOD_24_HOUR": {...},
   *   ...
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_1_HOUR
   * * PRICE_CHANGE_PERIOD_24_HOUR
   * * PRICE_CHANGE_PERIOD_7_DAY
   * * PRICE_CHANGE_PERIOD_30_DAY
   * * PRICE_CHANGE_PERIOD_ALL_TIME
   *
   * @generated from field: piedotfun.v1.PriceChangesByPeriod value_change = 11;
   */
  valueChange?: PriceChangesByPeriod;

  constructor(data?: PartialMessage<BasketTokenMarket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BasketTokenMarket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasketTokenMarket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasketTokenMarket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasketTokenMarket;

  static equals(a: BasketTokenMarket | PlainMessage<BasketTokenMarket> | undefined, b: BasketTokenMarket | PlainMessage<BasketTokenMarket> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.CreateBasketTokenMarketRequest
 */
export declare class CreateBasketTokenMarketRequest extends Message<CreateBasketTokenMarketRequest> {
  /**
   * The basket token market to create.
   *
   * @generated from field: piedotfun.v1.BasketTokenMarket basket_token_market = 1;
   */
  basketTokenMarket?: BasketTokenMarket;

  /**
   * display_name
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Symbol
   *
   * @generated from field: string symbol = 3;
   */
  symbol: string;

  constructor(data?: PartialMessage<CreateBasketTokenMarketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.CreateBasketTokenMarketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBasketTokenMarketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBasketTokenMarketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBasketTokenMarketRequest;

  static equals(a: CreateBasketTokenMarketRequest | PlainMessage<CreateBasketTokenMarketRequest> | undefined, b: CreateBasketTokenMarketRequest | PlainMessage<CreateBasketTokenMarketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.CustomCreateBasketTokenMarketRequest
 */
export declare class CustomCreateBasketTokenMarketRequest extends Message<CustomCreateBasketTokenMarketRequest> {
  /**
   * The basket token market to create.
   *
   * @generated from field: piedotfun.v1.BasketTokenMarket basket_token_market = 1;
   */
  basketTokenMarket?: BasketTokenMarket;

  /**
   * @generated from field: repeated piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component components = 2;
   */
  components: CustomCreateBasketTokenMarketRequest_Component[];

  /**
   * display_name
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Symbol
   *
   * @generated from field: string symbol = 4;
   */
  symbol: string;

  constructor(data?: PartialMessage<CustomCreateBasketTokenMarketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.CustomCreateBasketTokenMarketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomCreateBasketTokenMarketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomCreateBasketTokenMarketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomCreateBasketTokenMarketRequest;

  static equals(a: CustomCreateBasketTokenMarketRequest | PlainMessage<CustomCreateBasketTokenMarketRequest> | undefined, b: CustomCreateBasketTokenMarketRequest | PlainMessage<CustomCreateBasketTokenMarketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component
 */
export declare class CustomCreateBasketTokenMarketRequest_Component extends Message<CustomCreateBasketTokenMarketRequest_Component> {
  /**
   * The name of the fungible token.
   * Format : "fungibleTokens/{chain}/{token_address}"
   *
   * @generated from field: string fungible_token = 1;
   */
  fungibleToken: string;

  /**
   * Number of component token per one BasketToken.
   *
   * @generated from field: piedotfun.v1.Quantity quantity = 2;
   */
  quantity?: Quantity;

  constructor(data?: PartialMessage<CustomCreateBasketTokenMarketRequest_Component>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.CustomCreateBasketTokenMarketRequest.Component";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomCreateBasketTokenMarketRequest_Component;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomCreateBasketTokenMarketRequest_Component;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomCreateBasketTokenMarketRequest_Component;

  static equals(a: CustomCreateBasketTokenMarketRequest_Component | PlainMessage<CustomCreateBasketTokenMarketRequest_Component> | undefined, b: CustomCreateBasketTokenMarketRequest_Component | PlainMessage<CustomCreateBasketTokenMarketRequest_Component> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketTokenMarketRequest
 */
export declare class GetBasketTokenMarketRequest extends Message<GetBasketTokenMarketRequest> {
  /**
   * The name of the market  to retrieve.
   * Format : "basketTokens/{chain}/{token_address}/market"
   *
   * @generated from field: string basket_token_market = 1;
   */
  basketTokenMarket: string;

  /**
   * Display the price in this currency. Default is USD.
   *
   * @generated from field: piedotfun.v1.Currency currency = 2;
   */
  currency: Currency;

  constructor(data?: PartialMessage<GetBasketTokenMarketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketTokenMarketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketTokenMarketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketTokenMarketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketTokenMarketRequest;

  static equals(a: GetBasketTokenMarketRequest | PlainMessage<GetBasketTokenMarketRequest> | undefined, b: GetBasketTokenMarketRequest | PlainMessage<GetBasketTokenMarketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListBasketTokensMarketsRequest
 */
export declare class ListBasketTokensMarketsRequest extends Message<ListBasketTokensMarketsRequest> {
  /**
   * If unspecified, at most 50 books will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   *
   * Examples
   * * name="basketTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9/market"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * One or more fields to compare and use to sort the output.
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * 
   *
   * Examples
   * * 
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Display the price in this currency. Default is USD.
   *
   * @generated from field: piedotfun.v1.Currency currency = 5;
   */
  currency: Currency;

  constructor(data?: PartialMessage<ListBasketTokensMarketsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListBasketTokensMarketsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBasketTokensMarketsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBasketTokensMarketsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBasketTokensMarketsRequest;

  static equals(a: ListBasketTokensMarketsRequest | PlainMessage<ListBasketTokensMarketsRequest> | undefined, b: ListBasketTokensMarketsRequest | PlainMessage<ListBasketTokensMarketsRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListBasketTokensMarketsResponse
 */
export declare class ListBasketTokensMarketsResponse extends Message<ListBasketTokensMarketsResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.BasketTokenMarket basket_token_markets = 1;
   */
  basketTokenMarkets: BasketTokenMarket[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListBasketTokensMarketsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListBasketTokensMarketsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBasketTokensMarketsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBasketTokensMarketsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBasketTokensMarketsResponse;

  static equals(a: ListBasketTokensMarketsResponse | PlainMessage<ListBasketTokensMarketsResponse> | undefined, b: ListBasketTokensMarketsResponse | PlainMessage<ListBasketTokensMarketsResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.UpdateBasketTokenMarketComponentsRequest
 */
export declare class UpdateBasketTokenMarketComponentsRequest extends Message<UpdateBasketTokenMarketComponentsRequest> {
  /**
   * The name of the market to update.
   * Format : "basketTokens/{chain}/{token_address}/market"
   *
   * @generated from field: string basket_token_market = 1;
   */
  basketTokenMarket: string;

  /**
   * @generated from field: repeated piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component components = 2;
   */
  components: UpdateBasketTokenMarketComponentsRequest_Component[];

  /**
   * The block number to update the components.
   *
   * @generated from field: uint64 updateBlockNumber = 3;
   */
  updateBlockNumber: bigint;

  constructor(data?: PartialMessage<UpdateBasketTokenMarketComponentsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.UpdateBasketTokenMarketComponentsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBasketTokenMarketComponentsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsRequest;

  static equals(a: UpdateBasketTokenMarketComponentsRequest | PlainMessage<UpdateBasketTokenMarketComponentsRequest> | undefined, b: UpdateBasketTokenMarketComponentsRequest | PlainMessage<UpdateBasketTokenMarketComponentsRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component
 */
export declare class UpdateBasketTokenMarketComponentsRequest_Component extends Message<UpdateBasketTokenMarketComponentsRequest_Component> {
  /**
   * The name of the fungible token.
   * Format : "fungibleTokens/{chain}/{token_address}"
   *
   * @generated from field: string fungible_token = 1;
   */
  fungibleToken: string;

  /**
   * Number of component token per one BasketToken.
   *
   * @generated from field: piedotfun.v1.Quantity quantity = 2;
   */
  quantity?: Quantity;

  constructor(data?: PartialMessage<UpdateBasketTokenMarketComponentsRequest_Component>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.UpdateBasketTokenMarketComponentsRequest.Component";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBasketTokenMarketComponentsRequest_Component;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsRequest_Component;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsRequest_Component;

  static equals(a: UpdateBasketTokenMarketComponentsRequest_Component | PlainMessage<UpdateBasketTokenMarketComponentsRequest_Component> | undefined, b: UpdateBasketTokenMarketComponentsRequest_Component | PlainMessage<UpdateBasketTokenMarketComponentsRequest_Component> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.UpdateBasketTokenMarketComponentsResponse
 */
export declare class UpdateBasketTokenMarketComponentsResponse extends Message<UpdateBasketTokenMarketComponentsResponse> {
  constructor(data?: PartialMessage<UpdateBasketTokenMarketComponentsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.UpdateBasketTokenMarketComponentsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBasketTokenMarketComponentsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBasketTokenMarketComponentsResponse;

  static equals(a: UpdateBasketTokenMarketComponentsResponse | PlainMessage<UpdateBasketTokenMarketComponentsResponse> | undefined, b: UpdateBasketTokenMarketComponentsResponse | PlainMessage<UpdateBasketTokenMarketComponentsResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListBasketTokenTicksRequest
 */
export declare class ListBasketTokenTicksRequest extends Message<ListBasketTokenTicksRequest> {
  /**
   * Format : "basketTokens/{chain}/{token_address}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * If not set time, the current time will be used.
   *
   * @generated from field: optional google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * default size: 200. Max size: 1000
   *
   * @generated from field: optional int32 size = 4;
   */
  size?: number;

  /**
   * Default is USD.
   *
   * @generated from field: piedotfun.v1.Currency currency = 5;
   */
  currency: Currency;

  /**
   * @generated from field: piedotfun.v1.TickInterval interval = 6;
   */
  interval: TickInterval;

  constructor(data?: PartialMessage<ListBasketTokenTicksRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListBasketTokenTicksRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBasketTokenTicksRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBasketTokenTicksRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBasketTokenTicksRequest;

  static equals(a: ListBasketTokenTicksRequest | PlainMessage<ListBasketTokenTicksRequest> | undefined, b: ListBasketTokenTicksRequest | PlainMessage<ListBasketTokenTicksRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListBasketTokenTicksResponse
 */
export declare class ListBasketTokenTicksResponse extends Message<ListBasketTokenTicksResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.Tick ticks = 1;
   */
  ticks: Tick[];

  /**
   * @generated from field: piedotfun.v1.Currency currency = 2;
   */
  currency: Currency;

  constructor(data?: PartialMessage<ListBasketTokenTicksResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListBasketTokenTicksResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBasketTokenTicksResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBasketTokenTicksResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBasketTokenTicksResponse;

  static equals(a: ListBasketTokenTicksResponse | PlainMessage<ListBasketTokenTicksResponse> | undefined, b: ListBasketTokenTicksResponse | PlainMessage<ListBasketTokenTicksResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.Tick
 */
export declare class Tick extends Message<Tick> {
  /**
   * @generated from field: google.protobuf.Timestamp open_time = 1;
   */
  openTime?: Timestamp;

  /**
   * @generated from field: double open = 2;
   */
  open: number;

  /**
   * @generated from field: double high = 3;
   */
  high: number;

  /**
   * @generated from field: double low = 4;
   */
  low: number;

  /**
   * @generated from field: double close = 5;
   */
  close: number;

  constructor(data?: PartialMessage<Tick>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.Tick";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tick;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tick;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tick;

  static equals(a: Tick | PlainMessage<Tick> | undefined, b: Tick | PlainMessage<Tick> | undefined): boolean;
}

