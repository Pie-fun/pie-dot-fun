// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/pie-program.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum piedotfun.v1.PoolType
 */
export declare enum PoolType {
  /**
   * @generated from enum value: POOL_TYPE_UNSPECIFIED = 0;
   */
  POOL_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AMM = 1;
   */
  AMM = 1,

  /**
   * @generated from enum value: CLMM = 2;
   */
  CLMM = 2,

  /**
   * @generated from enum value: CPMM = 3;
   */
  CPMM = 3,
}

/**
 * @generated from enum piedotfun.v1.BaseType
 */
export declare enum BaseType {
  /**
   * @generated from enum value: BASE_TYPE_UNSPECIFIED = 0;
   */
  BASE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: BASE_IN = 1;
   */
  BASE_IN = 1,

  /**
   * @generated from enum value: BASE_OUT = 2;
   */
  BASE_OUT = 2,
}

/**
 * @generated from message piedotfun.v1.GetBasketVaultRequest
 */
export declare class GetBasketVaultRequest extends Message<GetBasketVaultRequest> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  constructor(data?: PartialMessage<GetBasketVaultRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketVaultRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketVaultRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketVaultRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketVaultRequest;

  static equals(a: GetBasketVaultRequest | PlainMessage<GetBasketVaultRequest> | undefined, b: GetBasketVaultRequest | PlainMessage<GetBasketVaultRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketVaultResponse
 */
export declare class GetBasketVaultResponse extends Message<GetBasketVaultResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.BasketVaultElement vault = 1;
   */
  vault: BasketVaultElement[];

  constructor(data?: PartialMessage<GetBasketVaultResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketVaultResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketVaultResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketVaultResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketVaultResponse;

  static equals(a: GetBasketVaultResponse | PlainMessage<GetBasketVaultResponse> | undefined, b: GetBasketVaultResponse | PlainMessage<GetBasketVaultResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BasketVaultElement
 */
export declare class BasketVaultElement extends Message<BasketVaultElement> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  /**
   * @generated from field: uint64 balance = 2;
   */
  balance: bigint;

  constructor(data?: PartialMessage<BasketVaultElement>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BasketVaultElement";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasketVaultElement;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasketVaultElement;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasketVaultElement;

  static equals(a: BasketVaultElement | PlainMessage<BasketVaultElement> | undefined, b: BasketVaultElement | PlainMessage<BasketVaultElement> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.RebalanceAction
 */
export declare class RebalanceAction extends Message<RebalanceAction> {
  /**
   * @generated from field: string input_mint = 1;
   */
  inputMint: string;

  /**
   * @generated from field: string output_mint = 2;
   */
  outputMint: string;

  /**
   * @generated from field: piedotfun.v1.BaseType base_type = 3;
   */
  baseType: BaseType;

  /**
   * Raw amount of the mint that `base_type` references.
   * BASE_IN: amount of `input_mint`
   * BASE_OUT: amount of `output_mint`
   *
   * @generated from field: string amount = 4;
   */
  amount: string;

  /**
   * Threshold for the other amount
   * BASE_IN: Minimum amount of `output_mint` token to be received
   * BASE_OUT: Maximum amount of `input_mint` token to be spent
   *
   * @generated from field: optional string other_amount_threshold = 5;
   */
  otherAmountThreshold?: string;

  constructor(data?: PartialMessage<RebalanceAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.RebalanceAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebalanceAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebalanceAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebalanceAction;

  static equals(a: RebalanceAction | PlainMessage<RebalanceAction> | undefined, b: RebalanceAction | PlainMessage<RebalanceAction> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.SerializedTxBundle
 */
export declare class SerializedTxBundle extends Message<SerializedTxBundle> {
  /**
   * @generated from field: repeated string serialized_txs = 1;
   */
  serializedTxs: string[];

  constructor(data?: PartialMessage<SerializedTxBundle>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.SerializedTxBundle";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializedTxBundle;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializedTxBundle;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializedTxBundle;

  static equals(a: SerializedTxBundle | PlainMessage<SerializedTxBundle> | undefined, b: SerializedTxBundle | PlainMessage<SerializedTxBundle> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BuildRebalanceTxRequest
 */
export declare class BuildRebalanceTxRequest extends Message<BuildRebalanceTxRequest> {
  /**
   * @generated from field: string basket_mint = 1;
   */
  basketMint: string;

  /**
   * @generated from field: double slippage_percentage = 2;
   */
  slippagePercentage: number;

  /**
   * @generated from field: repeated piedotfun.v1.RebalanceAction actions = 3;
   */
  actions: RebalanceAction[];

  constructor(data?: PartialMessage<BuildRebalanceTxRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BuildRebalanceTxRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildRebalanceTxRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildRebalanceTxRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildRebalanceTxRequest;

  static equals(a: BuildRebalanceTxRequest | PlainMessage<BuildRebalanceTxRequest> | undefined, b: BuildRebalanceTxRequest | PlainMessage<BuildRebalanceTxRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BuySwapData
 */
export declare class BuySwapData extends Message<BuySwapData> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  /**
   * @generated from field: string amount_in = 2;
   */
  amountIn: string;

  /**
   * @generated from field: string max_amount_in = 3;
   */
  maxAmountIn: string;

  /**
   * @generated from field: string amount_out = 4;
   */
  amountOut: string;

  constructor(data?: PartialMessage<BuySwapData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BuySwapData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuySwapData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuySwapData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuySwapData;

  static equals(a: BuySwapData | PlainMessage<BuySwapData> | undefined, b: BuySwapData | PlainMessage<BuySwapData> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BuildMintTxRequest
 */
export declare class BuildMintTxRequest extends Message<BuildMintTxRequest> {
  /**
   * @generated from field: string basket_mint = 1;
   */
  basketMint: string;

  /**
   * @generated from field: string mint_amount = 2;
   */
  mintAmount: string;

  /**
   * @generated from field: string input_amount = 3;
   */
  inputAmount: string;

  /**
   * @generated from field: string owner_address = 4;
   */
  ownerAddress: string;

  /**
   * @generated from field: repeated piedotfun.v1.BuySwapData buy_swap_data = 5;
   */
  buySwapData: BuySwapData[];

  /**
   * percentage
   * If null, value is set to 10(%)
   *
   * @generated from field: optional uint64 max_slippage = 6;
   */
  maxSlippage?: bigint;

  constructor(data?: PartialMessage<BuildMintTxRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BuildMintTxRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildMintTxRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildMintTxRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildMintTxRequest;

  static equals(a: BuildMintTxRequest | PlainMessage<BuildMintTxRequest> | undefined, b: BuildMintTxRequest | PlainMessage<BuildMintTxRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BuildRedeemTxRequest
 */
export declare class BuildRedeemTxRequest extends Message<BuildRedeemTxRequest> {
  /**
   * @generated from field: string basket_mint = 1;
   */
  basketMint: string;

  /**
   * @generated from field: string amount = 2;
   */
  amount: string;

  /**
   * @generated from field: string owner_address = 3;
   */
  ownerAddress: string;

  /**
   * percentage
   * If null, value is set to 10(%)
   *
   * @generated from field: optional uint64 max_slippage = 4;
   */
  maxSlippage?: bigint;

  constructor(data?: PartialMessage<BuildRedeemTxRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BuildRedeemTxRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildRedeemTxRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildRedeemTxRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildRedeemTxRequest;

  static equals(a: BuildRedeemTxRequest | PlainMessage<BuildRedeemTxRequest> | undefined, b: BuildRedeemTxRequest | PlainMessage<BuildRedeemTxRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketConfigByIDRequest
 */
export declare class GetBasketConfigByIDRequest extends Message<GetBasketConfigByIDRequest> {
  /**
   * @generated from field: string basket_id = 1;
   */
  basketId: string;

  constructor(data?: PartialMessage<GetBasketConfigByIDRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketConfigByIDRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketConfigByIDRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketConfigByIDRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketConfigByIDRequest;

  static equals(a: GetBasketConfigByIDRequest | PlainMessage<GetBasketConfigByIDRequest> | undefined, b: GetBasketConfigByIDRequest | PlainMessage<GetBasketConfigByIDRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketMintByIDRequest
 */
export declare class GetBasketMintByIDRequest extends Message<GetBasketMintByIDRequest> {
  /**
   * @generated from field: string basket_id = 1;
   */
  basketId: string;

  constructor(data?: PartialMessage<GetBasketMintByIDRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketMintByIDRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketMintByIDRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketMintByIDRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketMintByIDRequest;

  static equals(a: GetBasketMintByIDRequest | PlainMessage<GetBasketMintByIDRequest> | undefined, b: GetBasketMintByIDRequest | PlainMessage<GetBasketMintByIDRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketMintByIDResponse
 */
export declare class GetBasketMintByIDResponse extends Message<GetBasketMintByIDResponse> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  constructor(data?: PartialMessage<GetBasketMintByIDResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketMintByIDResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketMintByIDResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketMintByIDResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketMintByIDResponse;

  static equals(a: GetBasketMintByIDResponse | PlainMessage<GetBasketMintByIDResponse> | undefined, b: GetBasketMintByIDResponse | PlainMessage<GetBasketMintByIDResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.CommandCreateBasketRequest
 */
export declare class CommandCreateBasketRequest extends Message<CommandCreateBasketRequest> {
  constructor(data?: PartialMessage<CommandCreateBasketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.CommandCreateBasketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandCreateBasketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandCreateBasketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandCreateBasketRequest;

  static equals(a: CommandCreateBasketRequest | PlainMessage<CommandCreateBasketRequest> | undefined, b: CommandCreateBasketRequest | PlainMessage<CommandCreateBasketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetBasketRequest
 */
export declare class GetBasketRequest extends Message<GetBasketRequest> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  constructor(data?: PartialMessage<GetBasketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetBasketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBasketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBasketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBasketRequest;

  static equals(a: GetBasketRequest | PlainMessage<GetBasketRequest> | undefined, b: GetBasketRequest | PlainMessage<GetBasketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BatchCreateTokenPoolsRequest
 */
export declare class BatchCreateTokenPoolsRequest extends Message<BatchCreateTokenPoolsRequest> {
  /**
   * @generated from field: repeated piedotfun.v1.TokenPool token_pools = 1;
   */
  tokenPools: TokenPool[];

  constructor(data?: PartialMessage<BatchCreateTokenPoolsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BatchCreateTokenPoolsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateTokenPoolsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateTokenPoolsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateTokenPoolsRequest;

  static equals(a: BatchCreateTokenPoolsRequest | PlainMessage<BatchCreateTokenPoolsRequest> | undefined, b: BatchCreateTokenPoolsRequest | PlainMessage<BatchCreateTokenPoolsRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BatchCreateTokenPoolsResponse
 */
export declare class BatchCreateTokenPoolsResponse extends Message<BatchCreateTokenPoolsResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.TokenPool token_pools = 1;
   */
  tokenPools: TokenPool[];

  constructor(data?: PartialMessage<BatchCreateTokenPoolsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BatchCreateTokenPoolsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateTokenPoolsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateTokenPoolsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateTokenPoolsResponse;

  static equals(a: BatchCreateTokenPoolsResponse | PlainMessage<BatchCreateTokenPoolsResponse> | undefined, b: BatchCreateTokenPoolsResponse | PlainMessage<BatchCreateTokenPoolsResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.TxResponse
 */
export declare class TxResponse extends Message<TxResponse> {
  /**
   * @generated from field: string tx = 1;
   */
  tx: string;

  constructor(data?: PartialMessage<TxResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.TxResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxResponse;

  static equals(a: TxResponse | PlainMessage<TxResponse> | undefined, b: TxResponse | PlainMessage<TxResponse> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.Basket
 */
export declare class Basket extends Message<Basket> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  /**
   * @generated from field: uint64 basket_id = 2;
   */
  basketId: bigint;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string symbol = 4;
   */
  symbol: string;

  /**
   * @generated from field: string uri = 5;
   */
  uri: string;

  /**
   * @generated from field: repeated piedotfun.v1.BasketComponent components = 6;
   */
  components: BasketComponent[];

  constructor(data?: PartialMessage<Basket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.Basket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Basket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Basket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Basket;

  static equals(a: Basket | PlainMessage<Basket> | undefined, b: Basket | PlainMessage<Basket> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.TokenPool
 */
export declare class TokenPool extends Message<TokenPool> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  /**
   * @generated from field: piedotfun.v1.PoolType pool_type = 2;
   */
  poolType: PoolType;

  /**
   * @generated from field: string pool_id = 3;
   */
  poolId: string;

  /**
   * @generated from field: string lookup_table = 4;
   */
  lookupTable: string;

  constructor(data?: PartialMessage<TokenPool>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.TokenPool";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenPool;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenPool;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenPool;

  static equals(a: TokenPool | PlainMessage<TokenPool> | undefined, b: TokenPool | PlainMessage<TokenPool> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ProgramState
 */
export declare class ProgramState extends Message<ProgramState> {
  /**
   * @generated from field: uint32 bump = 1;
   */
  bump: number;

  /**
   * @generated from field: string admin = 2;
   */
  admin: string;

  /**
   * @generated from field: string platform_fee_wallet = 3;
   */
  platformFeeWallet: string;

  /**
   * @generated from field: string basket_counter = 4;
   */
  basketCounter: string;

  /**
   * @generated from field: string rebalance_margin_lamports = 5;
   */
  rebalanceMarginLamports: string;

  /**
   * @generated from field: string creator_fee_percentage = 6;
   */
  creatorFeePercentage: string;

  /**
   * @generated from field: string platform_fee_percentage = 7;
   */
  platformFeePercentage: string;

  /**
   * @generated from field: bool enable_creator = 8;
   */
  enableCreator: boolean;

  /**
   * @generated from field: bool is_initialized = 9;
   */
  isInitialized: boolean;

  constructor(data?: PartialMessage<ProgramState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ProgramState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProgramState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProgramState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProgramState;

  static equals(a: ProgramState | PlainMessage<ProgramState> | undefined, b: ProgramState | PlainMessage<ProgramState> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BasketConfig
 */
export declare class BasketConfig extends Message<BasketConfig> {
  /**
   * @generated from field: uint32 bump = 1;
   */
  bump: number;

  /**
   * @generated from field: uint64 id = 2;
   */
  id: bigint;

  /**
   * @generated from field: string creator = 3;
   */
  creator: string;

  /**
   * @generated from field: string rebalancer = 4;
   */
  rebalancer: string;

  /**
   * @generated from field: string mint = 5;
   */
  mint: string;

  /**
   * @generated from field: bool is_rebalancing = 6;
   */
  isRebalancing: boolean;

  /**
   * @generated from field: repeated piedotfun.v1.BasketComponent components = 7;
   */
  components: BasketComponent[];

  constructor(data?: PartialMessage<BasketConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BasketConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasketConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasketConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasketConfig;

  static equals(a: BasketConfig | PlainMessage<BasketConfig> | undefined, b: BasketConfig | PlainMessage<BasketConfig> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.BasketComponent
 */
export declare class BasketComponent extends Message<BasketComponent> {
  /**
   * @generated from field: string mint = 1;
   */
  mint: string;

  /**
   * In system raw amount
   *
   * quantityInSysDecimal. quantity * 10^6
   *
   * @generated from field: uint64 quantity = 2;
   */
  quantity: bigint;

  constructor(data?: PartialMessage<BasketComponent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.BasketComponent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasketComponent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasketComponent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasketComponent;

  static equals(a: BasketComponent | PlainMessage<BasketComponent> | undefined, b: BasketComponent | PlainMessage<BasketComponent> | undefined): boolean;
}

