// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/common.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum piedotfun.v1.ChainType
 */
export declare enum ChainType {
  /**
   * Unspecified blockchain type.
   *
   * @generated from enum value: CHAIN_UNSPECIFIED = 0;
   */
  CHAIN_UNSPECIFIED = 0,

  /**
   * Solana Mainnet blockchain.
   *
   * @generated from enum value: SOLANA = 1;
   */
  SOLANA = 1,

  /**
   * Solana Testnet blockchain.
   *
   * @generated from enum value: SOLANA_TESTNET = 1001;
   */
  SOLANA_TESTNET = 1001,

  /**
   * Solana Devnet blockchain.
   *
   * @generated from enum value: SOLANA_DEVNET = 2001;
   */
  SOLANA_DEVNET = 2001,

  /**
   * @generated from enum value: ETHEREUM = 2;
   */
  ETHEREUM = 2,

  /**
   * @generated from enum value: ETHEREUM_SEPOLIA = 1002;
   */
  ETHEREUM_SEPOLIA = 1002,

  /**
   * @generated from enum value: BASE = 3;
   */
  BASE = 3,

  /**
   * @generated from enum value: BASE_SEPOLIA = 1003;
   */
  BASE_SEPOLIA = 1003,
}

/**
 * @generated from enum piedotfun.v1.VMType
 */
export declare enum VMType {
  /**
   * Unspecified VM type.
   *
   * @generated from enum value: VM_UNSPECIFIED = 0;
   */
  VM_UNSPECIFIED = 0,

  /**
   * Solana Virtual Machine.
   *
   * @generated from enum value: SVM = 1;
   */
  SVM = 1,

  /**
   * Ethereum Virtual Machine.
   *
   * @generated from enum value: EVM = 2;
   */
  EVM = 2,
}

/**
 * @generated from enum piedotfun.v1.Currency
 */
export declare enum Currency {
  /**
   * @generated from enum value: CURRENCY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CURRENCY_SOL = 1;
   */
  SOL = 1,

  /**
   * @generated from enum value: CURRENCY_USDC = 2;
   */
  USDC = 2,

  /**
   * @generated from enum value: CURRENCY_ETH = 3;
   */
  ETH = 3,
}

/**
 * @generated from enum piedotfun.v1.PnLPeriod
 */
export declare enum PnLPeriod {
  /**
   * @generated from enum value: PNL_PERIOD_UNSPECIFIED = 0;
   */
  PNL_PERIOD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PNL_PERIOD_1_HOUR = 1;
   */
  PNL_PERIOD_1_HOUR = 1,

  /**
   * @generated from enum value: PNL_PERIOD_24_HOUR = 2;
   */
  PNL_PERIOD_24_HOUR = 2,

  /**
   * @generated from enum value: PNL_PERIOD_ALL_TIME = 5;
   */
  PNL_PERIOD_ALL_TIME = 5,
}

/**
 * @generated from enum piedotfun.v1.PriceChangePeriod
 */
export declare enum PriceChangePeriod {
  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_UNSPECIFIED = 0;
   */
  PRICE_CHANGE_PERIOD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_1_HOUR = 1;
   */
  PRICE_CHANGE_PERIOD_1_HOUR = 1,

  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_24_HOUR = 2;
   */
  PRICE_CHANGE_PERIOD_24_HOUR = 2,

  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_7_DAY = 3;
   */
  PRICE_CHANGE_PERIOD_7_DAY = 3,

  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_30_DAY = 4;
   */
  PRICE_CHANGE_PERIOD_30_DAY = 4,

  /**
   * @generated from enum value: PRICE_CHANGE_PERIOD_ALL_TIME = 5;
   */
  PRICE_CHANGE_PERIOD_ALL_TIME = 5,
}

/**
 * @generated from message piedotfun.v1.Quantity
 */
export declare class Quantity extends Message<Quantity> {
  /**
   * @generated from field: string formatted_amount = 1;
   */
  formattedAmount: string;

  /**
   * @generated from field: string raw_amount = 2;
   */
  rawAmount: string;

  /**
   * @generated from field: uint32 decimals = 3;
   */
  decimals: number;

  constructor(data?: PartialMessage<Quantity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.Quantity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Quantity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Quantity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Quantity;

  static equals(a: Quantity | PlainMessage<Quantity> | undefined, b: Quantity | PlainMessage<Quantity> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.Money
 */
export declare class Money extends Message<Money> {
  /**
   * @generated from field: piedotfun.v1.Currency currency = 1;
   */
  currency: Currency;

  /**
   * @generated from field: string formatted_amount = 2;
   */
  formattedAmount: string;

  /**
   * @generated from field: string raw_amount = 3;
   */
  rawAmount: string;

  /**
   * @generated from field: uint32 decimals = 4;
   */
  decimals: number;

  constructor(data?: PartialMessage<Money>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.Money";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Money;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Money;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Money;

  static equals(a: Money | PlainMessage<Money> | undefined, b: Money | PlainMessage<Money> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.Percentage
 */
export declare class Percentage extends Message<Percentage> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  constructor(data?: PartialMessage<Percentage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.Percentage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Percentage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Percentage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Percentage;

  static equals(a: Percentage | PlainMessage<Percentage> | undefined, b: Percentage | PlainMessage<Percentage> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.PnLsByPeriod
 */
export declare class PnLsByPeriod extends Message<PnLsByPeriod> {
  /**
   * map from period to PnL
   *
   * @generated from field: map<string, piedotfun.v1.PnL> pnls = 1;
   */
  pnls: { [key: string]: PnL };

  constructor(data?: PartialMessage<PnLsByPeriod>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.PnLsByPeriod";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PnLsByPeriod;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PnLsByPeriod;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PnLsByPeriod;

  static equals(a: PnLsByPeriod | PlainMessage<PnLsByPeriod> | undefined, b: PnLsByPeriod | PlainMessage<PnLsByPeriod> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.PnL
 */
export declare class PnL extends Message<PnL> {
  /**
   * @generated from field: piedotfun.v1.Money nominal_value = 1;
   */
  nominalValue?: Money;

  /**
   * @generated from field: piedotfun.v1.Percentage percentage_change = 2;
   */
  percentageChange?: Percentage;

  /**
   * @generated from field: piedotfun.v1.PnLPeriod period = 3;
   */
  period: PnLPeriod;

  constructor(data?: PartialMessage<PnL>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.PnL";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PnL;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PnL;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PnL;

  static equals(a: PnL | PlainMessage<PnL> | undefined, b: PnL | PlainMessage<PnL> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.PriceChange
 */
export declare class PriceChange extends Message<PriceChange> {
  /**
   * @generated from field: piedotfun.v1.Money nominal_value = 1;
   */
  nominalValue?: Money;

  /**
   * @generated from field: piedotfun.v1.Percentage percentage_change = 2;
   */
  percentageChange?: Percentage;

  /**
   * @generated from field: piedotfun.v1.PriceChangePeriod period = 3;
   */
  period: PriceChangePeriod;

  constructor(data?: PartialMessage<PriceChange>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.PriceChange";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceChange;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceChange;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceChange;

  static equals(a: PriceChange | PlainMessage<PriceChange> | undefined, b: PriceChange | PlainMessage<PriceChange> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.PriceChangesByPeriod
 */
export declare class PriceChangesByPeriod extends Message<PriceChangesByPeriod> {
  /**
   * PriceChangePeriod enum sring to PriceChange
   *
   * @generated from field: map<string, piedotfun.v1.PriceChange> price_changes = 1;
   */
  priceChanges: { [key: string]: PriceChange };

  constructor(data?: PartialMessage<PriceChangesByPeriod>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.PriceChangesByPeriod";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceChangesByPeriod;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceChangesByPeriod;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceChangesByPeriod;

  static equals(a: PriceChangesByPeriod | PlainMessage<PriceChangesByPeriod> | undefined, b: PriceChangesByPeriod | PlainMessage<PriceChangesByPeriod> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.SNS
 */
export declare class SNS extends Message<SNS> {
  /**
   * @generated from field: piedotfun.v1.SNS.SNSType type = 1;
   */
  type: SNS_SNSType;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl: string;

  constructor(data?: PartialMessage<SNS>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.SNS";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SNS;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SNS;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SNS;

  static equals(a: SNS | PlainMessage<SNS> | undefined, b: SNS | PlainMessage<SNS> | undefined): boolean;
}

/**
 * @generated from enum piedotfun.v1.SNS.SNSType
 */
export declare enum SNS_SNSType {
  /**
   * @generated from enum value: SNS_TYPE_UNSPECIFIED = 0;
   */
  SNS_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: EMAIL = 1;
   */
  EMAIL = 1,

  /**
   * @generated from enum value: GOOGLE = 2;
   */
  GOOGLE = 2,

  /**
   * @generated from enum value: TWITTER = 3;
   */
  TWITTER = 3,
}

