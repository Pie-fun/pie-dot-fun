// @generated by protoc-gen-es v1.6.0
// @generated from file pie-dot-fun/v1/fungible-token-market.proto (package piedotfun.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Currency, Money, PriceChangesByPeriod } from "./common_pb.js";

/**
 * FungibleTokenMarket contains the market data for a fungible token.
 *
 * @generated from message piedotfun.v1.FungibleTokenMarket
 */
export declare class FungibleTokenMarket extends Message<FungibleTokenMarket> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string fungible_token = 2;
   */
  fungibleToken: string;

  /**
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * @generated from field: string symbol = 4;
   */
  symbol: string;

  /**
   * Native token symbol of the chain the fungible-token belongs to.
   * Not dollar(USDT, USDC), 
   * and the prices and market cap fields will display dollar values together.
   *
   * @generated from field: piedotfun.v1.Currency native_currency = 5;
   */
  nativeCurrency: Currency;

  /**
   * Key is the `Currency` enum string, 
   * value is the price with the `Currency`.
   *
   * @generated from field: map<string, piedotfun.v1.Money> prices = 7 [deprecated = true];
   * @deprecated
   */
  prices: { [key: string]: Money };

  /**
   * Key is the `Currency` enum string, 
   * value is the market cap with the `Currency`.
   *
   * @generated from field: map<string, piedotfun.v1.Money> market_caps = 8 [deprecated = true];
   * @deprecated
   */
  marketCaps: { [key: string]: Money };

  /**
   * Key is the `Currency` enum string,
   * value is the price changes with the `Currency`.
   * {
   *   "CURRENCY_USDC": {
   *     "PRICE_CHANGE_PERIOD_1_HOUR": {
   *       "nominal_value": {
   *         "currency": "CURRENCY_USDC",
   *         "amount": 0.0001
   *       },
   *       "percentage_change": {
   *         "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_1_HOUR"
   *     },
   *     "CURRENCY_SOL": { ... }
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_7_DAY
   *
   * @generated from field: map<string, piedotfun.v1.PriceChangesByPeriod> price_changes = 9 [deprecated = true];
   * @deprecated
   */
  priceChanges: { [key: string]: PriceChangesByPeriod };

  /**
   * current price
   *
   * @generated from field: piedotfun.v1.Money price = 10;
   */
  price?: Money;

  /**
   * market cap
   *
   * @generated from field: piedotfun.v1.Money market_cap = 11 [deprecated = true];
   * @deprecated
   */
  marketCap?: Money;

  /**
   * Example
   * {
   *   "PRICE_CHANGE_PERIOD_7_DAY": {
   *       "nominal_value": {
   *           "currency": "CURRENCY_USDC",
   *           "amount": 0.0001
   *       },
   *       "percentage_change": {
   *           "value": 0.0001
   *       },
   *       "period": "PRICE_CHANGE_PERIOD_7_DAY"
   *   }
   *   ...
   * }
   * Support Periods
   * * PRICE_CHANGE_PERIOD_7_DAY
   *
   * @generated from field: piedotfun.v1.PriceChangesByPeriod price_change = 12;
   */
  priceChange?: PriceChangesByPeriod;

  /**
   * Fully Diluted Valuations
   * Key is the `Currency` enum string, 
   * value is the market cap with the `Currency`.
   *
   * @generated from field: map<string, piedotfun.v1.Money> fdvs = 13;
   */
  fdvs: { [key: string]: Money };

  constructor(data?: PartialMessage<FungibleTokenMarket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.FungibleTokenMarket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FungibleTokenMarket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FungibleTokenMarket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FungibleTokenMarket;

  static equals(a: FungibleTokenMarket | PlainMessage<FungibleTokenMarket> | undefined, b: FungibleTokenMarket | PlainMessage<FungibleTokenMarket> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.GetFungibleTokenMarketRequest
 */
export declare class GetFungibleTokenMarketRequest extends Message<GetFungibleTokenMarketRequest> {
  /**
   * The name of the market  to retrieve.
   * Format : "fungibleTokens/{chain}/{token_address}/market"
   *
   * @generated from field: string fungible_token_market = 1;
   */
  fungibleTokenMarket: string;

  /**
   * Display the price in this currency. Default is USD.
   *
   * @generated from field: piedotfun.v1.Currency currency = 2;
   */
  currency: Currency;

  constructor(data?: PartialMessage<GetFungibleTokenMarketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.GetFungibleTokenMarketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFungibleTokenMarketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFungibleTokenMarketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFungibleTokenMarketRequest;

  static equals(a: GetFungibleTokenMarketRequest | PlainMessage<GetFungibleTokenMarketRequest> | undefined, b: GetFungibleTokenMarketRequest | PlainMessage<GetFungibleTokenMarketRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListFungibleTokensMarketsRequest
 */
export declare class ListFungibleTokensMarketsRequest extends Message<ListFungibleTokensMarketsRequest> {
  /**
   * If unspecified, at most 50 books will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `=`
   *
   * Examples
   * * name="fungibleTokens/SOLANA/FZ4MT1HYJHd9GK8D5mJ9f3r7irLaDL5NxBNLjGqrLqs9/market"
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * One or more fields to compare and use to sort the output.
   * To specify ascending or descending order, append " asc" or " desc" to the field name. If not specified, the order is ascending.
   *
   * Reference
   * * https://google.aip.dev/132#ordering.
   *
   * Supported Fields
   * * 
   *
   * Examples
   * * 
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Display the price in this currency. Default is USD.
   *
   * @generated from field: piedotfun.v1.Currency currency = 5;
   */
  currency: Currency;

  constructor(data?: PartialMessage<ListFungibleTokensMarketsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListFungibleTokensMarketsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFungibleTokensMarketsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFungibleTokensMarketsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFungibleTokensMarketsRequest;

  static equals(a: ListFungibleTokensMarketsRequest | PlainMessage<ListFungibleTokensMarketsRequest> | undefined, b: ListFungibleTokensMarketsRequest | PlainMessage<ListFungibleTokensMarketsRequest> | undefined): boolean;
}

/**
 * @generated from message piedotfun.v1.ListFungibleTokensMarketsResponse
 */
export declare class ListFungibleTokensMarketsResponse extends Message<ListFungibleTokensMarketsResponse> {
  /**
   * @generated from field: repeated piedotfun.v1.FungibleTokenMarket fungible_token_markets = 1;
   */
  fungibleTokenMarkets: FungibleTokenMarket[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListFungibleTokensMarketsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "piedotfun.v1.ListFungibleTokensMarketsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFungibleTokensMarketsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFungibleTokensMarketsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFungibleTokensMarketsResponse;

  static equals(a: ListFungibleTokensMarketsResponse | PlainMessage<ListFungibleTokensMarketsResponse> | undefined, b: ListFungibleTokensMarketsResponse | PlainMessage<ListFungibleTokensMarketsResponse> | undefined): boolean;
}

