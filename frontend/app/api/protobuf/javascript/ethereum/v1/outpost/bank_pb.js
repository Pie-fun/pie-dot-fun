// @generated by protoc-gen-es v1.6.0
// @generated from file ethereum/v1/outpost/bank.proto (package ethereum.v1.outpost, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * SymbolType enum represents the symbol of a currency.
 *
 * @generated from enum ethereum.v1.outpost.Symbol
 */
export const Symbol = proto3.makeEnum(
  "ethereum.v1.outpost.Symbol",
  [
    {no: 0, name: "SYMBOL_UNSPECIFIED"},
    {no: 1, name: "STAR"},
  ],
);

/**
 * TransferRequest
 *
 * @generated from message ethereum.v1.outpost.TransferRequest
 */
export const TransferRequest = proto3.makeMessageType(
  "ethereum.v1.outpost.TransferRequest",
  () => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * WithdrawOptimisticRequest
 *
 * @generated from message ethereum.v1.outpost.WithdrawOptimisticRequest
 */
export const WithdrawOptimisticRequest = proto3.makeMessageType(
  "ethereum.v1.outpost.WithdrawOptimisticRequest",
  () => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * DepositOptimisticRequest
 *
 * @generated from message ethereum.v1.outpost.DepositOptimisticRequest
 */
export const DepositOptimisticRequest = proto3.makeMessageType(
  "ethereum.v1.outpost.DepositOptimisticRequest",
  () => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * GetStarTokenBalanceRequest
 *
 * @generated from message ethereum.v1.outpost.GetAccountRequest
 */
export const GetAccountRequest = proto3.makeMessageType(
  "ethereum.v1.outpost.GetAccountRequest",
  () => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ListAccountsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListAccountsRequest
 */
export const ListAccountsRequest = proto3.makeMessageType(
  "ethereum.v1.outpost.ListAccountsRequest",
  () => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ListAccountsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListAccountsResponse
 */
export const ListAccountsResponse = proto3.makeMessageType(
  "ethereum.v1.outpost.ListAccountsResponse",
  () => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Account message represents a Account.
 *
 * @generated from message ethereum.v1.outpost.Account
 */
export const Account = proto3.makeMessageType(
  "ethereum.v1.outpost.Account",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "balance", kind: "message", T: Balance },
    { no: 6, name: "last_transactions", kind: "message", T: Transaction, repeated: true },
    { no: 7, name: "create_time", kind: "message", T: Timestamp },
    { no: 8, name: "update_time", kind: "message", T: Timestamp },
  ],
);

/**
 * Balance message represents a currency.
 *
 * @generated from message ethereum.v1.outpost.Balance
 */
export const Balance = proto3.makeMessageType(
  "ethereum.v1.outpost.Balance",
  () => [
    { no: 1, name: "symbol", kind: "enum", T: proto3.getEnumType(Symbol) },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "cumulative_total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Money message represents a currency.
 *
 * @generated from message ethereum.v1.outpost.Money
 */
export const Money = proto3.makeMessageType(
  "ethereum.v1.outpost.Money",
  () => [
    { no: 1, name: "symbol", kind: "enum", T: proto3.getEnumType(Symbol) },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Transaction message represents a financial transaction.
 *
 * @generated from message ethereum.v1.outpost.Transaction
 */
export const Transaction = proto3.makeMessageType(
  "ethereum.v1.outpost.Transaction",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Transaction_Type) },
    { no: 3, name: "money", kind: "message", T: Money },
    { no: 4, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "create_time", kind: "message", T: Timestamp },
  ],
);

/**
 * Type enum represents the type of a transaction.
 *
 * @generated from enum ethereum.v1.outpost.Transaction.Type
 */
export const Transaction_Type = proto3.makeEnum(
  "ethereum.v1.outpost.Transaction.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED"},
    {no: 1, name: "DEPOSIT"},
    {no: 2, name: "WITHDRAWAL"},
    {no: 3, name: "TRANSFER"},
  ],
);

