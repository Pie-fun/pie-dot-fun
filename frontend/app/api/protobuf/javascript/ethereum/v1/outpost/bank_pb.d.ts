// @generated by protoc-gen-es v1.6.0
// @generated from file ethereum/v1/outpost/bank.proto (package ethereum.v1.outpost, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * SymbolType enum represents the symbol of a currency.
 *
 * @generated from enum ethereum.v1.outpost.Symbol
 */
export declare enum Symbol {
  /**
   * @generated from enum value: SYMBOL_UNSPECIFIED = 0;
   */
  SYMBOL_UNSPECIFIED = 0,

  /**
   * STAR
   *
   * @generated from enum value: STAR = 1;
   */
  STAR = 1,
}

/**
 * TransferRequest
 *
 * @generated from message ethereum.v1.outpost.TransferRequest
 */
export declare class TransferRequest extends Message<TransferRequest> {
  /**
   * transfer star token from whom
   *
   * @generated from field: string account = 1;
   */
  account: string;

  /**
   * transfer star token to whom
   *
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * amount of star token to transfer
   *
   * @generated from field: uint32 amount = 3;
   */
  amount: number;

  /**
   * etag determine whether a resource has changed since the last request.
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on requests to ensure the
   * client has an up-to-date value before proceeding.
   * If the ETag does not match, send a 412 Precondition Failed response
   *
   * @generated from field: string etag = 4;
   */
  etag: string;

  constructor(data?: PartialMessage<TransferRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.TransferRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferRequest;

  static equals(a: TransferRequest | PlainMessage<TransferRequest> | undefined, b: TransferRequest | PlainMessage<TransferRequest> | undefined): boolean;
}

/**
 * WithdrawOptimisticRequest
 *
 * @generated from message ethereum.v1.outpost.WithdrawOptimisticRequest
 */
export declare class WithdrawOptimisticRequest extends Message<WithdrawOptimisticRequest> {
  /**
   * The account to withdraw from.
   *
   * @generated from field: string account = 1;
   */
  account: string;

  /**
   * amount of star token to supply
   *
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<WithdrawOptimisticRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.WithdrawOptimisticRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithdrawOptimisticRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithdrawOptimisticRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithdrawOptimisticRequest;

  static equals(a: WithdrawOptimisticRequest | PlainMessage<WithdrawOptimisticRequest> | undefined, b: WithdrawOptimisticRequest | PlainMessage<WithdrawOptimisticRequest> | undefined): boolean;
}

/**
 * DepositOptimisticRequest
 *
 * @generated from message ethereum.v1.outpost.DepositOptimisticRequest
 */
export declare class DepositOptimisticRequest extends Message<DepositOptimisticRequest> {
  /**
   * The account to deposit star token
   *
   * @generated from field: string account = 1;
   */
  account: string;

  /**
   * amount of star token to absob
   *
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<DepositOptimisticRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.DepositOptimisticRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepositOptimisticRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepositOptimisticRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepositOptimisticRequest;

  static equals(a: DepositOptimisticRequest | PlainMessage<DepositOptimisticRequest> | undefined, b: DepositOptimisticRequest | PlainMessage<DepositOptimisticRequest> | undefined): boolean;
}

/**
 * GetStarTokenBalanceRequest
 *
 * @generated from message ethereum.v1.outpost.GetAccountRequest
 */
export declare class GetAccountRequest extends Message<GetAccountRequest> {
  /**
   * The name of the account to retrieve.
   * Format: accounts/{address}
   *
   * @generated from field: string account = 1;
   */
  account: string;

  constructor(data?: PartialMessage<GetAccountRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.GetAccountRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountRequest;

  static equals(a: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined, b: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined): boolean;
}

/**
 * ListAccountsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListAccountsRequest
 */
export declare class ListAccountsRequest extends Message<ListAccountsRequest> {
  /**
   * The maximum number of accounts to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListAccounts` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  constructor(data?: PartialMessage<ListAccountsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListAccountsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountsRequest;

  static equals(a: ListAccountsRequest | PlainMessage<ListAccountsRequest> | undefined, b: ListAccountsRequest | PlainMessage<ListAccountsRequest> | undefined): boolean;
}

/**
 * ListAccountsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListAccountsResponse
 */
export declare class ListAccountsResponse extends Message<ListAccountsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated ethereum.v1.outpost.Account accounts = 1;
   */
  accounts: Account[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListAccountsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListAccountsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountsResponse;

  static equals(a: ListAccountsResponse | PlainMessage<ListAccountsResponse> | undefined, b: ListAccountsResponse | PlainMessage<ListAccountsResponse> | undefined): boolean;
}

/**
 * Account message represents a Account.
 *
 * @generated from message ethereum.v1.outpost.Account
 */
export declare class Account extends Message<Account> {
  /**
   * name
   * format: accounts/{address}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The address of the account.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The balance of the account.
   *
   * @generated from field: ethereum.v1.outpost.Balance balance = 4;
   */
  balance?: Balance;

  /**
   * The list of transactions associated with the account.
   *
   * @generated from field: repeated ethereum.v1.outpost.Transaction last_transactions = 6;
   */
  lastTransactions: Transaction[];

  /**
   * The create time of the account.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * The update time of the account.
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<Account>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.Account";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account;

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean;
}

/**
 * Balance message represents a currency.
 *
 * @generated from message ethereum.v1.outpost.Balance
 */
export declare class Balance extends Message<Balance> {
  /**
   * The currency symbol.
   *
   * @generated from field: ethereum.v1.outpost.Symbol symbol = 1;
   */
  symbol: Symbol;

  /**
   * The amount of currency.
   *
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  /**
   * The cumulative total of currency.
   *
   * @generated from field: uint32 cumulative_total = 3;
   */
  cumulativeTotal: number;

  constructor(data?: PartialMessage<Balance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.Balance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance;

  static equals(a: Balance | PlainMessage<Balance> | undefined, b: Balance | PlainMessage<Balance> | undefined): boolean;
}

/**
 * Money message represents a currency.
 *
 * @generated from message ethereum.v1.outpost.Money
 */
export declare class Money extends Message<Money> {
  /**
   * The currency symbol.
   *
   * @generated from field: ethereum.v1.outpost.Symbol symbol = 1;
   */
  symbol: Symbol;

  /**
   * The amount of currency.
   *
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<Money>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.Money";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Money;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Money;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Money;

  static equals(a: Money | PlainMessage<Money> | undefined, b: Money | PlainMessage<Money> | undefined): boolean;
}

/**
 * Transaction message represents a financial transaction.
 *
 * @generated from message ethereum.v1.outpost.Transaction
 */
export declare class Transaction extends Message<Transaction> {
  /**
   * The ID of the transaction.
   *
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * The type of the transaction.
   *
   * @generated from field: ethereum.v1.outpost.Transaction.Type type = 2;
   */
  type: Transaction_Type;

  /**
   * The amount of currency involved in the transaction.
   *
   * @generated from field: ethereum.v1.outpost.Money money = 3;
   */
  money?: Money;

  /**
   * The destination of the transaction.
   * This field is optional
   *
   * @generated from field: optional string recipient = 4;
   */
  recipient?: string;

  /**
   * The create time of the transaction.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<Transaction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.Transaction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction;

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean;
}

/**
 * Type enum represents the type of a transaction.
 *
 * @generated from enum ethereum.v1.outpost.Transaction.Type
 */
export declare enum Transaction_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPOSIT = 1;
   */
  DEPOSIT = 1,

  /**
   * @generated from enum value: WITHDRAWAL = 2;
   */
  WITHDRAWAL = 2,

  /**
   * @generated from enum value: TRANSFER = 3;
   */
  TRANSFER = 3,
}

