// @generated by protoc-gen-es v1.6.0
// @generated from file ethereum/v1/outpost/nft.proto (package ethereum.v1.outpost, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ChainType enumeration represents the type of blockchain.
 * Does not support optimism, zksync, bsc yet
 *
 * @generated from enum ethereum.v1.outpost.ChainType
 */
export declare enum ChainType {
  /**
   * Unspecified blockchain type.
   *
   * @generated from enum value: CHAIN_UNSPECIFIED = 0;
   */
  CHAIN_UNSPECIFIED = 0,

  /**
   * Ethereum Mainnet blockchain.
   *
   * @generated from enum value: ETHEREUM = 1;
   */
  ETHEREUM = 1,

  /**
   * Polygon Mainnet blockchain.
   *
   * @generated from enum value: POLYGON = 137;
   */
  POLYGON = 137,

  /**
   * Arbitrum Mainnet blockchain.
   *
   * @generated from enum value: ARBITRUM = 42161;
   */
  ARBITRUM = 42161,

  /**
   * Optimism Mainnet blockchain.
   *
   * @generated from enum value: OPTIMISM = 10;
   */
  OPTIMISM = 10,

  /**
   * Base Mainnet blockchain.
   *
   * @generated from enum value: BASE = 8453;
   */
  BASE = 8453,

  /**
   * Blast Mainnet blockchain.
   *
   * @generated from enum value: BLAST = 81457;
   */
  BLAST = 81457,

  /**
   * Sepolia Testnet blockchain.
   *
   * @generated from enum value: ETHEREUM_SEPOLIA = 11155111;
   */
  ETHEREUM_SEPOLIA = 11155111,

  /**
   * Polygon Testnet blockchain.
   *
   * @generated from enum value: POLYGON_MUMBAI = 80001;
   */
  POLYGON_MUMBAI = 80001,

  /**
   * Blast Testnet blockchain.
   *
   * @generated from enum value: BLAST_SEPOLIA = 168587773;
   */
  BLAST_SEPOLIA = 168587773,
}

/**
 * @generated from enum ethereum.v1.outpost.ContractType
 */
export declare enum ContractType {
  /**
   * Unspecified contract type.
   *
   * @generated from enum value: CONTRACT_TYPE_UNSPECIFIED = 0;
   */
  CONTRACT_TYPE_UNSPECIFIED = 0,

  /**
   * ERC721 contract type.
   *
   * @generated from enum value: ERC721 = 1;
   */
  ERC721 = 1,

  /**
   * ERC1155 contract type.
   *
   * @generated from enum value: ERC1155 = 2;
   */
  ERC1155 = 2,
}

/**
 * ListNFTsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListNFTsRequest
 */
export declare class ListNFTsRequest extends Message<ListNFTsRequest> {
  /**
   * The owner address of the profile.
   * This field is required if `sync_onchain` is true.
   * When `sync_onchain` is true, only EOA address is supported.
   *
   * @generated from field: string owner_address = 1;
   */
  ownerAddress: string;

  /**
   * The maximum number of nfts to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When page token is not specified, nft assets are synced with the blockchain. If
   * page token is specified, nft assets are not synced with the blockchain and retrieved from the database.
   *
   * The page token is valid for only 2 hours.
   *
   * When paginating, all other parameters provided to `ListNFTs` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `equal`
   * * has_image
   *   * `negation`
   * * address
   *   * `equal`
   * * contract.address
   *   * `equal`
   * * contract.display_name
   *   * `equal`
   * * contract.chain
   *   * supported value is [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BASE, STARKNET, ETHEREUM_SEPOLIA, POLYGON_MUMBAI]
   *   * `equal`
   * * contract.type
   *   * `equal`
   *
   * Examples
   * * filter=name="nfts/MUMBAI/0xb4Afd0Ecb77460f0d8F93E7Fba93D7c18491f7a3/424"
   * * filter=has_image
   * * filter=address="0xa3d8090e4ea02d4cc76ecb2e8b09ab140cd11dee"
   * * filter=contract.address="0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
   * * filter=contract.display_name="CryptoKitties"
   * * filter=contract.chain=ETHEREUM
   * * filter=contract.type=ERC721
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Supported value is ["true", "1", "yes", "y"], other then all this value will be treated as false.
   * If true, the service will fetch assets using third party NFT APIs.
   *
   * @generated from field: string sync_onchain = 5;
   */
  syncOnchain: string;

  constructor(data?: PartialMessage<ListNFTsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListNFTsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNFTsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNFTsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNFTsRequest;

  static equals(a: ListNFTsRequest | PlainMessage<ListNFTsRequest> | undefined, b: ListNFTsRequest | PlainMessage<ListNFTsRequest> | undefined): boolean;
}

/**
 * ListNFTsResponse response
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message ethereum.v1.outpost.ListNFTsResponse
 */
export declare class ListNFTsResponse extends Message<ListNFTsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated ethereum.v1.outpost.NFT nfts = 1;
   */
  nfts: NFT[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListNFTsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListNFTsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNFTsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNFTsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNFTsResponse;

  static equals(a: ListNFTsResponse | PlainMessage<ListNFTsResponse> | undefined, b: ListNFTsResponse | PlainMessage<ListNFTsResponse> | undefined): boolean;
}

/**
 * ListNFTsDelegateRequest
 *
 * @generated from message ethereum.v1.outpost.ListNFTsDelegateRequest
 */
export declare class ListNFTsDelegateRequest extends Message<ListNFTsDelegateRequest> {
  /**
   * The owner address of the profile.
   * This field is required if `sync_onchain` is true.
   * When `sync_onchain` is true, only EOA address is supported.
   *
   * @generated from field: string owner_address = 1;
   */
  ownerAddress: string;

  constructor(data?: PartialMessage<ListNFTsDelegateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListNFTsDelegateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNFTsDelegateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNFTsDelegateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNFTsDelegateRequest;

  static equals(a: ListNFTsDelegateRequest | PlainMessage<ListNFTsDelegateRequest> | undefined, b: ListNFTsDelegateRequest | PlainMessage<ListNFTsDelegateRequest> | undefined): boolean;
}

/**
 * ListNFTsDelegateRequest
 *
 * @generated from message ethereum.v1.outpost.ListNFTsDelegateResponse
 */
export declare class ListNFTsDelegateResponse extends Message<ListNFTsDelegateResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated ethereum.v1.outpost.NFT nfts = 1;
   */
  nfts: NFT[];

  constructor(data?: PartialMessage<ListNFTsDelegateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListNFTsDelegateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNFTsDelegateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNFTsDelegateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNFTsDelegateResponse;

  static equals(a: ListNFTsDelegateResponse | PlainMessage<ListNFTsDelegateResponse> | undefined, b: ListNFTsDelegateResponse | PlainMessage<ListNFTsDelegateResponse> | undefined): boolean;
}

/**
 * GetNFTRequest
 *
 * @generated from message ethereum.v1.outpost.GetNFTRequest
 */
export declare class GetNFTRequest extends Message<GetNFTRequest> {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   *
   * @generated from field: string nft = 1;
   */
  nft: string;

  constructor(data?: PartialMessage<GetNFTRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.GetNFTRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNFTRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNFTRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNFTRequest;

  static equals(a: GetNFTRequest | PlainMessage<GetNFTRequest> | undefined, b: GetNFTRequest | PlainMessage<GetNFTRequest> | undefined): boolean;
}

/**
 * ValidateNFTAccessRequest
 *
 * @generated from message ethereum.v1.outpost.ValidateNFTAccessRequest
 */
export declare class ValidateNFTAccessRequest extends Message<ValidateNFTAccessRequest> {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   *
   * @generated from field: string nft = 1;
   */
  nft: string;

  /**
   * The owner address of the NFT asset.
   *
   * @generated from field: string owner_address = 2;
   */
  ownerAddress: string;

  constructor(data?: PartialMessage<ValidateNFTAccessRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ValidateNFTAccessRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNFTAccessRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNFTAccessRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNFTAccessRequest;

  static equals(a: ValidateNFTAccessRequest | PlainMessage<ValidateNFTAccessRequest> | undefined, b: ValidateNFTAccessRequest | PlainMessage<ValidateNFTAccessRequest> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.ValidateNFTAccessResponse
 */
export declare class ValidateNFTAccessResponse extends Message<ValidateNFTAccessResponse> {
  /**
   * @generated from field: ethereum.v1.outpost.NFT nft = 1;
   */
  nft?: NFT;

  /**
   * @generated from field: bool access = 2;
   */
  access: boolean;

  constructor(data?: PartialMessage<ValidateNFTAccessResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ValidateNFTAccessResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNFTAccessResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNFTAccessResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNFTAccessResponse;

  static equals(a: ValidateNFTAccessResponse | PlainMessage<ValidateNFTAccessResponse> | undefined, b: ValidateNFTAccessResponse | PlainMessage<ValidateNFTAccessResponse> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.ListOwnersRequest
 */
export declare class ListOwnersRequest extends Message<ListOwnersRequest> {
  /**
   * @generated from field: repeated string nfts = 1;
   */
  nfts: string[];

  constructor(data?: PartialMessage<ListOwnersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListOwnersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOwnersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOwnersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOwnersRequest;

  static equals(a: ListOwnersRequest | PlainMessage<ListOwnersRequest> | undefined, b: ListOwnersRequest | PlainMessage<ListOwnersRequest> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.ListOwnersResponse
 */
export declare class ListOwnersResponse extends Message<ListOwnersResponse> {
  /**
   * @generated from field: map<string, ethereum.v1.outpost.ListOwnersResponse.NFTs> owners = 1;
   */
  owners: { [key: string]: ListOwnersResponse_NFTs };

  constructor(data?: PartialMessage<ListOwnersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListOwnersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOwnersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOwnersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOwnersResponse;

  static equals(a: ListOwnersResponse | PlainMessage<ListOwnersResponse> | undefined, b: ListOwnersResponse | PlainMessage<ListOwnersResponse> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.ListOwnersResponse.NFTs
 */
export declare class ListOwnersResponse_NFTs extends Message<ListOwnersResponse_NFTs> {
  /**
   * @generated from field: repeated string nfts = 1;
   */
  nfts: string[];

  constructor(data?: PartialMessage<ListOwnersResponse_NFTs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ListOwnersResponse.NFTs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOwnersResponse_NFTs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOwnersResponse_NFTs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOwnersResponse_NFTs;

  static equals(a: ListOwnersResponse_NFTs | PlainMessage<ListOwnersResponse_NFTs> | undefined, b: ListOwnersResponse_NFTs | PlainMessage<ListOwnersResponse_NFTs> | undefined): boolean;
}

/**
 * ValidateNFTRequest
 *
 * @generated from message ethereum.v1.outpost.ValidateNFTRequest
 */
export declare class ValidateNFTRequest extends Message<ValidateNFTRequest> {
  /**
   * The resource name of the nft to retrieve.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   *
   * @generated from field: string nft = 1;
   */
  nft: string;

  constructor(data?: PartialMessage<ValidateNFTRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ValidateNFTRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNFTRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNFTRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNFTRequest;

  static equals(a: ValidateNFTRequest | PlainMessage<ValidateNFTRequest> | undefined, b: ValidateNFTRequest | PlainMessage<ValidateNFTRequest> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.ValidateNFTResponse
 */
export declare class ValidateNFTResponse extends Message<ValidateNFTResponse> {
  /**
   * @generated from field: bool valid = 2;
   */
  valid: boolean;

  constructor(data?: PartialMessage<ValidateNFTResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.ValidateNFTResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateNFTResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateNFTResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateNFTResponse;

  static equals(a: ValidateNFTResponse | PlainMessage<ValidateNFTResponse> | undefined, b: ValidateNFTResponse | PlainMessage<ValidateNFTResponse> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.GetContractRequest
 */
export declare class GetContractRequest extends Message<GetContractRequest> {
  /**
   * The resource name of the nft contract to retrieve.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   *
   * @generated from field: string nft_contract = 1;
   */
  nftContract: string;

  constructor(data?: PartialMessage<GetContractRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.GetContractRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContractRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContractRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContractRequest;

  static equals(a: GetContractRequest | PlainMessage<GetContractRequest> | undefined, b: GetContractRequest | PlainMessage<GetContractRequest> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.CheckHolderOfContractRequest
 */
export declare class CheckHolderOfContractRequest extends Message<CheckHolderOfContractRequest> {
  /**
   * The resource name of the nft contract to retrieve.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   *
   * @generated from field: string nft_contract = 1;
   */
  nftContract: string;

  /**
   * @generated from field: string wallet_address = 2;
   */
  walletAddress: string;

  constructor(data?: PartialMessage<CheckHolderOfContractRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.CheckHolderOfContractRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckHolderOfContractRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckHolderOfContractRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckHolderOfContractRequest;

  static equals(a: CheckHolderOfContractRequest | PlainMessage<CheckHolderOfContractRequest> | undefined, b: CheckHolderOfContractRequest | PlainMessage<CheckHolderOfContractRequest> | undefined): boolean;
}

/**
 * @generated from message ethereum.v1.outpost.CheckHolderOfContractResponse
 */
export declare class CheckHolderOfContractResponse extends Message<CheckHolderOfContractResponse> {
  /**
   * @generated from field: bool is_holder = 1;
   */
  isHolder: boolean;

  constructor(data?: PartialMessage<CheckHolderOfContractResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.CheckHolderOfContractResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckHolderOfContractResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckHolderOfContractResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckHolderOfContractResponse;

  static equals(a: CheckHolderOfContractResponse | PlainMessage<CheckHolderOfContractResponse> | undefined, b: CheckHolderOfContractResponse | PlainMessage<CheckHolderOfContractResponse> | undefined): boolean;
}

/**
 * NFT message represents an NFT asset.
 *
 * @generated from message ethereum.v1.outpost.NFT
 */
export declare class NFT extends Message<NFT> {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * EIP-6551 TBA Address of the NFT asset.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * Token ID of the NFT asset.
   *
   * @generated from field: string token_id = 3;
   */
  tokenId: string;

  /**
   * Token Name of the NFT asset.
   *
   * @generated from field: string token_name = 4;
   */
  tokenName: string;

  /**
   * The URI of the NFT asset's image.
   * This URI can be cached version of image original URI
   * e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
   *
   * @generated from field: string image_uri = 5;
   */
  imageUri: string;

  /**
   * The URI of the NFT asset's original image.
   * e.g. "https://www.larvalabs.com/cryptopunks/cryptopunk1.png"
   *
   * @generated from field: string image_original_uri = 6;
   */
  imageOriginalUri: string;

  /**
   * The URI of the NFT asset's animation.
   * This URI can be cached version of animation original URI
   * This field is optional
   *
   * @generated from field: optional string animation_uri = 7;
   */
  animationUri?: string;

  /**
   * The URI of the NFT asset's original animation.
   * This field is optional
   *
   * @generated from field: optional string animation_original_uri = 8;
   */
  animationOriginalUri?: string;

  /**
   * Additional metadata about the NFT asset.
   *
   * @generated from field: string metadata_uri = 9;
   */
  metadataUri: string;

  /**
   * The owner address of the NFT asset.
   * This field is optional
   *
   * @generated from field: optional string ownerAddress = 10;
   */
  ownerAddress?: string;

  /**
   * The contract that owns the NFT asset.
   * Output only.
   *
   * @generated from field: ethereum.v1.outpost.NFTContract contract = 11;
   */
  contract?: NFTContract;

  constructor(data?: PartialMessage<NFT>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.NFT";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NFT;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NFT;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NFT;

  static equals(a: NFT | PlainMessage<NFT> | undefined, b: NFT | PlainMessage<NFT> | undefined): boolean;
}

/**
 * NFTContract message represents an NFT contract.
 *
 * @generated from message ethereum.v1.outpost.NFTContract
 */
export declare class NFTContract extends Message<NFTContract> {
  /**
   * The resource name of the nft contract.
   * Format: nfts/{chain_type}/{contract_address}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The address of the NFT contract.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The display name of the NFT contract.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * The symbol of the NFT contract.
   *
   * @generated from field: string symbol = 4;
   */
  symbol: string;

  /**
   * The blockchain on which the NFT contract resides.
   *
   * @generated from field: ethereum.v1.outpost.ChainType chain = 5;
   */
  chain: ChainType;

  /**
   * The type of the NFT contract.
   *
   * @generated from field: ethereum.v1.outpost.ContractType type = 6;
   */
  type: ContractType;

  /**
   * The URI of the contract image
   *
   * @generated from field: string image_uri = 7;
   */
  imageUri: string;

  constructor(data?: PartialMessage<NFTContract>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.outpost.NFTContract";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NFTContract;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NFTContract;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NFTContract;

  static equals(a: NFTContract | PlainMessage<NFTContract> | undefined, b: NFTContract | PlainMessage<NFTContract> | undefined): boolean;
}

