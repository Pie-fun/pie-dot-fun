// @generated by protoc-gen-es v1.6.0
// @generated from file ethereum/v1/station/spaceship.proto (package ethereum.v1.station, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * SpaceshipState
 *
 * @generated from enum ethereum.v1.station.SpaceshipState
 */
export declare enum SpaceshipState {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: RENTED = 1;
   */
  RENTED = 1,

  /**
   * @generated from enum value: BURNED = 2;
   */
  BURNED = 2,

  /**
   * means upgraded to ownership
   *
   * @generated from enum value: UPGRADED = 3;
   */
  UPGRADED = 3,
}

/**
 * SpaceshipType
 *
 * @generated from enum ethereum.v1.station.SpaceshipType
 */
export declare enum SpaceshipType {
  /**
   * default value. this value is unused.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROTOSHIP = 1;
   */
  PROTOSHIP = 1,

  /**
   * Semantic lock for rent.
   *
   * @generated from enum value: OWNERSHIP = 2;
   */
  OWNERSHIP = 2,
}

/**
 * CreateSpaceshipRequest
 *
 * @generated from message ethereum.v1.station.CreateSpaceshipRequest
 */
export declare class CreateSpaceshipRequest extends Message<CreateSpaceshipRequest> {
  /**
   * spaceship to create
   *
   * @generated from field: ethereum.v1.station.Spaceship spaceship = 1;
   */
  spaceship?: Spaceship;

  constructor(data?: PartialMessage<CreateSpaceshipRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.CreateSpaceshipRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpaceshipRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpaceshipRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpaceshipRequest;

  static equals(a: CreateSpaceshipRequest | PlainMessage<CreateSpaceshipRequest> | undefined, b: CreateSpaceshipRequest | PlainMessage<CreateSpaceshipRequest> | undefined): boolean;
}

/**
 * GetSpaceshipRequest
 *
 * @generated from message ethereum.v1.station.GetSpaceshipRequest
 */
export declare class GetSpaceshipRequest extends Message<GetSpaceshipRequest> {
  /**
   * The name of the spaceship to retrieve.
   * Format: spaceships/{spaceship}
   *
   * @generated from field: string spaceship = 1;
   */
  spaceship: string;

  constructor(data?: PartialMessage<GetSpaceshipRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.GetSpaceshipRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpaceshipRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpaceshipRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpaceshipRequest;

  static equals(a: GetSpaceshipRequest | PlainMessage<GetSpaceshipRequest> | undefined, b: GetSpaceshipRequest | PlainMessage<GetSpaceshipRequest> | undefined): boolean;
}

/**
 * UpdateSpaceshipRequest
 *
 * @generated from message ethereum.v1.station.UpdateSpaceshipRequest
 */
export declare class UpdateSpaceshipRequest extends Message<UpdateSpaceshipRequest> {
  /**
   * spaceship to update
   *
   * @generated from field: ethereum.v1.station.Spaceship spaceship = 1;
   */
  spaceship?: Spaceship;

  /**
   * Field mask that specifies the fields to update.
   * If no field mask is set, all fields will be updated.
   * Wildcards are supported.
   * Examples
   * ["*"]
   * ["nft.metadata[left_wing]"]
   * ["nickname", "nft.metadata"]
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateSpaceshipRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.UpdateSpaceshipRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpaceshipRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpaceshipRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpaceshipRequest;

  static equals(a: UpdateSpaceshipRequest | PlainMessage<UpdateSpaceshipRequest> | undefined, b: UpdateSpaceshipRequest | PlainMessage<UpdateSpaceshipRequest> | undefined): boolean;
}

/**
 * GetSpaceshipRequest
 *
 *
 *
 * @generated from message ethereum.v1.station.MintSpaceshipRequest
 */
export declare class MintSpaceshipRequest extends Message<MintSpaceshipRequest> {
  constructor(data?: PartialMessage<MintSpaceshipRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.MintSpaceshipRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintSpaceshipRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintSpaceshipRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintSpaceshipRequest;

  static equals(a: MintSpaceshipRequest | PlainMessage<MintSpaceshipRequest> | undefined, b: MintSpaceshipRequest | PlainMessage<MintSpaceshipRequest> | undefined): boolean;
}

/**
 * ListSpaceshipsRequest payload
 * (-- api-linter: core::0158::request-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 * (-- api-linter: core::0132::request-unknown-fields=disabled
 *     aip.dev/not-precedent: We really need this field because reasons. --)
 *
 * @generated from message ethereum.v1.station.ListSpaceshipsRequest
 */
export declare class ListSpaceshipsRequest extends Message<ListSpaceshipsRequest> {
  /**
   * The maximum number of spaceships to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 rows will be returned.
   * The maximum value is 1024; values above 1024 will be coerced to 1024.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   *
   * When paginating, all other parameters provided to `ListSpaceships` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Available Sequence and Operator
   * * name
   *   * `equal`
   * * profile
   *   * `equal`
   * * create_time
   *   * `>`
   * * title
   *   * `contains`
   * * state
   *   * `equal`
   * * type
   *   * `equal`
   * * is_upgraded
   *   * `negation`
   *
   * Examples
   * * filter=profile="profiles/0x927c3Ba1B0F8300E1Cc5DcA825411d756A8D4001"
   * * filter=state=RENT_WAITING
   * * filter=NOT rentable
   * * filter=rentable
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  constructor(data?: PartialMessage<ListSpaceshipsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.ListSpaceshipsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSpaceshipsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSpaceshipsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSpaceshipsRequest;

  static equals(a: ListSpaceshipsRequest | PlainMessage<ListSpaceshipsRequest> | undefined, b: ListSpaceshipsRequest | PlainMessage<ListSpaceshipsRequest> | undefined): boolean;
}

/**
 * ListSpaceshipsResponse
 * (-- api-linter: core::0158::response-next-page-token-field=disabled
 *     aip.dev/not-precedent: We need to do this because reasons. --)
 *
 * @generated from message ethereum.v1.station.ListSpaceshipsResponse
 */
export declare class ListSpaceshipsResponse extends Message<ListSpaceshipsResponse> {
  /**
   * The list of rows that matched the query.
   *
   * @generated from field: repeated ethereum.v1.station.Spaceship spaceships = 1;
   */
  spaceships: Spaceship[];

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  constructor(data?: PartialMessage<ListSpaceshipsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.ListSpaceshipsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSpaceshipsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSpaceshipsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSpaceshipsResponse;

  static equals(a: ListSpaceshipsResponse | PlainMessage<ListSpaceshipsResponse> | undefined, b: ListSpaceshipsResponse | PlainMessage<ListSpaceshipsResponse> | undefined): boolean;
}

/**
 * Spaceship is type of Spaceship
 *
 * @generated from message ethereum.v1.station.Spaceship
 */
export declare class Spaceship extends Message<Spaceship> {
  /**
   * The resource name of Spaceship.
   * Format: spaceships/{address}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * 6551 address of Spaceship NFT
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The owner address of Spaceship.
   * This address can be PFP NFT TBA or EOA.
   * This field will be empty if the Spaceship is burned.
   *
   * @generated from field: string owner_address = 3;
   */
  ownerAddress: string;

  /**
   * The created time of Spaceship
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * The last updated time of Spaceship
   * RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * The nickname of Spaceship.
   * Internship has null value.
   * This field is optional
   *
   * @generated from field: optional string nickname = 6;
   */
  nickname?: string;

  /**
   * state of Spaceship
   *
   * @generated from field: ethereum.v1.station.SpaceshipState state = 7;
   */
  state: SpaceshipState;

  /**
   * @generated from field: ethereum.v1.station.SpaceshipType type = 8;
   */
  type: SpaceshipType;

  /**
   * Whether the Spaceship is upgraded to Ownership
   *
   * @generated from field: bool is_upgraded = 9;
   */
  isUpgraded: boolean;

  /**
   * NFT of Spaceship
   *
   * @generated from field: ethereum.v1.station.SpaceshipNFT nft = 10;
   */
  nft?: SpaceshipNFT;

  constructor(data?: PartialMessage<Spaceship>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.Spaceship";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spaceship;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spaceship;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spaceship;

  static equals(a: Spaceship | PlainMessage<Spaceship> | undefined, b: Spaceship | PlainMessage<Spaceship> | undefined): boolean;
}

/**
 * SpaceshipNFT message represents an Spaceship's NFT.
 *
 * @generated from message ethereum.v1.station.SpaceshipNFT
 */
export declare class SpaceshipNFT extends Message<SpaceshipNFT> {
  /**
   * The resource name of the NFT asset.
   * Format: nfts/{chain_type}/{contract_address}/{token_id}
   * Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Token ID of the NFT asset.
   *
   * @generated from field: string token_id = 2;
   */
  tokenId: string;

  /**
   * The URI of the NFT asset's image.
   * This URI can be cached version of image original URI
   * e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
   *
   * @generated from field: string image_uri = 3;
   */
  imageUri: string;

  /**
   * The Metadata URI of the NFT asset.
   *
   * @generated from field: string metadata_uri = 4;
   */
  metadataUri: string;

  constructor(data?: PartialMessage<SpaceshipNFT>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ethereum.v1.station.SpaceshipNFT";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpaceshipNFT;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpaceshipNFT;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpaceshipNFT;

  static equals(a: SpaceshipNFT | PlainMessage<SpaceshipNFT> | undefined, b: SpaceshipNFT | PlainMessage<SpaceshipNFT> | undefined): boolean;
}

