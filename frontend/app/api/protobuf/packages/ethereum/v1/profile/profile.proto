syntax = "proto3";

package ethereum.v1.profile;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/api/resource.proto";
import "google/api/client.proto";

import "ethereum/v1/outpost/nft.proto";
import "ethereum/v1/profile/my_space.proto";
import "ethereum/v1/profile/sns_connection.proto";

option go_package = "github.com/ao-labs/spacebar-apis/go/ethereum/v1/profile;profile";

// ProfileService contains the function to interact with the Profile of the spacebar
service ProfileService {
  // ListProfiles will return Profiles.
  rpc ListProfiles(ListProfilesRequest) returns (ListProfilesResponse) {
    option (google.api.http) = {
      get: "/v1/profiles"
    };
    option (google.api.method_signature) = "";
  }

  // GetProfile will return Profile.
  rpc GetProfile(GetProfileRequest) returns (Profile) {
    option (google.api.http) = {
      get: "/v1/{profile=profiles/*}"
    };
    option (google.api.method_signature) = "profile";
  }

  // UpdateProfile update Profile.
  rpc UpdateProfile(UpdateProfileRequest) returns (Profile) {
    option (google.api.http) = {
      patch: "/v1/{profile.name=profiles/*}"
      body: "profile"
    };
    option (google.api.method_signature) = "profile,update_mask";
  }

  // GetMySpace will return the Profile's MySpace.
  rpc GetMySpace(GetMySpaceRequest) returns (profile.MySpace) {
    option (google.api.http) = {
      get: "/v1/{profile=profiles/*}/my_space"
    };
    option (google.api.method_signature) = "profile";
  }

  // UpdateMySpace update Profile's MySpace.
  rpc UpdateMySpace(UpdateMySpaceRequest) returns (profile.MySpace) {
    option (google.api.http) = {
      put: "/v1/{profile=profiles/*}/my_space"
      body: "my_space"
    };
    option (google.api.method_signature) = "profile,my_space";
  }

  // GetProfileDailyPlayCount will return the Profile's daily play count.
  rpc GetProfileDailyPlayCount(GetProfileDailyPlayCountRequest) returns (GetProfileDailyPlayCountResponse) {
    option (google.api.http) = {
      get: "/v1/{profile=profiles/*}/daily_play_count"
    };
    option (google.api.method_signature) = "profile";
  }

  // IncrementProfileDailyPlayCount will return the Profile's daily play count.
  rpc IncrementProfileDailyPlayCount(IncrementProfileDailyPlayCountRequest) returns (IncrementProfileDailyPlayCountResponse) {
    option (google.api.http) = {
      post: "/v1/{profile=profiles/*}/daily_play_count:increment"
    };
    option (google.api.method_signature) = "profile";
  }


  // CompleteTutorial complete tutorial of Profile.
//  rpc CompleteTutorial(CompleteTutorialRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/v1/{profile=profiles/*}:complete_tutorial"
//      body: "profile"
//    };
//    option (google.api.method_signature) = "profile";
//  }

  // ConnectSNS connect SNS to Profile.
//  rpc ConnectSNS(ConnectSNSRequest) returns (profile.v1.SNSConnection) {
//    option (google.api.http) = {
//      post: "/v1/{profile=profiles/*}:connect_sns"
//      body: "*"
//    };
//  }
}

// ListProfilesRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
// (-- api-linter: core::0132::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need this field because reasons. --)
message ListProfilesRequest {
  // The maximum number of profiles to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 rows will be returned.
  // The maximum value is 1024; values above 1024 will be coerced to 1024.
  int32 page_size = 1;

  // Token of the page to retrieve. If not specified, the first
  // page of results will be returned. Use the value obtained from
  // `next_page_token` in the previous response in order to request
  // the next page of results.
  //
  // When paginating, all other parameters provided to `ListProfiles` must match
  // the call that provided the page token.
  string page_token = 2;

  // Available Sequence and Operator
  // * name
  //   * `Equal`
  // * create_time
  //   * `>`
  // * identified
  //   * Equal`
  //
  // Examples
  // * name="profiles/0x6F11EF2c07f2E381CbE514198DdE87A0c0a19442"
  // * create_time>"2020-04-21T11:30:00Z"
  // * identifed
  string filter = 3;

  // Optional. The view to return.
  // Defaults to FULL if not set.
  //
  // ProfileView enumeration represents the view of a profile.
  // The view controls the amount of information returned.
  // The BASIC view omits the following fields:
  // star_balance, sns_connections, gm_stats
  //
  // Reference
  // https://cloud.google.com/apis/design/design_patterns#list_flattening and
  // https://google.aip.dev/157
  ProfileView view = 4;
}

// ListProfilesResponse
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
message ListProfilesResponse {
  // The list of rows that matched the query.
  repeated Profile profiles = 1;

  // Pagination token used to retrieve the next page of results.
  // Pass the content of this string as the `page_token` attribute of
  // the next request. `next_page_token` is not returned for the last
  // page.
  string next_page_token = 2;
}

// GetProfileRequest.
message GetProfileRequest {
  // The name of the profile to retrieve.
  // Format: profiles/{address}
  // Alias "profiles/me" is supported.
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }];

  // Optional. The view to return.
  // Defaults to FULL if not set.
  //
  // ProfileView enumeration represents the view of a profile.
  // The view controls the amount of information returned.
  // The BASIC view omits the following fields:
  // star_balance, sns_connections, gm_stats
  //
  // Reference
  // https://cloud.google.com/apis/design/design_patterns#list_flattening and
  // https://google.aip.dev/157
  ProfileView view = 2;
}

// UpdateProfileRequest.
message UpdateProfileRequest {
  // Profile to update
  // Format: profiles/{address}
  Profile profile = 1 [
    (google.api.field_behavior) = REQUIRED
  ];

  // Field mask that specifies the fields to update.
  // If no field mask is set, all fields will be updated.
  // Wildcards are supported.
  // Examples
  // ["*"]
  // ["nickname"]
  // ["nickname", "nft"]
  google.protobuf.FieldMask update_mask = 2;
}

// CompleteTutorialRequest message represents a request to complete a tutorial.
message CompleteTutorialRequest {
  // The profile to complete the tutorial for.
  // Format: profiles/{address}
  // Resource name alias "profiles/me" is supported.
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }
  ];
}

// CompleteTutorialResponse message represents a response from completing a tutorial.
message CompleteTutorialResponse {
  // The ID of the completed tutorial.
  string tutorial_id = 1;
  // The timestamp of when the tutorial was completed.
  google.protobuf.Timestamp completed_timestamp = 2;
}

// GetMySpaceRequest message represents the request to list my space assets.
message GetMySpaceRequest {
  // The profile whose my space assets should be listed.
  // Format: profiles/{address}
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }];
}

// UpdateMySpaceRequest message represents the request to update my space assets.
// There is no update_mask for this request because always upate all my space assets.
message UpdateMySpaceRequest {
  // The profile whose my space assets should be updated.
  // Format: profiles/{address}
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }
  ];

  profile.MySpace my_space = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetProfileDailyPlayCountRequest {
  // Format: profiles/{address}
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }
  ];
}

message GetProfileDailyPlayCountResponse {
  // The daily play count of the profile.
  uint32 daily_play_count = 1;
}

message IncrementProfileDailyPlayCountRequest {
  // Format: profiles/{address}
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }
  ];
}

message IncrementProfileDailyPlayCountResponse {
  // The daily play count of the profile.
  uint32 daily_play_count = 1;
}


message ConnectSNSRequest {
  // The profile to connect the SNS.
  // Format: profiles/{address}
  // Resource name alias "profiles/me" is supported.
  string profile = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/Profile"
    }
  ];

  // The SNS type to connect.
  profile.SNSType sns_type = 2;

  // The access token for the SNS API.
  // NOTE: This field can be changed depending on the implementation or SNS type.
  string access_token = 3;

  // The access token secret for the SNS API.
  string access_token_secret = 4;
}

// The state of profile
enum ProfileState {
  // default value. this value is unused.
  STATE_UNSPECIFIED = 0;

  // Profile was firstly created but not started to rent base spaceship.
  // This state is very transitory state because next transaction will change it to PROTOSHIP_MINTED or OWNERSHIP_ACQUIRED state immediately.
  CREATED = 1;

  // Profile was firstly created with base spaceship rental.
  PROTOSHIP_MINTED = 2;

  // Profile was created with base spaceship rental but failed to acquire
  PROTOSHIP_BURNED = 3;

  // Profile has acquired ownership.
  OWNERSHIP_ACQUIRED = 4;
}

message Profile {
  option (google.api.resource) = {
    type: "station.spacebarapis.xyz/Profile",
    pattern: "profiles/{address}"
  };
  // The resource name of the Profile.
  // Format: profiles/{address}
  string name = 1;

  // EIP-6551 TBA Address of the Profile NFT.
  string address = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The created time of Profile.
  // RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
  google.protobuf.Timestamp create_time = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The last updated time of Profile.
  // RFC3339 format e.g. "2006-01-02T15:04:05Z07:00"
  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The number of Profile.
  uint64 number = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The state of Profile
  ProfileState state = 6 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The current pfp nft of Profile.
  ProfileNFT nft = 7;

  // The star account of Profile
  StarAccount star_account = 8 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The ens of profile
  // This field is optional
  optional string ens = 9 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The nickname of Profile.
  // This field is optional.
  optional string nickname = 10;

  // Whether Profile finished tutorial or not
  bool is_tutorial_done = 11 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Whether Profile is identified or not
  bool is_identified = 12 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The sns connections of Profile
//  repeated profile.v1.SNSConnection sns_connections = 13 [
//    (google.api.field_behavior) = OUTPUT_ONLY
//  ];

  //
//  GMStatsSlim gm_stats = 14 [
//    (google.api.field_behavior) = OUTPUT_ONLY
//  ];
}

// 다양한 tutorial 이 생길 예정
message Tutorial {
  // whether tutorial is done or not
  bool is_done = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The completed time of tutorial.
  google.protobuf.Timestamp complete_time = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// StarAccount message represents a balance of stars for a profile.
message StarAccount {
  // The current balance of stars.
  uint32 balance = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The cumulative total of stars.
  uint32 cumulative_total = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// GMStatsSlim message represents the statistics for a gm count.
message GMStatsSlim {
  // The number of messages sent.
  uint32 sent_count = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The number of messages received.
  uint32 received_count = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ProfileView enumeration represents the view of a profile.
// The view controls the amount of information returned.
// The BASIC view omits the following fields:
// star_balance, sns_connections, gm_stats
//
// Reference
// https://cloud.google.com/apis/design/design_patterns#list_flattening and
// https://google.aip.dev/157
enum ProfileView {
  // The default / unset value.
  // The API will default to the FULL view.
  Profile_VIEW_UNSPECIFIED = 0;

  // Include only basic info.
  // Do not include `nft`, `star_balance`, `sns_connections`, `gm_stats`
  BASIC = 1;

  // Include everything.
  // This is the default value for both ListProfiles and GetProfile.
  FULL = 2;
}

// ProfileNFT message represents an Profile's NFT.
message ProfileNFT {
  // The resource name of the NFT asset.
  // Format: nfts/{chain_type}/{contract_address}/{token_id}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
  string name = 1;

  // Token ID of the NFT asset.
  string token_id = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Token Name of the NFT asset.
  string token_name = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the NFT asset's image.
  // This URI is cached version of image original URI
  // e.g. "https://cdn.spacebar.xyz/nfts/ethereum/0x79fcdef22feed20eddacbb2587640e45491b757f/609"
  string image_uri = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The contract that owns the NFT asset.
  // Output only.
  ProfileNFTContract contract = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// NFTContract message represents an NFT contract.
message ProfileNFTContract {
  // The address of the NFT contract.
  string address = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The name of the NFT contract schema.
  string display_name = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The symbol of the NFT contract.
  string symbol = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The blockchain on which the NFT contract resides.
  outpost.ChainType chain = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the contract image
  string image_uri = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}


