syntax = "proto3";

package blast.v1.game;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/api/resource.proto";
import "google/api/client.proto";

import "blast/v1/chain/sign.proto";

option go_package = "github.com/ao-labs/spacebar-apis/go/blast/v1/game;game";

// GameService contains the function to interact with the Game of the spacebar
service GameService {

  // GetUserDailyPlayCount will return the User's daily play count.
  rpc GetDailyPlayCount(GetDailyPlayCountRequest) returns (GetDailyPlayCountResponse) {
    option (google.api.http) = {
      get: "/v1/games/{user=users/*}/daily_play_count"
    };
    option (google.api.method_signature) = "user";
  }

}

message GetDailyPlayCountRequest {
  // Format: users/{address}
  string user = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "station.spacebarapis.xyz/User"
    }
  ];
}

message GetDailyPlayCountResponse {
  // The daily play count of the user.
  uint32 daily_play_count = 1;

  // The daily play count of the user.
  uint32 daily_play_count_quota = 2;
}

enum ClientMessageType {
  CLIENT_MESSAGE_TYPE_UNSPECIFIED = 0;

  CLIENT_CONNECT = 1;

  // DEPRECATED - Use CLIENT_TERMINATE instead for permanent disconnection
  CLIENT_DISCONNECT = 2;

  // Terminate the connection which means delete session permanently
  // The client should send this message when the client wants to terminate the connection
  // Disconnected connections other than this message will be considered as a temporary disconnection (soft delete) and can be reonnectable
  // If want to reconnect, the client should connect with the same auth token that was used to create the session (CLIENT_CONNECT)
  CLIENT_TERMINATE = 3;

  CLIENT_START_GAME = 20;

  CLIENT_END_GAME = 21;

  CLIENT_TAKE_STAR = 22;

  CLIENT_TAKE_BLAST_GOLD = 23;

  CLIENT_DESTROY_CAPSULE = 24;

  CLIENT_DESTROY_METEOR = 25;

  CLIENT_SHOOT_BULLET = 26;

  CLIENT_EMPLOY_BOOST = 27;

  CLIENT_SPACESHIP_POSITION = 40;

  CLIENT_SPACESHIP_EVENT = 41;

  CLIENT_KEYBOARD_EVENT = 42;

  CLIENT_ALERT_SUSPICIOUS_USER = 60;
}

enum ServerMessageType {
  SERVER_MESSAGE_TYPE_UNSPECIFIED = 0;

  SERVER_CONNECT = 1;

  SERVER_TERMINATE = 2;

  SERVER_RECONNECT = 3;

  SERVER_START_GAME = 20;

  SERVER_END_GAME = 21;

  SERVER_TAKE_STAR = 22;

  SERVER_TAKE_BLAST_GOLD = 23;

  SERVER_DESTROY_CAPSULE = 24;

  SERVER_DESTROY_METEOR = 25;

  SERVER_SHOOT_BULLET = 26;

  SERVER_EMPLOY_BOOST = 27;

  SERVER_SPACESHIP_POSITION = 40;

  SERVER_SPACESHIP_EVENT = 41;

  SERVER_KEYBOARD_EVENT = 42;

  SERVER_ALERT_SUSPICIOUS_USER = 60;
}

enum ServerAckType {
  SERVER_RESPONSE_TYPE_UNSPECIFIED = 0;

  // Message sent to client when message from client is accepted
  ACK = 100;

  // Message sent to client when message from client is rejected
  NACK = 200;

  //
  NACK_UNAUTHENTICATED = 201;

  //
  NACK_UNAUTORIZAED = 202;

  //
  NACK_SESSION_ALREADY_EXISTS = 203;

  //
  NACK_DAILY_ROUND_EXCEEDED = 204;

  //
  NACK_BLAST_GOLD_NOT_ACQUIRABLE = 205;

  //
  NACK_PLAYTIME_OUT = 206;

  //
  NACK_SYBIL_USER = 207;

  //
  NACK_SESSION_NOT_FOUND = 208;

  // Message sent to client when internal server error occurs
  ERR = 300;
}

message ClientMessage {
  ClientMessageType msg_type = 1;
  string payload = 2;
}

message ServerMessage {
  ServerMessageType msg_type = 1;
  ServerAckType ack_type = 2;
  string payload = 3;
}

message ConnectServerPayload {
  string session_id = 1;
  Game game = 2;
}

message ReconnectServerPayload {
  string session_id = 1;
  Game game = 2;
}

message EndGameServerPayload {
  string game_id = 1;
  int32 score = 2;
  float blast_gold = 3;
}

message TakeStarClientPayload {
  string star_id = 1;
}

message TakeStarServerPayload {
  string star_id = 1;
  int32 total_score = 2;
}

message TakeBlastGoldClientPayload {
  string blast_gold_id = 1;
}

message DestroyCapsuleClientPayload {
  string capsule_id = 1;
}

message DestroyMeteorClientPayload {
  Position position = 1;
}

message SpceshipPosiitionClientPayload {
  Position position = 1;
}

message SpaceshipEventClientPayload {
  string event = 1;
}

message KeyboardEventClientPayload {
  string event = 1;
}

message ShootBulletClientPayload {
  int32 remaining_bullets = 1;
}

message EmployBoostClientPayload {
  int32 remaining_boosts = 1;
}

message LifeStatusClientPayload {
  int32 remaining_lives = 1;
}

message AlertSuspiciousUserClientPayload {
  SuspiciousReason reason = 1;
}

message Star {
  string id = 1;
  optional string capsule_id = 2;
  Position position = 3;
  int32 score = 4;
}

enum CapsuleRewardType {
  CAPSULE_REWARD_TYPE_UNSPECIFIED = 0;

  CAPSULE_REWARD_STAR = 1;

  CAPSULE_REWARD_BLAST_GOLD = 2;
}

message Capsule {
  string id = 1;
  Position position = 2;
  CapsuleRewardType reward_type = 3;
}

message BlastGold {
  string id = 1;
  string capsule_id = 2;
  float amount = 3;
}

message Meteor {
  string id = 1;
  Position position = 2;
}

message Position {
  float x = 1;
  float y = 2;
}

message Map {
  repeated Star stars = 1;
  repeated Capsule capsules = 2;
  repeated BlastGold blast_golds = 3;
  repeated Meteor meteors = 4;
}

message Spaceship {
  Position position = 1;
  int32 booster = 2;
  int32 bullet = 3;
}

message Game {
  string id = 1;

  Map map = 2;

  Spaceship spaceship = 3;

  int32 score = 4;

  google.protobuf.Timestamp create_time = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  google.protobuf.Timestamp start_time = 6 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

}

enum SuspiciousReason {
  SUSPICIOUS_REASON_UNSPECIFIED = 0;
  SUSPICIOUS_REASON_DEBUG_CONSOLE_OPENED = 1;
}