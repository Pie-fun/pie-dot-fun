syntax = "proto3";

package blast.v1.nft;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/api/resource.proto";
import "google/api/client.proto";

option go_package = "github.com/ao-labs/spacebar-apis/go/blast/v1/nft;nft";

// NFTService contains the function to interact with the NFT of the spacebar
// It provides only the (explicit)SyncNFTs and ListNFTs API.
// Implicit sync is performed real-time/periodically while monitoring the blockchain.
service NFTService {
  // GetNFT will return NFT.
  rpc GetNFT(GetNFTRequest) returns (NFT) {
    option (google.api.http) = {
      get: "/v1/{nft=nfts/*/*/*}"
    };
    option (google.api.method_signature) = "nft";
  }

  // ListNFTs will return NFTs.
  rpc ListNFTs(ListNFTsRequest) returns (ListNFTsResponse) {
    option (google.api.http) = {
      get: "/v1/nfts"
    };
    option (google.api.method_signature) = "";
  }

  // ListOwners will return the owner of the NFT.
  rpc ListOwners(ListOwnersRequest) returns (ListOwnersResponse) {
    option (google.api.http) = {
      get: "/v1/nfts/owner"
    };
    option (google.api.method_signature) = "";
  }

  // ValidateNFTAccessRequest will validate user address access to the NFT.
  rpc ValidateNFTAccess(ValidateNFTAccessRequest) returns (ValidateNFTAccessResponse) {
    option (google.api.http) = {
      post: "/v1/{nft=nfts/*/*/*}:validateAccess"
      body: "*"
    };
  }

  // ListNFTsDelegate will return NFTs using Delegate Cash.
  rpc ListNFTsDelegate(ListNFTsDelegateRequest) returns (ListNFTsResponse) {
    option (google.api.http) = {
      get: "/v1/nfts/delegate"
    };
    option (google.api.method_signature) = "";
  }

  // ValidateNFT will validate given NFT is valid and image is available.
  rpc ValidateNFT(ValidateNFTRequest) returns (ValidateNFTResponse) {
    option (google.api.http) = {
      post: "/v1/{nft=nfts/*/*/*}:validate"
      body: "*"
    };
  }

  // GetContract will return NFTContract.
  rpc GetContract(GetContractRequest) returns (NFTContract) {
    option (google.api.http) = {
      get: "/v1/{nft_contract=nfts/*/*}"
    };
  }

  // CheckHolderOfContract will check if the wallet address is the holder of the contract.
  rpc CheckHolderOfContract(CheckHolderOfContractRequest) returns (CheckHolderOfContractResponse) {
    option (google.api.http) = {
      post: "/v1/{nft_contract=nfts/*/*}:checkOwner"
      body: "*"
    };
  }
}

// ListNFTsRequest payload
// (-- api-linter: core::0158::request-page-token-field=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
// (-- api-linter: core::0132::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need this field because reasons. --)
message ListNFTsRequest {
  // The owner address of the profile.
  // This field is required if `sync_onchain` is true.
  // When `sync_onchain` is true, only EOA address is supported.
  string owner_address = 1;

  // The maximum number of nfts to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 rows will be returned.
  // The maximum value is 1024; values above 1024 will be coerced to 1024.
  int32 page_size = 2;

  // Token of the page to retrieve. If not specified, the first
  // page of results will be returned. Use the value obtained from
  // `next_page_token` in the previous response in order to request
  // the next page of results.
  //
  // When page token is not specified, nft assets are synced with the blockchain. If
  // page token is specified, nft assets are not synced with the blockchain and retrieved from the database.
  //
  // The page token is valid for only 2 hours.
  //
  // When paginating, all other parameters provided to `ListNFTs` must match
  // the call that provided the page token.
  string page_token = 3;

  // Available Sequence and Operator
  // * name
  //   * `equal`
  // * has_image
  //   * `negation`
  // * address
  //   * `equal`
  // * contract.address
  //   * `equal`
  // * contract.display_name
  //   * `equal`
  // * contract.chain
  //   * supported value is [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BASE, STARKNET, ETHEREUM_SEPOLIA, POLYGON_MUMBAI]
  //   * `equal`
  // * contract.type
  //   * `equal`
  //
  // Examples
  // * filter=name="nfts/MUMBAI/0xb4Afd0Ecb77460f0d8F93E7Fba93D7c18491f7a3/424"
  // * filter=has_image
  // * filter=address="0xa3d8090e4ea02d4cc76ecb2e8b09ab140cd11dee"
  // * filter=contract.address="0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
  // * filter=contract.display_name="CryptoKitties"
  // * filter=contract.chain=ETHEREUM
  // * filter=contract.type=ERC721
  string filter = 4;

  // Supported value is ["true", "1", "yes", "y"], other then all this value will be treated as false.
  // If true, the service will fetch assets using third party NFT APIs.
  string sync_onchain = 5;
}

// ListNFTsResponse response
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
message ListNFTsResponse {
  // The list of rows that matched the query.
  repeated NFT nfts = 1;

  // Pagination token used to retrieve the next page of results.
  // Pass the content of this string as the `page_token` attribute of
  // the next request. `next_page_token` is not returned for the last
  // page.
  string next_page_token = 2;
}

// ListNFTsDelegateRequest
message ListNFTsDelegateRequest {
  // The owner address of the profile.
  // This field is required if `sync_onchain` is true.
  // When `sync_onchain` is true, only EOA address is supported.
  string owner_address = 1;
}

// ListNFTsDelegateRequest
message ListNFTsDelegateResponse {
  // The list of rows that matched the query.
  repeated NFT nfts = 1;
}

// GetNFTRequest
message GetNFTRequest {
  // The resource name of the nft to retrieve.
  // Format: nfts/{chain_type}/{contract_address}/{token_id}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
  string nft = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "outpost.spacebarapis.xyz/NFT"
    }
  ];
}

// ValidateNFTAccessRequest
message ValidateNFTAccessRequest {
  // The resource name of the nft to retrieve.
  // Format: nfts/{chain_type}/{contract_address}/{token_id}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
  string nft = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "outpost.spacebarapis.xyz/NFT"
    }
  ];

  // The owner address of the NFT asset.
  string owner_address = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message ValidateNFTAccessResponse {
  NFT nft = 1;

  bool access = 2;
}

message ListOwnersRequest {
  repeated string nfts = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "outpost.spacebarapis.xyz/NFT"
    }
  ];
}

message ListOwnersResponse {
  message NFTs {
    repeated string nfts = 1 [
      (google.api.resource_reference) = {
        type: "outpost.spacebarapis.xyz/NFT"
      }
    ];
  }

  map<string, NFTs> owners = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

// ValidateNFTRequest
message ValidateNFTRequest {
  // The resource name of the nft to retrieve.
  // Format: nfts/{chain_type}/{contract_address}/{token_id}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
  string nft = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "outpost.spacebarapis.xyz/NFT"
    }
  ];
}

message ValidateNFTResponse {
  bool valid = 2;
}


message GetContractRequest {
  // The resource name of the nft contract to retrieve.
  // Format: nfts/{chain_type}/{contract_address}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
  string nft_contract = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message CheckHolderOfContractRequest {
  // The resource name of the nft contract to retrieve.
  // Format: nfts/{chain_type}/{contract_address}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
  string nft_contract = 1 [
    (google.api.field_behavior) = REQUIRED
  ];

  string wallet_address = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message CheckHolderOfContractResponse {
  bool is_holder = 1;
}


// NFT message represents an NFT asset.
message NFT {
  option (google.api.resource) = {
    type: "outpost.spacebarapis.xyz/NFT",
    pattern: "nfts/{chain_type}/{contract_address}/{token_id}"
  };

  // The resource name of the NFT asset.
  // Format: nfts/{chain_type}/{contract_address}/{token_id}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326/1
  string name = 1;

  // EIP-6551 TBA Address of the NFT asset.
  string address = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Token ID of the NFT asset.
  string token_id = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Token Name of the NFT asset.
  string token_name = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the NFT asset's image.
  // This URI can be cached version of image original URI
  // e.g. "https://i.seadn.io/gcs/files/f3564ef33373939b024fb791f21ec37b.png?w=500&auto=format"
  string image_uri = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the NFT asset's original image.
  // e.g. "https://www.larvalabs.com/cryptopunks/cryptopunk1.png"
  string image_original_uri = 6 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the NFT asset's animation.
  // This URI can be cached version of animation original URI
  // This field is optional
  optional string animation_uri = 7 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the NFT asset's original animation.
  // This field is optional
  optional string animation_original_uri = 8 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Additional metadata about the NFT asset.
  string metadata_uri = 9 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The owner address of the NFT asset.
  // This field is optional
  optional string ownerAddress = 10 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The contract that owns the NFT asset.
  // Output only.
  NFTContract contract = 11 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// NFTContract message represents an NFT contract.
message NFTContract {
  option (google.api.resource) = {
    type: "outpost.spacebarapis.xyz/NFTContract",
    pattern: "nfts/{chain_type}/{contract_address}"
  };

  // The resource name of the nft contract.
  // Format: nfts/{chain_type}/{contract_address}
  // Examples: nfts/ETHEREUM/0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326
  string name = 1;

  // The address of the NFT contract.
  string address = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The display name of the NFT contract.
  string display_name = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The symbol of the NFT contract.
  string symbol = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The blockchain on which the NFT contract resides.
  ChainType chain = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The type of the NFT contract.
  ContractType type = 6 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The URI of the contract image
  string image_uri = 7 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ChainType enumeration represents the type of blockchain.
// Does not support optimism, zksync, bsc yet
enum ChainType {
  // Unspecified blockchain type.
  CHAIN_UNSPECIFIED = 0;

  // Ethereum Mainnet blockchain.
  ETHEREUM = 1;

  // Polygon Mainnet blockchain.
  POLYGON = 137;

  // Arbitrum Mainnet blockchain.
  ARBITRUM = 42161;

  // Optimism Mainnet blockchain.
  OPTIMISM = 10;

  // Base Mainnet blockchain.
  BASE = 8453;

  // Blast Mainnet blockchain.
  BLAST = 81457;

  // Sepolia Testnet blockchain.
  ETHEREUM_SEPOLIA = 11155111;

  // Polygon Testnet blockchain.
  POLYGON_MUMBAI = 80001;

  // Blast Testnet blockchain.
  BLAST_SEPOLIA = 168587773;
}

enum ContractType {
  // Unspecified contract type.
  CONTRACT_TYPE_UNSPECIFIED = 0;

  // ERC721 contract type.
  ERC721 = 1;

  // ERC1155 contract type.
  ERC1155 = 2;
}