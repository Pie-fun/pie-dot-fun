# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BasketComponentWithFungibleTokenAndFungibleTokenMarket {
  component: Component!
  fungibleToken: FungibleToken!
  fungibleTokenMarket: FungibleTokenMarket!
}

type BasketComponentsWithFungibleTokenAndFungibleTokenMarket {
  basketComponentsWithFungibleTokenAndFungibleTokenMarket: [BasketComponentWithFungibleTokenAndFungibleTokenMarket!]!
  nextPageToken: String!
}

type BasketToken {
  address: String!
  chain: ChainType!
  components: [Component!]!
  createTime: String
  creator: String!
  description: String!
  displayName: String!
  expireTime: String
  iconImageUri: String!
  isRebalancing: Boolean!
  lastRebalanceTime: String
  name: String!
  onchainId: String!
  oneLineDescription: String!
  rebalanceFrequency: RebalanceFrequency!
  state: BasketTokenState!
  strategy: TokenStrategy!
  symbol: String!
  totalHolders: Float!
  totalSupply: Quantity
}

type BasketTokenMarket {
  basketToken: String!
  marketCap: Money
  maximumDrawDown: Percentage
  name: String!
  nativeCurrency: Currency!
  value: Money
  valueChange: PriceChangesByPeriod
}

input BasketTokenMarketResource {
  address: String!
  chain: ChainType!
}

input BasketTokenResource {
  address: String!
  chain: ChainType!
}

enum BasketTokenState {
  BASKET_TOKEN_STATE_UNSPECIFIED
  CREATED
  LISTED
}

type BasketTokenWithBasketTokenMarket {
  basketToken: BasketToken!
  basketTokenMarket: BasketTokenMarket!
}

type BasketTokens {
  basketTokens: [BasketToken!]!
  nextPageToken: String!
}

type BasketTokensWithBasketTokenMarket {
  basketTokensWithBasketTokenMarket: [BasketTokenWithBasketTokenMarket!]!
  nextPageToken: String!
}

enum ChainType {
  BASE
  BASE_SEPOLIA
  CHAIN_UNSPECIFIED
  ETHEREUM
  ETHEREUM_SEPOLIA
  SOLANA
  SOLANA_DEVNET
  SOLANA_TESTNET
}

type Component {
  address: String!
  chain: ChainType!
  fungibleToken: String!
  weight: Percentage
}

enum Currency {
  CURRENCY_ETH
  CURRENCY_SOL
  CURRENCY_UNSPECIFIED
  CURRENCY_USDC
}

type FDVsByCurrency {
  CURRENCY_SOL: Money!
  CURRENCY_UNSPECIFIED: Money!
  CURRENCY_USDC: Money!
}

type FungibleToken {
  address: String!
  chain: ChainType!
  decimals: Float!
  displayName: String!
  iconImageUrl: String!
  name: String!
  sns: [SNS!]!
  symbol: String!
}

type FungibleTokenMarket {
  displayName: String!
  fdvs: FDVsByCurrency!
  fungibleToken: String!
  name: String!
  nativeCurrency: Currency!
  price: Money
  priceChange: PriceChangesByPeriod
  symbol: String!
}

input FungibleTokenMarketResource {
  address: String!
  chain: ChainType!
}

type FungibleTokenMarkets {
  fungibleTokenMarkets: [FungibleTokenMarket!]!
  nextPageToken: String!
}

input FungibleTokenResource {
  address: String!
  chain: ChainType!
}

type FungibleTokenWithFungibleTokenMarket {
  fungibleToken: FungibleToken!
  fungibleTokenMarket: FungibleTokenMarket!
}

type FungibleTokens {
  fungibleTokens: [FungibleToken!]!
  nextPageToken: String!
}

type FungibleTokensWithFungibleTokenMarket {
  fungibleTokensWithFungibleTokenMarket: [FungibleTokenWithFungibleTokenMarket!]!
  nextPageToken: String!
}

input ListData {
  filter: String
  orderBy: String
  pageSize: Int
  pageToken: String
}

type Money {
  currency: Currency!
  decimals: Float!
  formattedAmount: String!
  rawAmount: String!
}

type Percentage {
  value: Float!
}

type PriceChange {
  nominalValue: Money
  percentageChange: Percentage
  period: PriceChangePeriod!
}

enum PriceChangePeriod {
  PRICE_CHANGE_PERIOD_1_HOUR
  PRICE_CHANGE_PERIOD_7_DAY
  PRICE_CHANGE_PERIOD_24_HOUR
  PRICE_CHANGE_PERIOD_30_DAY
  PRICE_CHANGE_PERIOD_ALL_TIME
  PRICE_CHANGE_PERIOD_UNSPECIFIED
}

type PriceChanges {
  PRICE_CHANGE_PERIOD_1_HOUR: PriceChange!
  PRICE_CHANGE_PERIOD_7_DAY: PriceChange!
  PRICE_CHANGE_PERIOD_24_HOUR: PriceChange!
  PRICE_CHANGE_PERIOD_30_DAY: PriceChange!
  PRICE_CHANGE_PERIOD_ALL_TIME: PriceChange!
  PRICE_CHANGE_PERIOD_UNSPECIFIED: PriceChange!
}

type PriceChangesByPeriod {
  priceChanges: PriceChanges!
}

type Quantity {
  decimals: Float!
  formattedAmount: String!
  rawAmount: String!
}

type Query {
  basketComponentsWithFungibleTokenAndFungibleTokenMarket(basketTokenResource: BasketTokenResource!, listData: ListData!): BasketComponentsWithFungibleTokenAndFungibleTokenMarket!
  basketToken(basketTokenResource: BasketTokenResource!): BasketToken!
  basketTokenMarket(basketTokenMarketResource: BasketTokenMarketResource!): BasketTokenMarket!
  basketTokens(listData: ListData!): BasketTokens!
  basketTokensWithBasketTokenMarket(listData: ListData!): BasketTokensWithBasketTokenMarket!
  fungibleToken(fungibleTokenResource: FungibleTokenResource!): FungibleToken!
  fungibleTokenMarket(fungibleTokenMarketResource: FungibleTokenMarketResource!): FungibleTokenMarket!
  fungibleTokenMarkets(listData: ListData!): FungibleTokenMarkets!
  fungibleTokens(listData: ListData!): FungibleTokens!
  fungibleTokensWithFungibleTokenMarket(listData: ListData!): FungibleTokensWithFungibleTokenMarket!
}

enum RebalanceFrequency {
  DAILY
  MANUAL
  MONTHLY
  REBALANCE_FREQUENCY_UNSPECIFIED
  WEEKLY
}

type SNS {
  name: String!
  profileUrl: String!
  type: SNS_SNSType!
}

enum SNS_SNSType {
  EMAIL
  GOOGLE
  SNS_TYPE_UNSPECIFIED
  TWITTER
}

enum TokenStrategy {
  CUSTOM_WEIGHTED
  EQUAL_WEIGHTED
  FACTOR_WEIGHTED
  FUNDAMENTAL_WEIGHTED
  MARKET_CAP_WEIGHTED
  MOMENTUM_WEIGHTED
  RISK_WEIGHTED
  TOKEN_STRATEGY_UNSPECIFIED
}